language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    const paren_level_max_index:\
    \ number[] = [];\n    const paren_level_max_index2: number[] = [];\n    const\
    \ paren_level_max_index3: number[] = [];\n    const paren_level_max_index4: number[]\
    \ = [];\n    const paren_level_max_index5: number[] = [];\n    const paren_level_max_index6:\
    \ number[] = [];\n    const paren_level_max_index7: number[] = [];\n    const\
    \ paren_level_max_index8: number[] = [];\n    const paren_level_max_index9: number[]\
    \ = [];\n    const paren_level_max_index10: number[] = [];\n    const paren_level_max_index11:\
    \ number[] = [];\n    const paren_level_max_index12: number[] = [];\n    const\
    \ paren_level_max_index13: number[] = [];\n    const paren_level_max_index14:\
    \ number[] = [];\n    const paren_level_max_index15: number[] = [];\n    const\
    \ paren_level_max_index16: number[] = [];\n    const paren_level_max_index17:\
    \ number[] = [];\n    const paren_level_max_index18: number[] = [];\n    const\
    \ paren_level_max_index19: number[] = [];\n    const paren_level_max_index20:\
    \ number[] = [];\n    const paren_level_max_index21: number[] = [];\n    const\
    \ paren_level_max_index22: number[] = [];\n    const paren_level_max_index23:\
    \ number[] = [];\n    const paren_level_max_index24: number[] = [];\n    const\
    \ paren_level_max_index25: number[] = [];\n    const paren_level_max_index26:\
    \ number[] = [];\n    const paren_level_max_index27: number[] = [];\n    const\
    \ paren_level_max_index28: number[] = [];\n    const paren_level_max_index29:\
    \ number[] = [];\n    const paren_level_max_index30: number[] = [];\n    const\
    \ paren_level_max_index31: number[] = [];\n    const paren_level_max_index32:\
    \ number[] = [];\n    const paren_level_max_index33: number[] = [];\n    const\
    \ paren_level_max_index34: number[] = [];\n    const paren_level_max_index35:\
    \ number[] = [];\n    const paren_level_max_index36: number[] = [];\n    const\
    \ paren_level_max_index37: number[] = [];\n    const paren_level_max_index38:\
    \ number[] = [];\n    const paren_level_max_index39: number[] = [];\n    const\
    \ paren_level_max_index40: number[] = [];\n    const paren_level_max_index41:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihpnemf8.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        } else\
    \ if (char === ' ') {\n            if (paren_count === 0) {\n                levels.push(level);\n\
    \            }\n            level++;\n        }\n    }\n    if (paren_count !==\
    \ 0) {\n        levels.push(level);\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp4lr1b2es.js:31:12)\n    at Object.<anonymous> (/tmp/tmp4lr1b2es.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    let paren_level = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \     } else if (char === ')') {\n            paren_level--;\n            if (paren_level\
    \ < 0) {\n                throw new Error(`Invalid paren level: ${paren_string}`);\n\
    \            }\n        } else if (char === ' ') {\n            if (paren_stack.length\
    \ > 0) {\n                paren_level--;\n            }\n        }\n    }\n  \
    \  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0f6b4f0t.js:15\n                throw new Error(\"Invalid paren\
    \ level: \" + paren_string);\n                ^\n\nError: Invalid paren level:\
    \ (()()) ((())) () ((())()())\n    at parse_nested_parens (/tmp/tmp0f6b4f0t.js:15:23)\n\
    \    at test (/tmp/tmp0f6b4f0t.js:29:22)\n    at Object.<anonymous> (/tmp/tmp0f6b4f0t.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            if (paren_level_count === 0) {\n    \
    \            paren_levels.push(paren_level);\n            }\n        }\n     \
    \   paren_level++;\n    }\n    return paren_levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  12,\n\
    \  15,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n\
    \    at test (/tmp/tmp27a3ck5j.js:26:12)\n    at Object.<anonymous> (/tmp/tmp27a3ck5j.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 12, 15,\
    \ 26 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            paren_level_max = Math.max(paren_level_max,\
    \ paren_level[paren_level_max_index]);\n            paren_level_max_index = paren_level_max_index\
    \ + 1;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphkmobnhk.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmphkmobnhk.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_stack: number[] = [];\n    let paren_level = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \         paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \        }\n    }\n    return paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpppm9fncl.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpppm9fncl.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level_count.push(paren_level_count);\n\
    \        } else if (char === ')') {\n            paren_level_count = paren_level_count[paren_level_count];\n\
    \            paren_level_count--;\n            if (paren_level_count === 0) {\n\
    \                paren_level.push(paren_level_count);\n            }\n       \
    \ }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbueml5uz.ts(12,31): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_value:\
    \ number = 0;\n    let paren_level_max_value_len: number = 0;\n    let paren_level_max_value_char:\
    \ number = 0;\n    let paren_level_max_value_char_len: number = 0;\n    let paren_level_max_value_char_index:\
    \ number = 0;\n    let paren_level_max_value_char_value: number = 0;\n    let\
    \ paren_level_max_value_char_value_len: number = 0;\n    let paren_level_max_value_char_value_index:\
    \ number = 0;\n    let paren_level_max_value_char_value_value: number = 0;\n \
    \   let paren_level_max_value_char_value_value_len: number = 0;\n    let paren_level_max_value_char_value_value_index:\
    \ number = 0;\n    let paren_level_max_value_char_value_value_value: number =\
    \ 0;\n    let paren_level_max_value_char_value_value_value_len: number = 0;\n\
    \    let paren_level_max_value_char_value_value_value_index: number = 0;\n   \
    \ let paren_level_max_value_char_value_value_value_value: number = 0;\n    let\
    \ paren_level_max_value_char_value_value_value_len: number = 0;\n    let paren_level_max_value_char_value_value_value_index:\
    \ number = 0;\n    let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n    let paren_level_max_value_char_value_value_value_len: number = 0;\n\
    \    let paren_level_max_value_char_value_value_value_index: number = 0;\n   \
    \ let paren_level_max_value_char_value_value_value_value: number = 0;\n    let\
    \ paren_level_max_value_char_value_value_value_len: number = 0;\n    let paren_level_max_value_char_value_value_value_index:\
    \ number = 0;\n    let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n    let paren_level_max_value_char_value_value_value_len: number = 0;\n\
    \    let paren_level_max_value_char_value_value_value_index: number = 0;\n   \
    \ let paren_level_max_value_char_value_value_value_value: number = 0;\n    let\
    \ paren_level_max_value_char_value_value_value_len: number = 0;\n    let paren_level_max_value_char_value_value_value_index:\
    \ number = 0;\n    let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n    let paren_level_max_value_char_value_value_value_len: number = 0;\n\
    \    let paren_level_max_value_char_value_value_value_index: number = 0;\n   \
    \ let paren_level_max_value_char_value_value_value_value: number = 0;\n    let\
    \ paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpipuu0qh6.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        if (group.includes(\"(\")) {\n            const level = parse_nested_parens(group);\n\
    \            if (level > max_level) {\n                max_level = level;\n  \
    \          }\n        }\n    }\n    return [max_level];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfgvhlp4z.ts(9,19): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpfgvhlp4z.ts(11,17): error TS2365: Operator ''>'' cannot
    be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmpfgvhlp4z.ts(12,17): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === '') {\n         \
    \   continue;\n        }\n        const group_level = parse_nested_parens(group);\n\
    \        if (group_level.length > level) {\n            level = group_level.length;\n\
    \        }\n        if (group_level.length > max_level) {\n            max_level\
    \ = group_level.length;\n        }\n    }\n    return [max_level, level];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c854emr.ts(18,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level_max++;\n      }\n      paren_level.push(paren_level_max);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  1,\n  1,\n  1,\n  2,\n  3,\n  3,\n  3,\n  3,\n  3,\n  4\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_p0nlfwg.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_p0nlfwg.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 1, 1, 1,\n    2, 3, 3, 3, 3,\n    3, 4\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number =\
    \ 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n     \
    \ if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level.push(paren_level_count);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0,\n  2,\n  1,\n  0,\n  0,\n  2,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbfvzfe2t.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbfvzfe2t.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 0, 2, 1,\n    0, 0, 2, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(/\\s+/);\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const level = parse_nested_parens(groups[i]);\n\
    \        if (level > max_level) {\n            max_level = level;\n        }\n\
    \    }\n    return [max_level];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp3jt0h5d.ts(9,13): error TS2365: Operator ''>'' cannot
    be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmpp3jt0h5d.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \    } else if (c == ')') {\n            paren_count--;\n        } else if (paren_count\
    \ == 0) {\n            levels.push(level);\n            level++;\n        }\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmppqi_a_zu.js:26:12)\n    at Object.<anonymous> (/tmp/tmppqi_a_zu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_nesting = 0;\n    let max_level = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const level = parse_nested_parens_level(groups[i]);\n      \
    \  if (level > max_level) {\n            max_level = level;\n        }\n     \
    \   if (level > max_nesting) {\n            max_nesting = level;\n        }\n\
    \    }\n    return [max_nesting, max_level];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdoepu1yo.ts(9,23): error TS2304: Cannot find name
    ''parse_nested_parens_level''.

    ../../../../../tmp/tmpdoepu1yo.ts(14,13): error TS2588: Cannot assign to ''max_nesting''
    because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level.length);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      const level = paren_stack.pop();\n            if (level === undefined)\
    \ {\n                throw new Error(`Unmatched closing parenthesis at index ${i}`);\n\
    \            }\n            paren_level[level] = paren_level[level] - 1;\n   \
    \     }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpi84vlyf6.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi84vlyf6.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: string[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \            if (paren_level === 0) {\n                let paren_str = paren_stack.join('');\n\
    \                paren_stack.splice(paren_stack.indexOf(paren_str), 1);\n    \
    \            paren_stack.push(paren_str);\n            }\n        }\n    }\n \
    \   return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpmrfwpm4u.ts(21,5): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let\
    \ paren_level_max_index = 0;\n    for (let i = 0; i < paren_string.length; i++)\
    \ {\n        const char = paren_string[i];\n        if (char === '(') {\n    \
    \        paren_stack.push(char);\n            paren_level_max++;\n           \
    \ paren_level_count++;\n        } else if (char === ')') {\n            paren_level_count--;\n\
    \            if (paren_level_count === 0) {\n                paren_level_max--;\n\
    \                paren_level_max_index = paren_level_max_index + 1;\n        \
    \    }\n            paren_level[paren_level_max_index] = paren_level_max;\n  \
    \          paren_stack.push(char);\n        } else if (char === ' ') {\n     \
    \       paren_level_count--;\n            if (paren_level_count === 0) {\n   \
    \             paren_level_max--;\n                paren_level_max_index = paren_level_max_index\
    \ + 1;\n            }\n            paren_level[paren_level_max_index] = paren_level_max;\n\
    \            paren_stack.push(char);\n        }\n    }\n    return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp5na_7bhu.js:41:12)\n    at Object.<anonymous> (/tmp/tmp5na_7bhu.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 10\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n  \
    \      const group = groups[i];\n        if (group === \"(\") {\n            level++;\n\
    \        } else if (group === \")\") {\n            level--;\n            if (level\
    \ < 0) {\n                break;\n            }\n        }\n        max_level\
    \ = level > max_level ? level : max_level;\n    }\n    const result = [];\n  \
    \  for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        if (group === \"(\") {\n            result.push(i);\n        } else if\
    \ (group === \")\") {\n            result.pop();\n        }\n    }\n    return\
    \ result.map(i => max_level - i);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq__9y0w0.ts(18,9): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            if (paren_level_count === 0) {\n    \
    \            paren_level.push(paren_level_count);\n                paren_level_max\
    \ = Math.max(...paren_level);\n                paren_level_max_index = paren_level.length\
    \ - 1;\n            }\n        } else if (char === ' ') {\n            if (paren_level_count\
    \ === 0) {\n                paren_level.push(paren_level_count);\n           \
    \     paren_level_max = Math.max(...paren_level);\n                paren_level_max_index\
    \ = paren_level.length - 1;\n            }\n        }\n    }\n    const max_level_of_nesting\
    \ = paren_level[paren_level_max_index];\n    const nested_parens: number[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            nested_parens.push(paren_level[paren_level_max_index]);\n\
    \        } else if (char === ')') {\n            nested_parens.push(max_level_of_nesting);\n\
    \        }\n    }\n    return nested_parens;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp197feeio.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp197feeio.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\
    \ 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.includes('(')) {\n\
    \            const level = get_level(group);\n            if (level > max_level)\
    \ {\n                max_level = level;\n                max_level_group = i;\n\
    \            }\n        }\n    }\n    return [max_level_group + 1, max_level];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkanb_u61.ts(10,19): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpkanb_u61.ts(11,27): error TS2304: Cannot find name ''get_level''.

    ../../../../../tmp/tmpkanb_u61.ts(13,17): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpkanb_u61.ts(14,17): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_nesting = 0;\n\tlet paren_nesting_level\
    \ = 0;\n\tlet paren_nesting_level_max = 0;\n\tlet paren_nesting_level_max_index\
    \ = 0;\n\tlet paren_nesting_level_max_index2 = 0;\n\tlet paren_nesting_level_max_index3\
    \ = 0;\n\tlet paren_nesting_level_max_index4 = 0;\n\tlet paren_nesting_level_max_index5\
    \ = 0;\n\tlet paren_nesting_level_max_index6 = 0;\n\tlet paren_nesting_level_max_index7\
    \ = 0;\n\tlet paren_nesting_level_max_index8 = 0;\n\tlet paren_nesting_level_max_index9\
    \ = 0;\n\tlet paren_nesting_level_max_index10 = 0;\n\tlet paren_nesting_level_max_index11\
    \ = 0;\n\tlet paren_nesting_level_max_index12 = 0;\n\tlet paren_nesting_level_max_index13\
    \ = 0;\n\tlet paren_nesting_level_max_index14 = 0;\n\tlet paren_nesting_level_max_index15\
    \ = 0;\n\tlet paren_nesting_level_max_index16 = 0;\n\tlet paren_nesting_level_max_index17\
    \ = 0;\n\tlet paren_nesting_level_max_index18 = 0;\n\tlet paren_nesting_level_max_index19\
    \ = 0;\n\tlet paren_nesting_level_max_index20 = 0;\n\tlet paren_nesting_level_max_index21\
    \ = 0;\n\tlet paren_nesting_level_max_index22 = 0;\n\tlet paren_nesting_level_max_index23\
    \ = 0;\n\tlet paren_nesting_level_max_index24 = 0;\n\tlet paren_nesting_level_max_index25\
    \ = 0;\n\tlet paren_nesting_level_max_index26 = 0;\n\tlet paren_nesting_level_max_index27\
    \ = 0;\n\tlet paren_nesting_level_max_index28 = 0;\n\tlet paren_nesting_level_max_index29\
    \ = 0;\n\tlet paren_nesting_level_max_index30 = 0;\n\tlet paren_nesting_level_max_index31\
    \ = 0;\n\tlet paren_nesting_level_max_index32 = 0;\n\tlet paren_nesting_level_max_index33\
    \ = 0;\n\tlet paren_nesting_level_max_index34 = 0;\n\tlet paren_nesting_level_max_index35\
    \ = 0;\n\tlet paren_nesting_level_max_index36 = 0;\n\tlet paren_nesting_level_max_index37\
    \ = 0;\n\tlet paren_nesting_level_max_index38 = 0;\n\tlet paren_nesting_level_max_index39\
    \ = 0;\n\tlet paren_nesting_level_max_index40 = 0;\n\tlet paren\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd2auvb3k.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    let paren_level_index\
    \ = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_index = 0;\n    let paren_level_max_paren_level_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level = 0;\n   \
    \ let paren_level_max_paren_level_paren_level_paren_level_index = 0;\n    let\
    \ paren_level_max_paren_level_paren_level_paren_level_count = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfvg_2crp.ts(44,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014310
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const levels = [];\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.length > max_level)\
    \ {\n            max_level = group.length;\n        }\n        levels.push(max_level);\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9jldl2t8.ts(11,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let\
    \ paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(char);\n          \
    \  paren_level_count++;\n            if (paren_level_count > paren_level_max)\
    \ {\n                paren_level_max = paren_level_count;\n                paren_level_max_index\
    \ = i;\n                paren_level_max_count = 0;\n            }\n        } else\
    \ if (char === ')') {\n            paren_level_count--;\n            if (paren_level_count\
    \ === 0) {\n                paren_level.push(paren_stack[paren_level_max_index]);\n\
    \                paren_level.push(paren_stack[paren_level_max_index + 1]);\n \
    \               paren_level_max_count++;\n            }\n        }\n    }\n  \
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbpfgzqvk.ts(24,34): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpbpfgzqvk.ts(25,34): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014312
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            if (paren_level_count === 0) {\n    \
    \            const paren_level_str = paren_stack.join('');\n                paren_level.push(paren_level_str.length);\n\
    \                paren_stack.splice(0, paren_stack.length);\n            }\n \
    \       }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  3,\n  0,\n  1,\n  2,\n  3,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp6g_5sdjh.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6g_5sdjh.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 3, 0, 1,\n    2, 3, 0, 1, 0, 1,\n    2, 1, 1, 5\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg0s0i1n4.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.startsWith(\"(\"\
    )) {\n            if (max_level < i - 1) {\n                max_level = i - 1;\n\
    \                max_level_group = i;\n            }\n        }\n        if (group.endsWith(\"\
    )\")) {\n            if (max_level > i - 1) {\n                max_level = i;\n\
    \                max_level_group = i;\n            }\n        }\n    }\n    const\
    \ max_level_str = max_level_group + 1 + \"\";\n    const max_level_str_reversed\
    \ = max_level_str[max_level_str.length - 1] + \"\";\n    const max_level_str_reversed_reversed\
    \ = max_level_str_reversed[max_level_str_reversed.length - 1] + \"\";\n    const\
    \ max_level_str_reversed_reversed_reversed = max_level_str_reversed_reversed[max_level_str_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed =\
    \ max_level_str_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reversed\
    \ = max_level_str_reversed_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = max_level_str_reversed_reversed_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = max_level_str_reversed_reversed_reversed_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[max_level_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.length\
    \ - 1] + \"\";\n    const max_level_str_reversed_reversed_reversed_reversed_reverse\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptw609ut7.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let max_level_group = 0;\n    let max_level_group_len =\
    \ 0;\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        const group_len = group.length;\n        if (group_len > max_level_group_len)\
    \ {\n            max_level_group_len = group_len;\n            max_level_group\
    \ = i;\n        }\n        if (group_len > max_level) {\n            max_level\
    \ = group_len;\n        }\n    }\n    const result = [];\n    for (let i = 0;\
    \ i < groups.length; i++) {\n        const group = groups[i];\n        const group_len\
    \ = group.length;\n        if (group_len > max_level_group_len) {\n          \
    \  result.push(group);\n        } else {\n            result.push(group.substring(0,\
    \ max_level_group_len));\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphs_j7wf6.ts(17,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014312
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_stack: number[] = [];\n\tlet paren_level = 0;\n\tfor\
    \ (let i = 0; i < paren_string.length; i++) {\n\t\tlet char = paren_string[i];\n\
    \t\tif (char === '(') {\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t} else if (char === ')') {\n\t\t\tparen_level--;\n\t\t}\n\t}\n\treturn paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5rt_e4rk.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5rt_e4rk.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ level = parse_nested_parens(groups[i]);\n        if (level > max_level) {\n\
    \            max_level = level;\n        }\n    }\n    return [max_level];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx5_0rfch.ts(9,13): error TS2365: Operator ''>'' cannot
    be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmpx5_0rfch.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number[] = [];\n    let paren_level_max_count:\
    \ number[] = [];\n    let paren_level_max_count_index: number[] = [];\n    let\
    \ paren_level_max_count_index2: number[] = [];\n    let paren_level_max_count_index3:\
    \ number[] = [];\n    let paren_level_max_count_index4: number[] = [];\n    let\
    \ paren_level_max_count_index5: number[] = [];\n    let paren_level_max_count_index6:\
    \ number[] = [];\n    let paren_level_max_count_index7: number[] = [];\n    let\
    \ paren_level_max_count_index8: number[] = [];\n    let paren_level_max_count_index9:\
    \ number[] = [];\n    let paren_level_max_count_index10: number[] = [];\n    let\
    \ paren_level_max_count_index11: number[] = [];\n    let paren_level_max_count_index12:\
    \ number[] = [];\n    let paren_level_max_count_index13: number[] = [];\n    let\
    \ paren_level_max_count_index14: number[] = [];\n    let paren_level_max_count_index15:\
    \ number[] = [];\n    let paren_level_max_count_index16: number[] = [];\n    let\
    \ paren_level_max_count_index17: number[] = [];\n    let paren_level_max_count_index18:\
    \ number[] = [];\n    let paren_level_max_count_index19: number[] = [];\n    let\
    \ paren_level_max_count_index20: number[] = [];\n    let paren_level_max_count_index21:\
    \ number[] = [];\n    let paren_level_max_count_index22: number[] = [];\n    let\
    \ paren_level_max_count_index23: number[] = [];\n    let paren_level_max_count_index24:\
    \ number[] = [];\n    let paren_level_max_count_index25: number[] = [];\n    let\
    \ paren_level_max_count_index26: number[] = [];\n    let paren_level_max_count_index27:\
    \ number[] = [];\n    let paren_level_max_count_index28: number[] = [];\n    let\
    \ paren_level_max_count_index29: number[] = [];\n    let paren_level_max_count_index30:\
    \ number[] = [];\n    let paren_level_max_count_index31: number[] = [];\n    let\
    \ paren_level_max_count_index32: number[] = [];\n    let paren_level_max_count_index33:\
    \ number[] = [];\n    let paren_level_max_count_index34: number[] = [];\n    let\
    \ paren_level_max_count_index35: number[] = [];\n    let paren_level_max_count_index36:\
    \ number[] = [];\n    let paren_level_max_count_index37: number[] = [];\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpitmxqssw.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014312
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const levels: number[] = [];\n  let level = 0;\n  let paren_count\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n\
    \    if (c === '(') {\n      paren_count++;\n    } else if (c === ')') {\n   \
    \   paren_count--;\n    }\n    if (paren_count === 0) {\n      levels.push(level);\n\
    \      level = 0;\n    }\n    level++;\n  }\n  return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  1,\n\
    \  6,\n  1,\n  2,\n  1,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpiu5ny09q.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiu5ny09q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    5,\
    \ 1,  6, 1,\n    2, 1, 10\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count +=\
    \ 1;\n        } else if (char === ')') {\n            paren_count -= 1;\n    \
    \        if (paren_count === 0) {\n                levels.push(level);\n     \
    \       }\n        }\n        level += 1;\n    }\n    return levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  12,\n\
    \  15,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n\
    \    at test (/tmp/tmpwu0hwtyg.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwu0hwtyg.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 12, 15,\
    \ 26 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[]\
    \ = [];\n  const paren_level_max: number[] = [];\n  let paren_level_count = 0;\n\
    \  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count.push(0);\n      paren_level_max_count.push(0);\n    }\
    \ else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n   \
    \   paren_level_max_count = paren_level_max_count.pop();\n    } else {\n     \
    \ paren_level_count = paren_stack.pop();\n      paren_level_max_count = paren_level_max_count.pop();\n\
    \      if (paren_level_count > 0) {\n        paren_level_max_count[paren_level_count]\
    \ = Math.max(paren_level_max_count[paren_level_count], paren_level_count);\n \
    \     }\n    }\n  }\n  return paren_level_max_count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzcxy9em3.ts(14,25): error TS2339: Property ''push''
    does not exist on type ''number''.

    ../../../../../tmp/tmpzcxy9em3.ts(15,29): error TS2339: Property ''push'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpzcxy9em3.ts(18,53): error TS2339: Property ''pop'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpzcxy9em3.ts(21,53): error TS2339: Property ''pop'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpzcxy9em3.ts(27,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_stack: string[] = [];\n\tlet\
    \ paren_levels: number[] = [];\n\tlet paren_levels_len = 0;\n\tlet paren_levels_max\
    \ = 0;\n\tlet paren_levels_max_len = 0;\n\tlet paren_levels_max_len2 = 0;\n\t\
    let paren_levels_max_len3 = 0;\n\tlet paren_levels_max_len4 = 0;\n\tlet paren_levels_max_len5\
    \ = 0;\n\tlet paren_levels_max_len6 = 0;\n\tlet paren_levels_max_len7 = 0;\n\t\
    let paren_levels_max_len8 = 0;\n\tlet paren_levels_max_len9 = 0;\n\tlet paren_levels_max_len10\
    \ = 0;\n\tlet paren_levels_max_len11 = 0;\n\tlet paren_levels_max_len12 = 0;\n\
    \tlet paren_levels_max_len13 = 0;\n\tlet paren_levels_max_len14 = 0;\n\tlet paren_levels_max_len15\
    \ = 0;\n\tlet paren_levels_max_len16 = 0;\n\tlet paren_levels_max_len17 = 0;\n\
    \tlet paren_levels_max_len18 = 0;\n\tlet paren_levels_max_len19 = 0;\n\tlet paren_levels_max_len20\
    \ = 0;\n\tlet paren_levels_max_len21 = 0;\n\tlet paren_levels_max_len22 = 0;\n\
    \tlet paren_levels_max_len23 = 0;\n\tlet paren_levels_max_len24 = 0;\n\tlet paren_levels_max_len25\
    \ = 0;\n\tlet paren_levels_max_len26 = 0;\n\tlet paren_levels_max_len27 = 0;\n\
    \tlet paren_levels_max_len28 = 0;\n\tlet paren_levels_max_len29 = 0;\n\tlet paren_levels_max_len30\
    \ = 0;\n\tlet paren_levels_max_len31 = 0;\n\tlet paren_levels_max_len32 = 0;\n\
    \tlet paren_levels_max_len33 = 0;\n\tlet paren_levels_max_len34 = 0;\n\tlet paren_levels_max_len35\
    \ = 0;\n\tlet paren_levels_max_len36 = 0;\n\tlet paren_levels_max_len37 = 0;\n\
    \tlet paren_levels_max_len38 = 0;\n\tlet paren_levels_max_len39 = 0;\n\tlet paren_levels_max_len40\
    \ = 0;\n\tlet paren_levels_max_len41 = 0;\n\tlet paren_levels_max_len42 = 0;\n\
    \tlet paren_levels_max_len43 = 0;\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8s8qyhrz.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    let paren_level = 0;\n\
    \    let paren_group = 0;\n    let paren_group_index = 0;\n    let paren_group_length\
    \ = 0;\n    let paren_group_length_index = 0;\n    let paren_group_length_value\
    \ = 0;\n    let paren_group_length_max = 0;\n    let paren_group_length_max_index\
    \ = 0;\n    let paren_group_length_max_value = 0;\n    let paren_group_length_max_index2\
    \ = 0;\n    let paren_group_length_max_value2 = 0;\n    let paren_group_length_max_index3\
    \ = 0;\n    let paren_group_length_max_value3 = 0;\n    let paren_group_length_max_index4\
    \ = 0;\n    let paren_group_length_max_value4 = 0;\n    let paren_group_length_max_index5\
    \ = 0;\n    let paren_group_length_max_value5 = 0;\n    let paren_group_length_max_index6\
    \ = 0;\n    let paren_group_length_max_value6 = 0;\n    let paren_group_length_max_index7\
    \ = 0;\n    let paren_group_length_max_value7 = 0;\n    let paren_group_length_max_index8\
    \ = 0;\n    let paren_group_length_max_value8 = 0;\n    let paren_group_length_max_index9\
    \ = 0;\n    let paren_group_length_max_value9 = 0;\n    let paren_group_length_max_index10\
    \ = 0;\n    let paren_group_length_max_value10 = 0;\n    let paren_group_length_max_index11\
    \ = 0;\n    let paren_group_length_max_value11 = 0;\n    let paren_group_length_max_index12\
    \ = 0;\n    let paren_group_length_max_value12 = 0;\n    let paren_group_length_max_index13\
    \ = 0;\n    let paren_group_length_max_value13 = 0;\n    let paren_group_length_max_index14\
    \ = 0;\n    let paren_group_length_max_value14 = 0;\n    let paren_group_length_max_index15\
    \ = 0;\n    let paren_group_length_max_value15 = 0;\n    let paren_group_length_max_index16\
    \ = 0;\n    let paren_group_length_max_value16 = 0;\n    let paren_group_length_max_index17\
    \ = 0;\n    let paren_group_length_max_value17 = 0;\n    let paren_group_length_max_index18\
    \ = 0;\n    let paren_group_length_max_value18 = 0;\n    let paren_group_length_max_index19\
    \ = 0;\n    let paren_group_length_max_value19 = 0;\n    let paren_group_length_max_index20\
    \ = 0;\n    let paren_group_length_max_value20 = 0;\n    let paren_group_length_max_index21\
    \ = -1;\n    let paren_group_length_max_value21 = -1;\n    let paren_group_length_max_index22\
    \ = -1;\n    let paren_group_length_max_value22 = -1;\n    let paren_group_length_max_index23\
    \ = -1;\n    let paren_group_length_max_value23 = \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy3xz1558.ts(59,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpy3xz1558.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level\
    \ = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n\
    \    if (group.length > max_level) {\n      max_level = group.length;\n    }\n\
    \  }\n  const result = [];\n  for (let i = 0; i < groups.length; i++) {\n    const\
    \ group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (j\
    \ === group.length - 1) {\n        result.push(i);\n        break;\n      }\n\
    \      if (group[j + 1] !== group[j]) {\n        break;\n      }\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7q1dd6_v.ts(10,7): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \        levels.push(level);\n        } else if (c == ')') {\n            paren_count--;\n\
    \            level = levels.pop();\n        } else {\n            level++;\n \
    \       }\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptbr5cqct.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmptbr5cqct.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count +=\
    \ 1;\n        } else if (char === ')') {\n            paren_count -= 1;\n    \
    \    } else if (char === ' ' && paren_count === 0) {\n            levels.push(level);\n\
    \            level = 0;\n        } else {\n            level += 1;\n        }\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmph7mntmlc.js:29:12)\n    at Object.<anonymous> (/tmp/tmph7mntmlc.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        }\n \
    \       if (levels[level] === undefined) {\n            levels[level] = paren_count;\n\
    \        } else {\n            if (levels[level] < paren_count) {\n          \
    \      levels[level] = paren_count;\n            }\n        }\n        level++;\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptvzne0v0.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmptvzne0v0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.includes(\"(\")) {\n            const\
    \ level = 1;\n            let j = i;\n            while (j < groups.length &&\
    \ groups[j].includes(\"(\")) {\n                j++;\n                level++;\n\
    \            }\n            if (level > max_level) {\n                max_level\
    \ = level;\n            }\n        }\n    }\n    const result = [];\n    for (let\
    \ i = 0; i < groups.length; i++) {\n        const group = groups[i];\n       \
    \ if (group.includes(\"(\")) {\n            const level = 1;\n            let\
    \ j = i;\n            while (j < groups.length && groups[j].includes(\"(\")) {\n\
    \                j++;\n                level++;\n            }\n            result.push(level);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp72gco47h.ts(9,19): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp72gco47h.ts(12,51): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp72gco47h.ts(14,17): error TS2588: Cannot assign to ''level''
    because it is a constant.

    ../../../../../tmp/tmp72gco47h.ts(17,17): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmp72gco47h.ts(24,19): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp72gco47h.ts(27,51): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp72gco47h.ts(29,17): error TS2588: Cannot assign to ''level''
    because it is a constant.

    '
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    let paren_level = 0;\n    let paren_char = '';\n    for (let i = 0;\
    \ i < paren_string.length; i++) {\n        paren_char = paren_string[i];\n   \
    \     if (paren_char === '(') {\n            paren_level++;\n        } else if\
    \ (paren_char === ')') {\n            paren_level--;\n        } else if (paren_char\
    \ === ' ') {\n            if (paren_level === 0) {\n                levels.push(level);\n\
    \                level = 0;\n                paren_count = 0;\n            }\n\
    \            paren_count++;\n        } else {\n            paren_count = 0;\n\
    \        }\n        level++;\n    }\n    return levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  7,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0joone8t.js:36:12)\n    at Object.<anonymous> (/tmp/tmp0joone8t.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 7, 3\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max\
    \ = Math.max(...paren_level);\n        paren_level_max_index = paren_level.indexOf(paren_level_max);\n\
    \        paren_level_max_count = paren_level.length;\n      }\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpil_c5lh7.js:32:12)\n    at Object.<anonymous> (/tmp/tmpil_c5lh7.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_level_count++;\n            paren_levels.push(paren_level);\n\
    \        } else if (char === ')') {\n            paren_level_count--;\n      \
    \      paren_level = paren_levels[paren_level_count];\n        } else {\n    \
    \        paren_level = 0;\n        }\n    }\n    return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppbsd4izy.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppbsd4izy.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_level_count++;\n\
    \            if (paren_level_count > paren_level_max) {\n                paren_level_max\
    \ = paren_level_count;\n            }\n        } else if (char === ')') {\n  \
    \          paren_level_count--;\n            if (paren_level_count < 0) {\n  \
    \              paren_level_max = paren_level_count;\n            }\n        }\n\
    \        if (paren_level_count === 0) {\n            paren_levels.push(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpjrrf79_h.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjrrf79_h.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_groups: number[] = [];\n    for (let i =\
    \ 0; i < groups.length; i++) {\n        const group = groups[i];\n        if (group.length\
    \ > max_level) {\n            max_level = group.length;\n            max_level_groups\
    \ = [group];\n        } else if (group.length === max_level) {\n            max_level_groups.push(group);\n\
    \        }\n    }\n    return max_level_groups;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppsztzdd3.ts(11,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmppsztzdd3.ts(12,13): error TS2588: Cannot assign to ''max_level_groups''
    because it is a constant.

    ../../../../../tmp/tmppsztzdd3.ts(14,35): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014314
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count_index: number[] = [];\n    const\
    \ paren_level_max_count_index2: number[] = [];\n    const paren_level_max_count_index3:\
    \ number[] = [];\n    const paren_level_max_count_index4: number[] = [];\n   \
    \ const paren_level_max_count_index5: number[] = [];\n    const paren_level_max_count_index6:\
    \ number[] = [];\n    const paren_level_max_count_index7: number[] = [];\n   \
    \ const paren_level_max_count_index8: number[] = [];\n    const paren_level_max_count_index9:\
    \ number[] = [];\n    const paren_level_max_count_index10: number[] = [];\n  \
    \  const paren_level_max_count_index11: number[] = [];\n    const paren_level_max_count_index12:\
    \ number[] = [];\n    const paren_level_max_count_index13: number[] = [];\n  \
    \  const paren_level_max_count_index14: number[] = [];\n    const paren_level_max_count_index15:\
    \ number[] = [];\n    const paren_level_max_count_index16: number[] = [];\n  \
    \  const paren_level_max_count_index17: number[] = [];\n    const paren_level_max_count_index18:\
    \ number[] = [];\n    const paren_level_max_count_index19: number[] = [];\n  \
    \  const paren_level_max_count_index20: number[] = [];\n    const paren_level_max_count_index21:\
    \ number[] = [];\n    const paren_level_max_count_index22: number[] = [];\n  \
    \  const paren_level_max_count_index23: number[] = [];\n    const paren_level_max_count_index24:\
    \ number[] = [];\n    const paren_level_max_count_index25: number[] = [];\n  \
    \  const paren_level_max_count_index26: number[] = [];\n    const paren_level_max_count_index27:\
    \ number[] = [];\n    const paren_level_max_count_index28: number[] = [];\n  \
    \  const paren_level_max_count_index29: number[] = [];\n    const paren_level_max_count_index30:\
    \ number[] = [];\n    const paren_level_max_count_index31: number[] = [];\n  \
    \  const paren_level_max_count_index32: number[] = [];\n    const paren_level_max_count_index33:\
    \ number[] = [];\n    const paren_level_max_count_index34: number[] = [];\n  \
    \  const paren_level_max_count_index35: number[] = [];\n    const paren_level_max_count_index36:\
    \ number[] = [];\n    const paren_level_max_count_index37: number[] = [];\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi3ggup_7.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014314
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.length > max_level)\
    \ {\n            max_level = group.length;\n            max_level_group = i;\n\
    \        }\n    }\n    const nested_parens: number[] = [];\n    for (let i = 0;\
    \ i < max_level; i++) {\n        nested_parens.push(max_level_group);\n    }\n\
    \    return nested_parens;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyjxmkl4y.ts(11,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpyjxmkl4y.ts(12,13): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    '
  timestamp: 1660014314
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level\
    \ = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n\
    \    const level = get_nested_parens_level(group);\n    if (level > max_level)\
    \ {\n      max_level = level;\n    }\n  }\n  return max_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprb8xl1zy.ts(9,19): error TS2304: Cannot find name
    ''get_nested_parens_level''.

    ../../../../../tmp/tmprb8xl1zy.ts(11,7): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmprb8xl1zy.ts(14,3): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n\
    \    let paren_level_max_count = 0;\n    let paren_level_max_count = 0;\n    let\
    \ paren_level_max_count = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc2dev_b_.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014314
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    let paren_level = 0;\n    let paren_nesting = 0;\n    let paren_level_count\
    \ = 0;\n    let paren_level_max = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level);\n            paren_level++;\n    \
    \        paren_nesting++;\n            paren_level_count++;\n            if (paren_level_count\
    \ > paren_level_max) {\n                paren_level_max = paren_level_count;\n\
    \            }\n        } else if (char === ')') {\n            paren_level--;\n\
    \            paren_nesting--;\n            paren_level_count--;\n            if\
    \ (paren_level_count < 0) {\n                paren_level_count = 0;\n        \
    \    }\n            if (paren_level_count === 0) {\n                levels.push(paren_stack);\n\
    \                paren_stack = [];\n            }\n        } else if (char ===\
    \ ' ') {\n            if (paren_nesting === 0) {\n                levels.push(paren_stack);\n\
    \                paren_stack = [];\n            }\n        }\n    }\n    return\
    \ levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaic8bpdu.ts(14,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpaic8bpdu.ts(29,29): error TS2345: Argument of type ''string[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaic8bpdu.ts(30,17): error TS2588: Cannot assign to ''paren_stack''
    because it is a constant.

    ../../../../../tmp/tmpaic8bpdu.ts(34,29): error TS2345: Argument of type ''string[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaic8bpdu.ts(35,17): error TS2588: Cannot assign to ''paren_stack''
    because it is a constant.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.length <= max_level) {\n            continue;\n\
    \        }\n        const levels = group.match(/\\(([^()]+)\\)/);\n        if\
    \ (levels) {\n            max_level = levels[1].length;\n        }\n    }\n  \
    \  const result = [];\n    for (let i = 0; i < groups.length; i++) {\n       \
    \ const group = groups[i];\n        const levels = group.match(/\\(([^()]+)\\\
    )/);\n        if (levels) {\n            result.push(levels[1].length);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpra7n_5t4.ts(14,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level_count);\n            paren_level_count\
    \ += 1;\n        } else if (char === ')') {\n            paren_level_count -=\
    \ 1;\n            if (paren_level_count === 0) {\n                paren_level.push(paren_stack.pop());\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp0ftlrkqm.js:26:12)\n    at Object.<anonymous> (/tmp/tmp0ftlrkqm.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_count++;\n        } else if (paren_string[i] ===\
    \ ')') {\n            paren_count--;\n        }\n        if (paren_count === 0)\
    \ {\n            levels.push(level);\n            level = 0;\n        }\n    \
    \    level++;\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  1,\n\
    \  6,\n  1,\n  2,\n  1,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmprdtes4ve.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprdtes4ve.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    5,\
    \ 1,  6, 1,\n    2, 1, 10\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    const paren_level: number = 0;\n    let paren_level_count = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const c = paren_string[i];\n\
    \        if (c === '(') {\n            paren_stack.push(c);\n            paren_level_count++;\n\
    \        } else if (c === ')') {\n            paren_level_count--;\n         \
    \   if (paren_level_count === 0) {\n                levels.push(paren_level);\n\
    \                paren_level++;\n            }\n        } else if (c === ' ')\
    \ {\n            if (paren_level_count === 0) {\n                levels.push(paren_level);\n\
    \                paren_level++;\n            }\n        }\n    }\n    return levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_s2mfv2q.ts(18,17): error TS2588: Cannot assign to
    ''paren_level'' because it is a constant.

    ../../../../../tmp/tmp_s2mfv2q.ts(23,17): error TS2588: Cannot assign to ''paren_level''
    because it is a constant.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const level = 0;\n    let\
    \ paren_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n    \
    \    if (paren_string[i] === '(') {\n            paren_count++;\n        } else\
    \ if (paren_string[i] === ')') {\n            paren_count--;\n        }\n    \
    \    if (paren_count === 0) {\n            levels.push(level);\n            level\
    \ = 0;\n        }\n        level++;\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyh6sa8ol.ts(16,13): error TS2588: Cannot assign to
    ''level'' because it is a constant.

    ../../../../../tmp/tmpyh6sa8ol.ts(18,9): error TS2588: Cannot assign to ''level''
    because it is a constant.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    let paren_level = 0;\n    let paren_nesting = 0;\n    for (let i\
    \ = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \         paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \            paren_nesting++;\n        } else if (char === ' ') {\n          \
    \  if (paren_nesting > 0) {\n                levels.push(paren_nesting);\n   \
    \         }\n            paren_nesting = 0;\n        }\n    }\n    if (paren_nesting\
    \ > 0) {\n        levels.push(paren_nesting);\n    }\n    return levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp87oafasc.ts(12,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \        }\n        if (level > max_level) {\n            max_level = level;\n\
    \        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyw5pxwco.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpyw5pxwco.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ level = parse_nested_parens(groups[i]);\n        if (level > max_level) {\n\
    \            max_level = level;\n        }\n    }\n    return [max_level];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx5_0rfch.ts(9,13): error TS2365: Operator ''>'' cannot
    be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmpx5_0rfch.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014312
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet max_level = 0;\n\tlet level = 0;\n\tlet paren_stack: string[]\
    \ = [];\n\tlet paren_level = 0;\n\tlet paren_stack_string = \"\";\n\tfor (let\
    \ i = 0; i < paren_string.length; i++) {\n\t\tlet char = paren_string[i];\n\t\t\
    if (char === \"(\") {\n\t\t\tif (paren_stack.length > 0) {\n\t\t\t\tparen_stack.push(paren_string[i]);\n\
    \t\t\t\tparen_level++;\n\t\t\t} else {\n\t\t\t\tparen_stack.push(paren_string[i]);\n\
    \t\t\t\tparen_level = 1;\n\t\t\t}\n\t\t} else if (char === \")\") {\n\t\t\tif\
    \ (paren_stack.length > 0) {\n\t\t\t\tparen_stack.pop();\n\t\t\t\tparen_level--;\n\
    \t\t\t} else {\n\t\t\t\tparen_stack.pop();\n\t\t\t\tparen_level = 0;\n\t\t\t}\n\
    \t\t}\n\t\tif (paren_level > max_level) {\n\t\t\tmax_level = paren_level;\n\t\t\
    }\n\t\tif (paren_level < 0) {\n\t\t\tmax_level = paren_level;\n\t\t}\n\t\tif (paren_stack.length\
    \ > 0) {\n\t\t\tparen_stack_string = paren_stack_string.concat(paren_string[i]);\n\
    \t\t}\n\t}\n\treturn max_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1siq7_tz.ts(39,2): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level);\n            paren_level_count++;\n\
    \        } else if (char === ')') {\n            paren_level_count--;\n      \
    \      if (paren_level_count === 0) {\n                paren_level = paren_stack.pop();\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpjzp0l7ka.ts(11,30): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpjzp0l7ka.ts(16,17):\
    \ error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../../tmp/tmpjzp0l7ka.ts(20,5):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_stack: number[] = [];\n\tlet paren_level = 0;\n\tfor\
    \ (let i = 0; i < paren_string.length; i++) {\n\t\tlet c = paren_string[i];\n\t\
    \tif (c == '(') {\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t} else if (c == ')') {\n\t\t\tparen_level--;\n\t\t}\n\t}\n\treturn paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyc2iy9lz.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyc2iy9lz.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count_index: number[] = [];\n    const\
    \ paren_level_max_count_index2: number[] = [];\n    const paren_level_max_count_index3:\
    \ number[] = [];\n    const paren_level_max_count_index4: number[] = [];\n   \
    \ const paren_level_max_count_index5: number[] = [];\n    const paren_level_max_count_index6:\
    \ number[] = [];\n    const paren_level_max_count_index7: number[] = [];\n   \
    \ const paren_level_max_count_index8: number[] = [];\n    const paren_level_max_count_index9:\
    \ number[] = [];\n    const paren_level_max_count_index10: number[] = [];\n  \
    \  const paren_level_max_count_index11: number[] = [];\n    const paren_level_max_count_index12:\
    \ number[] = [];\n    const paren_level_max_count_index13: number[] = [];\n  \
    \  const paren_level_max_count_index14: number[] = [];\n    const paren_level_max_count_index15:\
    \ number[] = [];\n    const paren_level_max_count_index16: number[] = [];\n  \
    \  const paren_level_max_count_index17: number[] = [];\n    const paren_level_max_count_index18:\
    \ number[] = [];\n    const paren_level_max_count_index19: number[] = [];\n  \
    \  const paren_level_max_count_index20: number[] = [];\n    const paren_level_max_count_index21:\
    \ number[] = [];\n    const paren_level_max_count_index22: number[] = [];\n  \
    \  const paren_level_max_count_index23: number[] = [];\n    const paren_level_max_count_index24:\
    \ number[] = [];\n    const paren_level_max_count_index25: number[] = [];\n  \
    \  const paren_level_max_count_index26: number[] = [];\n    const paren_level_max_count_index27:\
    \ number[] = [];\n    const paren_level_max_count_index28: number[] = [];\n  \
    \  const paren_level_max_count_index29: number[] = [];\n    const paren_level_max_count_index30:\
    \ number[] = [];\n    const paren_level_max_count_index31: number[] = [];\n  \
    \  const paren_level_max_count_index32: number[] = [];\n    const paren_level_max_count_index33:\
    \ number[] = [];\n    const paren_level_max_count_index34: number[] = [];\n  \
    \  const paren_level_max_count_index35: number[] = [];\n    const paren_level_max_count_index36:\
    \ number[] = [];\n    const paren_level_max_count_index37: number[] = [];\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi3ggup_7.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014314
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        } else\
    \ if (char === ' ') {\n            if (paren_count === 0) {\n                levels.push(level);\n\
    \            }\n            level++;\n        }\n    }\n    if (paren_count !==\
    \ 0) {\n        levels.push(level);\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp4lr1b2es.js:31:12)\n    at Object.<anonymous> (/tmp/tmp4lr1b2es.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014310
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_count += 1;\n        } else if (paren_string[i]\
    \ === ')') {\n            paren_count -= 1;\n            if (paren_count === 0)\
    \ {\n                levels.push(level);\n                level = 0;\n       \
    \     }\n        } else {\n            level += 1;\n        }\n    }\n    return\
    \ levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp00sjkczb.js:28:12)\n    at Object.<anonymous> (/tmp/tmp00sjkczb.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === '(') {\n        \
    \    level++;\n        } else if (group === ')') {\n            level--;\n   \
    \     }\n        if (level > max_level) {\n            max_level = level;\n  \
    \      }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp631834c.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpp631834c.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      paren_level.pop();\n            if (paren_level.length === 0) {\n     \
    \           const max_level = paren_stack.length - 1;\n                paren_level.push(max_level);\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6dflk5i4.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6dflk5i4.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyppmb01r.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyppmb01r.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_stack: number[] = [];\n\tlet paren_level = 0;\n\tlet\
    \ paren_nesting = 0;\n\tfor (let i = 0; i < paren_string.length; i++) {\n\t\t\
    let char = paren_string[i];\n\t\tif (char === '(') {\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t} else if (char === ')') {\n\t\t\tparen_level--;\n\t\
    \t\tif (paren_level === 0) {\n\t\t\t\tparen_stack.push(paren_nesting);\n\t\t\t\
    \tparen_nesting++;\n\t\t\t}\n\t\t}\n\t}\n\treturn paren_stack;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  1,\n  0,\n  2,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpjqiy2vgr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjqiy2vgr.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 1, 0, 2, 0, 1,\n    2, 1, 1, 3\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    let paren_level = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const c = paren_string[i];\n        if (c == '(') {\n      \
    \      paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            if (paren_level == 0) {\n                levels.push(level);\n  \
    \              level = 0;\n                paren_count = 0;\n            }\n \
    \       } else if (c == ' ') {\n            paren_count++;\n        }\n    }\n\
    \    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmph_pz69s7.js:31:12)\n    at Object.<anonymous> (/tmp/tmph_pz69s7.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5ba91ipz.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014315
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \    } else if (c == ')') {\n            paren_count--;\n            if (paren_count\
    \ == 0) {\n                levels.push(level);\n            }\n        }\n   \
    \     level++;\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  12,\n\
    \  15,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n\
    \    at test (/tmp/tmp4_8sah43.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4_8sah43.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 12, 15,\
    \ 26 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level_count++;\n\
    \            paren_level.push(paren_level_count);\n        } else if (char ===\
    \ ')') {\n            paren_level_count--;\n            paren_level.push(paren_level_count);\n\
    \            if (paren_level_count === 0) {\n                paren_level_max =\
    \ Math.max(...paren_level);\n                paren_level_max_index = paren_level.indexOf(paren_level_max);\n\
    \            }\n            paren_stack.splice(paren_level_max_index, 1);\n  \
    \      }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  1,\n  0,\n  1,\n\
    \  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpi52ry8es.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi52ry8es.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 1, 2,\n    3, 2, 1, 0, 1, 0, 1, 2,\n    3, 2, 1, 2, 1, 2, 1,\
    \ 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ level = groups[i].length;\n        if (level > max_level) {\n            max_level\
    \ = level;\n        }\n    }\n    const result = [];\n    for (let i = 0; i <\
    \ groups.length; i++) {\n        const level = groups[i].length;\n        for\
    \ (let j = 0; j < level; j++) {\n            result.push(j);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp48ej911l.ts(10,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tconst paren_stack: number[] = [];\n\tlet paren_count = 0;\n\t\
    for (let i = 0; i < paren_string.length; i++) {\n\t\tconst char = paren_string[i];\n\
    \t\tif (char === '(') {\n\t\t\tparen_stack.push(paren_count);\n\t\t\tparen_count++;\n\
    \t\t} else if (char === ')') {\n\t\t\tconst parent_count = paren_stack.pop();\n\
    \t\t\tif (parent_count === undefined) {\n\t\t\t\tthrow new Error(`Unbalanced parenthesis\
    \ at ${i}`);\n\t\t\t}\n\t\t\tparen_count--;\n\t\t}\n\t}\n\tif (paren_count !==\
    \ 0) {\n\t\tthrow new Error(`Unbalanced parenthesis at ${i}`);\n\t}\n\treturn\
    \ paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp31ct9fx5.ts(21,48): error TS2304: Cannot find name
    ''i''.

    '
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            paren_level.pop();\n            paren_level.push(paren_level_count);\n\
    \        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_rgb99w1.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_rgb99w1.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group === \"()\") {\n\
    \            max_level++;\n        }\n        else if (group === \"(())\") {\n\
    \            max_level++;\n            max_level_group++;\n        }\n       \
    \ else if (group === \")()\") {\n            max_level--;\n        }\n       \
    \ else if (group === \")(())\") {\n            max_level--;\n            max_level_group--;\n\
    \        }\n    }\n    if (max_level === 0) {\n        return [max_level_group];\n\
    \    }\n    else {\n        return [max_level, max_level_group];\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpegb314js.ts(11,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpegb314js.ts(14,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpegb314js.ts(18,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpegb314js.ts(21,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_index2:\
    \ number = 0;\n    let paren_level_max_index3: number = 0;\n    let paren_level_max_index4:\
    \ number = 0;\n    let paren_level_max_index5: number = 0;\n    let paren_level_max_index6:\
    \ number = 0;\n    let paren_level_max_index7: number = 0;\n    let paren_level_max_index8:\
    \ number = 0;\n    let paren_level_max_index9: number = 0;\n    let paren_level_max_index10:\
    \ number = 0;\n    let paren_level_max_index11: number = 0;\n    let paren_level_max_index12:\
    \ number = 0;\n    let paren_level_max_index13: number = 0;\n    let paren_level_max_index14:\
    \ number = 0;\n    let paren_level_max_index15: number = 0;\n    let paren_level_max_index16:\
    \ number = 0;\n    let paren_level_max_index17: number = 0;\n    let paren_level_max_index18:\
    \ number = 0;\n    let paren_level_max_index19: number = 0;\n    let paren_level_max_index20:\
    \ number = 0;\n    let paren_level_max_index21: number = 0;\n    let paren_level_max_index22:\
    \ number = 0;\n    let paren_level_max_index23: number = 0;\n    let paren_level_max_index24:\
    \ number = 0;\n    let paren_level_max_index25: number = 0;\n    let paren_level_max_index26:\
    \ number = 0;\n    let paren_level_max_index27: number = 0;\n    let paren_level_max_index28:\
    \ number = 0;\n    let paren_level_max_index29: number = 0;\n    let paren_level_max_index30:\
    \ number = 0;\n    let paren_level_max_index31: number = 0;\n    let paren_level_max_index32:\
    \ number = 0;\n    let paren_level_max_index33: number = 0;\n    let paren_level_max_index34:\
    \ number = 0;\n    let paren_level_max_index35: number = 0;\n    let paren_level_max_index36:\
    \ number = 0;\n    let paren_level_max_index37: number = 0;\n    let paren_level_max_index38:\
    \ number = 0;\n    let paren_level_max_index39: number = 0;\n    let paren_level_max_index40:\
    \ number = 0;\n    let paren_level_max_index41: number = 0;\n    let paren_level_max_index42:\
    \ number = 0;\n    let paren_level_max_index43: number = 0;\n    let paren_level_max_index44:\
    \ number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2dqu7ayi.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: number[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \         paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \            if (paren_level === 0) {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpe_embzgu.js:25:12)\n    at Object.<anonymous> (/tmp/tmpe_embzgu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const level = parse_parens(groups[i]);\n\
    \        if (level > max_level) {\n            max_level = level;\n        }\n\
    \    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprgud1bgw.ts(8,23): error TS2304: Cannot find name
    ''parse_parens''.

    ../../../../../tmp/tmprgud1bgw.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmprgud1bgw.ts(13,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    const paren_level: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level);\n        } else if (char === ')')\
    \ {\n            levels.push(paren_level);\n            paren_level = paren_stack.pop();\n\
    \        } else {\n            paren_level++;\n        }\n    }\n    return levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsufhl4c2.ts(11,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpsufhl4c2.ts(14,13): error TS2588: Cannot assign to ''paren_level''
    because it is a constant.

    ../../../../../tmp/tmpsufhl4c2.ts(16,13): error TS2588: Cannot assign to ''paren_level''
    because it is a constant.

    '
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet level = 0;\n\tlet paren_stack: number[] = [];\n\tfor (let\
    \ i = 0; i < paren_string.length; i++) {\n\t\tlet char = paren_string[i];\n\t\t\
    if (char === '(') {\n\t\t\tparen_stack.push(level);\n\t\t} else if (char === ')')\
    \ {\n\t\t\tlet level = paren_stack.pop();\n\t\t\tif (level > 0) {\n\t\t\t\tparen_stack.push(level);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmvckn5nq.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmvckn5nq.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n  \
    \      if (groups[i] === \"(\") {\n            level++;\n        } else if (groups[i]\
    \ === \")\") {\n            level--;\n            if (level < 0) {\n         \
    \       break;\n            }\n        }\n        if (level > max_level) {\n \
    \           max_level = level;\n        }\n    }\n    const result = [];\n   \
    \ for (let i = 0; i < groups.length; i++) {\n        if (groups[i] === \"(\")\
    \ {\n            result.push(level);\n        } else if (groups[i] === \")\")\
    \ {\n            result.pop();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxdmwg19r.ts(18,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014317
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_levels: number[] = [];\n\tlet\
    \ paren_levels_stack: number[] = [];\n\tlet paren_levels_stack_pointer = 0;\n\t\
    let paren_levels_stack_pointer_max = 0;\n\tlet paren_levels_stack_pointer_max_index\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index2 = 0;\n\tlet paren_levels_stack_pointer_max_index3\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index4 = 0;\n\tlet paren_levels_stack_pointer_max_index5\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index6 = 0;\n\tlet paren_levels_stack_pointer_max_index7\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index8 = 0;\n\tlet paren_levels_stack_pointer_max_index9\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index10 = 0;\n\tlet paren_levels_stack_pointer_max_index11\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index12 = 0;\n\tlet paren_levels_stack_pointer_max_index13\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index14 = 0;\n\tlet paren_levels_stack_pointer_max_index15\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index16 = 0;\n\tlet paren_levels_stack_pointer_max_index17\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index18 = 0;\n\tlet paren_levels_stack_pointer_max_index19\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index20 = 0;\n\tlet paren_levels_stack_pointer_max_index21\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index22 = 0;\n\tlet paren_levels_stack_pointer_max_index23\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index24 = 0;\n\tlet paren_levels_stack_pointer_max_index25\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index26 = 0;\n\tlet paren_levels_stack_pointer_max_index27\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index28 = 0;\n\tlet paren_levels_stack_pointer_max_index29\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index30 = 0;\n\tlet paren_levels_stack_pointer_max_index31\
    \ = 0;\n\tlet paren_levels_stack_pointer_max_index32 = 0;\n\tlet paren_levels_stack_pointer_max_index33\
    \ = 0;\n\tlet paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe2yvhn8o.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \            paren_level_max++;\n        } else if (char === ')') {\n        \
    \    paren_level_count++;\n            paren_level.push(paren_level_count);\n\
    \            if (paren_level_count > paren_level_max) {\n                paren_level_max\
    \ = paren_level_count;\n            }\n            paren_stack.pop();\n      \
    \  }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptv9mj5l1.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmptv9mj5l1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,\
    \  2, 3, 4,  5,\n     6,  7, 8, 9, 10,\n    11, 12\n  ],\n  expected: [ 2, 3,\
    \ 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let\
    \ paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level_count);\n\
    \            paren_level_count += 1;\n        } else if (char === ')') {\n   \
    \         paren_level_count -= 1;\n            paren_level_max = Math.max(paren_level_max,\
    \ paren_stack.pop());\n            paren_level_max_index = paren_stack.indexOf(paren_level_max);\n\
    \            paren_level_max_count = paren_stack[paren_level_max_index];\n   \
    \     } else if (char === ' ') {\n            paren_level_max_count += 1;\n  \
    \      }\n    }\n    return [paren_level_max, paren_level_max_count];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgo8pczqz.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgo8pczqz.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, undefined\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(/\\s+/);\n    const max_level\
    \ = 0;\n    let max_level_group = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"()\") {\n     \
    \       max_level++;\n        }\n        else if (group === \"()()\") {\n    \
    \        max_level += 2;\n        }\n        else if (group === \"(())\") {\n\
    \            max_level += 3;\n        }\n        else if (group === \"(()())\"\
    ) {\n            max_level += 4;\n        }\n        else if (group === \"(())()\"\
    ) {\n            max_level += 5;\n        }\n        else if (group === \"(()()())\"\
    ) {\n            max_level += 6;\n        }\n        else if (group === \"(())()()\"\
    ) {\n            max_level += 7;\n        }\n        else if (group === \"(())()()()\"\
    ) {\n            max_level += 8;\n        }\n        else if (group === \"(())()()()()\"\
    ) {\n            max_level += 9;\n        }\n        else if (group === \"(())()()()()()\"\
    ) {\n            max_level += 10;\n        }\n        else if (group === \"(())()()()()()()\"\
    ) {\n            max_level += 11;\n        }\n        else if (group === \"(())()()()()()()()\"\
    ) {\n            max_level += 12;\n        }\n        else if (group === \"(())()()()()()()()()\"\
    ) {\n            max_level += 13;\n        }\n        else if (group === \"(())()()()()()()()()\"\
    ) {\n            max_level += 14;\n        }\n        else if (group === \"(())()()()()()()()()()\"\
    ) {\n            max_level += 15;\n        }\n        else if (group === \"(())()()()()()()()()()()\"\
    ) {\n            max_level += 16;\n        }\n        else if (group === \"(())()()()()()()()()()()\"\
    ) {\n            max_level += 17;\n        }\n        else if (group === \"(())()()()()()()()()()()\"\
    ) {\n            max_level += 18;\n        }\n        else if (group === \"(())()()()()()()()()()()()\"\
    ) {\n            max_level += 19;\n        }\n        else if (group === \"(())()()()()()()()()()()()()\"\
    ) {\n            max_level += 20;\n        }\n        else if (group === \"(())()()()()()()()()()()()()()\"\
    ) {\n            max_level += 21;\n        }\n        else if (group === \"(())()()()()()()()()()()()()()\"\
    ) {\n            max_level += 22;\n        }\n        else if (group === \"(())()()()()()()()()()()()()()\"\
    ) {\n            max_level += 23;\n        }\n        else if (group === \"(())\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplh64tak6.ts(79,33): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmplh64tak6.ts(80,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmplh64tak6.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_nesting = 0;\n    let paren_nesting_level = 0;\n    let paren_nesting_level_max\
    \ = 0;\n    let paren_nesting_level_max_index = 0;\n    let paren_nesting_level_max_index2\
    \ = 0;\n    let paren_nesting_level_max_index3 = 0;\n    let paren_nesting_level_max_index4\
    \ = 0;\n    let paren_nesting_level_max_index5 = 0;\n    let paren_nesting_level_max_index6\
    \ = 0;\n    let paren_nesting_level_max_index7 = 0;\n    let paren_nesting_level_max_index8\
    \ = 0;\n    let paren_nesting_level_max_index9 = 0;\n    let paren_nesting_level_max_index10\
    \ = 0;\n    let paren_nesting_level_max_index11 = 0;\n    let paren_nesting_level_max_index12\
    \ = 0;\n    let paren_nesting_level_max_index13 = 0;\n    let paren_nesting_level_max_index14\
    \ = 0;\n    let paren_nesting_level_max_index15 = 0;\n    let paren_nesting_level_max_index16\
    \ = 0;\n    let paren_nesting_level_max_index17 = 0;\n    let paren_nesting_level_max_index18\
    \ = 0;\n    let paren_nesting_level_max_index19 = 0;\n    let paren_nesting_level_max_index20\
    \ = 0;\n    let paren_nesting_level_max_index21 = 0;\n    let paren_nesting_level_max_index22\
    \ = 0;\n    let paren_nesting_level_max_index23 = 0;\n    let paren_nesting_level_max_index24\
    \ = 0;\n    let paren_nesting_level_max_index25 = 0;\n    let paren_nesting_level_max_index26\
    \ = 0;\n    let paren_nesting_level_max_index27 = 0;\n    let paren_nesting_level_max_index28\
    \ = 0;\n    let paren_nesting_level_max_index29 = 0;\n    let paren_nesting_level_max_index30\
    \ = 0;\n    let paren_nesting_level_max_index31 = 0;\n    let paren_nesting_level_max_index32\
    \ = 0;\n    let paren_nesting_level_max_index33 = 0;\n    let paren_nesting_level_max_index34\
    \ = 0;\n    let paren_nesting_level_max_index35 = 0;\n    let paren_nesting_level_max_index36\
    \ = 0;\n    let paren_nesting_level_max_index37 = 0;\n    let paren_nesting_level_max_index38\
    \ = 0;\n    let paren_nesting_level_max_index39 = 0;\n    let paren_nesting_level_max_index40\
    \ = 0;\n    let paren_nesting_level_max_index41 = 0;\n    let paren_nesting_level_max_index42\
    \ = 0;\n    let paren_nesting_level_max_index43 = 0;\n    let paren_nesting_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfbb5_h6g.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    const paren_level =\
    \ 0;\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_levels[paren_level_count]\
    \ = paren_level;\n            paren_level_count++;\n            if (paren_level_count\
    \ > paren_level_max) {\n                paren_level_max = paren_level_count;\n\
    \                paren_level_max_index = i;\n            }\n        } else if\
    \ (char === ')') {\n            paren_level_count--;\n            if (paren_level_count\
    \ < 0) {\n                throw new Error(`Unbalanced parenthesis at ${i}`);\n\
    \            }\n            if (paren_level_count === 0) {\n                paren_levels[paren_level_count]\
    \ = paren_level;\n                paren_level_count++;\n                if (paren_level_count\
    \ > paren_level_max) {\n                    paren_level_max = paren_level_count;\n\
    \                    paren_level_max_index = i;\n                }\n         \
    \   }\n        }\n    }\n    if (paren_level_count > 0) {\n        throw new Error(`Unbalanced\
    \ parenthesis at ${paren_level_max_index}`);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_30nwq6h.js:36\n        throw new Error(\"Unbalanced parenthesis\
    \ at \" + paren_level_max_index);\n        ^\n\nError: Unbalanced parenthesis\
    \ at 9\n    at parse_nested_parens (/tmp/tmp_30nwq6h.js:36:15)\n    at test (/tmp/tmp_30nwq6h.js:43:22)\n\
    \    at Object.<anonymous> (/tmp/tmp_30nwq6h.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        const c = paren_string[i];\n\
    \        if (c == '(') {\n            level++;\n        } else if (c == ')') {\n\
    \            level--;\n            if (level < 0) {\n                throw new\
    \ Error(`Unbalanced parenthesis at ${i}`);\n            }\n        } else if (c\
    \ == ' ') {\n            if (level == 0) {\n                levels.push(level);\n\
    \            }\n        }\n    }\n    return levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpokixq5d3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpokixq5d3.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_nesting = 0;\n    let paren_levels:\
    \ number[] = [];\n    let paren_nesting_levels: number[] = [];\n    for (let i\
    \ = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n\
    \            paren_level++;\n            paren_nesting++;\n            paren_levels.push(paren_level);\n\
    \            paren_nesting_levels.push(paren_nesting);\n        } else if (paren_string[i]\
    \ === ')') {\n            paren_level--;\n            paren_nesting--;\n     \
    \       paren_levels.push(paren_level);\n            paren_nesting_levels.push(paren_nesting);\n\
    \        }\n    }\n    let max_level = Math.max(...paren_levels);\n    let max_nesting_level\
    \ = Math.max(...paren_nesting_levels);\n    let max_level_nesting_level = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level));\n    let max_level_nesting_level_2 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level));\n    let max_level_nesting_level_3 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_2));\n    let max_level_nesting_level_4 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_3));\n    let max_level_nesting_level_5 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_4));\n    let max_level_nesting_level_6 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_5));\n    let max_level_nesting_level_7 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_6));\n    let max_level_nesting_level_8 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_7));\n    let max_level_nesting_level_9 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_8));\n    let max_level_nesting_level_10 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_9));\n    let max_level_nesting_level_11 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_10));\n    let max_level_nesting_level_12 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_11));\n    let max_level_nesting_level_13 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_12));\n    let max_level_nesting_level_14 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_13));\n    let max_level_nesting_level_15 = Math.max(...paren_nesting_levels.slice(0,\
    \ max_level_nesting_level_14));\n    let \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0gk87hgs.ts(40,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp0gk87hgs.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.startsWith(\"(\"\
    )) {\n            const level_of_nesting = parse_nested_parens(group);\n     \
    \       if (level_of_nesting.length > max_level) {\n                max_level\
    \ = level_of_nesting.length;\n                max_level_group = i;\n         \
    \   }\n        }\n    }\n    return [max_level_group + 1, max_level];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqvil_jr1.ts(10,19): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpqvil_jr1.ts(13,17): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      paren_level[paren_stack.length - 1]++;\n            if (paren_level[paren_stack.length\
    \ - 1] === 1) {\n                paren_stack.pop();\n            }\n        }\n\
    \    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  3,\n\
    \  2,\n  1,\n  2,\n  3,\n  1,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu1vsantz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu1vsantz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 3, 2, 1, 2,\n    3, 1, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet level = 0;\n\tlet paren_stack: string[] = [];\n\tfor (let\
    \ i = 0; i < paren_string.length; i++) {\n\t\tlet char = paren_string[i];\n\t\t\
    if (char === '(') {\n\t\t\tparen_stack.push(char);\n\t\t} else if (char === ')')\
    \ {\n\t\t\tlet paren_char = paren_stack.pop();\n\t\t\tif (paren_char === '(')\
    \ {\n\t\t\t\tlevel++;\n\t\t\t} else if (paren_char === ')') {\n\t\t\t\tlevel--;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjslxnhvg.ts(20,2): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    const paren_level_max_index\
    \ = 0;\n    let paren_level_max_index2 = 0;\n    let paren_level_max_index3 =\
    \ 0;\n    let paren_level_max_index4 = 0;\n    let paren_level_max_index5 = 0;\n\
    \    let paren_level_max_index6 = 0;\n    let paren_level_max_index7 = 0;\n  \
    \  let paren_level_max_index8 = 0;\n    let paren_level_max_index9 = 0;\n    let\
    \ paren_level_max_index10 = 0;\n    let paren_level_max_index11 = 0;\n    let\
    \ paren_level_max_index12 = 0;\n    let paren_level_max_index13 = 0;\n    let\
    \ paren_level_max_index14 = 0;\n    let paren_level_max_index15 = 0;\n    let\
    \ paren_level_max_index16 = 0;\n    let paren_level_max_index17 = 0;\n    let\
    \ paren_level_max_index18 = 0;\n    let paren_level_max_index19 = 0;\n    let\
    \ paren_level_max_index20 = 0;\n    let paren_level_max_index21 = 0;\n    let\
    \ paren_level_max_index22 = 0;\n    let paren_level_max_index23 = 0;\n    let\
    \ paren_level_max_index24 = 0;\n    let paren_level_max_index25 = 0;\n    let\
    \ paren_level_max_index26 = 0;\n    let paren_level_max_index27 = 0;\n    let\
    \ paren_level_max_index28 = 0;\n    let paren_level_max_index29 = 0;\n    let\
    \ paren_level_max_index30 = 0;\n    let paren_level_max_index31 = 0;\n    let\
    \ paren_level_max_index32 = 0;\n    let paren_level_max_index33 = 0;\n    let\
    \ paren_level_max_index34 = 0;\n    let paren_level_max_index35 = 0;\n    let\
    \ paren_level_max_index36 = 0;\n    let paren_level_max_index37 = 0;\n    let\
    \ paren_level_max_index38 = 0;\n    let paren_level_max_index39 = 0;\n    let\
    \ paren_level_max_index40 = 0;\n    let paren_level_max_index41 = 0;\n    let\
    \ paren_level_max_index42 = 0;\n    let paren_level_max_index43 = 0;\n    let\
    \ paren_level_max_index44 = 0;\n    let paren_level_max_index45 = 0;\n    let\
    \ paren_level_max_index46 = 0;\n    let paren_level_max_index47 = 0;\n    let\
    \ paren_level_max_index48 = 0;\n    let paren_level_max_index49 = 0;\n    let\
    \ paren_level_max_index50 = 0;\n    let paren_level_max_index51 = 0;\n    let\
    \ paren_level_max_index52 = 0;\n    let paren_level_max_index53 = 0;\n    let\
    \ paren_level_max_index54 = 0;\n    let paren_level_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp94dxkb9w.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_string[i]);\n      paren_level++;\n    } else\
    \ if (paren_string[i] === ')') {\n      paren_level--;\n      if (paren_level\
    \ === 0) {\n        paren_stack.shift();\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpexxyxje3.ts(18,3): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = Math.max(...groups.map(g => g.length));\n    const levels = new\
    \ Array(max_level).fill(0);\n    for (let i = 0; i < groups.length; i++) {\n \
    \       const group = groups[i];\n        for (let j = 0; j < group.length; j++)\
    \ {\n            levels[group[j]] += 1;\n        }\n    }\n    return levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpri57gf9b.ts(7,41): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1660014319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_level_count++;\n            paren_levels.push(paren_level);\n\
    \        } else if (char === ')') {\n            paren_level_count--;\n      \
    \      paren_level = paren_levels[paren_level_count];\n        }\n    }\n    return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwxe2_n7g.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwxe2_n7g.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_char = '';\n    let paren_level_char_length\
    \ = 0;\n    let paren_level_char_pos = 0;\n    let paren_level_char_pos_next =\
    \ 0;\n    let paren_level_char_pos_next_next = 0;\n    let paren_level_char_pos_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next = 0;\n    let paren_level_char_pos_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next = 0;\n    let\
    \ paren_level_char_pos_next_next_next_next_next_next_next = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let paren_level_char_pos_next_next_next_next_next_next_next_next_next_next_next_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgyhfj5tw.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const c = paren_string[i];\n        if (c == '(') {\n      \
    \      paren_level_count++;\n            paren_levels.push(paren_level);\n   \
    \     } else if (c == ')') {\n            paren_level_count--;\n            paren_level\
    \ = paren_levels[paren_level_count];\n        }\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp786kyjx2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp786kyjx2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_groups: number[][] = [];\n    for (let i\
    \ = 0; i < groups.length; i++) {\n        const group = groups[i];\n        const\
    \ group_level = get_group_level(group);\n        if (group_level > max_level)\
    \ {\n            max_level = group_level;\n            max_level_groups = [group];\n\
    \        } else if (group_level == max_level) {\n            max_level_groups.push(group);\n\
    \        }\n    }\n    return max_level_groups;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpus7gcx1f.ts(10,29): error TS2304: Cannot find name\
    \ 'get_group_level'.\n../../../../../tmp/tmpus7gcx1f.ts(12,13): error TS2588:\
    \ Cannot assign to 'max_level' because it is a constant.\n../../../../../tmp/tmpus7gcx1f.ts(13,13):\
    \ error TS2588: Cannot assign to 'max_level_groups' because it is a constant.\n\
    ../../../../../tmp/tmpus7gcx1f.ts(15,35): error TS2345: Argument of type 'string'\
    \ is not assignable to parameter of type 'number[]'.\n../../../../../tmp/tmpus7gcx1f.ts(18,5):\
    \ error TS2322: Type 'number[][]' is not assignable to type 'number[]'.\n  Type\
    \ 'number[]' is not assignable to type 'number'.\n"
  timestamp: 1660014320
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    let paren_level = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \         paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \            if (paren_level === 0) {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmppbubkjfy.js:25:12)\n    at Object.<anonymous> (/tmp/tmppbubkjfy.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_levels: number[] = [];\n\tlet\
    \ paren_levels_stack: number[] = [];\n\tlet paren_levels_stack_index = 0;\n\t\
    let paren_levels_stack_length = 0;\n\tlet paren_levels_stack_top = 0;\n\tlet paren_levels_stack_bottom\
    \ = 0;\n\tlet paren_levels_stack_max = 0;\n\tlet paren_levels_stack_max_index\
    \ = 0;\n\tlet paren_levels_stack_max_length = 0;\n\tlet paren_levels_stack_max_top\
    \ = 0;\n\tlet paren_levels_stack_max_bottom = 0;\n\tlet paren_levels_stack_max_max\
    \ = 0;\n\tlet paren_levels_stack_max_max_index = 0;\n\tlet paren_levels_stack_max_max_length\
    \ = 0;\n\tlet paren_levels_stack_max_max_top = 0;\n\tlet paren_levels_stack_max_max_bottom\
    \ = 0;\n\tlet paren_levels_stack_max_max_max = 0;\n\tlet paren_levels_stack_max_max_max_index\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_length = 0;\n\tlet paren_levels_stack_max_max_max_top\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_bottom = 0;\n\tlet paren_levels_stack_max_max_max_max\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_index = 0;\n\tlet paren_levels_stack_max_max_max_max_length\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_top = 0;\n\tlet paren_levels_stack_max_max_max_max_bottom\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max = 0;\n\tlet paren_levels_stack_max_max_max_max_max_index\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max_length = 0;\n\tlet paren_levels_stack_max_max_max_max_max_top\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max_bottom = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_index = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_length\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_top = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_bottom\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_max = 0;\n\tlet paren_levels_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n\tlet paren_levels_stack_max_max_max_max_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf0f8u65s.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \            if (level < 0) {\n                break;\n            }\n       \
    \ }\n        if (level > max_level) {\n            max_level = level;\n      \
    \  }\n    }\n    const result = [];\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      result.push(max_level);\n        } else if (group === \")\") {\n      \
    \      result.push(max_level - 1);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz96a1zw5.ts(19,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014320
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \            paren_level_max++;\n        } else if (char === ')') {\n        \
    \    paren_level_count--;\n            if (paren_level_count === 0) {\n      \
    \          paren_level.push(paren_level_max);\n            }\n            paren_stack.pop();\n\
    \        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzbjdvudb.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzbjdvudb.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \        }\n        if (level > max_level) {\n            max_level = level;\n\
    \        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyw5pxwco.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpyw5pxwco.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === '(') {\n        \
    \    level++;\n        } else if (group === ')') {\n            level--;\n   \
    \     }\n        if (level > max_level) {\n            max_level = level;\n  \
    \      }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp631834c.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpp631834c.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n  \
    \      const group = groups[i];\n        if (group === \"(\") {\n            level++;\n\
    \        } else if (group === \")\") {\n            level--;\n        }\n    \
    \    if (level > max_level) {\n            max_level = level;\n        }\n   \
    \ }\n    return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpspo3bze_.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpspo3bze_.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4bdxv2zj.ts(12,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp4bdxv2zj.ts(15,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \        }\n        if (level > max_level) {\n            max_level = level;\n\
    \        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyw5pxwco.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpyw5pxwco.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet max_level = 0;\n\tlet level = 0;\n\tlet paren_stack: string[]\
    \ = [];\n\tlet paren_level = 0;\n\tfor (let i = 0; i < paren_string.length; i++)\
    \ {\n\t\tlet char = paren_string[i];\n\t\tif (char === '(') {\n\t\t\tparen_stack.push(char);\n\
    \t\t\tparen_level++;\n\t\t} else if (char === ')') {\n\t\t\tparen_level--;\n\t\
    \t\tif (paren_level === 0) {\n\t\t\t\tparen_stack.pop();\n\t\t\t\tlevel++;\n\t\
    \t\t\tif (level > max_level) {\n\t\t\t\t\tmax_level = level;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn max_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5erzf22_.ts(25,2): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    let paren_depth = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const c = paren_string[i];\n\
    \        if (c == '(') {\n            paren_stack.push(c);\n            paren_depth++;\n\
    \        } else if (c == ')') {\n            paren_depth--;\n            if (paren_depth\
    \ == 0) {\n                const paren_str = paren_stack.join('');\n         \
    \       paren_stack.splice(paren_stack.indexOf(paren_str), 1);\n             \
    \   paren_depth--;\n            }\n        }\n    }\n    return paren_depth;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjvatrzrh.ts(21,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014320
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: number[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        } else if (paren_string[i] === ')') {\n            paren_level--;\n \
    \           if (paren_stack.length === 0) {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6mn7az_i.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6mn7az_i.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_level = 0;\n    let level = 0;\n    let paren_stack:\
    \ string[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n      \
    \  if (paren_string[i] === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            level++;\n        } else if (paren_string[i] === ')') {\n       \
    \     level--;\n            if (level < 0) {\n                throw new Error(`Unbalanced\
    \ parenthesis at ${i}`);\n            }\n            paren_stack.pop();\n    \
    \    }\n        if (level > max_level) {\n            max_level = level;\n   \
    \     }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgw2nkn1f.ts(23,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    const paren_level_max_index\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_count_index\
    \ = 0;\n    let paren_level_max_count_count = 0;\n    let paren_level_max_count_index2\
    \ = 0;\n    let paren_level_max_count_count2 = 0;\n    let paren_level_max_count_index3\
    \ = 0;\n    let paren_level_max_count_count3 = 0;\n    let paren_level_max_count_index4\
    \ = 0;\n    let paren_level_max_count_count4 = 0;\n    let paren_level_max_count_index5\
    \ = 0;\n    let paren_level_max_count_count5 = 0;\n    let paren_level_max_count_index6\
    \ = 0;\n    let paren_level_max_count_count6 = 0;\n    let paren_level_max_count_index7\
    \ = 0;\n    let paren_level_max_count_count7 = 0;\n    let paren_level_max_count_index8\
    \ = 0;\n    let paren_level_max_count_count8 = 0;\n    let paren_level_max_count_index9\
    \ = 0;\n    let paren_level_max_count_count9 = 0;\n    let paren_level_max_count_index10\
    \ = 0;\n    let paren_level_max_count_count10 = 0;\n    let paren_level_max_count_index11\
    \ = 0;\n    let paren_level_max_count_count11 = 0;\n    let paren_level_max_count_index12\
    \ = 0;\n    let paren_level_max_count_count12 = 0;\n    let paren_level_max_count_index13\
    \ = 0;\n    let paren_level_max_count_count13 = 0;\n    let paren_level_max_count_index14\
    \ = 0;\n    let paren_level_max_count_count14 = 0;\n    let paren_level_max_count_index15\
    \ = 0;\n    let paren_level_max_count_count15 = 0;\n    let paren_level_max_count_index16\
    \ = 0;\n    let paren_level_max_count_count16 = 0;\n    let paren_level_max_count_index17\
    \ = 0;\n    let paren_level_max_count_count17 = 0;\n    let paren_level_max_count_index18\
    \ = 0;\n    let paren_level_max_count_count18 = 0;\n    let paren_level_max_count_index19\
    \ = 0;\n    let paren_level_max_count_count19 = 0;\n    let paren_level_max_count_index20\
    \ = 0;\n    let paren_level_max_count_count20 = 0;\n    let paren_level_max_count_index21\
    \ = 0;\n    let paren_level_max_count_count21 = 0;\n    let paren_level_max_count_index22\
    \ = 0;\n    let paren_level_max_count_count22 = 0;\n    let paren_level_max_count_index23\
    \ = 0;\n    let paren_level_max_count_count23 = 0;\n    let paren_level_max_count_index24\
    \ = 0;\n    let paren_level_max_count_count24 = 0;\n    let \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzwsb3xep.ts(59,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpzwsb3xep.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014320
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number[] = [];\n    let paren_level_max: number[]\
    \ = [];\n    let paren_level_max_count: number[] = [];\n    let paren_level_max_count_index\
    \ = 0;\n    let paren_level_max_count_index2 = 0;\n    let paren_level_max_count_index3\
    \ = 0;\n    let paren_level_max_count_index4 = 0;\n    let paren_level_max_count_index5\
    \ = 0;\n    let paren_level_max_count_index6 = 0;\n    let paren_level_max_count_index7\
    \ = 0;\n    let paren_level_max_count_index8 = 0;\n    let paren_level_max_count_index9\
    \ = 0;\n    let paren_level_max_count_index10 = 0;\n    let paren_level_max_count_index11\
    \ = 0;\n    let paren_level_max_count_index12 = 0;\n    let paren_level_max_count_index13\
    \ = 0;\n    let paren_level_max_count_index14 = 0;\n    let paren_level_max_count_index15\
    \ = 0;\n    let paren_level_max_count_index16 = 0;\n    let paren_level_max_count_index17\
    \ = 0;\n    let paren_level_max_count_index18 = 0;\n    let paren_level_max_count_index19\
    \ = 0;\n    let paren_level_max_count_index20 = 0;\n    let paren_level_max_count_index21\
    \ = 0;\n    let paren_level_max_count_index22 = 0;\n    let paren_level_max_count_index23\
    \ = 0;\n    let paren_level_max_count_index24 = 0;\n    let paren_level_max_count_index25\
    \ = 0;\n    let paren_level_max_count_index26 = 0;\n    let paren_level_max_count_index27\
    \ = 0;\n    let paren_level_max_count_index28 = 0;\n    let paren_level_max_count_index29\
    \ = 0;\n    let paren_level_max_count_index30 = 0;\n    let paren_level_max_count_index31\
    \ = 0;\n    let paren_level_max_count_index32 = 0;\n    let paren_level_max_count_index33\
    \ = 0;\n    let paren_level_max_count_index34 = 0;\n    let paren_level_max_count_index35\
    \ = 0;\n    let paren_level_max_count_index36 = 0;\n    let paren_level_max_count_index37\
    \ = 0;\n    let paren_level_max_count_index38 = 0;\n    let paren_level_max_count_index39\
    \ = 0;\n    let paren_level_max_count_index40 = 0;\n    let paren_level_max_count_index41\
    \ = 0;\n    let paren_level_max_count_index42 = 0;\n    let paren_level_max_count_index43\
    \ = 0;\n    let paren_level_max_count_index44 = 0;\n    let paren_level_max_count_index45\
    \ = 0;\n    let paren_level_max_count_index46 = 0;\n    let paren_level_max_count_index47\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpas17enuo.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014320
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpluepvz_e.js:24:12)\n    at Object.<anonymous> (/tmp/tmpluepvz_e.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            paren_level_count++;\n        } else if (paren_string[i] === ')')\
    \ {\n            paren_level_count--;\n            paren_level[paren_level_count]\
    \ = paren_string[i];\n        }\n    }\n    return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmxnv_33b.ts(14,13): error TS2322: Type ''string''
    is not assignable to type ''number''.

    '
  timestamp: 1660014321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \            levels.push(level);\n        } else if (char === ')') {\n       \
    \     paren_count--;\n            level = levels.pop();\n        }\n    }\n  \
    \  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjj3jjsqs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjj3jjsqs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tconst paren_stack: string[] = [];\n\tlet paren_level = 0;\n\t\
    for (let i = 0; i < paren_string.length; i++) {\n\t\tconst c = paren_string[i];\n\
    \t\tif (c == '(') {\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t} else if (c == ')') {\n\t\t\tconst current_level = paren_stack.pop();\n\t\
    \t\tif (current_level > paren_level) {\n\t\t\t\tparen_level = current_level;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpafggo7mr.ts(10,21): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpafggo7mr.ts(14,8):\
    \ error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n\
    ../../../../../tmp/tmpafggo7mr.ts(15,5): error TS2322: Type 'string' is not assignable\
    \ to type 'number'.\n../../../../../tmp/tmpafggo7mr.ts(19,2): error TS2322: Type\
    \ 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable\
    \ to type 'number'.\n"
  timestamp: 1660014321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    let paren_level_max:\
    \ number = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_count:\
    \ number;\n    let paren_level_max_string: string;\n    let paren_level_max_string_index:\
    \ number;\n    let paren_level_max_string_count: number;\n    let paren_level_max_string_value:\
    \ string;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl96v7erx.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_string[i]);\n      paren_level++;\n    } else\
    \ if (paren_string[i] === ')') {\n      paren_level--;\n      if (paren_level\
    \ === 0) {\n        paren_stack.shift();\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpexxyxje3.ts(18,3): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    let paren_count = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_count);\n   \
    \         paren_count++;\n        } else if (char === ')') {\n            paren_count--;\n\
    \            if (paren_count === 0) {\n                paren_stack.pop();\n  \
    \          }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0u2qvedj.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0u2qvedj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        const level_of_nesting = group.match(/\\(([^()]+)\\)/)[1];\n        if\
    \ (level_of_nesting > max_level) {\n            max_level = level_of_nesting;\n\
    \        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcdc13tnn.ts(10,13): error TS2365: Operator ''>''
    cannot be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpcdc13tnn.ts(11,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpcdc13tnn.ts(14,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_nesting = 0;\n\tlet paren_groups:\
    \ number[] = [];\n\tlet paren_group_index = 0;\n\tfor (let i = 0; i < paren_string.length;\
    \ i++) {\n\t\tlet char = paren_string[i];\n\t\tif (char === '(') {\n\t\t\tparen_nesting++;\n\
    \t\t\tparen_groups[paren_group_index] = paren_nesting;\n\t\t\tparen_group_index++;\n\
    \t\t} else if (char === ')') {\n\t\t\tparen_nesting--;\n\t\t\tparen_groups[paren_group_index]\
    \ = paren_nesting;\n\t\t\tparen_group_index++;\n\t\t}\n\t}\n\treturn paren_groups;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  1,\n  0,\n  1,\n\
    \  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9wqn75al.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9wqn75al.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 1, 2,\n    3, 2, 1, 0, 1, 0, 1, 2,\n    3, 2, 1, 2, 1, 2, 1,\
    \ 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const level = 0;\n    const\
    \ paren_stack: string[] = [];\n    const paren_stack_len = paren_stack.length;\n\
    \    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n   \
    \ let paren_stack_bottom = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom\
    \ = -1;\n    let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n   \
    \ let paren_stack_top = -1;\n    let paren_stack_bottom = -1;\n    let paren_stack_top\
    \ = -1;\n    let paren_stack_bottom = -1;\n    let paren_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgpy2q3a7.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014322
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level_count);\n\
    \            paren_level_max = Math.max(paren_level_max, paren_stack.length -\
    \ 1);\n            paren_level_count += 1;\n        } else if (char === ')') {\n\
    \            paren_level_count -= 1;\n            if (paren_level_count === 0)\
    \ {\n                paren_level.push(paren_level_max);\n            }\n     \
    \   }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5,\n\
    \  6,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpez8xyy4r.js:28:12)\n    at Object.<anonymous> (/tmp/tmpez8xyy4r.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5, 6,\
    \ 11 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014322
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            if (paren_level_count === 0) {\n    \
    \            paren_level.push(paren_level_count);\n            }\n        }\n\
    \    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp9s0hv3t6.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9s0hv3t6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014322
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \        levels.push(level);\n        } else if (c == ')') {\n            paren_count--;\n\
    \            level = levels[levels.length - 1];\n        } else {\n          \
    \  level = 0;\n        }\n    }\n    return levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_dv3l9ih.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_dv3l9ih.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    const paren_level =\
    \ 0;\n    let paren_level_count = 0;\n    let paren_level_max_count = 0;\n   \
    \ let paren_level_max_count_index = 0;\n    let paren_level_max_count_index2 =\
    \ 0;\n    let paren_level_max_count_index3 = 0;\n    let paren_level_max_count_index4\
    \ = 0;\n    let paren_level_max_count_index5 = 0;\n    let paren_level_max_count_index6\
    \ = 0;\n    let paren_level_max_count_index7 = 0;\n    let paren_level_max_count_index8\
    \ = 0;\n    let paren_level_max_count_index9 = 0;\n    let paren_level_max_count_index10\
    \ = 0;\n    let paren_level_max_count_index11 = 0;\n    let paren_level_max_count_index12\
    \ = 0;\n    let paren_level_max_count_index13 = 0;\n    let paren_level_max_count_index14\
    \ = 0;\n    let paren_level_max_count_index15 = 0;\n    let paren_level_max_count_index16\
    \ = 0;\n    let paren_level_max_count_index17 = 0;\n    let paren_level_max_count_index18\
    \ = 0;\n    let paren_level_max_count_index19 = 0;\n    let paren_level_max_count_index20\
    \ = 0;\n    let paren_level_max_count_index21 = 0;\n    let paren_level_max_count_index22\
    \ = 0;\n    let paren_level_max_count_index23 = 0;\n    let paren_level_max_count_index24\
    \ = 0;\n    let paren_level_max_count_index25 = 0;\n    let paren_level_max_count_index26\
    \ = 0;\n    let paren_level_max_count_index27 = 0;\n    let paren_level_max_count_index28\
    \ = 0;\n    let paren_level_max_count_index29 = 0;\n    let paren_level_max_count_index30\
    \ = 0;\n    let paren_level_max_count_index31 = 0;\n    let paren_level_max_count_index32\
    \ = 0;\n    let paren_level_max_count_index33 = 0;\n    let paren_level_max_count_index34\
    \ = 0;\n    let paren_level_max_count_index35 = 0;\n    let paren_level_max_count_index36\
    \ = 0;\n    let paren_level_max_count_index37 = 0;\n    let paren_level_max_count_index38\
    \ = 0;\n    let paren_level_max_count_index39 = 0;\n    let paren_level_max_count_index40\
    \ = 0;\n    let paren_level_max_count_index41 = 0;\n    let paren_level_max_count_index42\
    \ = 0;\n    let paren_level_max_count_index43 = 0;\n    let paren_level_max_count_index44\
    \ = 0;\n    let paren_level_max_count_index45 = 0;\n    let paren_level_max_count_index46\
    \ = 0;\n    let paren_level_max_count_index47 = 0;\n    let paren_level_max_count_index48\
    \ = 0;\n    let paren_level_max_count_index49\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwxcoe98z.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.startsWith(\"(\")) {\n            max_level\
    \ = Math.max(max_level, parse_nested_parens(group));\n        } else {\n     \
    \       max_level = Math.max(max_level, group.length);\n        }\n    }\n   \
    \ return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf6d7qtiq.ts(9,19): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpf6d7qtiq.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpf6d7qtiq.ts(10,45): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpf6d7qtiq.ts(12,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpf6d7qtiq.ts(15,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const groups = paren_string.split(\" \");\n  const max_level =\
    \ 0;\n  const max_level_group = \"\";\n  for (let i = 0; i < groups.length; i++)\
    \ {\n    const group = groups[i];\n    if (group === \"(\") {\n      max_level++;\n\
    \    } else if (group === \")\") {\n      max_level--;\n      if (max_level <\
    \ 0) {\n        throw new Error(\n          `Invalid paren string: ${paren_string}.\
    \ Unbalanced parenthesis found.`\n        );\n      }\n    } else {\n      if\
    \ (max_level < 0) throw new Error(`Invalid paren string: ${paren_string}`);\n\
    \      if (max_level > max_level_group.length) max_level_group = group;\n    }\n\
    \  }\n  return [max_level, max_level_group];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpssksp4k8.ts(11,7): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpssksp4k8.ts(13,7): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpssksp4k8.ts(21,47): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    ../../../../../tmp/tmpssksp4k8.ts(24,22): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660014322
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_groups: number[] = [];\n\tfor\
    \ (let i = 0; i < paren_string.length; i++) {\n\t\tlet char = paren_string[i];\n\
    \t\tif (char === '(') {\n\t\t\tparen_level++;\n\t\t} else if (char === ')') {\n\
    \t\t\tparen_level--;\n\t\t}\n\t\tif (paren_level === 0) {\n\t\t\tparen_groups.push(paren_level);\n\
    \t\t}\n\t}\n\treturn paren_groups;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpx8cxhsxd.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx8cxhsxd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_level = 0;\n\tlet paren_nesting = 0;\n\tlet paren_levels:\
    \ number[] = [];\n\tfor (let i = 0; i < paren_string.length; i++) {\n\t\tlet c\
    \ = paren_string[i];\n\t\tif (c === '(') {\n\t\t\tparen_level++;\n\t\t} else if\
    \ (c === ')') {\n\t\t\tparen_level--;\n\t\t\tif (paren_level === 0) {\n\t\t\t\t\
    paren_nesting--;\n\t\t\t}\n\t\t} else if (c === ' ') {\n\t\t\tparen_nesting++;\n\
    \t\t}\n\t\tif (paren_nesting === 0) {\n\t\t\tparen_levels.push(paren_level);\n\
    \t\t}\n\t}\n\treturn paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  1,\n  0,\n  1,\n\
    \  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpp393o4oq.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp393o4oq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 1, 2,\n    3, 2, 1, 0, 1, 0, 1, 2,\n    3, 2, 1, 2, 1, 2, 1\n\
    \  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \        } else if (char === ')') {\n            if (paren_stack.length > 0) {\n\
    \                levels.push(paren_stack.length);\n                paren_stack.pop();\n\
    \            }\n        }\n    }\n    if (paren_stack.length > 0) {\n        levels.push(paren_stack.length);\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1,\n  3,\n  2,\n  1,\n  1,\n  3,\n  2,\n  2,\n  2,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4qq8tikb.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4qq8tikb.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 1, 3, 2,\n    1, 1, 3, 2, 2,\n    2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \            if (level < 0) {\n                break;\n            }\n       \
    \ }\n        if (level > max_level) {\n            max_level = level;\n      \
    \  }\n    }\n    const result = [];\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      result.push(level);\n        } else if (group === \")\") {\n          \
    \  result.pop();\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp781ejutl.ts(19,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_paren_level:\
    \ number = 0;\n    let paren_level_max_paren_index = 0;\n    let paren_level_max_paren_level_paren_index\
    \ = 0;\n    let paren_level_max_paren_level_paren_level: number = 0;\n    let\
    \ paren_level_max_paren_level_paren_index2 = 0;\n    let paren_level_max_paren_level_paren_level2\
    \ = 0;\n    let paren_level_max_paren_level_paren_index3 = 0;\n    let paren_level_max_paren_level_paren_level3\
    \ = 0;\n    let paren_level_max_paren_level_paren_index4 = 0;\n    let paren_level_max_paren_level_paren_level4\
    \ = 0;\n    let paren_level_max_paren_level_paren_index5 = 0;\n    let paren_level_max_paren_level_paren_level5\
    \ = 0;\n    let paren_level_max_paren_level_paren_index6 = 0;\n    let paren_level_max_paren_level_paren_level6\
    \ = 0;\n    let paren_level_max_paren_level_paren_index7 = 0;\n    let paren_level_max_paren_level_paren_level7\
    \ = 0;\n    let paren_level_max_paren_level_paren_index8 = 0;\n    let paren_level_max_paren_level_paren_level8\
    \ = 0;\n    let paren_level_max_paren_level_paren_index9 = 0;\n    let paren_level_max_paren_level_paren_level9\
    \ = 0;\n    let paren_level_max_paren_level_paren_index10 = 0;\n    let paren_level_max_paren_level_paren_level10\
    \ = 0;\n    let paren_level_max_paren_level_paren_index11 = 0;\n    let paren_level_max_paren_level_paren_level11\
    \ = 0;\n    let paren_level_max_paren_level_paren_index12 = 0;\n    let paren_level_max_paren_level_paren_level12\
    \ = 0;\n    let paren_level_max_paren_level_paren_index13 = 0;\n    let paren_level_max_paren_level_paren_level13\
    \ = 0;\n    let paren_level_max_paren_level_paren_index14 = 0;\n    let paren_level_max_paren_level_paren_level14\
    \ = 0;\n    let paren_level_max_paren_level_paren_index15 = 0;\n    let paren_level_max_paren_level_paren_level15\
    \ = 0;\n    let paren_level_max_paren_level_paren_index16 = 0;\n    let paren_level_max_paren_level_paren_level16\
    \ = 0;\n    let paren_level_max_paren_level_paren_index17 = 0;\n    let paren_level_max_paren_level_paren_level\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf7j6ahim.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014322
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    const paren_level =\
    \ 0;\n    let paren_nesting = 0;\n    let paren_level_index = 0;\n    let paren_nesting_index\
    \ = 0;\n    let paren_nesting_level = 0;\n    let paren_nesting_level_max = 0;\n\
    \    let paren_nesting_level_max_index = 0;\n    let paren_nesting_level_max_index2\
    \ = 0;\n    let paren_nesting_level_max_index3 = 0;\n    let paren_nesting_level_max_index4\
    \ = 0;\n    let paren_nesting_level_max_index5 = 0;\n    let paren_nesting_level_max_index6\
    \ = 0;\n    let paren_nesting_level_max_index7 = 0;\n    let paren_nesting_level_max_index8\
    \ = 0;\n    let paren_nesting_level_max_index9 = 0;\n    let paren_nesting_level_max_index10\
    \ = 0;\n    let paren_nesting_level_max_index11 = 0;\n    let paren_nesting_level_max_index12\
    \ = 0;\n    let paren_nesting_level_max_index13 = 0;\n    let paren_nesting_level_max_index14\
    \ = 0;\n    let paren_nesting_level_max_index15 = 0;\n    let paren_nesting_level_max_index16\
    \ = 0;\n    let paren_nesting_level_max_index17 = 0;\n    let paren_nesting_level_max_index18\
    \ = 0;\n    let paren_nesting_level_max_index19 = 0;\n    let paren_nesting_level_max_index20\
    \ = 0;\n    let paren_nesting_level_max_index21 = 0;\n    let paren_nesting_level_max_index22\
    \ = 0;\n    let paren_nesting_level_max_index23 = 0;\n    let paren_nesting_level_max_index24\
    \ = 0;\n    let paren_nesting_level_max_index25 = 0;\n    let paren_nesting_level_max_index26\
    \ = 0;\n    let paren_nesting_level_max_index27 = 0;\n    let paren_nesting_level_max_index28\
    \ = 0;\n    let paren_nesting_level_max_index29 = 0;\n    let paren_nesting_level_max_index30\
    \ = 0;\n    let paren_nesting_level_max_index31 = 0;\n    let paren_nesting_level_max_index32\
    \ = 0;\n    let paren_nesting_level_max_index33 = 0;\n    let paren_nesting_level_max_index34\
    \ = 0;\n    let paren_nesting_level_max_index35 = 0;\n    let paren_nesting_level_max_index36\
    \ = 0;\n    let paren_nesting_level_max_index37 = 0;\n    let paren_nesting_level_max_index38\
    \ = 0;\n    let paren_nesting_level_max_index39 = 0;\n    let paren_nesting_level_max_index40\
    \ = 0;\n    let paren_nesting_level_max_index41 = 0;\n    let paren_nesting_level_max_index42\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpck1j6yiv.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpck1j6yiv.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: number[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        } else if (paren_string[i] === \")\") {\n            paren_level--;\n\
    \            if (paren_stack.length === 0) {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsv8jhs67.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsv8jhs67.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === '(') {\n        \
    \    level++;\n        } else if (group === ')') {\n            level--;\n   \
    \     }\n        if (level > max_level) {\n            max_level = level;\n  \
    \      }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp631834c.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpp631834c.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014315
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const level = parse_nested_parens(groups[i]);\n\
    \        if (level > max_level) {\n            max_level = level;\n        }\n\
    \    }\n    return [max_level, groups.length];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps64_io0j.ts(9,13): error TS2365: Operator ''>'' cannot
    be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmps64_io0j.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_max = 0;\n    let paren_level_max_max_count =\
    \ 0;\n    let paren_level_max_max_max = 0;\n    let paren_level_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max = 0;\n    let paren_level_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max = 0;\n    let\
    \ paren_level_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_count = 0;\n \
    \   let paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    let paren_level_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  \
    \  let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe7zmicol.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        }\n \
    \       if (level === 0 && paren_count === 0) {\n            levels.push(level);\n\
    \        }\n        level++;\n    }\n    return levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpeku76sy2.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeku76sy2.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    const paren_level =\
    \ 0;\n    let paren_level_count = 0;\n    let paren_level_char = '';\n    let\
    \ paren_level_char_length = 0;\n    let paren_level_char_offset = 0;\n    let\
    \ paren_level_char_offset_in_paren = 0;\n    let paren_level_char_offset_in_paren_length\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_length = 0;\n\
    \    let paren_level_char_offset_in_paren_offset_in_paren_offset = 0;\n    let\
    \ paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren = 0;\n    let\
    \ paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_length = 0;\n\
    \    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_length\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_length\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_length\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_length\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren\
    \ = 0;\n    let paren_level_char_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_paren_offset_in_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp64198zq4.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let\
    \ paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_string\
    \ = \"\";\n    let paren_level_max_string_index = 0;\n    let paren_level_max_string_length\
    \ = 0;\n    let paren_level_max_string_char_count = 0;\n    let paren_level_max_string_char_count_index\
    \ = 0;\n    let paren_level_max_string_char_count_length = 0;\n    let paren_level_max_string_char_count_char_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length = 0;\n    let paren_level_max_string_char_count_char_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length = 0;\n  \
    \  let paren_level_max_string_char_count_char_length_length_index = 0;\n    let\
    \ paren_level_max_string_char_count_char_length_length_length = 0;\n    let paren_level_max_string_char_count_char_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_index\
    \ = 0;\n    let paren_level_max_string_char_count_char_length_length_length_length_length_length\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp74yhm3qh.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp74yhm3qh.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_groups: number[] = [];\n    for (let i =\
    \ 0; i < groups.length; i++) {\n        const group = groups[i];\n        const\
    \ level_of_nesting = parse_nested_parens(group);\n        if (level_of_nesting\
    \ > max_level) {\n            max_level = level_of_nesting;\n            max_level_groups\
    \ = [group];\n        } else if (level_of_nesting === max_level) {\n         \
    \   max_level_groups.push(group);\n        }\n    }\n    return max_level_groups.length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgfp8mauz.ts(11,13): error TS2365: Operator ''>''
    cannot be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmpgfp8mauz.ts(12,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmpgfp8mauz.ts(13,13): error TS2588: Cannot assign to ''max_level_groups''
    because it is a constant.

    ../../../../../tmp/tmpgfp8mauz.ts(14,20): error TS2367: This condition will always
    return ''false'' since the types ''number[]'' and ''0'' have no overlap.

    ../../../../../tmp/tmpgfp8mauz.ts(15,35): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpgfp8mauz.ts(18,5): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660014324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    const paren_level_max_idx:\
    \ number[] = [];\n    const paren_level_max_idx2: number[] = [];\n    const paren_level_max_idx3:\
    \ number[] = [];\n    const paren_level_max_idx4: number[] = [];\n    const paren_level_max_idx5:\
    \ number[] = [];\n    const paren_level_max_idx6: number[] = [];\n    const paren_level_max_idx7:\
    \ number[] = [];\n    const paren_level_max_idx8: number[] = [];\n    const paren_level_max_idx9:\
    \ number[] = [];\n    const paren_level_max_idx10: number[] = [];\n    const paren_level_max_idx11:\
    \ number[] = [];\n    const paren_level_max_idx12: number[] = [];\n    const paren_level_max_idx13:\
    \ number[] = [];\n    const paren_level_max_idx14: number[] = [];\n    const paren_level_max_idx15:\
    \ number[] = [];\n    const paren_level_max_idx16: number[] = [];\n    const paren_level_max_idx17:\
    \ number[] = [];\n    const paren_level_max_idx18: number[] = [];\n    const paren_level_max_idx19:\
    \ number[] = [];\n    const paren_level_max_idx20: number[] = [];\n    const paren_level_max_idx21:\
    \ number[] = [];\n    const paren_level_max_idx22: number[] = [];\n    const paren_level_max_idx23:\
    \ number[] = [];\n    const paren_level_max_idx24: number[] = [];\n    const paren_level_max_idx25:\
    \ number[] = [];\n    const paren_level_max_idx26: number[] = [];\n    const paren_level_max_idx27:\
    \ number[] = [];\n    const paren_level_max_idx28: number[] = [];\n    const paren_level_max_idx29:\
    \ number[] = [];\n    const paren_level_max_idx30: number[] = [];\n    const paren_level_max_idx31:\
    \ number[] = [];\n    const paren_level_max_idx32: number[] = [];\n    const paren_level_max_idx33:\
    \ number[] = [];\n    const paren_level_max_idx34: number[] = [];\n    const paren_level_max_idx35:\
    \ number[] = [];\n    const paren_level_max_idx36: number[] = [];\n    const paren_level_max_idx37:\
    \ number[] = [];\n    const paren_level_max_idx38: number[] = [];\n    const paren_level_max_idx39:\
    \ number[] = [];\n    const paren_level_max_idx40: number[] = [];\n    const paren_level_max_idx41:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgdqm74ol.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        }\n \
    \       if (levels[level] === undefined) {\n            levels[level] = paren_count;\n\
    \        } else if (levels[level] < paren_count) {\n            levels[level]\
    \ = paren_count;\n        }\n        level++;\n    }\n    return levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3wpzd8mh.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3wpzd8mh.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    let paren_level = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \        } else if (char === ' ') {\n            levels[level] = paren_count;\n\
    \            paren_count = 0;\n            level++;\n        } else {\n      \
    \      paren_count++;\n        }\n    }\n    levels[level] = paren_count;\n  \
    \  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpiaw0pzlt.js:32:12)\n    at Object.<anonymous> (/tmp/tmpiaw0pzlt.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: number[] = [];\n    let paren_depth = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_depth);\n   \
    \         paren_depth++;\n        } else if (char === ')') {\n            paren_depth\
    \ = Math.max(paren_stack.pop(), paren_depth);\n        }\n    }\n    return paren_depth;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1w1unqy2.ts(16,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_level = 0;\n    let level = 0;\n    let paren_stack:\
    \ string[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n      \
    \  if (paren_string[i] === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            level++;\n        } else if (paren_string[i] === ')') {\n       \
    \     level--;\n            if (level === 0) {\n                paren_stack.pop();\n\
    \            }\n        }\n        if (level > max_level) {\n            max_level\
    \ = level;\n        }\n    }\n    return max_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxdi76hd2.ts(22,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660014324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level_count\
    \ += 1;\n        } else if (char === ')') {\n            paren_level[paren_level_count]\
    \ += 1;\n            paren_level_count -= 1;\n            if (paren_level_count\
    \ === 0) {\n                const max_level = paren_level.reduce((a, b) => Math.max(a,\
    \ b), 0);\n                const max_level_str = paren_level.reduce((a, b) =>\
    \ a + '.' + b, '');\n                const max_level_str = max_level_str.substring(0,\
    \ max_level_str.length - 1);\n                const max_level_str = max_level_str.replace(/^\\\
    .\\./, '');\n                const max_level_str = max_level_str.replace(/\\.$/,\
    \ '');\n                const max_level_str = max_level_str.replace(/\\.\\.\\\
    ./, '');\n                const max_level_str = max_level_str.replace(/\\.\\.$/,\
    \ '');\n                const max_level_str = max_level_str.replace(/\\.\\.\\\
    .\\./, '');\n                const max_level_str = max_level_str.replace(/\\.\\\
    .\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\./, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\./, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\./, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\.\\./, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\.\\.\\./, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.$/, '');\n                const max_level_str = max_level_str.replace(/\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./, '');\n                const max_level_str =\
    \ max_level_str.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.$/, '');\n            \
    \    const max_level_str = max_level_str.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\./, '');\n                const max_level_str = \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpervn50o2.ts(40,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpervn50o2.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n\
    \      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else\
    \ if (paren_string[i] === ')') {\n      if (paren_level_count < paren_level_max)\
    \ {\n        paren_level_count++;\n      } else {\n        paren_level_count--;\n\
    \      }\n      paren_level[paren_level_count] = paren_string[i];\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo3k61ms1.ts(19,7): error TS2322: Type ''string''
    is not assignable to type ''number''.

    '
  timestamp: 1660014325
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const c = paren_string[i];\n        if (c == '(') {\n      \
    \      paren_level_count++;\n            if (paren_level_count > paren_level)\
    \ {\n                paren_level = paren_level_count;\n            }\n       \
    \ } else if (c == ')') {\n            paren_level_count--;\n            if (paren_level_count\
    \ < 0) {\n                paren_level = paren_level_count;\n            }\n  \
    \      }\n        paren_levels.push(paren_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n\
    \  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp652rl4vc.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp652rl4vc.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 2, 2, 2, 2, 2,\n    2, 3, 3, 3, 3, 3, 3, 3,\n    3, 3, 3, 3, 3, 3, 3,\
    \ 3,\n    3, 3, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014325
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n            if\
    \ (paren_count === 0) {\n                levels.push(level);\n               \
    \ level = 0;\n            }\n        }\n        level++;\n    }\n    return levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  7,\n\
    \  3,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpyi6xrvqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyi6xrvqd.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 7, 3,\
    \ 11 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet max_level = 0;\n\tlet level = 0;\n\tlet paren_level = 0;\n\
    \tlet paren_level_stack: number[] = [];\n\tlet paren_level_stack_index: number[]\
    \ = [];\n\tlet paren_level_stack_index2: number[] = [];\n\tlet paren_level_stack_index3:\
    \ number[] = [];\n\tlet paren_level_stack_index4: number[] = [];\n\tlet paren_level_stack_index5:\
    \ number[] = [];\n\tlet paren_level_stack_index6: number[] = [];\n\tlet paren_level_stack_index7:\
    \ number[] = [];\n\tlet paren_level_stack_index8: number[] = [];\n\tlet paren_level_stack_index9:\
    \ number[] = [];\n\tlet paren_level_stack_index10: number[] = [];\n\tlet paren_level_stack_index11:\
    \ number[] = [];\n\tlet paren_level_stack_index12: number[] = [];\n\tlet paren_level_stack_index13:\
    \ number[] = [];\n\tlet paren_level_stack_index14: number[] = [];\n\tlet paren_level_stack_index15:\
    \ number[] = [];\n\tlet paren_level_stack_index16: number[] = [];\n\tlet paren_level_stack_index17:\
    \ number[] = [];\n\tlet paren_level_stack_index18: number[] = [];\n\tlet paren_level_stack_index19:\
    \ number[] = [];\n\tlet paren_level_stack_index20: number[] = [];\n\tlet paren_level_stack_index21:\
    \ number[] = [];\n\tlet paren_level_stack_index22: number[] = [];\n\tlet paren_level_stack_index23:\
    \ number[] = [];\n\tlet paren_level_stack_index24: number[] = [];\n\tlet paren_level_stack_index25:\
    \ number[] = [];\n\tlet paren_level_stack_index26: number[] = [];\n\tlet paren_level_stack_index27:\
    \ number[] = [];\n\tlet paren_level_stack_index28: number[] = [];\n\tlet paren_level_stack_index29:\
    \ number[] = [];\n\tlet paren_level_stack_index30: number[] = [];\n\tlet paren_level_stack_index31:\
    \ number[] = [];\n\tlet paren_level_stack_index32: number[] = [];\n\tlet paren_level_stack_index33:\
    \ number[] = [];\n\tlet paren_level_stack_index34: number[] = [];\n\tlet paren_level_stack_index35:\
    \ number[] = [];\n\tlet paren_level_stack_index36: number[] = [];\n\tlet paren_level_stack_index37:\
    \ number[] = [];\n\tlet paren_level_stack_index\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7ppxtssa.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.length > max_level) {\n            max_level\
    \ = group.length;\n        }\n    }\n    const levels = new Array(max_level +\
    \ 1);\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        for (let j = 0; j < group.length; j++) {\n            levels[j] = levels[j]\
    \ || 0;\n            levels[j]++;\n        }\n    }\n    return levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnysi7m4n.ts(10,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group === \"(\") {\n \
    \           max_level++;\n            if (max_level_group < max_level) {\n   \
    \             max_level_group = max_level;\n            }\n        } else if (group\
    \ === \")\") {\n            max_level--;\n        }\n    }\n    const result =\
    \ [];\n    for (let i = 0; i < max_level_group; i++) {\n        result.push(i);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi9qi5dpa.ts(11,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpi9qi5dpa.ts(13,17): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    ../../../../../tmp/tmpi9qi5dpa.ts(16,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    const paren_level =\
    \ 0;\n    let paren_level_index = 0;\n    let paren_level_char = '';\n    let\
    \ paren_level_char_length = 0;\n    let paren_level_char_length_index = 0;\n \
    \   let paren_level_char_length_count = 0;\n    let paren_level_char_length_count_index\
    \ = 0;\n    let paren_level_char_length_count_max = 0;\n    let paren_level_char_length_count_max_index\
    \ = 0;\n    let paren_level_char_length_count_min = 0;\n    let paren_level_char_length_count_min_index\
    \ = 0;\n    let paren_level_char_length_count_max2 = 0;\n    let paren_level_char_length_count_max2_index\
    \ = 0;\n    let paren_level_char_length_count_min2 = 0;\n    let paren_level_char_length_count_min2_index\
    \ = 0;\n    let paren_level_char_length_count_max3 = 0;\n    let paren_level_char_length_count_max3_index\
    \ = 0;\n    let paren_level_char_length_count_min3 = 0;\n    let paren_level_char_length_count_min3_index\
    \ = 0;\n    let paren_level_char_length_count_max4 = 0;\n    let paren_level_char_length_count_max4_index\
    \ = 0;\n    let paren_level_char_length_count_min4 = 0;\n    let paren_level_char_length_count_min4_index\
    \ = 0;\n    let paren_level_char_length_count_max5 = 0;\n    let paren_level_char_length_count_max5_index\
    \ = 0;\n    let paren_level_char_length_count_min5 = 0;\n    let paren_level_char_length_count_min5_index\
    \ = 0;\n    let paren_level_char_length_count_max6 = 0;\n    let paren_level_char_length_count_max6_index\
    \ = 0;\n    let paren_level_char_length_count_min6 = 0;\n    let paren_level_char_length_count_min6_index\
    \ = 0;\n    let paren_level_char_length_count_max7 = 0;\n    let paren_level_char_length_count_max7_index\
    \ = 0;\n    let paren_level_char_length_count_min7 = 0;\n    let paren_level_char_length_count_min7_index\
    \ = 0;\n    let paren_level_char_length_count_max8 = 0;\n    let paren_level_char_length_count_max8_index\
    \ = 0;\n    let paren_level_char_length_count_min8 = 0;\n    let paren_level_char_length_count_min8_index\
    \ = 0;\n    let paren_level_char_length_count_max9 = 0;\n    let paren_level_char_length_count_max9_index\
    \ = 0;\n    let paren_level_char_length_count_min9 = 0;\n    let paren_level_char_length_count_min9_index\
    \ = 0;\n    let paren_level_char_length_count_max10 = 0;\n    let paren_level_char_length_count_max10_index\
    \ = 0;\n    let paren_level_char_length_count_min10 = 0;\n    let paren_level_char_length_count_min10_index\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxcp2t10l.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let current_level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      current_level++;\n        } else if (group === \")\") {\n            current_level--;\n\
    \        }\n        if (current_level > max_level) {\n            max_level =\
    \ current_level;\n        }\n    }\n    return max_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppjrldoca.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmppjrldoca.ts(19,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const paren_stack: string[]\
    \ = [];\n    const paren_level: number = 0;\n    const paren_level_max: number\
    \ = paren_stack.length;\n    const paren_level_max_max: number = levels.length;\n\
    \n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(paren_level);\n   \
    \     } else if (char === ')') {\n            if (paren_stack.length > 0) {\n\
    \                const paren_level = paren_stack.pop();\n                if (paren_level\
    \ > 0) {\n                    levels.push(paren_level);\n                }\n \
    \           }\n        } else if (char === ' ') {\n            if (paren_stack.length\
    \ > 0) {\n                const paren_level = paren_stack.pop();\n           \
    \     if (paren_level > 0) {\n                    levels.push(paren_level);\n\
    \                }\n            }\n        }\n    }\n\n    if (paren_stack.length\
    \ > 0) {\n        const paren_level = paren_stack.pop();\n        if (paren_level\
    \ > 0) {\n            levels.push(paren_level);\n        }\n    }\n\n    return\
    \ levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo3_dfxcc.ts(14,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpo3_dfxcc.ts(18,21): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpo3_dfxcc.ts(19,33): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpo3_dfxcc.ts(25,21): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpo3_dfxcc.ts(26,33): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpo3_dfxcc.ts(34,13): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpo3_dfxcc.ts(35,25): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014325
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n  \
    \      if (groups[i] === \"(\") {\n            level++;\n        } else if (groups[i]\
    \ === \")\") {\n            level--;\n            if (level < 0) {\n         \
    \       break;\n            }\n        }\n        if (level > max_level) {\n \
    \           max_level = level;\n        }\n    }\n    const result = [];\n   \
    \ for (let i = 0; i < groups.length; i++) {\n        if (groups[i] === \"(\")\
    \ {\n            result.push(level);\n        } else if (groups[i] === \")\")\
    \ {\n            result.pop();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxdmwg19r.ts(18,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014317
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      paren_level.pop();\n            if (paren_level.length === 0) {\n     \
    \           paren_stack.push(paren_string[i]);\n            }\n        } else\
    \ if (char === ' ') {\n            if (paren_stack.length > 0) {\n           \
    \     paren_level[paren_stack.length - 1]++;\n            }\n        }\n    }\n\
    \    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzshmkfrr.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzshmkfrr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items>, NaN, <2 empty items>, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_groups = [];\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group.length <= max_level)\
    \ {\n            max_level_groups.push(group);\n        } else {\n           \
    \ max_level = group.length;\n        }\n    }\n    return max_level_groups;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1fumvxxq.ts(13,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014325
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkrefdxh_.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrefdxh_.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level_count.push(paren_level_count);\n\
    \        } else if (char === ')') {\n            paren_level_count = paren_level_count[paren_level_count];\n\
    \            if (paren_level_count === 0) {\n                paren_level.push(paren_stack.length);\n\
    \            }\n            paren_stack.pop();\n        }\n    }\n    return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3kld3m4e.ts(12,31): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++)\
    \ {\n        const group = groups[i];\n        if (group === \"(\") {\n      \
    \      level++;\n        } else if (group === \")\") {\n            level--;\n\
    \        }\n        if (level > max_level) {\n            max_level = level;\n\
    \        }\n    }\n    const result = [];\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        if (group === \"(\") {\n \
    \           result.push(i);\n        } else if (group === \")\") {\n         \
    \   result.pop();\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv8t9_kwu.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    let paren_level_index:\
    \ number[] = [];\n    let paren_level_max_index: number[] = [];\n    let paren_level_max_index2:\
    \ number[] = [];\n    let paren_level_max_index3: number[] = [];\n    let paren_level_max_index4:\
    \ number[] = [];\n    let paren_level_max_index5: number[] = [];\n    let paren_level_max_index6:\
    \ number[] = [];\n    let paren_level_max_index7: number[] = [];\n    let paren_level_max_index8:\
    \ number[] = [];\n    let paren_level_max_index9: number[] = [];\n    let paren_level_max_index10:\
    \ number[] = [];\n    let paren_level_max_index11: number[] = [];\n    let paren_level_max_index12:\
    \ number[] = [];\n    let paren_level_max_index13: number[] = [];\n    let paren_level_max_index14:\
    \ number[] = [];\n    let paren_level_max_index15: number[] = [];\n    let paren_level_max_index16:\
    \ number[] = [];\n    let paren_level_max_index17: number[] = [];\n    let paren_level_max_index18:\
    \ number[] = [];\n    let paren_level_max_index19: number[] = [];\n    let paren_level_max_index20:\
    \ number[] = [];\n    let paren_level_max_index21: number[] = [];\n    let paren_level_max_index22:\
    \ number[] = [];\n    let paren_level_max_index23: number[] = [];\n    let paren_level_max_index24:\
    \ number[] = [];\n    let paren_level_max_index25: number[] = [];\n    let paren_level_max_index26:\
    \ number[] = [];\n    let paren_level_max_index27: number[] = [];\n    let paren_level_max_index28:\
    \ number[] = [];\n    let paren_level_max_index29: number[] = [];\n    let paren_level_max_index30:\
    \ number[] = [];\n    let paren_level_max_index31: number[] = [];\n    let paren_level_max_index32:\
    \ number[] = [];\n    let paren_level_max_index33: number[] = [];\n    let paren_level_max_index34:\
    \ number[] = [];\n    let paren_level_max_index35: number[] = [];\n    let paren_level_max_index36:\
    \ number[] = [];\n    let paren_level_max_index37: number[] = [];\n    let paren_level_max_index38:\
    \ number[] = [];\n    let paren_level_max_index39: number[] = [];\n    let paren_level_max_index40:\
    \ number[] = [];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2himd_r2.ts(50,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp2himd_r2.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_levels: number[] = [];\n  const paren_levels_stack:\
    \ number[] = [];\n  let paren_level = 0;\n  let paren_level_stack: number[] =\
    \ [];\n  let paren_level_stack_index = 0;\n  let paren_level_stack_max = 0;\n\
    \  let paren_level_stack_max_index = 0;\n  let paren_level_stack_max_value = 0;\n\
    \  let paren_level_stack_max_value_length = 0;\n  let paren_level_stack_max_value_length_index\
    \ = 0;\n  let paren_level_stack_max_value_length_value = 0;\n  let paren_level_stack_max_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_index = 0;\n  let\
    \ paren_level_stack_max_value_length_value_length_value = 0;\n  let paren_level_stack_max_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_index\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length_value_length_value_length_value_length\
    \ = 0;\n  let paren_level_stack_max_value_length\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeak2xvvo.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tconst paren_stack: string[] = [];\n\tlet paren_level = 0;\n\t\
    for (let i = 0; i < paren_string.length; i++) {\n\t\tconst char = paren_string[i];\n\
    \t\tif (char === '(') {\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t} else if (char === ')') {\n\t\t\tconst paren_level = paren_stack.pop();\n\
    \t\t\tif (paren_level > 0) {\n\t\t\t\tparen_level--;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp407foypu.ts(10,21): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmp407foypu.ts(14,8):\
    \ error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n\
    ../../../../../tmp/tmp407foypu.ts(15,5): error TS2588: Cannot assign to 'paren_level'\
    \ because it is a constant.\n../../../../../tmp/tmp407foypu.ts(19,2): error TS2322:\
    \ Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not\
    \ assignable to type 'number'.\n"
  timestamp: 1660014326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(char);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      paren_level.push(paren_level[paren_stack.length - 1] + 1);\n          \
    \  paren_stack.pop();\n        }\n    }\n    return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  1,\n  0,\n  1,\n  1,\n  0,\n  0,\n  0,\n  2,\n  1,\n  1,\n  0,\n  1,\n  0,\n\
    \  0,\n  0,\n  2,\n  1,\n  0,\n  1,\n  0,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr9e4zupn.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr9e4zupn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 1, 0, 1, 1, 0, 0,\n    0, 2, 1, 1, 0, 1, 0, 0,\n    0, 2, 1, 0, 1, 0, 1,\
    \ 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660014326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet level = 0;\n\tlet paren_stack: string[] = [];\n\tlet paren_level:\
    \ number[] = [];\n\tfor (let i = 0; i < paren_string.length; i++) {\n\t\tlet c\
    \ = paren_string[i];\n\t\tif (c == '(') {\n\t\t\tparen_stack.push(c);\n\t\t\t\
    paren_level.push(level);\n\t\t} else if (c == ')') {\n\t\t\tlet level = paren_level.pop();\n\
    \t\t\tif (level > 0) {\n\t\t\t\tparen_stack.push(c);\n\t\t\t\tparen_level.push(level);\n\
    \t\t\t} else {\n\t\t\t\tlet index = paren_stack.lastIndexOf(')');\n\t\t\t\tlet\
    \ paren_str = paren_stack.slice(index + 1);\n\t\t\t\tlet paren_level = paren_level.pop();\n\
    \t\t\t\tlet max_level = paren_level;\n\t\t\t\tfor (let j = 0; j < paren_level;\
    \ j++) {\n\t\t\t\t\tmax_level = max_level[j];\n\t\t\t\t}\n\t\t\t\tfor (let j =\
    \ 0; j < max_level; j++) {\n\t\t\t\t\tparen_level.push(j + 1);\n\t\t\t\t}\n\t\t\
    \t\tparen_level.push(level);\n\t\t\t\tparen_stack.splice(index, 1);\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjnd3d9m.ts(21,23): error TS2448: Block-scoped variable
    ''paren_level'' used before its declaration.

    '
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_levels.push(paren_level);\n            if (paren_level_count\
    \ > paren_level_max) {\n                paren_level_max = paren_level_count;\n\
    \            }\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            if (paren_level_count < 0) {\n                throw new Error('Unbalanced\
    \ parenthesis');\n            }\n            if (paren_level_count > paren_level_max_count)\
    \ {\n                paren_level_max_count = paren_level_count;\n            }\n\
    \        }\n    }\n    return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8kxxqrfm.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8kxxqrfm.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    const level = 0;\n    let\
    \ paren_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n    \
    \    const char = paren_string[i];\n        if (char === '(') {\n            paren_count\
    \ += 1;\n        } else if (char === ')') {\n            paren_count -= 1;\n \
    \           if (paren_count === 0) {\n                levels.push(level);\n  \
    \              level = 0;\n            }\n        } else {\n            level\
    \ += 1;\n        }\n    }\n    return levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpli521f8g.ts(16,17): error TS2588: Cannot assign to
    ''level'' because it is a constant.

    ../../../../../tmp/tmpli521f8g.ts(19,13): error TS2588: Cannot assign to ''level''
    because it is a constant.

    '
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_count: number[] = [];\n    let paren_level_index\
    \ = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index = 0;\n   \
    \ let paren_level_max_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(char);\n            paren_level_max_count++;\n \
    \           paren_level[paren_level_index] = paren_level_max_count;\n        \
    \    paren_level_count[paren_level_index] = 0;\n            paren_level_index++;\n\
    \        } else if (char === ')') {\n            paren_level_count[paren_level[paren_level_max_index]]\
    \ --;\n            if (paren_level_count[paren_level[paren_level_max_index]] ===\
    \ 0) {\n                paren_level_max_count--;\n                paren_level_max_index--;\n\
    \            }\n            paren_level_count[paren_level[paren_level_max_index]]\
    \ ++;\n            paren_level_index--;\n        }\n    }\n    return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  12,\n\
    \  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0weikmp8.js:36:12)\n    at Object.<anonymous> (/tmp/tmp0weikmp8.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 8, 12, 10\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: string[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            paren_stack.push(paren_string[i]);\n            paren_level++;\n\
    \        } else if (paren_string[i] === \")\") {\n            paren_level--;\n\
    \            if (paren_level === 0) {\n                paren_stack.shift();\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpq9mz_zg4.ts(18,5): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \        levels.push(level);\n        } else if (c == ')') {\n            paren_count--;\n\
    \            level = levels.pop();\n        } else {\n            level++;\n \
    \       }\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptbr5cqct.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmptbr5cqct.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let level = 0;\n    let paren_stack: string[] = [];\n    for\
    \ (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(char);\n        } else\
    \ if (char === ')') {\n            level--;\n            if (level < 0) {\n  \
    \              throw Error(`Invalid paren level: ${level}`);\n            }\n\
    \            paren_stack.pop();\n        } else {\n            level++;\n    \
    \    }\n    }\n    return paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpxxmr42nq.ts(21,5): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.length > max_level) {\n            max_level\
    \ = group.length;\n        }\n    }\n    const levels = new Array(max_level +\
    \ 1);\n    for (let i = 0; i < levels.length; i++) {\n        levels[i] = 0;\n\
    \    }\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        for (let j = 0; j < group.length; j++) {\n            if (group[j] ===\
    \ '(') {\n                levels[group.length - 1]++;\n            } else if (group[j]\
    \ === ')') {\n                levels[group.length - 1]--;\n            }\n   \
    \     }\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpebhpijud.ts(10,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_count++;\n\
    \        } else if (char === ')') {\n            paren_count--;\n        } else\
    \ if (char === ' ' && paren_count === 0) {\n            levels.push(level);\n\
    \            level = 0;\n        } else {\n            level++;\n        }\n \
    \   }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpi2lwaabn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpi2lwaabn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(')\
    \ {\n            level++;\n        } else if (paren_string[i] === ')') {\n   \
    \         level--;\n        }\n        if (level < 0) {\n            levels.push(level);\n\
    \        }\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpempx02z2.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpempx02z2.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let\
    \ paren_nesting = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const\
    \ char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n      paren_nesting++;\n    } else if (char === ')') {\n\
    \      paren_level--;\n      paren_nesting--;\n      if (paren_nesting < 0) {\n\
    \        throw new Error(`Invalid parenthesis nesting level: ${paren_nesting}`);\n\
    \      }\n    } else if (char === ' ') {\n      if (paren_stack.length > 0) {\n\
    \        const last_level = paren_stack.pop();\n        if (last_level > paren_level)\
    \ {\n          throw new Error(`Invalid parenthesis nesting level: ${last_level}\
    \ > ${paren_level}`);\n        }\n      }\n    }\n  }\n  if (paren_stack.length\
    \ > 0) {\n    throw new Error(`Invalid parenthesis nesting level: ${paren_stack.length}`);\n\
    \  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwu_06v99.js:26\n                    throw new Error(\"Invalid parenthesis\
    \ nesting level: \" + last_level + \" > \" + paren_level);\n                 \
    \   ^\n\nError: Invalid parenthesis nesting level: 1 > 0\n    at parse_nested_parens\
    \ (/tmp/tmpwu_06v99.js:26:27)\n    at test (/tmp/tmpwu_06v99.js:39:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpwu_06v99.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n  \
    \      const group = groups[i];\n        if (group === \"(\") {\n            level++;\n\
    \        } else if (group === \")\") {\n            level--;\n        }\n    \
    \    if (level > max_level) {\n            max_level = level;\n        }\n   \
    \ }\n    const result = [];\n    for (let i = 0; i < groups.length; i++) {\n \
    \       const group = groups[i];\n        if (group === \"(\") {\n           \
    \ result.push(max_level);\n        } else if (group === \")\") {\n           \
    \ result.push(-max_level);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph1qnih31.ts(16,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    const paren_level_max: number[] = [];\n    let paren_level_index\
    \ = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_index2 = 0;\n\
    \    let paren_level_max_index3 = 0;\n    let paren_level_max_index4 = 0;\n  \
    \  let paren_level_max_index5 = 0;\n    let paren_level_max_index6 = 0;\n    let\
    \ paren_level_max_index7 = 0;\n    let paren_level_max_index8 = 0;\n    let paren_level_max_index9\
    \ = 0;\n    let paren_level_max_index10 = 0;\n    let paren_level_max_index11\
    \ = 0;\n    let paren_level_max_index12 = 0;\n    let paren_level_max_index13\
    \ = 0;\n    let paren_level_max_index14 = 0;\n    let paren_level_max_index15\
    \ = 0;\n    let paren_level_max_index16 = 0;\n    let paren_level_max_index17\
    \ = 0;\n    let paren_level_max_index18 = 0;\n    let paren_level_max_index19\
    \ = 0;\n    let paren_level_max_index20 = 0;\n    let paren_level_max_index21\
    \ = 0;\n    let paren_level_max_index22 = 0;\n    let paren_level_max_index23\
    \ = 0;\n    let paren_level_max_index24 = 0;\n    let paren_level_max_index25\
    \ = 0;\n    let paren_level_max_index26 = 0;\n    let paren_level_max_index27\
    \ = 0;\n    let paren_level_max_index28 = 0;\n    let paren_level_max_index29\
    \ = 0;\n    let paren_level_max_index30 = 0;\n    let paren_level_max_index31\
    \ = 0;\n    let paren_level_max_index32 = 0;\n    let paren_level_max_index33\
    \ = 0;\n    let paren_level_max_index34 = 0;\n    let paren_level_max_index35\
    \ = 0;\n    let paren_level_max_index36 = 0;\n    let paren_level_max_index37\
    \ = 0;\n    let paren_level_max_index38 = 0;\n    let paren_level_max_index39\
    \ = 0;\n    let paren_level_max_index40 = 0;\n    let paren_level_max_index41\
    \ = 0;\n    let paren_level_max_index42 = 0;\n    let paren_level_max_index43\
    \ = 0;\n    let paren_level_max_index44 = 0;\n    let paren_level_max_index45\
    \ = 0;\n    let paren_level_max_index46 = 0;\n    let paren_level_max_index47\
    \ = 0;\n    let paren_level_max_index48 = 0;\n    let paren_level_max_index49\
    \ = 0;\n    let paren_level_max_index50 = 0;\n    let paren_level_max_index51\
    \ = 0;\n    let paren_level_max_index52 = 0;\n    let paren_level_max_index53\
    \ = 0;\n    let paren_level_max_index\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprdkpelhz.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(/\\s+/);\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        if (group.length > max_level) {\n            max_level = group.length;\n\
    \        }\n    }\n    const result = [];\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        const level = group.length;\n\
    \        if (level > max_level) {\n            result.push(level);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ffqv8x1.ts(10,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    '
  timestamp: 1660014327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n\tlet paren_stack: number[] = [];\n\tlet paren_level = 0;\n\tfor\
    \ (let i = 0; i < paren_string.length; i++) {\n\t\tlet c = paren_string[i];\n\t\
    \tif (c == '(') {\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t} else if (c == ')') {\n\t\t\tparen_level--;\n\t\t\tif (paren_stack.length\
    \ == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tparen_level = 0;\n\t\t\
    }\n\t}\n\treturn paren_stack;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuhgg7vjp.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuhgg7vjp.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(/\\s+/);\n    const max_level\
    \ = 0;\n    const max_level_group = 0;\n    const max_level_group_len = 0;\n \
    \   for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        const group_len = group.length;\n        if (group_len > max_level_group_len)\
    \ {\n            max_level_group_len = group_len;\n            max_level_group\
    \ = i;\n        }\n        if (group_len > max_level) {\n            max_level\
    \ = group_len;\n        }\n    }\n    const result = [];\n    for (let i = 0;\
    \ i < groups.length; i++) {\n        const group = groups[i];\n        const group_len\
    \ = group.length;\n        const level_len = max_level_group_len - group_len;\n\
    \        for (let j = 0; j < level_len; j++) {\n            result.push(max_level_group);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpls2xcfc2.ts(13,13): error TS2588: Cannot assign to
    ''max_level_group_len'' because it is a constant.

    ../../../../../tmp/tmpls2xcfc2.ts(14,13): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    ../../../../../tmp/tmpls2xcfc2.ts(17,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[]\
    \ = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level_count++;\n\
    \        } else if (char === ')') {\n            paren_level_count--;\n      \
    \      if (paren_level_count === 0) {\n                paren_level.push(paren_stack.length);\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n\
    \  7,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpdselty16.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdselty16.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 7,\
    \ 12 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_nesting = 0;\n    let paren_level_index = 0;\n    for (let i =\
    \ 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_levels[paren_level_index] = paren_nesting;\n\
    \            paren_level_index++;\n            paren_nesting++;\n        } else\
    \ if (char === ')') {\n            paren_nesting--;\n            paren_level_index--;\n\
    \        }\n    }\n    return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3fxrfxzl.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3fxrfxzl.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_level\
    \ = 0;\n    let paren_char = '';\n    let paren_char_index = 0;\n    let paren_char_length\
    \ = 0;\n    let paren_char_next = 0;\n    let paren_char_prev = 0;\n    let paren_char_prev_prev\
    \ = 0;\n    let paren_char_next_next = 0;\n    let paren_char_next_prev = 0;\n\
    \    let paren_char_next_next_next = 0;\n    let paren_char_next_next_prev = 0;\n\
    \    let paren_char_next_next_next_prev = 0;\n    let paren_char_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_prev = 0;\n    let paren_char_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_prev = 0;\n    let\
    \ paren_char_next_next_next_next_next_next_next_next_prev = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    let paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqqmzonw2.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    let level = 0;\n    for (const group of groups) {\n    \
    \    if (group === \"(\") {\n            level++;\n        } else if (group ===\
    \ \")\") {\n            level--;\n        }\n        if (level > max_level) {\n\
    \            max_level = level;\n        }\n    }\n    return max_level;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_jpr1mgz.ts(15,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmp_jpr1mgz.ts(18,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        if (group === \"(\") {\n            max_level++;\n        } else if (group\
    \ === \")\") {\n            max_level--;\n        }\n    }\n    const result =\
    \ [];\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n\
    \        if (group === \"(\") {\n            result.push(i);\n        } else if\
    \ (group === \")\") {\n            result.pop();\n        }\n    }\n    const\
    \ result_array = [];\n    for (let i = 0; i < result.length; i++) {\n        result_array.push(result[(i\
    \ + 1) % result.length]);\n    }\n    return result_array;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyktacnc7.ts(10,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmpyktacnc7.ts(12,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const\
    \ group = groups[i];\n        if (group.startsWith(\"(\")) {\n            max_level\
    \ = Math.max(max_level, parse_nested_parens(group));\n        } else if (group.startsWith(\"\
    )\")) {\n            max_level = Math.max(max_level, parse_nested_parens(group)\
    \ + 1);\n        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9k9ii4a2.ts(9,19): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmp9k9ii4a2.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmp9k9ii4a2.ts(10,45): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp9k9ii4a2.ts(11,26): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmp9k9ii4a2.ts(12,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmp9k9ii4a2.ts(12,45): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''1''.

    ../../../../../tmp/tmp9k9ii4a2.ts(15,5): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.split(\" \");\n    const max_level\
    \ = 0;\n    const max_level_group = 0;\n    for (let i = 0; i < groups.length;\
    \ i++) {\n        const group = groups[i];\n        const group_level = group.split(\"\
    (\").length - 1;\n        if (group_level > max_level) {\n            max_level\
    \ = group_level;\n            max_level_group = i;\n        }\n    }\n    return\
    \ [max_level_group, max_level];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_mdp57e9.ts(12,13): error TS2588: Cannot assign to
    ''max_level'' because it is a constant.

    ../../../../../tmp/tmp_mdp57e9.ts(13,13): error TS2588: Cannot assign to ''max_level_group''
    because it is a constant.

    '
  timestamp: 1660014328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_levels: number[] = [];\n    let paren_level = 0;\n\
    \    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count\
    \ = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_level_count++;\n            if (paren_level_count\
    \ > paren_level_max) {\n                paren_level_max = paren_level_count;\n\
    \                paren_level_max_index = i;\n            }\n        } else if\
    \ (paren_string[i] === ')') {\n            paren_level_count--;\n            if\
    \ (paren_level_count === 0) {\n                paren_levels.push(paren_level_max_index);\n\
    \                paren_level_max_count++;\n                if (paren_level_max_count\
    \ > paren_level_max_count) {\n                    paren_level_max_count = paren_level_max_count;\n\
    \                    paren_level_max_index = i;\n                }\n         \
    \   }\n        }\n    }\n    return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn3t1snta.ts(9,9): error TS2451: Cannot redeclare
    block-scoped variable ''paren_level_max_count''.

    ../../../../../tmp/tmpn3t1snta.ts(11,9): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_max_count''.

    '
  timestamp: 1660014328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_level\
    \ = 0;\n    let paren_char = '';\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \        } else if (char === ' ') {\n            if (paren_level === 0) {\n  \
    \              levels.push(level);\n                level = 0;\n            }\
    \ else {\n                level++;\n            }\n        } else {\n        \
    \    paren_char = char;\n        }\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpkrp5bo9h.js:35:12)\n    at Object.<anonymous> (/tmp/tmpkrp5bo9h.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014329
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_level = 0;\n    let paren_stack: string[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n\
    \        if (char === '(') {\n            paren_stack.push(char);\n          \
    \  paren_level++;\n        } else if (char === ')') {\n            paren_level--;\n\
    \            if (paren_level === 0) {\n                paren_stack.shift();\n\
    \            }\n        } else if (char === ' ') {\n            if (paren_stack.length\
    \ > 0) {\n                paren_stack.shift();\n            }\n        }\n   \
    \ }\n    return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpbguqhc9_.ts(23,5): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c =\
    \ paren_string[i];\n        if (c == '(') {\n            paren_count++;\n    \
    \        levels.push(level);\n        } else if (c == ')') {\n            paren_count--;\n\
    \            level = levels.pop();\n        } else {\n            level++;\n \
    \       }\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptbr5cqct.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmptbr5cqct.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014313
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const groups = paren_string.trim().split(/\\s+/);\n    const\
    \ max_level = 0;\n    const max_level_groups = groups.map(group => {\n       \
    \ const level = getMaxLevel(group);\n        if (level > max_level) {\n      \
    \      max_level = level;\n        }\n        return level;\n    });\n    return\
    \ max_level_groups;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvj8_42di.ts(8,23): error TS2552: Cannot find name
    ''getMaxLevel''. Did you mean ''max_level''?

    ../../../../../tmp/tmpvj8_42di.ts(10,13): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    '
  timestamp: 1660014328
