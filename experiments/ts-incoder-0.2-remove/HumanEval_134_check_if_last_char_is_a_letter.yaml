name: HumanEval_134_check_if_last_char_is_a_letter
language: ts
prompt: "//Create a function that returns True if the last character\n// of a given\
  \ string is an alphabetical character and is not\n// a part of a word, and False\
  \ otherwise.\n// Note: \"word\" is a group of characters separated by space.\n//\
  \ Examples:\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"\
  apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"\
  eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"\
  Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n\
  \  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee\
  \ e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"\
  apple pi e \"),false);\n}\n\ntest();"
completions: ["    const lastChar = txt.slice(-1);\n    return lastChar === ' ' ||\
    \ lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n}\n", "   \
    \ let lastChar = txt.slice(-1);\n    let lastCharIsLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <=\
    \ 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "  const last_char\
    \ = txt.charAt(txt.length - 1);\n  return last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n\
    }\n", "    const last_char = txt.slice(-1)[0];\n    return last_char === ' ' ||\
    \ last_char === '-' || last_char === '_';\n}\n", "    return txt.charAt(txt.length\
    \ - 1) !== ' ' &&\n        txt.charAt(txt.length - 1) !== '.' &&\n        txt.charAt(txt.length\
    \ - 1) !== '?' &&\n        txt.charAt(txt.length - 1) !== '!' &&\n        txt.charAt(txt.length\
    \ - 1) !== ';' &&\n        txt.charAt(txt.length - 1) !== ':' &&\n        txt.charAt(txt.length\
    \ - 1) !== '-' &&\n        txt.charAt(txt.length - 1) !== '_' &&\n        txt.charAt(txt.length\
    \ - 1) !== '*' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '$' &&\n        txt.charAt(txt.length - 1) !== '%' &&\n        txt.charAt(txt.length\
    \ - 1) !== '&' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt.length - 1) !== '+' &&\n        txt.charAt(txt.length\
    \ - 1) !== '+' &&\n        txt.charAt(txt", "  let lastChar = txt.charAt(txt.length-1);\n\
    \  let isLetter = lastChar >= 'a' && lastChar <= 'z';\n  let isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n  return isLetter && !isNotWord;\n}\n", "    const\
    \ last_char = txt.slice(-1);\n    const is_letter = last_char.match(/[a-z]/i);\n\
    \    const is_non_word = last_char.match(/[^a-z]/i);\n    return is_letter &&\
    \ !is_non_word;\n}\n", "  let lastChar = txt.substr(txt.length - 1, 1);\n  let\
    \ isLetter = lastChar.match(/[a-z]/i);\n  return !isLetter;\n}\n", "  const last_char\
    \ = txt.slice(-1)[0];\n  const is_letter = last_char.match(/[a-z]/i);\n  return\
    \ !is_letter;\n}\n", "    let last_char = txt.charAt(txt.length - 1);\n    let\
    \ is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    if\
    \ (txt.length <= 0) {\n        return false;\n    }\n    let last_char = txt.charAt(txt.length\
    \ - 1);\n    let is_letter = last_char.match(/[a-z]/i);\n    if (is_letter ===\
    \ null) {\n        return false;\n    }\n    let is_non_word = last_char.match(/[\\\
    s\\W]/i);\n    if (is_non_word !== null) {\n        return false;\n    }\n   \
    \ return true;\n}\n", "    let last_char = txt.charAt(txt.length - 1);\n    let\
    \ is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    let\
    \ lastChar = txt.slice(-1);\n    return lastChar === ' ' || lastChar === '\\n'\
    \ || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar\
    \ === '\\a';\n}\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n    let\
    \ isLetter = lastChar.match(/[a-z]/i);\n    let isNotWord = lastChar.match(/[A-Z]/i);\n\
    \    return isLetter && !isNotWord;\n}\n", "  const lastChar = txt.slice(-1);\n\
    \  return lastChar === ' ' || lastChar === '-' || lastChar === '_';\n}\n", " \
    \   let lastChar = txt.substr(txt.length - 1);\n    let lastCharIsLetter = lastChar.match(/[a-z]/);\n\
    \    let lastCharIsNotWord = lastChar.match(/[^a-z]/);\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    return txt.charAt(txt.length-1) != \" \"\
    \ &&\n        txt.charAt(txt.length-1) != \"-\" &&\n        txt.charAt(txt.length-1)\
    \ != \".\" &&\n        txt.charAt(txt.length-1) != \"!\" &&\n        txt.charAt(txt.length-1)\
    \ != \"?\" &&\n        txt.charAt(txt.length-1) != \"@\" &&\n        txt.charAt(txt.length-1)\
    \ != \"$\" &&\n        txt.charAt(txt.length-1) != \"#\" &&\n        txt.charAt(txt.length-1)\
    \ != \"&\" &&\n        txt.charAt(txt.length-1) != \"*\" &&\n        txt.charAt(txt.length-1)\
    \ != \"^\" &&\n        txt.charAt(txt.length-1) != \"*\" &&\n        txt.charAt(txt.length-1)\
    \ != \"(\" &&\n        txt.charAt(txt.length-1) != \")\" &&\n        txt.charAt(txt.length-1)\
    \ != \"[\" &&\n        txt.charAt(txt.length-1) != \"]\" &&\n        txt.charAt(txt.length-1)\
    \ != \"|\" &&\n        txt.charAt(txt.length-1) != \"~\" &&\n        txt.charAt(txt.length-1)\
    \ != \"_\" &&\n        txt.charAt(txt.length-1) != \"`\" &&\n        txt.charAt(txt.length-1)\
    \ != \"~\" &&\n        txt.charAt(txt.length-1) != \"-\" &&\n        txt.charAt(txt.length-1)\
    \ != \"=\";\n}\n", "    return txt.slice(-1)[0] === \" \" || txt.slice(-1)[0]\
    \ === \".\" || txt.slice(-1)[0] === \"?\" || txt.slice(-1)[0] === \"!\" || txt.slice(-1)[0]\
    \ === \"-\" || txt.slice(-1)[0] === \"_\" || txt.slice(-1)[0] === \"&\" || txt.slice(-1)[0]\
    \ === \"#\" || txt.slice(-1)[0] === \"@\" || txt.slice(-1)[0] === \"$\" || txt.slice(-1)[0]\
    \ === \"%\" || txt.slice(-1)[0] === \"^\" || txt.slice(-1)[0] === \"&\" || txt.slice(-1)[0]\
    \ === \"*\" || txt.slice(-1)[0] === \"(\" || txt.slice(-1)[0] === \")\" || txt.slice(-1)[0]\
    \ === \"=\" || txt.slice(-1)[0] === \"|\" || txt.slice(-1)[0] === \",\" || txt.slice(-1)[0]\
    \ === \"<\" || txt.slice(-1)[0] === \">\" || txt.slice(-1)[0] === \"{\" || txt.slice(-1)[0]\
    \ === \"}\" || txt.slice(-1)[0] === \":\" || txt.slice(-1)[0] === \"\\\"\" ||\
    \ txt.slice(-1)[0] === \"'\" || txt.slice(-1)[0] === \"<\" || txt.slice(-1)[0]\
    \ === \">\" || txt.slice(-1)[0] === \"~\" || txt.slice(-1)[0] === \"`\" || txt.slice(-1)[0]\
    \ === \"{\" || txt.slice(-1)[0] === \"}\" || txt.slice(-1)[0] === \":\" || txt.slice(-1)[0]\
    \ === \"\\\"\" || txt.slice(-1)[0] === \"'\" || txt.slice(-1)[0] === \"<\" ||\
    \ txt.slice(-1)[0] === \">\" || txt.slice(-1)[0] === \"~\" || txt.slice(-1)[0]\
    \ === \"`\" || txt.slice(-1)[0] === \"{\" || txt.slice(-1)[0] === \"}\" || txt.slice(-1)[0]\
    \ === \":\" || txt.slice(-1)[0] === \"\\\"\" || txt.slice(-1)[0] === \"'\" ||\
    \ txt.slice(-1)[0] === \"<\" || txt.slice(-1)[0] === \">\" || txt.slice(-1)[0]\
    \ === \"~\" || txt.slice(-1)[0] === \"`\" || txt.slice(-1)[0] === \"{\" || txt.slice(-1)[0]\
    \ === \"}\" || txt.slice(-1)[0] === \":\" || txt.slice(-1)[0] === \"\\\"\" ||\
    \ txt.slice(-1)[0] === \"'\" || txt.slice(-1)[0] === \"<\" || txt.slice(-1)[0]\
    \ === \">\" || txt.slice(-1)[0] === \"~\" || txt.slice(-1)[0] === \"`\" || txt.slice(-1)[0]\
    \ === \"{\" || txt.slice(-1)[0] === \"}\" || txt.slice(-1)[0] === \":\" || txt.slice(-1)[0]\
    \ === \"\\\"\" || txt.slice(-1)[0] === \"'\" || txt.slice(-1)[0] === \"<\" ||\
    \ txt.slice(-1)[0] === \">", "    let last_char = txt.charAt(txt.length - 1);\n\
    \    return last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n}\n", " \
    \   return txt[txt.length - 1] === \" \" || txt[txt.length - 1] === \"-\" || txt[txt.length\
    \ - 1] === \"_\" || txt[txt.length - 1] === \"*\" || txt[txt.length - 1] === \"\
    ?\" || txt[txt.length - 1] === \"!\" || txt[txt.length - 1] === \"#\" || txt[txt.length\
    \ - 1] === \"$\" || txt[txt.length - 1] === \"%\" || txt[txt.length - 1] === \"\
    &\" || txt[txt.length - 1] === \"'\" || txt[txt.length - 1] === \"(\" || txt[txt.length\
    \ - 1] === \")\" || txt[txt.length - 1] === \"+\" || txt[txt.length - 1] === \"\
    =\" || txt[txt.length - 1] === \"/\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \":\" || txt[txt.length - 1] === \";\" || txt[txt.length - 1] === \"\
    ,\" || txt[txt.length - 1] === \"<\" || txt[txt.length - 1] === \">\" || txt[txt.length\
    \ - 1] === \".\" || txt[txt.length - 1] === \"?\" || txt[txt.length - 1] === \"\
    !\" || txt[txt.length - 1] === \"#\" || txt[txt.length - 1] === \"$\" || txt[txt.length\
    \ - 1] === \"%\" || txt[txt.length - 1] === \"&\" || txt[txt.length - 1] === \"\
    '\" || txt[txt.length - 1] === \"(\" || txt[txt.length - 1] === \")\" || txt[txt.length\
    \ - 1] === \"+\" || txt[txt.length - 1] === \"=\" || txt[txt.length - 1] === \"\
    /\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \":\" || txt[txt.length\
    \ - 1] === \";\" || txt[txt.length - 1] === \",\" || txt[txt.length - 1] === \"\
    <\" || txt[txt.length - 1] === \">\" || txt[txt.length - 1] === \".\" || txt[txt.length\
    \ - 1] === \"?\" || txt[txt.length - 1] === \"!\" || txt[txt.length - 1] === \"\
    #\" || txt[txt.length - 1] === \"$\" || txt[txt.length - 1] === \"%\" || txt[txt.length\
    \ - 1] === \"&\" || txt[txt.length - 1] === \"'\" || txt[txt.length - 1] === \"\
    (\" || txt[txt.length - 1] === \")\" || txt[txt.length - 1] === \"+\" || txt[txt.length\
    \ - 1] === \"=\" || txt[txt.length - 1] === \"/\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \":\" || txt[txt.length - 1] === \";\" || txt[txt.length\
    \ - 1] === \",\" || txt[txt.length - 1] === \"<\" || txt[txt.length - 1] === \"\
    >\" || txt[txt.length - 1] === \".\" || txt[txt.length - 1] === \"?\" || txt[txt.length\
    \ - 1] === \"!\" || txt[txt.length - 1] === \"#", "    let last_char = txt.slice(-1);\n\
    \    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "    let last_char = txt.slice(-1);\n    let is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "  return txt[txt.length - 1] === \" \" || txt[txt.length\
    \ - 1] === \".\" || txt[txt.length - 1] === \"?\" || txt[txt.length - 1] === \"\
    !\" || txt[txt.length - 1] === \"-\" || txt[txt.length - 1] === \"_\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"\\\\\" || txt[txt.length - 1] ===\
    \ \"^\" || txt[txt.length - 1] === \"&\" || txt[txt.length - 1] === \"*\" || txt[txt.length\
    \ - 1] === \"(\" || txt[txt.length - 1] === \")\" || txt[txt.length - 1] === \"\
    +\" || txt[txt.length - 1] === \"=\";\n}\n", "    let last_char = txt.slice(-1);\n\
    \    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "    return txt.charAt(txt.length-1) != \" \" &&\n           txt.charAt(txt.length-1)\
    \ != \"-\" &&\n           txt.charAt(txt.length-1) != \".\" &&\n           txt.charAt(txt.length-1)\
    \ != \"!\" &&\n           txt.charAt(txt.length-1) != \"?\" &&\n           txt.charAt(txt.length-1)\
    \ != \"@\" &&\n           txt.charAt(txt.length-1) != \"$\" &&\n           txt.charAt(txt.length-1)\
    \ != \"#\" &&\n           txt.charAt(txt.length-1) != \"&\" &&\n           txt.charAt(txt.length-1)\
    \ != \"*\" &&\n           txt.charAt(txt.length-1) != \"(\" &&\n           txt.charAt(txt.length-1)\
    \ != \")\" &&\n           txt.charAt(txt.length-1) != \"[\" &&\n           txt.charAt(txt.length-1)\
    \ != \"]\" &&\n           txt.charAt(txt.length-1) != \"|\" &&\n           txt.charAt(txt.length-1)\
    \ != \"~\" &&\n           txt.charAt(txt.length-1) != \"_\" &&\n           txt.charAt(txt.length-1)\
    \ != \"`\" &&\n           txt.charAt(txt.length-1) != \"~\" &&\n           txt.charAt(txt.length-1)\
    \ != \"-\" &&\n           txt.charAt(txt.length-1) != \"=\";\n}\n", "  let lastChar\
    \ = txt.charAt(txt.length - 1);\n  return lastChar === ' ' || lastChar === '\\\
    n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === ' ';\n}\n", " \
    \ return txt.charAt(txt.length-1) != ' ';\n}", "    let lastChar = txt.charAt(txt.length\
    \ - 1);\n    return lastChar === ' ' || lastChar === '\\n' || lastChar === '\\\
    t' || lastChar === '\\r' || lastChar === ' ';\n}\n", "    let lastChar = txt.charAt(txt.length\
    \ - 1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n    let\
    \ lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    const last_char = txt.charAt(txt.length -\
    \ 1);\n    return last_char === \" \" || last_char === \"-\" || last_char ===\
    \ \"_\" || last_char === \"?\" || last_char === \"!\" || last_char === \"#\" ||\
    \ last_char === \"$\" || last_char === \"%\" || last_char === \"&\" || last_char\
    \ === \"*\" || last_char === \"^\" || last_char === \".\" || last_char === \"\
    (\" || last_char === \")\" || last_char === \"|\" || last_char === \",\" || last_char\
    \ === \"~\" || last_char === \"<\" || last_char === \">\" || last_char === \"\
    =\" || last_char === \"{\" || last_char === \"}\" || last_char === \"[\" || last_char\
    \ === \"]\" || last_char === \"\\\\\" || last_char === \"`\" || last_char ===\
    \ \"|\" || last_char === \"\\\"\" || last_char === \"'\" || last_char === \"<\"\
    \ || last_char === \">\" || last_char === \"?\" || last_char === \"!\" || last_char\
    \ === \"#\" || last_char === \"$\" || last_char === \"%\" || last_char === \"\
    &\" || last_char === \"*\" || last_char === \"^\" || last_char === \".\" || last_char\
    \ === \"(\" || last_char === \")\" || last_char === \"|\" || last_char === \"\
    ,\" || last_char === \"~\" || last_char === \"<\" || last_char === \">\" || last_char\
    \ === \"=\" || last_char === \"{\" || last_char === \"}\" || last_char === \"\
    [\" || last_char === \"]\" || last_char === \"\\\\\" || last_char === \"`\" ||\
    \ last_char === \"|\" || last_char === \"\\\"\" || last_char === \"'\" || last_char\
    \ === \"<\" || last_char === \">\" || last_char === \"?\" || last_char === \"\
    !\" || last_char === \"#\" || last_char === \"$\" || last_char === \"%\" || last_char\
    \ === \"&\" || last_char === \"*\" || last_char === \"^\" || last_char === \"\
    .\" || last_char === \"(\" || last_char === \")\" || last_char === \"|\" || last_char\
    \ === \",\" || last_char === \"~\" || last_char === \"<\" || last_char === \"\
    >\" || last_char === \"=\" || last_char === \"{\" || last_char === \"}\" || last_char\
    \ === \"[\" || last_char === \"]\" || last_char === \"\\\\\" || last_char ===\
    \ \"`\" || last_char === \"|\" || last_char === \"\\\"\" || last_char === \"'\"\
    \ || last_char === \"<\" || last_char === \">\" || last_char === \"?\" || last_char\
    \ === \"!\" || last_char === \"#\" || last_char === \"$\" || last_char === \"\
    %\" || last_char === \"&\" || last_char === \"*\" || last_char === \"^\" || last_char\
    \ === \".\" || last_char === \"(\" || last_char === \")\" || last_char === \"\
    |\" || last_char === \",\" || last_", "  const last_char = txt.slice(-1);\n  const\
    \ is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", "    let\
    \ lastChar = txt.substr(txt.length - 1);\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \    let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    let last_char = txt.charAt(txt.length-1);\n\
    \    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "    var lastChar = txt.charAt(txt.length - 1);\n    return lastChar >= 'a' && lastChar\
    \ <= 'z' && !is_part_of_word(txt);\n}\n", "  return txt.slice(-1) != \" \" &&\n\
    \    txt.slice(-1) != \"-\" &&\n    txt.slice(-1) != \"_\" &&\n    txt.slice(-1)\
    \ != \"*\" &&\n    txt.slice(-1) != \"?\" &&\n    txt.slice(-1) != \".\" &&\n\
    \    txt.slice(-1) != \"!\" &&\n    txt.slice(-1) != \"^\" &&\n    txt.slice(-1)\
    \ != \"&\" &&\n    txt.slice(-1) != \"|\" &&\n    txt.slice(-1) != \"~\" &&\n\
    \    txt.slice(-1) != \"`\" &&\n    txt.slice(-1) != \"(\" &&\n    txt.slice(-1)\
    \ != \")\" &&\n    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n\
    \    txt.slice(-1) != \"\\\"\"\n}\n", "    let lastChar = txt.slice(-1);\n   \
    \ let lastCharIsLetter = lastChar.match(/[a-z]/i);\n    let lastCharIsNotWord\
    \ = lastChar.match(/[^a-z]/i);\n    return lastCharIsLetter && !lastCharIsNotWord;\n\
    }\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n\
    \    return !isLetter;\n}\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n\
    \    let isLetter = lastChar.match(/[a-z]/i);\n    let isNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return isLetter && !isNotWord;\n}\n", "    let lastChar = txt.charAt(txt.length-1);\n\
    \    let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter && !lastCharIsWord;\n\
    }\n", "  const lastChar = txt.slice(-1)[0];\n  const isLetter = lastChar >= 'a'\
    \ && lastChar <= 'z';\n  return !isLetter && lastChar !== '_';\n}\n", "    let\
    \ lastChar = txt.charAt(txt.length-1);\n    let isLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    return !isLetter && lastChar != '_';\n}\n", "    var last_char\
    \ = txt.substr(txt.length - 1);\n    var last_char_is_a_letter = last_char.match(/[a-z]/i);\n\
    \    var last_char_is_not_a_word = last_char.match(/[^a-z]/i);\n    return last_char_is_a_letter\
    \ && !last_char_is_not_a_word;\n}\n</code>\n<|/ a tags=javascript,regex |>\n<|\
    \ a tags=javascript,regex |>\n<code>", "  let last_char = txt.slice(-1)[0];\n\
    \  let is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", " \
    \ const last_char = txt.slice(-1);\n  const last_char_is_a_letter = last_char.match(/[a-z]/i);\n\
    \  const last_char_is_not_a_word = last_char.match(/[^a-z]/i);\n  return last_char_is_a_letter\
    \ && !last_char_is_not_a_word;\n}\n", "    let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n    let isNotWord =\
    \ lastChar.match(/[^a-z]/i);\n    return isLetter && !isNotWord;\n}\n", "    const\
    \ last_char = txt.substr(txt.length - 1);\n    const last_char_lower = last_char.toLowerCase();\n\
    \    const last_char_upper = last_char.toUpperCase();\n    const last_char_lower\
    \ = last_char_lower.replace(/[^a-z]/gi, '');\n    const last_char_upper = last_char_upper.replace(/[^A-Z]/gi,\
    \ '');\n    const last_char_lower = last_char_lower.replace(/\\s+/gi, ' ');\n\
    \    const last_char_upper = last_char_upper.replace(/\\s+/gi, ' ');\n    const\
    \ last_char_lower = last_char_lower.replace(/\\s+/gi, ' ');\n    const last_char_upper\
    \ = last_char_upper.replace(/\\s+/gi, ' ');\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_lower === last_char_upper)\
    \ {\n        return false;\n    }\n    if (last_char_", "    let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 2);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 3);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 4);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 5);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 6);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 7);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 8);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 9);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 10);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 11);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 12);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 13);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 14);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 15);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 16);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 17);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 18);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 19);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 20);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 21);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 22);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 23);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 24);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(txt.length\
    \ - 1, 25);\n    }\n    if (lastChar == \" \") {\n        lastChar = txt.substr(",
  "    var last_char = txt.charAt(txt.length - 1);\n    var is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    let lastChar = txt.charAt(txt.length - 1);\n\
    \    return lastChar === ' ' || lastChar === '-' || lastChar === '_' || lastChar\
    \ === '/';\n}\n", "    const last_char = txt.slice(-1);\n    const is_letter =\
    \ last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    let last_char\
    \ = txt.slice(-1);\n    let is_letter = last_char.match(/[a-z]/i);\n    return\
    \ !is_letter;\n}\n", "    let lastChar = txt.charAt(txt.length - 1);\n    let\
    \ isLetter = lastChar.match(/[a-z]/i);\n    return !isLetter;\n}\n", "  const\
    \ last_char = txt.charAt(txt.length - 1);\n  const is_letter = last_char.match(/[a-z]/i);\n\
    \  return !is_letter;\n}\n", "  const last_char = txt.slice(-1);\n  const is_letter\
    \ = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <= 'Z';\n    return\
    \ isLetter && !isNotWord;\n}\n", "    let lastChar = txt.charAt(txt.length - 1);\n\
    \    let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n\
    }\n", "    const last_char = txt.slice(-1);\n    const last_char_lower = last_char.toLowerCase();\n\
    \    return last_char_lower === last_char || last_char_lower === 'w';\n}\n", " \
    \   return txt.charAt(txt.length-1) != \" \" &&\n        txt.charAt(txt.length-1)\
    \ != \"-\" &&\n        txt.charAt(txt.length-1) != \".\" &&\n        txt.charAt(txt.length-1)\
    \ != \"!\" &&\n        txt.charAt(txt.length-1) != \"?\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xBF\" &&\n        txt.charAt(txt.length-1) != \"\xA1\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xAB\" &&\n        txt.charAt(txt.length-1) != \"\xBB\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA9\" &&\n        txt.charAt(txt.length-1) != \"\xAE\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA4\" &&\n        txt.charAt(txt.length-1) != \"\xA3\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA2\" &&\n        txt.charAt(txt.length-1) != \"\xA3\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA4\" &&\n        txt.charAt(txt.length-1) != \"\xA5\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA6\" &&\n        txt.charAt(txt.length-1) != \"\xA7\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xA8\" &&\n        txt.charAt(txt.length-1) != \"\xA9\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xAA\" &&\n        txt.charAt(txt.length-1) != \"\xAB\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xAC\" &&\n        txt.charAt(txt.length-1) != \"\xAD\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xAE\" &&\n        txt.charAt(txt.length-1) != \"\xAF\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xB0\" &&\n        txt.charAt(txt.length-1) != \"\xB1\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xB2\" &&\n        txt.charAt(txt.length-1) != \"\xB3\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xB4\" &&\n        txt.charAt(txt.length-1) != \"\xB5\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xB6\" &&\n        txt.charAt(txt.length-1) != \"\xB7\" &&\n        txt.charAt(txt.length-1)\
    \ != \"\xB8\" &&\n        txt.charAt(txt.length-1) != \"\xB9\" &&\n        txt.",
  "    let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar >=\
    \ 'a' && lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <=\
    \ 'Z';\n    return isLetter && !isNotWord;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much! This was very helpful.\n<|/ c |>\n<| a tags=javascript,regex |>\n<code>\n\
    var str = \"The quick brown fox jumps over the lazy dog\";\nvar regex = /[a-z]+/gi;\n\
    var match = str.match(regex);\nconsole.log(match);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks so much! This was very helpful.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar regex\
    \ = /[a-z]+/gi;\nvar match = str.match(regex);\nconsole.log(match);\n</code>\n\
    <|/ a tags=javascript,regex |>\n<| c |>\nThanks so much! This was very helpful.\n\
    <|/ c |>\n<| a tags=javascript,regex |>\n<code>\nvar str = \"The quick brown fox\
    \ jumps over the lazy dog\";\nvar regex = /[a-z]+/gi;\nvar match = str.match(regex);\n\
    console.log(match);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much! This\
    \ was very helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar str = \"The quick\
    \ brown fox jumps over the lazy dog\";\nvar regex = /[a-z]+/gi;\nvar match = str.match(regex);\n\
    console.log(match);\n</code>\n<|/ a tags=javascript,regex |>\n<| c |>\nThanks\
    \ so much! This was very helpful.\n<|/ c |>\n<| a |>\n<code>\nvar str = \"The\
    \ quick brown fox jumps over the lazy dog\";\nvar regex = /[a-z]+/gi;\nvar match\
    \ = str.match(regex);\nconsole.log(match);\n</code>\n<|/ a dscore=0 tags=javascript,regex\
    \ |>\n<| c |>\nThanks so much! This was very helpful.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nvar str = \"The quick brown fox jumps over the lazy ", '    return
    txt.slice(-1)[0] === " " || txt.slice(-1)[0] === "-" || txt.slice(-1)[0] === "_"
    || txt.slice(-1)[0] === "?" || txt.slice(-1)[0] === "!" || txt.slice(-1)[0] ===
    "#" || txt.slice(-1)[0] === "$" || txt.slice(-1)[0] === "%" || txt.slice(-1)[0]
    === "&" || txt.slice(-1)[0] === "*" || txt.slice(-1)[0] === "(" || txt.slice(-1)[0]
    === ")" || txt.slice(-1)[0] === "+" || txt.slice(-1)[0] === "=" || txt.slice(-1)[0]
    === "|" || txt.slice(-1)[0] === "/" || txt.slice(-1)[0] === "\\" || txt.slice(-1)[0]
    === "{" || txt.slice(-1)[0] === "}" || txt.slice(-1)[0] === ":" || txt.slice(-1)[0]
    === "|" || txt.slice(-1)[0] === "," || txt.slice(-1)[0] === "<" || txt.slice(-1)[0]
    === ">" || txt.slice(-1)[0] === "~" || txt.slice(-1)[0] === "`" || txt.slice(-1)[0]
    === "{" || txt.slice(-1)[0] === "|" || txt.slice(-1)[0] === "," || txt.slice(-1)[0]
    === "<" || txt.slice(-1)[0] === ">" || txt.slice(-1)[0] === "~" || txt.slice(-1)[0]
    === "`" || txt.slice(-1)[0] === "{" || txt.slice(-1)[0] === "|" || txt.slice(-1)[0]
    === "," || txt.slice(-1)[0] === "<" || txt.slice(-1)[0] === ">" || txt.slice(-1)[0]
    === "~" || txt.slice(-1)[0] === "`" || txt.slice(-1)[0] === "{" || txt.slice(-1)[0]
    === "|" || txt.slice(-1)[0] === "," || txt.slice(-1)[0] === "<" || txt.slice(-1)[0]
    === ">" || txt.slice(-1)[0] === "~" || txt.slice(-1)[0] === "`" || txt.slice(-1)[0]
    === "{" || txt.slice(-1)[0] === "|" || txt.slice(-1)[0] === "," || txt.slice(-1)[0]
    === "<" || txt.slice(-1)[0] === ">" || txt.slice(-1)[0] === "~" || txt.slice(-1)[0]
    === "`" || txt.slice(-1)[0] === "{" || txt.slice(-1)[0] === "|" || txt.slice(-1)[0]
    === "," || txt.slice(-1)[0] === "<" || txt.slice(-1)[0] === ">" || txt.slice(-1)[0]
    === "~" || txt.slice(-1)[0] === "`" || txt.slice(-1)[0] === "{" || txt.slice(-1)[0]
    === "|" || txt.slice(-1)[0] === ",', "    return txt.slice(-1) != \" \" &&\n \
    \       txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"_\" &&\n       \
    \ txt.slice(-1) != \"*\" &&\n        txt.slice(-1) != \"?\" &&\n        txt.slice(-1)\
    \ != \".\" &&\n        txt.slice(-1) != \"!\" &&\n        txt.slice(-1) != \"\
    ^\" &&\n        txt.slice(-1) != \"&\" &&\n        txt.slice(-1) != \"*\" &&\n\
    \        txt.slice(-1) != \"(\" &&\n        txt.slice(-1) != \")\" &&\n      \
    \  txt.slice(-1) != \"|\" &&\n        txt.slice(-1) != \"[\" &&\n        txt.slice(-1)\
    \ != \"]\" &&\n        txt.slice(-1) != \"\\\"\"\n}\n", "    const last_char =\
    \ txt.charAt(txt.length - 1);\n    return last_char === ' ' || last_char === '\\\
    n' || last_char === '\\t' || last_char === '\\r' || last_char === '\\v' || last_char\
    \ === '\\f' || last_char === '\\a';\n}\n", "  return txt.slice(-1) != \" \" &&\n\
    \    txt.slice(-1) != \"?\" &&\n    txt.slice(-1) != \".\" &&\n    txt.slice(-1)\
    \ != \"!\" &&\n    txt.slice(-1) != \"-\" &&\n    txt.slice(-1) != \"_\" &&\n\
    \    txt.slice(-1) != \"*\" &&\n    txt.slice(-1) != \"(\" &&\n    txt.slice(-1)\
    \ != \")\" &&\n    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n\
    \    txt.slice(-1) != \"+\" &&\n    txt.slice(-1) != \"=\";\n}\n", "  let lastChar\
    \ = txt.substr(txt.length - 1, 1);\n  let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \  let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n  return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    let lastChar = txt.charAt(txt.length-1);\n\
    \    let isLetter = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n    return isLetter && !isNotWord;\n}\n", "    let\
    \ lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <= 'Z';\n\
    \    return isLetter && !isNotWord;\n}\n", "    let last_char = txt.charAt(txt.length\
    \ - 1);\n    return last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n\
    }\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n    return lastChar\
    \ === \" \" || lastChar === \"-\" || lastChar === \"_\" || lastChar === \"/\"\
    \ || lastChar === \"\\\\\" || lastChar === \"!\" || lastChar === \"?\" || lastChar\
    \ === \"@\" || lastChar === \"#\" || lastChar === \"$\" || lastChar === \"%\"\
    \ || lastChar === \"^\" || lastChar === \"&\" || lastChar === \"*\" || lastChar\
    \ === \"(\" || lastChar === \")\" || lastChar === \"|\" || lastChar === \"<\"\
    \ || lastChar === \">\" || lastChar === \"?\" || lastChar === \"{\" || lastChar\
    \ === \"}\" || lastChar === \"~\" || lastChar === \"`\" || lastChar === \"'\"\
    \ || lastChar === \"\\\"\" || lastChar === \"%\" || lastChar === \"+\" || lastChar\
    \ === \"=\";\n}\n", "  let lastChar = txt.charAt(txt.length-1);\n  let isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\n  let isNotWord = lastChar >= 'A' &&\
    \ lastChar <= 'Z';\n  return isLetter && !isNotWord;\n}\n", "    if (txt.length\
    \ < 1) {\n        return false;\n    }\n    let last_char = txt.charAt(txt.length\
    \ - 1);\n    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n\
    }\n</code>\n<|/ a tags=javascript,regex |>\n<| c |>\nThis doesn't work if the\
    \ string ends with a non-alphabetical character. For example, `check_if_last_char_is_a_letter(\"\
    abc\")` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI agree, my answer\
    \ was meant to be a starting point for OP to build on. I'll update my answer to\
    \ include a check for that.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <= 'Z';\n    return\
    \ isLetter && !isNotWord;\n}\n", "    const lastChar = txt.slice(-1);\n    if\
    \ (lastChar == ' ' || lastChar == '.' || lastChar == '!' || lastChar == '?' ||\
    \ lastChar == '-' || lastChar == '_' || lastChar == '/' || lastChar == '\\\\'\
    \ || lastChar == '(' || lastChar == ')' || lastChar == '[' || lastChar == ']'\
    \ || lastChar == '{' || lastChar == '}' || lastChar == '<' || lastChar == '>'\
    \ || lastChar == '|' || lastChar == '\"' || lastChar == '\\'') {\n        return\
    \ false;\n    }\n    return true;\n}\n", "    return txt.slice(-1) != ' ' &&\n\
    \        txt.slice(-1) != '\\n' &&\n        txt.slice(-1) != '\\r' &&\n      \
    \  txt.slice(-1) != '\\t' &&\n        txt.slice(-1) != '\\b' &&\n        txt.slice(-1)\
    \ != '\\f' &&\n        txt.slice(-1) != '\\v' &&\n        txt.slice(-1) != '\\\
    u00A0';\n}\n", "    let lastChar = txt.substr(txt.length - 1);\n    let lastCharIsLetter\
    \ = lastChar.match(/[a-z]/i);\n    let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "  const last_char\
    \ = txt.slice(-1);\n  const is_letter = last_char.match(/[a-z]/i);\n  const is_non_word\
    \ = last_char.match(/[\\s\\S]/);\n  return is_letter && !is_non_word;\n}\n", " \
    \   let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar >=\
    \ 'a' && lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <=\
    \ 'Z';\n    return isLetter && !isNotWord;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=javascript,regex |>\n<code>", "    const last_char = txt.slice(-1);\n\
    \    const is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "    let lastChar = txt.charAt(txt.length - 1);\n    return lastChar >= 'a' && lastChar\
    \ <= 'z';\n}\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n    return\
    \ lastChar.match(/[a-z]/i) && !lastChar.match(/[A-Z]/i);\n}\n", "  return txt.charAt(txt.length-1)\
    \ != ' ';\n}\n", "    let lastChar = txt.slice(-1);\n    let lastCharIsLetter\
    \ = lastChar.match(/[a-z]/i);\n    let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "    let lastChar =\
    \ txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n \
    \   return lastCharIsLetter && !lastCharIsNotWord;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nThis doesn't work if the last character is a digit.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I edited my answer to include a check for\
    \ digits. I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ last character is a digit.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I edited my answer to include a check for digits. I tested it and it works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  const last_char = txt.slice(-1);\n  return\
    \ last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n}\n", "  return txt[txt.length\
    \ - 1] === \" \" || txt[txt.length - 1] === \".\" || txt[txt.length - 1] === \"\
    ?\" || txt[txt.length - 1] === \"!\" || txt[txt.length - 1] === \"-\" || txt[txt.length\
    \ - 1] === \"_\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    \\\"\";\n}\n", "  const last_char = txt.charAt(txt.length-1);\n  const is_letter\
    \ = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n \
    \   return lastCharIsLetter && !lastCharIsWord;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with the string \"abc\".\n<|/ c |>\n<| c |>\n\
    I see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=javascript,regex |>\n<code>", "    let\
    \ lastChar = txt.substr(txt.length - 1, 1);\n    if (lastChar == \" \" || lastChar\
    \ == \"-\" || lastChar == \"_\" || lastChar == \"/\" || lastChar == \"\\\\\" ||\
    \ lastChar == \"!\" || lastChar == \"@\" || lastChar == \"#\" || lastChar == \"\
    $\" || lastChar == \"%\" || lastChar == \"^\" || lastChar == \"&\" || lastChar\
    \ == \"*\" || lastChar == \"(\") {\n        return false;\n    }\n    return true;\n\
    }\n", "    let last_char = txt.substr(txt.length - 1);\n    let last_char_lower\
    \ = last_char.toLowerCase();\n    let is_letter = last_char_lower >= 'a' && last_char_lower\
    \ <= 'z';\n    return !is_letter;\n}\n", "  let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n  if (lastChar == \" \") {\n    return false;\n  }\n  if (lastChar\
    \ == \"-\" || lastChar == \"_\" || lastChar == \"/\" || lastChar == \"\\\\\")\
    \ {\n    return false;\n  }\n  if (lastChar == \"a\" || lastChar == \"b\" || lastChar\
    \ == \"c\" || lastChar == \"d\" || lastChar == \"e\" || lastChar == \"f\" || lastChar\
    \ == \"g\" || lastChar == \"h\" || lastChar == \"i\" || lastChar == \"j\" || lastChar\
    \ == \"k\" || lastChar == \"l\" || lastChar == \"m\" || lastChar == \"n\" || lastChar\
    \ == \"o\" || lastChar == \"p\" || lastChar == \"q\" || lastChar == \"r\" || lastChar\
    \ == \"s\" || lastChar == \"t\" || lastChar == \"u\" || lastChar == \"v\" || lastChar\
    \ == \"w\" || lastChar == \"x\" || lastChar == \"y\" || lastChar == \"z\") {\n\
    \    return false;\n  }\n  return true;\n}\n", "  const last_char = txt.charAt(txt.length\
    \ - 1);\n  const is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n\
    }\n", "  let last_char = txt.charAt(txt.length - 1);\n  let is_letter = last_char.match(/[a-z]/i);\n\
    \  let is_word = last_char.match(/[a-z]+/i);\n  return is_letter && !is_word;\n\
    }\n", "    var lastChar = txt.substr(txt.length - 1, 1);\n    var lastCharIsLetter\
    \ = lastChar.match(/[a-z]/i);\n    return lastCharIsLetter;\n}\n", "  return txt.slice(-1)\
    \ != \" \" &&\n    txt.slice(-1) != \"-\" &&\n    txt.slice(-1) != \"_\" &&\n\
    \    txt.slice(-1) != \"*\" &&\n    txt.slice(-1) != \"?\" &&\n    txt.slice(-1)\
    \ != \".\" &&\n    txt.slice(-1) != \"!\" &&\n    txt.slice(-1) != \"^\" &&\n\
    \    txt.slice(-1) != \"&\" &&\n    txt.slice(-1) != \"*\" &&\n    txt.slice(-1)\
    \ != \"#\" &&\n    txt.slice(-1) != \"$\" &&\n    txt.slice(-1) != \"@\" &&\n\
    \    txt.slice(-1) != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n\
    \    txt.slice(-1) != \"+\" &&\n    txt.slice(-1) != \"=\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n\
    \    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"!\" &&\n    txt.slice(-1)\
    \ != \"#\" &&\n    txt.slice(-1) != \"$\" &&\n    txt.slice(-1) != \"@\" &&\n\
    \    txt.slice(-1) != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n\
    \    txt.slice(-1) != \"+\" &&\n    txt.slice(-1) != \"=\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n\
    \    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"!\" &&\n    txt.slice(-1)\
    \ != \"#\" &&\n    txt.slice(-1) != \"$\" &&\n    txt.slice(-1) != \"@\" &&\n\
    \    txt.slice(-1) != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n",
  "  let lastChar = txt.substr(txt.length - 1, 1);\n  return lastChar === \" \" ||\
    \ lastChar === \"-\" || lastChar === \"_\" || lastChar === \"/\" || lastChar ===\
    \ \"\\\\\";\n}\n", "    let lastChar = txt.charAt(txt.length-1);\n    let isLetter\
    \ = false;\n    let isWord = false;\n    let isSpace = false;\n    \n    if (lastChar\
    \ === ' ') {\n        isSpace = true;\n    }\n    \n    if (lastChar === '-')\
    \ {\n        isWord = true;\n    }\n    \n    if (lastChar === '_') {\n      \
    \  isLetter = true;\n    }\n    \n    return isLetter && !isWord && !isSpace;\n\
    }\n", "    const last_char = txt.slice(-1);\n    const is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    let last_char = txt.charAt(txt.length - 1);\n\
    \    let is_letter = last_char.match(/[a-z]/i);\n    let is_not_a_word = last_char.match(/[A-Z]/i);\n\
    \    return is_letter && !is_not_a_word;\n}\n", "    let lastChar = txt.slice(-1);\n\
    \    let isLetter = lastChar.match(/[a-z]/i);\n    let isNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return isLetter && !isNotWord;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    let lastChar = txt.charAt(txt.length-1);\n    let isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' &&\
    \ lastChar <= 'Z';\n    return isLetter && !isNotWord;\n}\n", "  const last_char\
    \ = txt.slice(-1);\n  const is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n\
    }", "    let lastChar = txt.charAt(txt.length - 1);\n    let lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n\
    }\n", "  const last_char = txt.slice(-1)[0];\n  const is_letter = last_char.match(/[a-z]/i);\n\
    \  return !is_letter;\n}\n", "    let last_char = txt.slice(-1);\n    let is_letter\
    \ = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    let lastChar\
    \ = txt.substr(txt.length - 1, 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n\
    \    let isNotWord = lastChar.match(/[^a-z]/i);\n    return isLetter && !isNotWord;\n\
    }\n", "  const last_char = txt.slice(-1);\n  const is_letter = last_char.match(/[a-z]/i);\n\
    \  return !is_letter;\n}\n", "  let lastChar = txt.charAt(txt.length - 1);\n \
    \ let isLetter = lastChar >= 'a' && lastChar <= 'z';\n  let isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n  return isLetter && !isNotWord;\n}\n", "    var\
    \ lastChar = txt.charAt(txt.length - 1);\n    var isLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    var isNotWord = lastChar >= 'A' && lastChar <= 'Z';\n\
    \    return isLetter && !isNotWord;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,regex\
    \ |>\n<code>\nvar str = \"Hello World\";\nvar lastChar = str.substr(str.length\
    \ - 1);\nvar isLetter = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,regex\
    \ |>\n<code>\nvar str = \"Hello World\";\nvar lastChar = str.substr(str.length\
    \ - 1);\nvar isLetter = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nvar\
    \ str = \"Hello World\";\nvar lastChar = str.substr(str.length - 1);\nvar isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar >= 'A' && lastChar\
    \ <= 'Z';\n</code>\n<|/ a tags=javascript,regex dscore=1 |>\n<| a tags=javascript,regex\
    \ |>\n<code>\nvar str = \"Hello World\";\nvar lastChar = str.substr(str.length\
    \ - 1);\nvar isLetter = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    var str = \"Hello World\";\nvar lastChar = str.substr(str.length - 1);\nvar isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar >= 'A' && lastChar\
    \ <= 'Z';\n</code>\n<|/ a tags=javascript,regex |>\n<| a tags=javascript,regex\
    \ |>\n<code>\nvar str = \"Hello World\";\nvar lastChar = str.substr(str.length\
    \ - 1);\nvar isLetter = lastChar >= 'a' && lastChar <= 'z';\nvar isNotWord = lastChar\
    \ >= 'A' && lastCh", "    let lastChar = txt.substr(txt.length - 1, 1);\n    if\
    \ (lastChar === ' ' || lastChar === '-' || lastChar === '_' || lastChar === '/')\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    let lastChar =\
    \ txt.substr(txt.length - 1);\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \    let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    const last_char = txt.slice(-1);\n    const\
    \ last_char_lower = last_char.toLowerCase();\n    const is_last_char_in_word =\
    \ last_char_lower === last_char || last_char_lower === 's';\n    return !is_last_char_in_word;\n\
    }\n", "  return txt[txt.length - 1] === \" \" || txt[txt.length - 1] === \".\"\
    \ || txt[txt.length - 1] === \"?\" || txt[txt.length - 1] === \"!\" || txt[txt.length\
    \ - 1] === \"-\" || txt[txt.length - 1] === \"_\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \"\\\"\";\n}\n", "    let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n    return lastChar === ' ' || lastChar === '-' || lastChar === '_'\
    \ || lastChar === '/' || lastChar === '\\\\';\n}\n", "    let lastChar = txt.charAt(txt.length-1);\n\
    \    let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter && !lastCharIsWord;\n\
    }\n", "  const last_char = txt.slice(-1);\n  const last_char_lower = last_char.toLowerCase();\n\
    \  const last_char_upper = last_char.toUpperCase();\n  const last_char_lower =\
    \ last_char_lower.charCodeAt(0);\n  const last_char_upper = last_char_upper.charCodeAt(0);\n\
    \  const is_letter_is_a_word = last_char_lower >= 65 && last_char_lower <= 90;\n\
    \  const is_letter_is_not_a_word = last_char_upper >= 65 && last_char_upper <=\
    \ 90;\n  return is_letter_is_a_word && !is_letter_is_not_a_word;\n}\n", "    let\
    \ lastChar = txt.substr(txt.length - 1, 1);\n    if (lastChar == \" \") {\n  \
    \      return false;\n    }\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \    if (lastCharIsLetter == null) {\n        return false;\n    }\n    return\
    \ true;\n}\n", "    let lastChar = txt.charAt(txt.length - 1);\n    let lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n\
    }\n", "    var last_char = txt.substr(txt.length - 1, 1);\n    var is_letter =\
    \ last_char.match(/[a-z]/i);\n    return is_letter && !last_char.match(/[a-z]/i);\n\
    }\n", "    var last_char = txt.substr(txt.length - 1, 1);\n    var is_letter =\
    \ last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    const last_char\
    \ = txt.slice(-1);\n    const first_char = txt.slice(0, 1);\n    const is_letter\
    \ = first_char.match(/[a-z]/i);\n    const is_word = last_char.match(/[a-z]+/i);\n\
    \    return is_letter && !is_word;\n}\n", "  const last_char = txt.slice(-1);\n\
    \  return last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n}\n", "  \
    \  return txt.charAt(txt.length-1) != \" \" &&\n        txt.charAt(txt.length-1)\
    \ != \"-\" &&\n        txt.charAt(txt.length-1) != \"_\" &&\n        txt.charAt(txt.length-1)\
    \ != \"?\" &&\n        txt.charAt(txt.length-1) != \".\" &&\n        txt.charAt(txt.length-1)\
    \ != \"!\" &&\n        txt.charAt(txt.length-1) != \"|\" &&\n        txt.charAt(txt.length-1)\
    \ != \"~\" &&\n        txt.charAt(txt.length-1) != \"^\" &&\n        txt.charAt(txt.length-1)\
    \ != \"&\" &&\n        txt.charAt(txt.length-1) != \"*\" &&\n        txt.charAt(txt.length-1)\
    \ != \"+\" &&\n        txt.charAt(txt.length-1) != \"|\" &&\n        txt.charAt(txt.length-1)\
    \ != \"(\" &&\n        txt.charAt(txt.length-1) != \")\" &&\n        txt.charAt(txt.length-1)\
    \ != \"[\" &&\n        txt.charAt(txt.length-1) != \"]\" &&\n        txt.charAt(txt.length-1)\
    \ != \"(\" &&\n        txt.charAt(txt.length-1) != \")\" &&\n        txt.charAt(txt.length-1)\
    \ != \"[\" &&\n        txt.charAt(txt.length-1) != \"]\" &&\n        txt.charAt(txt.length-1)\
    \ != \"-\" &&\n        txt.charAt(txt.length-1) != \"_\" &&\n        txt.charAt(txt.length-1)\
    \ != \"?\" &&\n        txt.charAt(txt.length-1) != \".\" &&\n        txt.charAt(txt.length-1)\
    \ != \"!\" &&\n        txt.charAt(txt.length-1) != \"|\" &&\n        txt.charAt(txt.length-1)\
    \ != \"~\" &&\n        txt.charAt(txt.length-1) != \"^\" &&\n        txt.charAt(txt.length-1)\
    \ != \"&\" &&\n        txt.charAt(txt.length-1) != \"*\" &&\n        txt.charAt(txt.length-1)\
    \ != \"+\" &&\n        txt.charAt(txt.length-1) != \"|\" &&\n        txt.charAt(txt.length-1)\
    \ != \"(\" &&\n        txt.charAt(txt.length-1) != \")\" &&\n        txt.charAt(txt.length-1)\
    \ != \"[\" &&\n        txt.charAt(txt.length-1) != \"]\" &&\n        txt.charAt(txt.length-1)\
    \ != \"(\" &&\n        txt.charAt(txt.length-1) != \")\" &&\n        txt.charAt(txt.length-1)\
    \ != \"[\" &&\n        txt.charAt(txt.length", "  const last_char = txt.slice(-1);\n\
    \  const last_char_lower = last_char.toLowerCase();\n  return last_char_lower\
    \ === last_char || last_char_lower === 'w';\n}\n", "    let lastChar = txt.charAt(txt.length-1);\n\
    \    let isLetter = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n    return isLetter && !isNotWord;\n}\n", "    return\
    \ txt[txt.length - 1] === \" \" || txt[txt.length - 1] === \"-\" || txt[txt.length\
    \ - 1] === \"_\" || txt[txt.length - 1] === \"/\" || txt[txt.length - 1] === \"\
    \\\\\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"?\" || txt[txt.length\
    \ - 1] === \"*\" || txt[txt.length - 1] === \"&\" || txt[txt.length - 1] === \"\
    %\" || txt[txt.length - 1] === \"@\" || txt[txt.length - 1] === \"#\" || txt[txt.length\
    \ - 1] === \"$\" || txt[txt.length - 1] === \"^\" || txt[txt.length - 1] === \"\
    &\" || txt[txt.length - 1] === \"*\" || txt[txt.length - 1] === \"(\" || txt[txt.length\
    \ - 1] === \")\" || txt[txt.length - 1] === \":\" || txt[txt.length - 1] === \"\
    ,\" || txt[txt.length - 1] === \".\" || txt[txt.length - 1] === \"!\" || txt[txt.length\
    \ - 1] === \"?\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    {\" || txt[txt.length - 1] === \"}\" || txt[txt.length - 1] === \"[\" || txt[txt.length\
    \ - 1] === \"]\" || txt[txt.length - 1] === \"'\" || txt[txt.length - 1] === \"\
    \\\"\" || txt[txt.length - 1] === \"<\" || txt[txt.length - 1] === \">\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"\\\\\" || txt[txt.length - 1] ===\
    \ \"|\" || txt[txt.length - 1] === \"`\" || txt[txt.length - 1] === \"~\" || txt[txt.length\
    \ - 1] === \"`\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    #\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"\
    |\" || txt[txt.length - 1] === \"|\" || txt[txt.length - 1] === \"|\" || txt[txt.length\
    \ - 1] === \"|\" || txt[txt.length - 1] === \"|", "    var lastChar = txt.slice(-1);\n\
    \    var lastCharIsLetter = lastChar.match(/[a-z]/i);\n    return lastCharIsLetter;\n\
    }\n</code>\n<|/ a tags=javascript,regex |>\n<| a tags=javascript,regex |>\n<code>\n\
    var str = \"The quick brown fox jumps over the lazy dog\";\nvar reg = /[a-z]$/i;\n\
    var result = str.match(reg);\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nvar str = \"The quick brown fox jumps over the lazy\
    \ dog\";\nvar reg = /[a-z]$/i;\nvar result = str.match(reg);\nconsole.log(result);</code>\n\
    <|/ a tags=javascript,regex |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=javascript,regex |>\n\
    <code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar reg =\
    \ /[a-z]$/i;\nvar result = str.match(reg);\nconsole.log(result);</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar str = \"The quick brown fox jumps\
    \ over the lazy dog\";\nvar reg = /[a-z]$/i;\nvar result = str.match(reg);\nconsole.log(result);\n\
    </code>\n<|/ a tags=javascript,regex |>\n<| a |>\n<code>\nvar str = \"The quick\
    \ brown fox jumps over the lazy dog\";\nvar reg = /[a-z]$/i;\nvar result = str.match(reg);\n\
    console.log(result);\n</code>\n<|/ a dscore=0 tags=javascript,regex |>\n<| a dscore=0\
    \ |>\n<code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar\
    \ reg = /[a-z]$/i;\nvar result = str.match(reg);\nconsole.log(result);\n</code>\n\
    <|/ a tags=javascript,regex |>\n<| a dscore=0 |>\n<code>\nvar str = \"The quick\
    \ brown fox jumps over the lazy dog\";\nvar reg = /[a-z]$/i;\nvar result = str.match(reg);\n\
    console.log(result);\n</code>\n<|/ a tags=javascript,regex |>\n<| a tags=javascript,regex\
    \ |>\n<code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar\
    \ reg = /[a-z]$/i;\nvar result = str.match(reg);\nconsole.log(result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn ", "    let lastChar = txt.substr(txt.length - 1, 1);\n   \
    \ let isLetter = lastChar.match(/[a-z]/i);\n    return !isLetter;\n}\n", "   \
    \ const last_char = txt.slice(-1);\n    return last_char === ' ' || last_char\
    \ === '\\n' || last_char === '\\t' || last_char === '\\r' || last_char === '\\\
    v' || last_char === '\\f' || last_char === '\\a';\n}\n", "  return txt.charAt(txt.length\
    \ - 1) == ' ';\n}\n", "  const last_char = txt.slice(-1);\n  const last_char_is_a_letter\
    \ = last_char.match(/[a-z]/);\n  const last_char_is_not_a_word = last_char.match(/[^a-z]/);\n\
    \  return last_char_is_a_letter && !last_char_is_not_a_word;\n}\n", "    let lastChar\
    \ = txt.substr(txt.length - 1);\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \    let lastCharIsNotWord = lastChar.match(/[a-zA-Z]/i);\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "  let last_char = txt.charAt(txt.length - 1);\n\
    \  let is_letter = last_char.match(/[a-z]/i);\n  let is_word = last_char.match(/[a-z]+/i);\n\
    \  return is_letter && !is_word;\n}\n", "    let lastChar = txt.charAt(txt.length\
    \ - 1);\n    let isLetter = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n    return isLetter && !isNotWord;\n\
    }\n", "    const last_char = txt.slice(-1);\n    const is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    let lastChar = txt.charAt(txt.length - 1);\n\
    \    let isLetter = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord = lastChar\
    \ >= 'A' && lastChar <= 'Z';\n    return isLetter && !isNotWord;\n}\n", "    let\
    \ last_char = txt.charAt(txt.length-1);\n    let is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    let lastChar = txt.substr(txt.length - 1,\
    \ 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n    let isNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return isLetter && !isNotWord;\n}\n", "    let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n \
    \   let lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ the last character is a digit.\n<|/ c |>\n<| c |>\nI added a note about that\
    \ to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    const last_char = txt.substr(txt.length\
    \ - 1, 1);\n    return last_char === \" \" || last_char === \"-\" || last_char\
    \ === \"_\" || last_char === \"/\" || last_char === \"\\\\\" || last_char ===\
    \ \"?\" || last_char === \"!\" || last_char === \"<\" || last_char === \">\" ||\
    \ last_char === \"|\" || last_char === \"#\" || last_char === \"$\" || last_char\
    \ === \"%\" || last_char === \"&\" || last_char === \"*\" || last_char === \"\
    (\" || last_char === \")\" || last_char === \"=\" || last_char === \"{\" || last_char\
    \ === \"}\" || last_char === \"[\" || last_char === \"]\" || last_char === \"\
    |\" || last_char === \"\\\\\" || last_char === \"^\" || last_char === \"~\" ||\
    \ last_char === \"`\" || last_char === \"\xA3\" || last_char === \"\xA5\" || last_char\
    \ === \"\xA9\" || last_char === \"\xAE\" || last_char === \"\xB0\" || last_char\
    \ === \"\xA7\" || last_char === \"\xBD\" || last_char === \"\xBC\" || last_char\
    \ === \"\xA1\" || last_char === \"\xAB\" || last_char === \"\xBB\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || last_char === \"\xA3\" || last_char\
    \ === \"\xA2\" || last_char === \"\xA3\" || last_char === \"\xA2\" || last_char\
    \ === \"\xA3\" || last_char === \"\xA2\" || ", "    if (txt.length <= 0) {\n \
    \       return false;\n    }\n    let last_char = txt.charAt(txt.length - 1);\n\
    \    let is_letter = last_char >= 'a' && last_char <= 'z';\n    let is_non_word\
    \ = last_char >= '0' && last_char <= '9';\n    return is_letter && !is_non_word;\n\
    }\n", "    let lastChar = txt.substr(txt.length - 1, 1);\n    return lastChar\
    \ != ' ' && lastChar != '-';\n}\n", "    let last_char = txt.charAt(txt.length\
    \ - 1);\n    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n\
    }\n", "    let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z';\n    return !isLetter && lastChar !== '_';\n}\n",
  "    let lastChar = txt.substr(txt.length - 1, 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n\
    \    let isNotWord = lastChar.match(/[^a-z]/i);\n    return isLetter && !isNotWord;\n\
    }\n", "    let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar\
    \ <= 'Z';\n    return isLetter && !isNotWord;\n}\n", "    const last_char = txt.slice(-1);\n\
    \    const is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}",
  "    let lastChar = txt.charAt(txt.length-1);\n    let isLetter = lastChar >= 'a'\
    \ && lastChar <= 'z';\n    let isNotWord = lastChar >= 'A' && lastChar <= 'Z';\n\
    \    return isLetter && !isNotWord;\n}\n", "    let last_char = txt.charAt(txt.length\
    \ - 1);\n    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n\
    }\n", "    let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n\
    \    return !isLetter;\n}\n", "    var lastChar = txt.charAt(txt.length - 1);\n\
    \    return lastChar >= 'a' && lastChar <= 'z';\n}\n", "  const last_char = txt.slice(-1);\n\
    \  const is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", " \
    \   let lastChar = txt.charAt(txt.length - 1);\n    let isLetter = lastChar >=\
    \ 'a' && lastChar <= 'z';\n    return !isLetter && lastChar != ' ';\n}\n", " \
    \   const last_char = txt.slice(-1)[0];\n    const is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "  const last_char = txt.slice(-1);\n  const last_char_lower\
    \ = last_char.toLowerCase();\n  return last_char_lower === last_char || last_char_lower\
    \ === 'w';\n}\n", "    const last_char = txt.slice(-1);\n    const is_letter =\
    \ last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    return !isLetter && lastChar != '_';\n}\n", "    let lastChar =\
    \ txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n \
    \   return lastCharIsLetter && !lastCharIsNotWord;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=javascript,regex |>\n<code>\nvar str = \"The quick brown fox jumps\
    \ over the lazy dog\";\nvar regex = /\\b[a-z]\\b/;\nvar result = str.match(regex);\n\
    console.log(result);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,regex |>\n\
    <code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar regex\
    \ = /\\b[a-z]\\b/;\nvar result = str.match(regex);\nconsole.log(result);</code>\n\
    <|/ a dscore=0 |>\n<| a tags=javascript,regex |>\n<code>\nvar str = \"The quick\
    \ brown fox jumps over the lazy dog\";\nvar regex = /\\b[a-z]\\b/;\nvar result\
    \ = str.match(regex);\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar str = \"The quick brown fox jumps over the lazy dog\";\nvar\
    \ regex = /\\b[a-z]\\b/;\nvar result = str.match(regex);\nconsole.log(result);</code>\n\
    <|/ a tags=javascript,regex |>\n<| a tags=javascript,regex |>\n<code>\nvar str\
    \ = \"The quick brown fox jumps over the lazy dog\";\nvar regex = /\\b[a-z]\\\
    b/;\nvar result = str.match(regex);\nconsole.log(result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar str = \"The quick brown fox jumps over the\
    \ lazy dog\";\nvar regex = /\\b[a-z]\\b/;\nvar result = str.match(regex);\nconsole.log(result);\n\
    </code>\n<|/ a tags=javascript,regex |>\n<| a dscore=0 |>\n<code>\nvar str = \"\
    The quick brown fox jumps over the lazy dog\";\nvar regex = /\\b[a-z]\\b/;\nvar\
    \ result = str.match(regex);\nconsole.log(result);\n</code>\n<|/ a tags=javascript,regex\
    \ |>\n<| a tags=javascript,regex |>\n<code>\nvar str = \"The quick brown fox jumps\
    \ over the lazy dog\";\nvar regex = /\\b[a-z]\\b/;\nvar ", "    let lastChar =\
    \ txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar >= 'a' && lastChar\
    \ <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <= 'Z';\n \
    \   return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "    let last_char =\
    \ txt.slice(-1);\n    let last_char_lower = last_char.toLowerCase();\n    let\
    \ is_last_char_in_word = false;\n    let word_chars = txt.split(\" \");\n    for\
    \ (let i = 0; i < word_chars.length; i++) {\n        let word_char = word_chars[i];\n\
    \        if (word_char.toLowerCase() === last_char_lower) {\n            is_last_char_in_word\
    \ = true;\n            break;\n        }\n    }\n    return !is_last_char_in_word;\n\
    }\n", "  const lastChar = txt.slice(-1);\n  const lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \  const lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n  return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    const last_char = txt.slice(-1);\n    const\
    \ is_letter = last_char.match(/[a-z]/i);\n    const is_word = last_char.match(/[A-Z]/i);\n\
    \    return is_letter && !is_word;\n}\n", "    let lastChar = txt.substr(txt.length\
    \ - 1, 1);\n    let isLetter = lastChar >= 'a' && lastChar <= 'z';\n    let isNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n    return isLetter && !isNotWord;\n\
    }\n", "    var lastChar = txt.substr(txt.length - 1);\n    var lastCharIsLetter\
    \ = lastChar.match(/[a-z]/i);\n    var lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n\
    \    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "    let lastChar =\
    \ txt.substr(txt.length - 1, 1);\n    if (lastChar == \" \" || lastChar == \"\
    .\" || lastChar == \"-\" || lastChar == \"_\" || lastChar == \"/\" || lastChar\
    \ == \"\\\\\" || lastChar == \"!\" || lastChar == \"?\" || lastChar == \"@\" ||\
    \ lastChar == \"#\" || lastChar == \"$\" || lastChar == \"%\" || lastChar == \"\
    ^\" || lastChar == \"&\" || lastChar == \"*\" || lastChar == \"(\") {\n      \
    \  return false;\n    } else {\n        return true;\n    }\n}\n", "  let lastChar\
    \ = txt.slice(-1);\n  let lastCharIsLetter = lastChar.match(/[a-z]/i);\n  let\
    \ lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n  return lastCharIsLetter &&\
    \ !lastCharIsNotWord;\n}\n", "    if (txt.length < 1) {\n        return false;\n\
    \    }\n    const last_char = txt.charAt(txt.length - 1);\n    const is_letter\
    \ = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <=\
    \ 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>", "  const last_char = txt.slice(-1);\n  const\
    \ last_char_lower = last_char.toLowerCase();\n  const last_char_upper = last_char.toUpperCase();\n\
    \  const last_char_lower = last_char_lower.charCodeAt(0);\n  const last_char_upper\
    \ = last_char_upper.charCodeAt(0);\n  const is_letter = last_char_lower >= 65\
    \ && last_char_lower <= 90 || last_char_upper >= 97 && last_char_upper <= 122;\n\
    \  return !is_letter;\n}\n", "    const last_char = txt.slice(-1);\n    return\
    \ last_char.match(/[a-z]/i) && !last_char.match(/[A-Z]/i);\n}\n", "  return txt.slice(-1)[0]\
    \ === ' ';\n}\n", "    const last_char = txt.slice(-1);\n    const is_letter =\
    \ last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nThis doesn't work if the string ends with a non-alphabetical character.\n\
    <|/ c |>\n<| c |>\nI added a note about that. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nI added a note about that. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a tags=javascript,typescript |>\n<code>\nconst isAlpha = (str: string)\
    \ => {\n  const regex = /[a-z]/i;\n  return regex.test(str);\n};\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work if the string ends with a non-alphabetical\
    \ character.\n<|/ c |>\n<| c |>\nThis doesn't work if the string ends with a non-alphabetical\
    \ character.\n<|/ c |>\n<| c |>\nThis doesn't work if the string ends with a non-alphabetical\
    \ character.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  const last_char = txt.slice(-1);\n\
    \  const is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n}\n", " \
    \   let lastChar = txt.slice(-1);\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \    let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n    return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    let lastChar = txt.substr(txt.length - 1,\
    \ 1);\n    let isLetter = lastChar.match(/[a-z]/i);\n    return !isLetter;\n}\n",
  "    return txt.slice(-1) != \" \" &&\n        txt.slice(-1) != \"-\" &&\n     \
    \   txt.slice(-1) != \"_\" &&\n        txt.slice(-1) != \"?\" &&\n        txt.slice(-1)\
    \ != \".\" &&\n        txt.slice(-1) != \"!\" &&\n        txt.slice(-1) != \"\
    -\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n\
    \        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n      \
    \  txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1)\
    \ != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"\
    -\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n\
    \        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n      \
    \  txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1)\
    \ != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"\
    -\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n\
    \        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n      \
    \  txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1)\
    \ != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"\
    -\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n\
    \        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n      \
    \  txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1)\
    \ != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"\
    -\" &&\n        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" &&\n\
    \        txt.slice(-1) != \"-\" &&\n        txt.slice(-1) != \"-\" ", "  const\
    \ last_char = txt.charAt(txt.length - 1);\n  const last_char_lower = last_char.toLowerCase();\n\
    \  const is_last_char_a_letter = last_char_lower >= 'a' && last_char_lower <=\
    \ 'z';\n  const is_last_char_a_word_char = last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '0' && last_char_lower <= '9' &&\n      last_char_lower >= 'a' && last_char_lower\
    \ <= 'z' &&\n      last_char_lower >= '0' && last_char_lower <= '9' &&\n     \
    \ last_char_lower >= 'a' && last_char_lower <= 'z' &&\n      last_char_lower >=\
    \ '", "  const last_char = txt.slice(-1);\n  return last_char.match(/[a-z]/i)\
    \ && !last_char.match(/[A-Z]/i);\n}", "  return txt.slice(-1) != \" \" &&\n  \
    \  txt.slice(-1) != \"-\" &&\n    txt.slice(-1) != \"_\" &&\n    txt.slice(-1)\
    \ != \"*\" &&\n    txt.slice(-1) != \"?\" &&\n    txt.slice(-1) != \".\" &&\n\
    \    txt.slice(-1) != \"!\" &&\n    txt.slice(-1) != \"#\" &&\n    txt.slice(-1)\
    \ != \"$\" &&\n    txt.slice(-1) != \"%\" &&\n    txt.slice(-1) != \"^\" &&\n\
    \    txt.slice(-1) != \"&\" &&\n    txt.slice(-1) != \"*\" &&\n    txt.slice(-1)\
    \ != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1) != \"|\" &&\n\
    \    txt.slice(-1) != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n    txt.slice(-1)\
    \ != \"+\" &&\n    txt.slice(-1) != \"=\" &&\n    txt.slice(-1) != \"|\" &&\n\
    \    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n    txt.slice(-1)\
    \ != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1) != \"[\" &&\n\
    \    txt.slice(-1) != \"]\" &&\n    txt.slice(-1) != \"-\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n\
    \    txt.slice(-1) != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1)\
    \ != \"[\" &&\n    txt.slice(-1) != \"]\" &&\n    txt.slice(-1) != \"|\" &&\n\
    \    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n    txt.slice(-1)\
    \ != \"(\" &&\n    txt.slice(-1) != \")\" &&\n    txt.slice(-1) != \"[\" &&\n\
    \    txt.slice(-1) != \"]\" &&\n    txt.slice(-1) != \"-\" &&\n    txt.slice(-1)\
    \ != \"|\" &&\n    txt.slice(-1) != \"~\" &&\n    txt.slice(-1) != \"`\" &&\n\
    \    txt.slice(-1) != \"(\" &&\n    txt.slice(-1) != \")\" &&", "    let lastChar\
    \ = txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar >= 'a' &&\
    \ lastChar <= 'z';\n    let lastCharIsNotWord = lastChar >= 'A' && lastChar <=\
    \ 'Z';\n    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "    var last_char\
    \ = txt.substr(txt.length - 1, 1);\n    var is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n</code>\n<|/ a tags=javascript,regex |>\n<| c |>\n\
    This doesn't work. `/[a-z]/i` matches `a`, `A`, `b`, `B`, `c`, `C`, `d`, `D`,\
    \ `e`, `E`, `f`, `F`, `g`, `G`, `h`, `H`, `i`, `I`, `j`, `J`, `k`, `K`, `l`, `L`,\
    \ `m`, `M`, `n`, `N`, `o`, `O`, `p`, `P`, `q`, `Q`, `r`, `R`, `s`, `S`, `t`, `T`,\
    \ `u`, `U`, `v`, `V`, `w`, `W`, `x`, `X`, `y`, `Y`, `z`, `Z`, `0`, `1`, `2`, `3`,\
    \ `4`, `5`, `6`, `7`, `8`, `9`, `+`, `-`, `_`, `/`, `:`, `;`, `<`, `=`, `>`, `?`,\
    \ `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `[`, `]`, `{`, `}`, `|`, `;`,\
    \ `:`, `,`, `<`, `>`, `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `[`,\
    \ `]`, `{`, `}`, `|`, `;`, `:`, `,`, `<`, `>`, `?`, `!`, `@`, `#`, `$`, `%`, `^`,\
    \ `&`, `*`, `(`, `)`, `[`, `]`, `{`, `}`, `|`, `;`, `:`, `,`, `<`, `>`, `?`, `!`,\
    \ `@`, `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `[`, `]`, `{`, `}`, `|`, `;`, `:`,\
    \ `,`, `<`, `>`, `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `[`, `]`,\
    \ `{`, `}`, `|`, `;`, `:`, `,`, `<`, `>`, `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`,\
    \ `*`, `(`, `)`, `[`, `]`, `{`, `}`, `|`, `;`, `:`, `,`, `<`, `>`, `?`, `!`, `@`,\
    \ `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `[`, `]`, `{`, `}`, `|`, `;`, `:`, `,`,\
    \ `<`, `>`, `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*", "  let lastChar = txt.charAt(txt.length\
    \ - 1);\n  let lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z';\n  let lastCharIsNotWord\
    \ = lastChar >= 'A' && lastChar <= 'Z';\n  return lastCharIsLetter && !lastCharIsWord;\n\
    }\n", "  let last_char = txt.slice(-1);\n  if (last_char === \" \") {\n    last_char\
    \ = txt.slice(-1);\n  }\n  if (last_char.match(/[a-z]/)) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  const lastChar = txt.slice(-1);\n  if (lastChar\
    \ === ' ' || lastChar === '-') {\n    return false;\n  }\n  const lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z';\n  return lastCharIsLetter;\n}\n", " \
    \   if (txt.length < 1) return false;\n    var last_char = txt.charAt(txt.length-1);\n\
    \    var is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "  let lastChar = txt.slice(-1);\n  let lastCharIsLetter = lastChar.match(/[a-z]/i);\n\
    \  let lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n  return lastCharIsLetter\
    \ && !lastCharIsNotWord;\n}\n", "    return txt.slice(-1) != \" \" && !is_letter(txt.slice(-1));\n\
    }\n", "    let lastChar = txt.slice(-1);\n    let lastCharIsLetter = lastChar\
    \ >= 'a' && lastChar <= 'z';\n    let lastCharIsNotWord = lastChar !== ' ';\n\
    \    return lastCharIsLetter && !lastCharIsNotWord;\n}\n", "    let last_char\
    \ = txt.substr(txt.length - 1, 1);\n    let is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    var last_char = txt.charAt(txt.length - 1);\n\
    \    var is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n",
  "  return txt.slice(-1) != \" \" && txt.slice(-2) != \" \";\n}\n", "    let last_char\
    \ = txt.slice(-1);\n    let is_letter = last_char.match(/[a-z]/i);\n    return\
    \ !is_letter;\n}\n", "    let last_char = txt.charAt(txt.length-1);\n    let is_letter\
    \ = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", "  let last_char\
    \ = txt.slice(-1);\n  let is_letter = last_char.match(/[a-z]/i);\n  return !is_letter;\n\
    }\n", "  let lastChar = txt.charAt(txt.length - 1);\n  let lastCharIsLetter =\
    \ lastChar >= 'a' && lastChar <= 'z';\n  let lastCharIsNotWord = lastChar >= 'A'\
    \ && lastChar <= 'Z';\n  return lastCharIsLetter && !lastCharIsWord;\n}\n", " \
    \   let last_char = txt.slice(-1);\n    let is_letter = last_char.match(/[a-z]/i);\n\
    \    return !is_letter;\n}\n", "    const last_char = txt.slice(-1);\n    const\
    \ is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n", '  return
    txt[txt.length - 1] === " " || txt[txt.length - 1] === "-" || txt[txt.length -
    1] === "_" || txt[txt.length - 1] === "|" || txt[txt.length - 1] === "#" || txt[txt.length
    - 1] === "@" || txt[txt.length - 1] === "$" || txt[txt.length - 1] === "%" ||
    txt[txt.length - 1] === "^" || txt[txt.length - 1] === "&" || txt[txt.length -
    1] === "*" || txt[txt.length - 1] === "(" || txt[txt.length - 1] === ")" || txt[txt.length
    - 1] === "+" || txt[txt.length - 1] === "=" || txt[txt.length - 1] === "{" ||
    txt[txt.length - 1] === "}" || txt[txt.length - 1] === ":" || txt[txt.length -
    1] === "," || txt[txt.length - 1] === "<" || txt[txt.length - 1] === ">" || txt[txt.length
    - 1] === "?" || txt[txt.length - 1] === "!" || txt[txt.length - 1] === "|" ||
    txt[txt.length - 1] === "\\" || txt[txt.length - 1] === "/" || txt[txt.length
    - 1] === "|" || txt[txt.length - 1] === "{" || txt[txt.length - 1] === "}" ||
    txt[txt.length - 1] === ":" || txt[txt.length - 1] === "," || txt[txt.length -
    1] === "<" || txt[txt.length - 1] === ">" || txt[txt.length - 1] === "?" || txt[txt.length
    - 1] === "!" || txt[txt.length - 1] === "|" || txt[txt.length - 1] === "\\" ||
    txt[txt.length - 1] === "/" || txt[txt.length - 1] === "|" || txt[txt.length -
    1] === "{" || txt[txt.length - 1] === "}" || txt[txt.length - 1] === ":" || txt[txt.length
    - 1] === "," || txt[txt.length - 1] === "<" || txt[txt.length - 1] === ">" ||
    txt[txt.length - 1] === "?" || txt[txt.length - 1] === "!" || txt[txt.length -
    1] === "|" || txt[txt.length - 1] === "\\" || txt[txt.length - 1] === "/" || txt[txt.length
    - 1] === "|" || txt[txt.length - 1] === "{" || txt[txt.length - 1] === "}" ||
    txt[txt.length - 1] === ":" || txt[txt.length - 1] === "," || txt[txt.length -
    1] === "<" || txt[txt.length - 1] === ">" || txt[txt.length - 1] === "?" || txt[txt.length
    - 1] === "!" || txt[txt.length - 1] === "|" || txt[txt.length - 1] === "\\" ||
    txt[txt.length - 1] === "/" || txt[txt.length - 1] === "|" || txt[txt.length -
    1] === "{', "    let last_char = txt.substr(txt.length - 1);\n    let is_letter\
    \ = last_char.match(/^[a-zA-Z]+$/);\n    return !is_letter;\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let isLetter = lastChar.match(/[a-z]/);\n \
    \   let isNotWord = lastChar.match(/[^a-z]/);\n    return isLetter && !isNotWord;\n\
    }\n", "  const last_char = txt.slice(-1);\n  const is_letter = last_char.match(/[a-z]/i);\n\
    \  return !is_letter;\n}\n", "    let last_char = txt.substr(txt.length - 1, 1);\n\
    \    let is_letter = last_char.match(/[a-z]/i);\n    return !is_letter;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
