language: ts
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = 0;\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  let max: number = l[0];\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = 0;\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = 0;\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  let max: number = 0;\n  for (let i = 0; i < l.length; i++) {\n \
    \   if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return Math.max(...l);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  let max_element = l[0];\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > max_element) {\n      max_element = l[i];\n    }\n  }\n  return\
    \ max_element;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  let max: number = 0;\n  for (let i = 0; i < l.length; i++) {\n \
    \   if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b))\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = 0;\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = 0;\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return Math.max(...l);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n  return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => Math.max(a, b), 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977677
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    return l.reduce((a, b) => a > b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
- exit_code: 0
  program: "//Return maximum element in the list.\nfunction max_element(l: number[]):\
    \ number {\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977717
