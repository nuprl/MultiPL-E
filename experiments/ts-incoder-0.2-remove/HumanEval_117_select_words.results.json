{
  "language": "ts",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4kl_tekh.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4kl_tekh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s.charAt(index);\n        if (char === ' ') {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else {\n            if (char === ',' || char === '.' || char === '?' || char === '!' || char === '(' || char === ')' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char === '>' || char === '|\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmxdx05so.ts(19,1858): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmxdx05so.ts(20,1): error TS1005: ')' expected.\n../../../../tmp/tmpmxdx05so.ts(35,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for (let i = 0; i < s.length; i += 1) {\n        if (vowels.indexOf(s[i]) > -1) {\n            result.push(s[i]);\n        }\n        for (let j = 0; j < consonants.length; j += 1) {\n            if (s[i] === consonants[j]) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdc6kfcky.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdc6kfcky.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a', 'r', 'y', 'h', 'a',\n    'd', 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n    'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            words.push(s.substr(index, index + 1));\n            index++;\n            count++;\n        }\n        else {\n            index++;\n        }\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had ',\n  ' a little',\n  ' little lam',\n  ' lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpapncpk9t.js:29:12)\n    at Object.<anonymous> (/tmp/tmpapncpk9t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had ', ' a little', ' little lam', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        const word = s.substring(index, index + 1);\n        if (word.length >= n && word.match(/[aeiou]/)) {\n            words.push(word);\n        }\n        index += word.length;\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxa57cwi7.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxa57cwi7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let result = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        let char = s[index];\n        if (char === ' ') {\n            result.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            n--;\n        }\n        index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7s14a_vv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp7s14a_vv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tlet char = s.charAt(index);\n\t\tif (char === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s.charAt(index) === char) {\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\tif (count === n) {\n\t\t\tresult.push(s.slice(index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphiuw4322.js:31:12)\n    at Object.<anonymous> (/tmp/tmphiuw4322.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n            result.push(s.substr(index));\n            index++;\n        }\n        else if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\") {\n            result.push(s.substr(index, 1));\n            index++;\n        }\n        else {\n            result.push(s.substr(index, 1));\n            index++;\n        }\n    }\n    return result;\n}\nselect_words(\"a man a plan a canal panama\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y',\n  ' had a little lamb',\n  'h',\n  'a',\n  'd',\n  ' a little lamb',\n  'a',\n  ' little lamb',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' lamb',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8_ijj88.js:31:12)\n    at Object.<anonymous> (/tmp/tmpz8_ijj88.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',                  'a',\n    'r',                  'y',\n    ' had a little lamb', 'h',",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let consonants = word.match(/[b-df-hj-np-tv-z]/g);\n        if (consonants.length === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadab\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q7atrsu.ts(59,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7q7atrsu.ts(60,1): error TS1005: ',' expected.\n../../../../tmp/tmp7q7atrsu.ts(60,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334444
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let index = 0;\n    let chars = Array.from(s);\n    let charsCount = chars.length;\n    while (index < charsCount) {\n        let char = chars[index];\n        if (char === ' ') {\n            charsCount--;\n        }\n        if (charsCount === n) {\n            result.push(chars.slice(index, index + 1));\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34b3lq_1.ts(21,25): error TS2345: Argument of type 'string[]' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            words.push(s.substr(0, i));\n        }\n    }\n    for (let i = 0; i < words.length; i++) {\n        let word: string = words[i];\n        let cons: boolean = true;\n        for (let j = 0; j < word.length; j++) {\n            if (s.charAt(j) != word.charAt(j)) {\n                cons = false;\n                break;\n            }\n        }\n        if (cons) {\n            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words('abc def ghi', 2);\nselect_words('abc def ghi', 3);\nselect_words('abc def ghi', 4);\nselect_words('abc def ghi', 5);\nselect_words('abc def ghi', 6);\nselect_words('abc def ghi', 7);\nselect_words('abc def ghi', 8);\nselect_words('abc def ghi', 9);\nselect_words('abc def ghi', 10);\nselect_words('abc def ghi', 11);\nselect_words('abc def ghi', 12);\nselect_words('abc def ghi', 13);\nselect_words('abc def ghi', 14);\nselect_words('abc def ghi', 15);\nselect_words('abc def ghi', 16);\nselect_words('abc def ghi', 17);\nselect_words('abc def ghi', 18);\nselect_words('abc def ghi', 19);\nselect_words('abc def ghi', 20);\nselect_words('abc def ghi', 21);\nselect_words('abc def ghi', 22);\nselect_words('abc def ghi', 23);\nselect_words('abc def ghi', 24);\nselect_words('abc def ghi', 25);\nselect_words('abc def ghi', 26);\nselect_words('abc def ghi', 27);\nselect_words('abc def ghi', 28);\nselect_words('abc def ghi', 29);\nselect_words('abc def ghi', 30);\nselect_words('abc def ghi', 31);\nselect_words('abc def ghi', 32);\nselect_words('abc def ghi', 33);\nselect_words('abc def ghi', 34);\nselect_words('abc def ghi', 35);\nselect_words('abc def ghi', 36);\nselect_words('abc def gh\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf7oskz8z.ts(65,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf7oskz8z.ts(66,1): error TS1005: ',' expected.\n../../../../tmp/tmpf7oskz8z.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substr(index, n - 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ha',\n  ' a ',\n  ' la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp12pzz5t_.js:25:12)\n    at Object.<anonymous> (/tmp/tmp12pzz5t_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ha', ' a ', ' la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'a') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'e') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'i') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'o') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'u') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse {\n\t\t\tindex = index + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzjq6owhd.js:45:12)\n    at Object.<anonymous> (/tmp/tmpzjq6owhd.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a', ' ', 'a', ' ',\n    'a', ' ', 'i', 'e',\n    ' ', 'a'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char) == -1) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  ' ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpugcg9shh.js:27:12)\n    at Object.<anonymous> (/tmp/tmpugcg9shh.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', ' ', ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s.charAt(index) === 'a') {\n            result.push(s.substring(index, index + 1));\n            index++;\n            n--;\n        }\n        index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp27knrwxm.js:23:12)\n    at Object.<anonymous> (/tmp/tmp27knrwxm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement this function\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsfd0v74j.js:15:12)\n    at Object.<anonymous> (/tmp/tmpsfd0v74j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        const char = s[index];\n        if (char === ' ') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'n') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'a') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'e') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'i') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'o') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'u') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'l') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 's') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 't') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'r') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'c') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'h') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'e') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'd') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'a') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'p') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 't') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'e') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 's') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'a') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'n') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'g') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'h') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'u') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'r') {\n            word\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp28d_kfpw.ts(132,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    if (s.length === 0) {\n        return words;\n    }\n    let word = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            word += s[i];\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            if (word.length >= n) {\n                words.push(word);\n                word = '';\n            }\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'aaaiea'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpipgn9mbu.js:31:12)\n    at Object.<anonymous> (/tmp/tmpipgn9mbu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'aaaiea' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": -1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && index < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            result.push(s[index]);\n            index++;\n        }\n    }\n    return result;\n}\nselect_words(\"aeiou\", 2); // [\"a\"]\nselect_words(\"aeiou\", 3); // [\"aeiou\"]\nselect_words(\"aeiou\", 4); // []\nselect_words(\"aeiou\", 5); // []\nselect_words(\"aeiou\", 6); // []\nselect_words(\"aeiou\", 7); // []\nselect_words(\"aeiou\", 8); // []\nselect_words(\"aeiou\", 9); // []\nselect_words(\"aeiou\", 10); // []\nselect_words(\"aeiou\", 11); // []\nselect_words(\"aeiou\", 12); // []\nselect_words(\"aeiou\", 13); // []\nselect_words(\"aeiou\", 14); // []\nselect_words(\"aeiou\", 15); // []\nselect_words(\"aeiou\", 16); // []\nselect_words(\"aeiou\", 17); // []\nselect_words(\"aeiou\", 18); // []\nselect_words(\"aeiou\", 19); // []\nselect_words(\"aeiou\", 20); // []\nselect_words(\"aeiou\", 21); // []\nselect_words(\"aeiou\", 22); // []\nselect_words(\"aeiou\", 23); // []\nselect_words(\"aeiou\", 24); // []\nselect_words(\"aeiou\", 25); // []\nselect_words(\"aeiou\", 26); // []\nselect_words(\"aeiou\", 27); // []\nselect_words(\"aeiou\", 28); // []\nselect_words(\"aeiou\", 29); // []\nselect_words(\"aeiou\", 30); // []\nselect_words(\"aeiou\", 31); // []\nselect_words(\"aeiou\", 32); // []\nselect_words(\"aeiou\", 33); // []\nselect_words(\"aeiou\", 34); // []\nselect_words(\"aeiou\", 35); // []\nselect_words(\"aeiou\", 36); // []\nselect_words(\"aeiou\", 37); // []\nselect_words(\"aeiou\", 38); // []\nselect_words(\"aeiou\", 39); // []\nselect_words(\"aeiou\", 40); // []\nselect_words(\"aeiou\", 41); // []\nselect_words(\"aeiou\", 42); // []\nselect_words(\"aeiou\", 43); // []\nselect_words(\"aeiou\", 44); // []\nselect_words(\"aeiou\", 45); // []\nselect_words(\"aeiou\", 46); // \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334460
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substr(index, n - 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n\t\t\tresult.push(s.substr(index, n - 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary',\n  ' ha',\n  ' a ',\n  'itt',\n  'e l',\n  'amb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpl939cvao.js:29:12)\n    at Object.<anonymous> (/tmp/tmpl939cvao.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ary', ' ha', ' a ', 'itt', 'e l', 'amb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let word = \"\";\n    let index = 0;\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            words.push(word);\n            word = \"\";\n            index++;\n        } else {\n            word += s[index];\n            index++;\n        }\n    }\n    words.push(word);\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuj74xjet.js:28:12)\n    at Object.<anonymous> (/tmp/tmpuj74xjet.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'had', 'a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement this function\n    \n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyjwv_kfg.js:15:12)\n    at Object.<anonymous> (/tmp/tmpyjwv_kfg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            words.push(s.substr(0, i));\n        }\n    }\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length >= n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplr6uuikj.js:30:12)\n    at Object.<anonymous> (/tmp/tmplr6uuikj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            words.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpez2brj17.js:25:12)\n    at Object.<anonymous> (/tmp/tmpez2brj17.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let vowel_count = 0;\n    let consonant_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) > -1) {\n            vowel_count++;\n        }\n        if (consonants.indexOf(s[i]) > -1) {\n            consonant_count++;\n        }\n    }\n    if (vowel_count === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i]) > -1) {\n                result.push(s[i]);\n            }\n        }\n    }\n    if (consonant_count === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (consonants.indexOf(s[i]) > -1) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpch9io25i.js:44:12)\n    at Object.<anonymous> (/tmp/tmpch9io25i.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s.charAt(index) == ' ') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'a') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'I') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'O') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'U') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'Y') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'a') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'I') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'O') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'U') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'Y') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'a') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index + 1\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu3_6u1v8.ts(126,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if (char === ' ') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'y') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'o' || char === 'u') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y') {\n            words.push(s.substring(i));\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsm6v8da4.ts(49,680): error TS1002: Unterminated string literal.\n../../../../tmp/tmpsm6v8da4.ts(50,1): error TS1005: ')' expected.\n../../../../tmp/tmpsm6v8da4.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; ++i) {\n        let char = s[i];\n        \n        if (vowels.indexOf(char) != -1) {\n            for (let j = 0; j < n; ++j) {\n                if (consonants.indexOf(char) == -1) {\n                    result.push(char);\n                    break;\n                }\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpb3d0tbd6.js:30:12)\n    at Object.<anonymous> (/tmp/tmpb3d0tbd6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let counts: number[] = [];\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let index = counts[char];\n        counts[char] = index == undefined ? 1 : index + 1;\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let index = counts[char];\n        if (index == n) {\n            result.push(s);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6ru2dmr8.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6ru2dmr8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Ma",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let index = 0;\n    \n    while (index < s.length && index < n) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n            result.push(s[index]);\n        }\n        index++;\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmph1903_70.js:24:12)\n    at Object.<anonymous> (/tmp/tmph1903_70.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i += 1) {\n        if (vowels.indexOf(s[i]) >= 0) {\n            result.push(s[i]);\n        }\n        if (consonants.indexOf(s[i]) >= 0) {\n            let j = i;\n            while (j < s.length && consonants.indexOf(s[j++]) >= 0) {\n                result.push(s[j]);\n            }\n        }\n    }\n    if (result.length >= n) {\n        return result;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'y',\n  ' ',\n  ' ',\n  'a',\n  'a',\n  ' ',\n  'a',\n  'i',\n  'i',\n  't',\n  'l',\n  'e',\n  'l',\n  'e',\n  'e',\n  'e',\n  'a',\n  'a',\n  'b',\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_8m094v1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp_8m094v1.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',       'y', ' ',\n    ' ',       'a', 'a',\n    ' ',       'a', 'i',\n    'i',       't', 'l',\n    'e',       'l', 'e',\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let index = 0;\n    \n    while (index < s.length) {\n        let char = s[index];\n        \n        if (char === ' ') {\n            result.push(s.slice(index + 1, s.length));\n            index++;\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'y') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'n') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'd') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'h') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'r') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 's') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 't') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'p') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'f') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'v') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'b') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'm') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'k') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'j') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'x') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'q') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'z') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'x') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'z') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (char === 'y') {\n            result.push(s.slice(index + 1, index + 1));\n            index++;\n        }\n        else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpauau4lki.ts(108,9): error TS1005: ')' expected.\n../../../../tmp/tmpauau4lki.ts(123,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // Fill in the code here\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplha8wqqv.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let word = '';\n    let index = 0;\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length && s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfw4pr2wp.ts(130,1): error TS1005: ']' expected.\n../../../../tmp/tmpfw4pr2wp.ts(145,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants = select_consonants(s);\n    \n    for (let i = 0; i < consonants.length; i++) {\n        let word = s.substring(0,consonants[i]);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpotdtnmqz.ts(14,22): error TS2304: Cannot find name 'select_consonants'.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if (word.length === n) {\n            words.push(word);\n        }\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxbb8hw9a.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxbb8hw9a.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp179a6b5b.js:15:12)\n    at Object.<anonymous> (/tmp/tmp179a6b5b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    if (s === \"\") {\n        return result;\n    }\n    \n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) === \" \") {\n            count++;\n        }\n        \n        if (count === n) {\n            result.push(s.substr(0, i));\n            count = 0;\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjwcf9lqn.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjwcf9lqn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpraf6y8jb.js:21:12)\n    at Object.<anonymous> (/tmp/tmpraf6y8jb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n    \n    if (vowels.indexOf(char) !== -1) {\n      continue;\n    }\n    \n    let count = 0;\n    \n    for (let j = 0; j < s.length; j += 1) {\n      if (s[j] === char) {\n        count += 1;\n      }\n    }\n    \n    if (count === n) {\n      result.push(s);\n    }\n  }\n  \n  return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp37ewb3vb.js:34:12)\n    at Object.<anonymous> (/tmp/tmp37ewb3vb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNo",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        const word = s.substring(index, index + 1);\n        if (word.length >= n) {\n            words.push(word);\n            index += word.length;\n        }\n        else {\n            index += 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpueshlh9k.js:28:12)\n    at Object.<anonymous> (/tmp/tmpueshlh9k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\t\n\tlet words: string[] = s.split(\" \");\n\t\n\tfor (let word of words) {\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdatv5rc4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdatv5rc4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\t\n\tlet consonants = \n\t\t[\n\t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',\n\t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\tlet vowels = \n\t\t[\n\t\t\t'a', 'e', 'i', 'o', 'u', 'y'\n\t\t];\n\t\n\tlet vowels_consonants = \n\t\t[\n\t\t\t'a', 'e', 'i', 'o', 'u', 'y', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',\n\t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\tlet vowels_consonants_vowels = \n\t\t[\n\t\t\t'a', 'e', 'i', 'o', 'u', 'y', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',\n\t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\tlet vowels_consonants_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8uf7m92_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8kc3oncx.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8kc3oncx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let vowel_counter = 0;\n    let consonant_counter = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) >= 0) {\n            vowel_counter++;\n        }\n        if (consonants.indexOf(s[i]) >= 0) {\n            consonant_counter++;\n        }\n    }\n    if (vowel_counter === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n    if (consonant_counter === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (consonants.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracad\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf34f93lt.ts(70,22): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf34f93lt.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmpf34f93lt.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let letters = s.split(\"\");\n    while(index < letters.length){\n        let letter = letters[index];\n        if(letters.indexOf(letter, index) == index){\n            words.push(letter);\n            index++;\n        }\n        if(index == n){\n            break;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmppjkg5ek7.js:26:12)\n    at Object.<anonymous> (/tmp/tmppjkg5ek7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n    \n    for (let i = 1; i < s.length - 1; i++) {\n        if (s[i] !== firstLetter && s[i] !== lastLetter) {\n            result.push(s[i]);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a',\n  'm'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcf75bxgx.js:25:12)\n    at Object.<anonymous> (/tmp/tmpcf75bxgx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a', 'r', 'y', ' ', 'h',\n    'a', 'd', ' ', 'a', ' ',\n    'l', 'i', 't', 't', 'l',\n    'e', ' ', 'l', 'a', 'm'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let index = 0;\n    let currentChar = s[0];\n    let currentCount = 0;\n    \n    while (index < s.length && currentCount < n) {\n        if (s[index] == currentChar) {\n            currentCount++;\n        }\n        else {\n            if (currentCount > 0) {\n                result.push(currentChar);\n            }\n            currentChar = s[index];\n            currentCount = 1;\n        }\n        index++;\n    }\n    \n    if (currentCount > 0) {\n        result.push(currentChar);\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n  'i',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpefxst4ed.js:36:12)\n    at Object.<anonymous> (/tmp/tmpefxst4ed.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'a', 'r', 'y', ' ',\n    'h', 'a', 'd', ' ', 'a',\n    ' ', 'l', 'i', 't', 'l',\n    'e', ' ', 'l', 'a', 'm',\n    'b'\n  ],\n  expected: [ '",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let lastLetter = s[0];\n    let lastCount = 0;\n    let currentCount = 0;\n    \n    for (let i = 1; i < s.length; i++) {\n        if (s[i] !== lastLetter) {\n            if (currentCount === n) {\n                result.push(s.substring(lastLetter, i));\n            }\n            currentCount = 0;\n        }\n        currentCount++;\n        lastLetter = s[i];\n    }\n    \n    if (currentCount === n) {\n        result.push(s.substring(lastLetter, i));\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpolw8jdu1.ts(21,41): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpolw8jdu1.ts(30,33): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpolw8jdu1.ts(30,45): error TS2304: Cannot find name 'i'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement this function\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsfd0v74j.js:15:12)\n    at Object.<anonymous> (/tmp/tmpsfd0v74j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        \n        let count = 0;\n        for (let j = 0; j < consonants.length; j += 1) {\n            if (consonants[j] === char) {\n                count += 1;\n            }\n        }\n        \n        if (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk5g8hr2z.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk5g8hr2z.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n    \n    for (let i = 0; i < s.length - 1; i++) {\n        if (s[i] == firstLetter && s[i + 1] == lastLetter) {\n            result.push(s.substring(i + 1, i + 2));\n        }\n    }\n    \n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadabra\", 39\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp607zaqx2.ts(63,1): error TS1005: ',' expected.\n../../../../tmp/tmp607zaqx2.ts(63,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char === ' ') {\n            continue;\n        }\n        const consonants = count_consonants(char);\n        if (consonants === n) {\n            words.push(char);\n        }\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3f765vn6.ts(17,28): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length && currentWord.length < n) {\n        if (s[index] === \" \") {\n            result.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else {\n            currentWord += s[index];\n            index++;\n        }\n    }\n    if (currentWord.length > 0) {\n        result.push(currentWord);\n    }\n    return result;\n}\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0xwdhdkl.js:31:12)\n    at Object.<anonymous> (/tmp/tmp0xwdhdkl.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s === \"\") {\n        return result;\n    }\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels = \"aeiou\";\n    let vowel_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.indexOf(s[i]) >= 0) {\n            vowel_count++;\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) >= 0) {\n            if (vowel_count === n) {\n                result.push(s[i]);\n            }\n            vowel_count--;\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptwstqlrr.js:34:12)\n    at Object.<anonymous> (/tmp/tmptwstqlrr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index].match(/[aeiou]/i)) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(s[index]);\n\t\tn--;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'M',\n  'M',\n  'M'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpaeor6g8e.js:27:12)\n    at Object.<anonymous> (/tmp/tmpaeor6g8e.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'M', 'M', 'M' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpunkxploq.js:16:12)\n    at Object.<anonymous> (/tmp/tmpunkxploq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (consonants.indexOf(char) == -1) {\n            result.push(s[i]);\n        }\n    }\n    \n    let resultArray = result.filter(function(item){\n        return item.length == n;\n    });\n    \n    return resultArray;\n}\n\nselect_words('abracadabra', 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8tbcuwld.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8tbcuwld.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmputfnzj9i.js:16:12)\n    at Object.<anonymous> (/tmp/tmputfnzj9i.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let lastLetter: number = 0;\n    let currentLetter: number = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a') {\n            currentLetter++;\n        } else {\n            currentLetter = 0;\n        }\n        if (currentLetter === n) {\n            words.push(s.substring(lastLetter, i));\n            lastLetter = i + 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpktfh15u_.js:31:12)\n    at Object.<anonymous> (/tmp/tmpktfh15u_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            result.push(s);\n            s = '';\n        } else {\n            for (let j = 0; j < n; j++) {\n                if (char === s[j]) {\n                    result.push(s);\n                    s = '';\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgijsqjzj.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgijsqjzj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\t\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet char = s[i];\n\t\tlet count = 0;\n\t\t\n\t\tfor (let j = 0; j < char.length; j++) {\n\t\t\tif (char[j] === 'a' || char[j] === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (count === n) {\n\t\t\tresult.push(s);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnklz3bfh.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnklz3bfh.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: Your code here\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp04m22s15.js:15:12)\n    at Object.<anonymous> (/tmp/tmp04m22s15.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvf5zfxt8.js:25:12)\n    at Object.<anonymous> (/tmp/tmpvf5zfxt8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa5yj4n5u.js:15:12)\n    at Object.<anonymous> (/tmp/tmpa5yj4n5u.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    \n    for (let i = 0; i < s.length; ++i) {\n        let char = s[i];\n        \n        if (vowels.indexOf(char) == -1) {\n            result.push(char);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n  'y',\n  ' ',\n  'h',\n  'd',\n  ' ',\n  ' ',\n  'l',\n  't',\n  't',\n  'l',\n  ' ',\n  'l',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpocvnqp9i.js:24:12)\n    at Object.<anonymous> (/tmp/tmpocvnqp9i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'r', 'y', ' ',\n    'h', 'd', ' ', ' ',\n    'l', 't', 't', 'l',\n    ' ', 'l', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmr_89kwd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmr_89kwd.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === ' ') {\n            words.push(s.substr(0, index));\n            index = index + 1;\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            index = index + 1;\n        }\n        else if (char === 'n') {\n            index = index + 1;\n        }\n        else {\n            index = index + 1;\n        }\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp70i_nd7p.js:34:12)\n    at Object.<anonymous> (/tmp/tmp70i_nd7p.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334454
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  let count = 1;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  \n  if(count === n) {\n    for(let i = 0; i < s.length; i++) {\n      if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n        result.push(s[i]);\n      }\n    }\n  }\n  \n  return result;\n}\n\nselect_words('abracadabra', 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3_702hzm.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3_702hzm.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let lastLetter = s[0];\n    let currentLetter = lastLetter;\n    let currentWord = \"\";\n    for (let i = 1; i < s.length; i++) {\n        if (s[i] !== currentLetter) {\n            result.push(currentWord);\n            currentWord = currentLetter + s[i];\n            currentLetter = s[i];\n        } else {\n            currentLetter = s[i];\n        }\n    }\n    result.push(currentWord);\n    return result;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'Ma',\n  'ar',\n  'ry',\n  'y ',\n  ' h',\n  'ha',\n  'ad',\n  'd ',\n  ' a',\n  'a ',\n  ' l',\n  'li',\n  'it',\n  'tl',\n  'le',\n  'e ',\n  ' l',\n  'la',\n  'am',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuicstxgh.js:32:12)\n    at Object.<anonymous> (/tmp/tmpuicstxgh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',   'Ma', 'ar', 'ry',\n    'y ', ' h', 'ha', 'ad',\n    'd ', ' a', 'a ', ' l',\n    'li', 'it', 'tl', 'le',\n    'e ', ' l",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\t\n\tlet index = 0;\n\tlet current = 0;\n\tlet currentChar = s[0];\n\t\n\twhile (current < s.length && current < n) {\n\t\tif (currentChar === s[current]) {\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tresult.push(s.substring(index, current));\n\t\t\tindex = current;\n\t\t\tcurrent++;\n\t\t\tcurrentChar = s[current];\n\t\t}\n\t}\n\t\n\tresult.push(s.substring(index, current));\n\t\n\treturn result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'ar',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpd6jq3xwy.js:30:12)\n    at Object.<anonymous> (/tmp/tmpd6jq3xwy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'ar', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6dbfo4x0.js:15:12)\n    at Object.<anonymous> (/tmp/tmp6dbfo4x0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === ' ') {\n            index = index + 1;\n        }\n        if (s[index] === '.') {\n            index = index + 1;\n        }\n        if (s[index] === '?') {\n            index = index + 1;\n        }\n        if (s[index] === '!') {\n            index = index + 1;\n        }\n        if (s[index] === '(') {\n            index = index + 1;\n        }\n        if (s[index] === ')') {\n            index = index + 1;\n        }\n        if (s[index] === '-') {\n            index = index + 1;\n        }\n        if (s[index] === '/') {\n            index = index + 1;\n        }\n        if (s[index] === ':') {\n            index = index + 1;\n        }\n        if (s[index] === '[') {\n            index = index + 1;\n        }\n        if (s[index] === ']') {\n            index = index + 1;\n        }\n        if (s[index] === '{') {\n            index = index + 1;\n        }\n        if (s[index] === '}') {\n            index = index + 1;\n        }\n        if (s[index] === '<') {\n            index = index + 1;\n        }\n        if (s[index] === '>') {\n            index = index + 1;\n        }\n        if (s[index] === '=') {\n            index = index + 1;\n        }\n        if (s[index] === '|') {\n            index = index + 1;\n        }\n        if (s[index] === '\\\\') {\n            index = index + 1;\n        }\n        if (s[index] === ',') {\n            index = index + 1;\n        }\n        if (s[index] === '\"') {\n            index = index + 1;\n        }\n        if (s[index] === '\\'') {\n            index = index + 1;\n        }\n        if (s[index] === '`') {\n            index = index + 1;\n        }\n        if (s[index] === '~') {\n            index = index + 1;\n        }\n        if (s[index] === '*') {\n            index = index + 1;\n        }\n        if (s[index] === '?') {\n            index = index + 1;\n        }\n        if (s[index] === '!') {\n            index = index + 1;\n        }\n        if (s[index] === '(') {\n            index = index + 1;\n        }\n        if (s[index] === ')') {\n            index = index + 1;\n        }\n        if (s[index] === '-') {\n            index = index + 1;\n        }\n        if (s[index] === '/') {\n            index = index + 1;\n        }\n        if (s[index] === ':') {\n            index = index + 1;\n        }\n        if (s[index] === '[') {\n            index = index + 1;\n        }\n        if (s[index] === ']') {\n            index = index + 1;\n        }\n        if (s[index] === '{') {\n            index = index + 1;\n        }\n        if (s[index] === '}') {\n            index = index + 1;\n        }\n        if (s[index] === '<') {\n            index = index + 1;\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprikl2k1m.ts(135,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4kl_tekh.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4kl_tekh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word.charAt(j) === 'a' || word.charAt(j) === 'e' || word.charAt(j) === 'i' || word.charAt(j) === 'o' || word.charAt(j) === 'u') {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzmk1hdvo.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzmk1hdvo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let count = 0;\n        for (let j = 0; j < char.length; j++) {\n            if (char[j] === 'a' || char[j] === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(char);\n        }\n    }\n    return result;\n}\nselect_words('abracadabra', 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmph2jf7hys.js:27:12)\n    at Object.<anonymous> (/tmp/tmph2jf7hys.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n    for (let i = 1; i < s.length - 1; i++) {\n        if (s[i] !== firstLetter) {\n            result.push(s.substring(i - 1, i));\n        }\n        if (s[i] === firstLetter && s[i + 1] === lastLetter) {\n            result.push(s.substring(i - 1, i + 2));\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp738ct2mc.js:28:12)\n    at Object.<anonymous> (/tmp/tmp738ct2mc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'a', 'r', 'y', ' ',\n    'h', 'a', 'd', ' ', 'a',\n    ' ', 'l', 'i', 't', 't',\n    'l', 'e', ' ', 'l', 'a'\n  ],\n  expected: [ 'little' ],\n  ope",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            result.push(s.substr(0, i));\n        }\n    }\n    return result;\n}\nselect_words('abc def ghi', 2); // ['abc def', 'ghi']\nselect_words('abc def ghi', 3); // ['abc def']\nselect_words('abc def ghi', 4); // []\nselect_words('abc def ghi', 5); // []\nselect_words('abc def ghi', 6); // []\nselect_words('abc def ghi', 7); // []\nselect_words('abc def ghi', 8); // []\nselect_words('abc def ghi', 9); // []\nselect_words('abc def ghi', 10); // []\nselect_words('abc def ghi', 11); // []\nselect_words('abc def ghi', 12); // []\nselect_words('abc def ghi', 13); // []\nselect_words('abc def ghi', 14); // []\nselect_words('abc def ghi', 15); // []\nselect_words('abc def ghi', 16); // []\nselect_words('abc def ghi', 17); // []\nselect_words('abc def ghi', 18); // []\nselect_words('abc def ghi', 19); // []\nselect_words('abc def ghi', 20); // []\nselect_words('abc def ghi', 21); // []\nselect_words('abc def ghi', 22); // []\nselect_words('abc def ghi', 23); // []\nselect_words('abc def ghi', 24); // []\nselect_words('abc def ghi', 25); // []\nselect_words('abc def ghi', 26); // []\nselect_words('abc def ghi', 27); // []\nselect_words('abc def ghi', 28); // []\nselect_words('abc def ghi', 29); // []\nselect_words('abc def ghi', 30); // []\nselect_words('abc def ghi', 31); // []\nselect_words('abc def ghi', 32); // []\nselect_words('abc def ghi', 33); // []\nselect_words('abc def ghi', 34); // []\nselect_words('abc def ghi', 35); // []\nselect_words('abc def ghi', 36); // []\nselect_words('abc def ghi', 37); // \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuxl3rclp.js:55:12)\n    at Object.<anonymous> (/tmp/tmpuxl3rclp.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let currentChar = s[0];\n    while (index < s.length && currentChar === s[index]) {\n        currentChar = s[index];\n        index++;\n    }\n    if (currentChar === s[index]) {\n        words.push(s.substr(0, index));\n    }\n    while (index < s.length && currentChar !== s[index]) {\n        index++;\n    }\n    if (index < s.length) {\n        words.push(s.substr(index));\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkbdsjrke.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkbdsjrke.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmr_89kwd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmr_89kwd.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index = index + 1;\n        } else if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            index = index + 1;\n        } else if (s[index] === \"y\") {\n            index = index + 1;\n        } else {\n            result.push(s[index]);\n            index = index + 1;\n        }\n        n--;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8hh0ypn0.js:31:12)\n    at Object.<anonymous> (/tmp/tmp8hh0ypn0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n    \n    for (let i = 1; i <= n; i++) {\n        let letter = s[(i - 1) * s.length + i];\n        \n        if (letter === firstLetter) {\n            result.push(s.slice(0, i));\n        }\n        \n        if (letter === lastLetter) {\n            result.push(s.slice(i * s.length, s.length));\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp87u589_8.js:29:12)\n    at Object.<anonymous> (/tmp/tmp87u589_8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  let last: number = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      last = i;\n    }\n  }\n  \n  let start = 0;\n  \n  while (last != -1) {\n    let end = s.indexOf(' ', last);\n    \n    if (end == -1) {\n      end = s.length;\n    }\n    \n    if (end - start == n) {\n      result.push(s.substring(start, end + 1));\n      start = end + 1;\n    }\n    \n    last = s.indexOf(' ', last);\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoz4eo6mp.js:35:12)\n    at Object.<anonymous> (/tmp/tmpoz4eo6mp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let word of words) {\n        let consonants: number[] = word.split('').filter(c => c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u');\n        \n        if (consonants.length === n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv37qyod1.ts(17,13): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            result.push(char);\n        }\n        else if (consonants.indexOf(char) !== -1) {\n            result.push(char);\n        }\n    }\n    \n    if (result.length === n) {\n        return result;\n    }\n    \n    return [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7odp84nh.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7odp84nh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length - 1) {\n\t\tlet letter = s[index];\n\t\tif (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpokp8jsy0.js:26:12)\n    at Object.<anonymous> (/tmp/tmpokp8jsy0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s == \"\") {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i].match(/[aeiou]/)) {\n            if (chars[i].match(/[aeiou]/).length == n) {\n                words.push(chars[i]);\n            }\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm_svvs6v.js:26:12)\n    at Object.<anonymous> (/tmp/tmpm_svvs6v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tlet isMatch = word.match(/[bcdfghjklmnpqrstvwxyz]{n}/);\n\t\tif (isMatch) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp61r7jrta.js:23:12)\n    at Object.<anonymous> (/tmp/tmp61r7jrta.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        \n        let count = 0;\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char) {\n                count++;\n            }\n        }\n        \n        if (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_kjwnfxm.js:33:12)\n    at Object.<anonymous> (/tmp/tmp_kjwnfxm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNo",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n            n -= 1;\n        }\n        index += 1;\n    }\n    if (n === 0) {\n        return result;\n    }\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n            n -= 1;\n            result.push(s[index]);\n            index += 1;\n        }\n        index += 1;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuudr91un.ts(9,9): error TS2451: Cannot redeclare block-scoped variable 'index'.\n../../../../tmp/tmpuudr91un.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'index'.\n",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            continue;\n        }\n        let count = 0;\n        for (let j = 0; j < char.length; j++) {\n            if (char[j] === 'a' || char[j] === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n                count++;\n            }\n        }\n        if (count === n) {\n            words.push(s);\n        }\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplsltet8h.js:32:12)\n    at Object.<anonymous> (/tmp/tmplsltet8h.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            result.push(s[i]);\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'n') {\n            result.push(s[i]);\n        }\n        else if (char === 'd') {\n            result.push(s[i]);\n        }\n        else if (char === 'g') {\n            result.push(s[i]);\n        }\n        else if (char === 'b' || char === 'c' || char === 'm' || char === 'p' || char === 'f' || char === 'v' || char === 'w' || char === 'k' || char === 'x') {\n            result.push(s[i]);\n        }\n        else if (char === 'q') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'x') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp84mcfo52.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334457
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let i = 0; i < words.length; i++) {\n        let word: string = words[i];\n        let consonants: string[] = word.split('');\n        \n        for (let j = 0; j < consonants.length; j++) {\n            if (consonants[j].match(/[b-df-hj-np-tv-z]/)) {\n                result.push(word);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words('abracadabra', 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'had',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpiksyk4k8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpiksyk4k8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'had', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334458
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let words: string[] = s.split(\" \");\n    \n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let consonants: string[] = word.split(\"\");\n        \n        for (let j = 0; j < consonants.length; j++) {\n            if (consonants[j] == n) {\n                result.push(word);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf9f1i7zq.ts(21,17): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n",
      "timestamp": 1660334458
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n    let word = s.substr(i, n);\n    if (word.length == n) {\n      result.push(word);\n    }\n  }\n  \n  return result;\n}\n\nselect_words(\"abracadabra\", 5);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpurhmjr_t.js:24:12)\n    at Object.<anonymous> (/tmp/tmpurhmjr_t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let vowel_count = 0;\n    let consonant_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) >= 0) {\n            vowel_count++;\n        }\n        if (consonants.indexOf(s[i]) >= 0) {\n            consonant_count++;\n        }\n    }\n    if (vowel_count === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n    if (consonant_count === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (consonants.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2); // => [\"abra\", \"abracadabra\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"abracadabra\", 24); // => []\nselect_words(\"abracadabra\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg7myi0eg.ts(60,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpg7myi0eg.ts(61,1): error TS1005: ',' expected.\n../../../../tmp/tmpg7myi0eg.ts(61,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": -1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && index < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            words.push(s[index]);\n            index++;\n        }\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334475
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"n\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"t\" || char === \"h\" || char === \"r\" || char === \"l\" || char === \"d\" || char === \"s\" || char === \"z\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"c\" || char === \"k\" || char === \"m\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"m\" || char === \"n\" || char === \"g\" || char === \"k\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"p\" || char === \"t\" || char === \"h\" || char === \"r\" || char === \"l\" || char === \"d\" || char === \"s\" || char === \"z\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"c\" || char === \"k\" || char === \"m\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"m\" || char === \"n\" || char === \"g\" || char === \"k\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"p\" || char === \"t\" || char === \"h\" || char === \"r\" || char === \"l\" || char === \"d\" || char === \"s\" || char === \"z\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"c\" || char === \"k\" || char === \"m\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n        } else if (char === \"m\" || char === \"n\" || char === \"g\" || char === \"k\" || char === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbx97xww0.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substring(i, i + n);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa34cbygh.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa34cbygh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": -1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\twords.push(s.substr(index));\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (char === s[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === n) {\n\t\t\twords.push(s.substr(index));\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334475
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let start = 0;\n    let end = s.length - 1;\n    \n    while (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        let char = s[mid];\n        \n        if (char == ' ') {\n            end = mid - 1;\n        } else {\n            if (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u') {\n                start = mid + 1;\n            } else {\n                result.push(s.substring(start, mid + 1));\n                start = mid + 1;\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsfuyr6qw.js:35:12)\n    at Object.<anonymous> (/tmp/tmpsfuyr6qw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let charCount = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char.match(/[aeiou]/)) {\n            charCount++;\n        }\n        if (charCount === n) {\n            words.push(s[index]);\n        }\n        index++;\n        charCount = 0;\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 2); // [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // [\"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 5); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 6); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 7); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 8); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 9); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 10); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 11); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 12); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 13); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 14); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyh1ynzbf.js:43:12)\n    at Object.<anonymous> (/tmp/tmpyh1ynzbf.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // code goes here\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp__xx03r2.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8pcc8qzm.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8pcc8qzm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpouuny1tr.js:20:12)\n    at Object.<anonymous> (/tmp/tmpouuny1tr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length >= n) {\n            result.push(word);\n        }\n        i += n;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6bukmd63.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6bukmd63.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp179a6b5b.js:15:12)\n    at Object.<anonymous> (/tmp/tmp179a6b5b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4kl_tekh.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4kl_tekh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; ++i) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            result.push(char);\n        }\n        else if (consonants.indexOf(char) !== -1) {\n            if (result.length == n) {\n                break;\n            }\n            else {\n                result.push(char);\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1ihvy2bf.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1ihvy2bf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a', 'r', 'y', 'h', 'a',\n    'd', 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n    'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        \n        let count = 0;\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char) {\n                count++;\n            }\n        }\n        \n        if (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_kjwnfxm.js:33:12)\n    at Object.<anonymous> (/tmp/tmp_kjwnfxm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNo",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            words.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpez2brj17.js:25:12)\n    at Object.<anonymous> (/tmp/tmpez2brj17.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\twords.push(s.substring(index + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n\t\t\twords.push(s.substring(index + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'y') {\n\t\t\twords.push(s.substring(index + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word = words[i];\n\t\tlet count = 0;\n\t\tfor (let j = 0; j < word.length; j++) {\n\t\t\tif (word[j] === char) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === n) {\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv296pgho.ts(33,20): error TS2304: Cannot find name 'char'.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let chars = s.split('');\n    \n    for (let i = 0; i < chars.length; i++) {\n        let char = chars[i];\n        \n        if (char.match(/[aeiou]/)) {\n            if (char.match(/[aeiou]/).length == n) {\n                result.push(char);\n            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbr_ocqml.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbr_ocqml.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpo94yi70z.js:25:12)\n    at Object.<anonymous> (/tmp/tmpo94yi70z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && index < n) {\n        if (s[index] === ' ') {\n            words.push(s.substr(index, s.length));\n            index++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpowwjfr02.js:22:12)\n    at Object.<anonymous> (/tmp/tmpowwjfr02.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnob2l1fp.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let words: string[] = [];\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if (char === ' ') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'y') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'n') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 't') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'h') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'r') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'l') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'd') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'c') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'm') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'k') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'p') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'f') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'v') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'b') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'q') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'j') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (char === 'q') {\n            words.push(...words);\n            words = [];\n            continue;\n        }\n        \n        if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_e1d52fs.ts(134,9): error TS1005: ')' expected.\n../../../../tmp/tmp_e1d52fs.ts(149,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) != -1) {\n            for (let j = 0; j < n; j++) {\n                let index = consonants.indexOf(char);\n                if (index != -1) {\n                    result.push(s.substring(i, i + index));\n                }\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkk96vekg.js:31:12)\n    at Object.<anonymous> (/tmp/tmpkk96vekg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334461
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    const vowel_count = vowels.filter(v => s.indexOf(v) !== -1).length;\n    const consonant_count = consonants.filter(c => s.indexOf(c) !== -1).length;\n    if (vowel_count === n) {\n        words.push(s);\n    }\n    if (consonant_count === n) {\n        words.push(s);\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpo7xdq6p8.js:27:12)\n    at Object.<anonymous> (/tmp/tmpo7xdq6p8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334462
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words = [];\n    if (s.length === 0) {\n        return words;\n    }\n    let vowels = \"aeiou\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        let count = 0;\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char) {\n                count++;\n            }\n        }\n        if (count === n) {\n            words.push(char);\n        }\n    }\n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvfv0sz4l.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvfv0sz4l.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334462
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // code goes here\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgd8u4wl1.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334462
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf3mv13gr.js:24:12)\n    at Object.<anonymous> (/tmp/tmpf3mv13gr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334462
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // Fill in the code here\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcduttc8t.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334462
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char = s[i];\n        \n        if (char === ' ') {\n            continue;\n        }\n        \n        let count = 0;\n        \n        for (let j = 0; j < char.length; j += 1) {\n            if (char[j] === char[i]) {\n                count += 1;\n            }\n        }\n        \n        if (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpch567y7d.js:32:12)\n    at Object.<anonymous> (/tmp/tmpch567y7d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334462
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && index < n) {\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'y') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'n') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'd') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'g') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'c') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'p') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'f') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'v') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'z') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'k') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'j') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'q') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 't') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'x') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'z') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'm') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'b') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'k') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'j') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'q') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptz2f1h1n.ts(134,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334462
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char) == -1) {\n                result.push(s[i]);\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  ' ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc6fwoe8f.js:27:12)\n    at Object.<anonymous> (/tmp/tmpc6fwoe8f.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', ' ', ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334462
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    if (s.length === 0) {\n        return words;\n    }\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substring(i, i + n);\n        if (word.length === n) {\n            words.push(word);\n            i += n;\n        }\n        else {\n            i += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprr6jlowi.js:28:12)\n    at Object.<anonymous> (/tmp/tmprr6jlowi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && s.length >= n) {\n        let char = s.charAt(index);\n        if (char === \" \") {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            index++;\n        }\n        else {\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little lamb',\n  ' a little lamb',\n  ' little lamb',\n  ' lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpooozz5dj.js:28:12)\n    at Object.<anonymous> (/tmp/tmpooozz5dj.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a little lamb', ' a little lamb', ' little lamb', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        \n        for (let j = 0; j < word.length; j++) {\n            if (word.charAt(j) === 'a' || word.charAt(j) === 'e' || word.charAt(j) === 'i' || word.charAt(j) === 'o' || word.charAt(j) === 'u') {\n                count++;\n            }\n        }\n        \n        if (count === n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"a man a plan a canal panama\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnjzdyp_6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpnjzdyp_6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let index = 0;\n    let chars = Array.from(s);\n    \n    while (index < chars.length) {\n        let char = chars[index];\n        if (char.match(/[aeiou]/)) {\n            if (chars.slice(index).filter(c => c.match(/[aeiou]/)).length == n) {\n                result.push(char);\n            }\n            index++;\n        }\n        index++;\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2w_s2aoj.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2w_s2aoj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpunkxploq.js:16:12)\n    at Object.<anonymous> (/tmp/tmpunkxploq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tlet isMatch = word.match(/[bcdfghjklmnpqrstvwxyz]{n}/);\n\t\tif (isMatch) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp61r7jrta.js:23:12)\n    at Object.<anonymous> (/tmp/tmp61r7jrta.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet j = i;\n\t\twhile (j < s.length && s[j] === ' ') {\n\t\t\tj++;\n\t\t}\n\t\tlet k = j;\n\t\twhile (k < s.length && s[k] === ' ') {\n\t\t\tk++;\n\t\t}\n\t\tif (j - i === n) {\n\t\t\tresult.push(s.substring(i, j));\n\t\t\ti = j + 1;\n\t\t}\n\t\telse if (k - j === n) {\n\t\t\tresult.push(s.substring(j, k));\n\t\t\ti = k + 1;\n\t\t}\n\t\telse {\n\t\t\ti = j + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjw0nepa2.js:36:12)\n    at Object.<anonymous> (/tmp/tmpjw0nepa2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants: string[] = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    \n    for (let i = 0; i < s.length; i++) {\n        let letter = s[i];\n        \n        for (let j = 0; j < consonants.length; j++) {\n            if (letter == consonants[j]) {\n                result.push(letter);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n  'h',\n  'd',\n  'l',\n  't',\n  't',\n  'l',\n  'l',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_du9si46.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_du9si46.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'r', 'y', 'h', 'd',\n    'l', 't', 't', 'l',\n    'l', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words = [];\n    \n    if (s.length == 0) {\n        return words;\n    }\n    \n    let i = 0;\n    while (i < s.length && n > 0) {\n        if (s.charAt(i) == ' ') {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase()) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ghy427.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334463
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] == ' ') {\n            index = index + 1;\n        }\n        if (s[index] == ' ' || s[index] == '.' || s[index] == '!' || s[index] == '?') {\n            index = index + 1;\n        }\n        if (s[index] == 'a' || s[index] == 'e' || s[index] == 'i' || s[index] == 'o' || s[index] == 'u') {\n            index = index + 1;\n        }\n        if (s[index] == 'y') {\n            index = index + 1;\n        }\n        if (s[index] == 's' || s[index] == 't' || s[index] == 'd' || s[index] == 'g' || s[index] == 'b' || s[index] == 'c') {\n            index = index + 1;\n        }\n        if (s[index] == 'p') {\n            index = index + 1;\n        }\n        if (s[index] == 'f' || s[index] == 'v' || s[index] == 'm' || s[index] == 'n' || s[index] == 'k' || s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'q') {\n            index = index + 1;\n        }\n        if (s[index] == 'z') {\n            index = index + 1;\n        }\n        if (s[index] == 'j') {\n            index = index + 1;\n        }\n        if (s[index] == 'q') {\n            index = index + 1;\n        }\n        if (s[index] == 'z') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index] == 'k') {\n            index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n        }\n        if (s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp77iunyte.ts(111,1): error TS1005: ']' expected.\n../../../../tmp/tmp77iunyte.ts(126,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let words: string[] = s.split(\" \");\n    \n    for (let i = 0; i < words.length; i++) {\n        let word: string = words[i];\n        \n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjm4a074l.js:25:12)\n    at Object.<anonymous> (/tmp/tmpjm4a074l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334463
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    if (s.length === 0) {\n        return words;\n    }\n    let consonants = /[b-df-hj-np-tv-z]/g;\n    let vowels = /[aeiouy]/g;\n    let consonants_count = s.match(consonants).length;\n    let vowels_count = s.match(vowels).length;\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) === consonants.charAt(consonant_count)) {\n            consonant_count++;\n            if (consonant_count === n) {\n                words.push(s.substr(0, i));\n            }\n        }\n        if (s.charAt(i) === vowels.charAt(vowel_count)) {\n            vowel_count++;\n            if (vowel_count === n) {\n                words.push(s.substr(0, i));\n            }\n        }\n    }\n    return words;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaojptst3.ts(19,40): error TS2339: Property 'charAt' does not exist on type 'RegExp'.\n../../../../tmp/tmpaojptst3.ts(25,36): error TS2339: Property 'charAt' does not exist on type 'RegExp'.\n",
      "timestamp": 1660334463
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let lastLetter = s[0];\n    let lastCount: number = 0;\n    for (let i = 1; i < s.length; i++) {\n        if (s[i] !== lastLetter) {\n            if (lastCount === n) {\n                result.push(s.slice(lastLetter, i));\n            }\n            lastCount = 1;\n            lastLetter = s[i];\n        } else {\n            lastCount++;\n        }\n    }\n    if (lastCount === n) {\n        result.push(s.slice(lastLetter));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfkjtcgl4.ts(17,37): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpfkjtcgl4.ts(26,29): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334463
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index + 1);\n        if (word.length >= n && word.match(/[aeiou]/)) {\n            words.push(word);\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprvrr_i5e.js:25:12)\n    at Object.<anonymous> (/tmp/tmprvrr_i5e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334464
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'y') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'n') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'y',\n  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps4hka5g8.js:37:12)\n    at Object.<anonymous> (/tmp/tmps4hka5g8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a', 'y', ' ', 'a',\n    ' ', 'a', ' ', 'i',\n    'e', ' ', 'a'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334465
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i].match(/[aeiou]/i)) {\n            if (chars[i].match(/[aeiou]/i).length == n) {\n                result.push(chars[i]);\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadabra\", 39);\nselect_words(\"abracadabra\", 40\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp15qpkl4k.ts(59,1): error TS1005: ',' expected.\n../../../../tmp/tmp15qpkl4k.ts(59,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334465
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === ' ') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'y') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'n') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 't') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'h') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'r') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'l') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'd') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'c') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'm') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'p') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'f') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'v') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'b') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 's') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'x') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'q') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'k') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'j') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'q') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'p') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'f') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'v') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === 'b') {\n            words.push(s.substr(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppcnl9rll.ts(113,9): error TS1005: ',' expected.\n../../../../tmp/tmppcnl9rll.ts(128,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334465
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    if (s.length == 0) {\n        return words;\n    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if (consonants.indexOf(char) == -1) {\n            words.push(char);\n        }\n    }\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxo7fu3s_.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxo7fu3s_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'a', ' ', 'a',\n    ' ', 'a', ' ', 'i',\n    'e', ' ', 'a'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334465
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels = \"aeiou\";\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char = s[i];\n        \n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        \n        if (consonants.indexOf(char) !== -1) {\n            let word = \"\";\n            \n            for (let j = 0; j < n; j += 1) {\n                word += char;\n            }\n            \n            words.push(word);\n        }\n    }\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'rrrr',\n  'yyyy',\n  'hhhh',\n  'dddd',\n  'llll',\n  'tttt',\n  'tttt',\n  'llll',\n  'llll',\n  'mmmm',\n  'bbbb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk689qcqe.js:33:12)\n    at Object.<anonymous> (/tmp/tmpk689qcqe.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'rrrr', 'yyyy',\n    'hhhh', 'dddd',\n    'llll', 'tttt',\n    'tttt', 'llll',\n    'llll', 'mmmm',\n    'bbbb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.",
      "stdout": "",
      "timestamp": 1660334465
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index + 1);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpak0cvdbn.js:25:12)\n    at Object.<anonymous> (/tmp/tmpak0cvdbn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6dbfo4x0.js:15:12)\n    at Object.<anonymous> (/tmp/tmp6dbfo4x0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvnqqohly.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvnqqohly.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0_n66ik_.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0_n66ik_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s === '') {\n        return result;\n    }\n    let chars = s.split('');\n    for (let i = 0; i < chars.length; i++) {\n        let char = chars[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpeh5eoeg5.js:24:12)\n    at Object.<anonymous> (/tmp/tmpeh5eoeg5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && s.length >= n) {\n        let word = s.substring(index, index + 1);\n        if (word.length >= n && word.match(/[^aeiou]/)) {\n            words.push(word);\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqx_hzivx.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqx_hzivx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let lastChar = s[0];\n    let count = 0;\n    \n    for (let i = 1; i < s.length; i++) {\n        if (s[i] !== lastChar) {\n            count++;\n        }\n        else {\n            count--;\n        }\n        \n        if (count === n) {\n            result.push(s);\n        }\n        lastChar = s[i];\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzhrp8uo7.js:31:12)\n    at Object.<anonymous> (/tmp/tmpzhrp8uo7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdedaa5g_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdedaa5g_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants = consonants(s);\n    \n    for (let i = 0; i < consonants.length; i++) {\n        let word = s.split(consonants[i]);\n        if (word.length == n) {\n            result.push(word.join(consonants[i]));\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp01ysoetg.ts(14,22): error TS2448: Block-scoped variable 'consonants' used before its declaration.\n",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmr_89kwd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmr_89kwd.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8zulqy4a.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8zulqy4a.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && s[index] == ' ') {\n        index++;\n    }\n    let word = '';\n    while (index < s.length && s[index] != ' ') {\n        if (s[index] == ' ') {\n            words.push(word);\n            word = '';\n            index++;\n        } else {\n            word += s[index];\n            index++;\n        }\n    }\n    words.push(word);\n    return words;\n}\nselect_words(\"abc def ghi jkl mno pqr stu vwx yz\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6tlyj0qw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp6tlyj0qw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334467
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s === '') {\n        return result;\n    }\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            continue;\n        }\n        let count = 0;\n        for (let j = 0; j < n; j++) {\n            if (char === s[j]) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9qmqdaxa.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9qmqdaxa.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let chars = s.split('');\n    let count = 0;\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i].match(/[aeiou]/i)) {\n            count++;\n        }\n    }\n    if (count === n) {\n        result.push(s);\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadabra\", 39);\nselect_words(\"abracadabra\", \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9znwfqs.ts(63,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  const stack: number[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === ' ') {\n      while (stack.length > 0 && stack[stack.length - 1] > 0) {\n        words.push(s.substring(stack[stack.length - 1] + 1, i));\n        stack.pop();\n      }\n      stack.push(i);\n    }\n  }\n  while (stack.length > 0) {\n    words.push(s.substring(stack[stack.length - 1] + 1, s.length));\n    stack.pop();\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'had',\n  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_a9fb_v0.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_a9fb_v0.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'had', 'a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let index = 0;\n    while (index < s.length && index < n) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n            result.push(s[index]);\n        }\n        index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8ap_1f1y.js:24:12)\n    at Object.<anonymous> (/tmp/tmp8ap_1f1y.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334466
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n){\n\t\t\tresult.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpaj8bjgdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpaj8bjgdt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334467
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) != -1) {\n            for (let j = 0; j < n; j++) {\n                if (consonants.indexOf(char) == j) {\n                    result.push(s[i]);\n                }\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6i3druyr.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6i3druyr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334467
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2); // [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 5); // []\nselect_words(\"abracadabra\", 6); // []\nselect_words(\"abracadabra\", 7); // []\nselect_words(\"abracadabra\", 8); // []\nselect_words(\"abracadabra\", 9); // []\nselect_words(\"abracadabra\", 10); // []\nselect_words(\"abracadabra\", 11); // []\nselect_words(\"abracadabra\", 12); // []\nselect_words(\"abracadabra\", 13); // []\nselect_words(\"abracadabra\", 14); // []\nselect_words(\"abracadabra\", 15); // []\nselect_words(\"abracadabra\", 16); // []\nselect_words(\"abracadabra\", 17); // []\nselect_words(\"abracadabra\", 18); // []\nselect_words(\"abracadabra\", 19); // []\nselect_words(\"abracadabra\", 20); // []\nselect_words(\"abracadabra\", 21); // []\nselect_words(\"abracadabra\", 22); // []\nselect_words(\"abracadabra\", 23); // []\nselect_words(\"abracadabra\", 24); // []\nselect_words(\"abracadabra\", 25); // []\nselect_words(\"abracadabra\", 26); // []\nselect_words(\"abracadabra\", 27); // []\nselect_words(\"abracadabra\", 28); // []\nselect_words(\"abracadabra\", 29); // []\nselect_words(\"abracadabra\", 30); // []\nselect_words(\"abracadabra\", 31); // []\nselect_words(\"abracadabra\", 32); // []\nselect_words(\"abracadabra\", 33); // []\nselect_words(\"abracadabra\", 34); // []\nselect_words(\"abracadabra\", 35); // []\nselect_words(\"abracadabra\", 36); // []\nselect_words(\"abracadabra\", 37); // []\nselect_words(\"abracad\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppidzmr9t.ts(51,22): error TS1002: Unterminated string literal.\n../../../../tmp/tmppidzmr9t.ts(52,1): error TS1005: ',' expected.\n../../../../tmp/tmppidzmr9t.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334468
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp76f8kppr.js:25:12)\n    at Object.<anonymous> (/tmp/tmp76f8kppr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334469
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    // TODO: implement this function\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsfd0v74j.js:15:12)\n    at Object.<anonymous> (/tmp/tmpsfd0v74j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word[j] === 'c') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpy_q4w9mr.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy_q4w9mr.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334469
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n    \n    for(let i = 0; i < chars.length; i++) {\n        if(chars[i].match(/[aeiou]/)) {\n            chars.splice(i, 1);\n            i--;\n        }\n    }\n    \n    for(let i = 0; i < chars.length; i++) {\n        if(chars[i].match(/[aeiou]/)) {\n            if(chars[i].match(/[aeiou]/).length == n) {\n                result.push(chars[i]);\n            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp068me03e.js:30:12)\n    at Object.<anonymous> (/tmp/tmp068me03e.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334469
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s == \"\") {\n        return result;\n    }\n    \n    let char_count: number = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            char_count++;\n        }\n    }\n    \n    if (char_count < n) {\n        return result;\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            char_count++;\n        }\n        else if (s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\") {\n            result.push(s.substr(0, i));\n        }\n    }\n    \n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary h',\n  'Mary had ',\n  'Mary had a l',\n  'Mary had a littl',\n  'Mary had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa6j0r9oj.js:34:12)\n    at Object.<anonymous> (/tmp/tmpa6j0r9oj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n    'Mary h',\n    'Mary had ',\n    'Mary had a l',\n    'Mary had a littl',\n    'Mary had a little l'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334469
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let index = 0;\n    let index2 = 0;\n    \n    while (index < s.length && index2 < n) {\n        if (s[index] == s[index2]) {\n            index++;\n            index2++;\n        }\n        else {\n            result.push(s[index]);\n            index++;\n            index2 = 0;\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpr0xce99c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpr0xce99c.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334469
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq70d3pc8.ts(7,46): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4g76zc18.js:25:12)\n    at Object.<anonymous> (/tmp/tmp4g76zc18.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    const result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === ' ') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'a') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'e') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'i') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'o') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'u') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else if (char === 'y') {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else {\n            result.push(s.substr(index, n - 1));\n            index += n - 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mar',\n  'y h',\n  'ad ',\n  'a l',\n  'itt',\n  'le ',\n  'lam',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmq0ke6rz.js:53:12)\n    at Object.<anonymous> (/tmp/tmpmq0ke6rz.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mar', 'y h',\n    'ad ', 'a l',\n    'itt', 'le ',\n    'lam', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index = index + 1;\n        } else {\n            result.push(s[index]);\n            index = index + 1;\n        }\n        n--;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpupecwu25.js:25:12)\n    at Object.<anonymous> (/tmp/tmpupecwu25.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    if (s.length == 0) {\n        return words;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char) == -1) {\n                words.push(s);\n            }\n        }\n    }\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8etocqo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz8etocqo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index + 1);\n        if (word.length >= n) {\n            words.push(word);\n            index += word.length;\n        }\n        else {\n            index += 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkbt0dtpw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkbt0dtpw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n    if (word.length === n) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqep1zj8t.js:25:12)\n    at Object.<anonymous> (/tmp/tmpqep1zj8t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n    }\n    \n    let word = \"\";\n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n            count++;\n            if (count === n) {\n                words.push(word);\n                word = \"\";\n                count = 0;\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    \n    return words;\n}\n\nconsole.log(select_words(\"aeiou\", 3));\nconsole.log(select_words(\"aeiou\", 4));\nconsole.log(select_words(\"aeiou\", 5));\nconsole.log(select_words(\"aeiou\", 6));\nconsole.log(select_words(\"aeiou\", 7));\nconsole.log(select_words(\"aeiou\", 8));\nconsole.log(select_words(\"aeiou\", 9));\nconsole.log(select_words(\"aeiou\", 10));\nconsole.log(select_words(\"aeiou\", 11));\nconsole.log(select_words(\"aeiou\", 12));\nconsole.log(select_words(\"aeiou\", 13));\nconsole.log(select_words(\"aeiou\", 14));\nconsole.log(select_words(\"aeiou\", 15));\nconsole.log(select_words(\"aeiou\", 16));\nconsole.log(select_words(\"aeiou\", 17));\nconsole.log(select_words(\"aeiou\", 18));\nconsole.log(select_words(\"aeiou\", 19));\nconsole.log(select_words(\"aeiou\", 20));\nconsole.log(select_words(\"aeiou\", 21));\nconsole.log(select_words(\"aeiou\", 22));\nconsole.log(select_words(\"aeiou\", 23));\nconsole.log(select_words(\"aeiou\", 24));\nconsole.log(select_words(\"aeiou\", 25));\nconsole.log(select_words(\"aeiou\", 26));\nconsole.log(select_words(\"aeiou\", 27));\nconsole.log(select_words(\"aeiou\", 28));\nconsole.log(select_words(\"aeiou\", 29));\nconsole.log(select_words(\"aeiou\", 30));\nconsole.log(select_words(\"aeiou\", 31));\nconsole.log(select_words(\"aeiou\", 32));\nconsole.log(select_words(\"aeiou\", 33));\nconsole.log(select_words(\"aeiou\", 34));\nconsole.log(select_words(\"aeiou\", 35));\nconsole.log(select_words(\"aeiou\", 36));\nconsole.log(select_words(\"aeiou\", 37));\nconsole.log(select_words(\"aeiou\", 38));\nconsole.log(select_words(\"aeiou\", 39));\nconsole.log(select_words(\"aeiou\", 40));\nconsole.log(select_words(\"aeiou\", 41));\nconsole.log(select_words(\"aeiou\", 42));\nconsole.log(select_words(\"aeiou\", 43));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphntbft54.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpty7t6coi.js:25:12)\n    at Object.<anonymous> (/tmp/tmpty7t6coi.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length - 1) {\n        let word = s.substring(index, index + n);\n        if (word.length == n) {\n            words.push(word);\n        }\n        index += n;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpse5if_nb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpse5if_nb.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word[j] === 'c') {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words('abracadabra', 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp69ap9ybj.js:31:12)\n    at Object.<anonymous> (/tmp/tmp69ap9ybj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            result.push(s[i]);\n        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'o' || char === 'u' || char === 'i' || char === 'e' || char === 'a') {\n            result.push(s[i]);\n        }\n        else if (char === 'n') {\n            result.push(s[i]);\n        }\n        else if (char === 'd') {\n            result.push(s[i]);\n        }\n        else if (char === 't') {\n            result.push(s[i]);\n        }\n        else if (char === 'h') {\n            result.push(s[i]);\n        }\n        else if (char === 'r') {\n            result.push(s[i]);\n        }\n        else if (char === 'l') {\n            result.push(s[i]);\n        }\n        else if (char === 'c') {\n            result.push(s[i]);\n        }\n        else if (char === 'm') {\n            result.push(s[i]);\n        }\n        else if (char === 'p') {\n            result.push(s[i]);\n        }\n        else if (char === 's') {\n            result.push(s[i]);\n        }\n        else if (char === 'f') {\n            result.push(s[i]);\n        }\n        else if (char === 'v') {\n            result.push(s[i]);\n        }\n        else if (char === 'b') {\n            result.push(s[i]);\n        }\n        else if (char === 'k') {\n            result.push(s[i]);\n        }\n        else if (char === 'j') {\n            result.push(s[i]);\n        }\n        else if (char === 'q') {\n            result.push(s[i]);\n        }\n        else if (char === 'x') {\n            result.push(s[i]);\n        }\n        else if (char === 'q') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'x') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\n        }\n        else if (char === 'y') {\n            result.push(s[i]);\n        }\n        else if (char === 'z') {\n            result.push(s[i]);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpttcgnkzu.ts(142,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            result.push(s.substr(0, i));\n        }\n    }\n    return result;\n}\nselect_words(\"The quick brown fox jumps over the lazy dog\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpulu7x56c.js:20:12)\n    at Object.<anonymous> (/tmp/tmpulu7x56c.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n        if (consonants.indexOf(char) !== -1) {\n            result.push(s);\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadabra\", 39);\nselect_word\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpepzu_jwv.ts(62,1): error TS2552: Cannot find name 'select_word'. Did you mean 'select_words'?\n",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === \" \") {\n            result.push(\"\");\n        } else {\n            for (let j = 0; j < n; j++) {\n                if (char === s[j]) {\n                    result.push(s);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abc def ghi jkl mno\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  '',\n  'Mary had a little lamb',\n  '',\n  'Mary had a little lamb',\n  '',\n  '',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_4qxegqj.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_4qxegqj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary h",
      "stdout": "",
      "timestamp": 1660334470
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length === 0) {\n        return result;\n    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) > -1) {\n            for (let j = 0; j < n; j++) {\n                if (consonants.indexOf(s[i]) > -1) {\n                    result.push(s[i]);\n                }\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpesjefm4_.js:65:12)\n    at Object.<anonymous> (/tmp/tmpesjefm4_.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334471
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants = select_consonants(s);\n    \n    for (let i = 0; i < consonants.length; i++) {\n        let word = s.split(consonants[i])[0];\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpad0w7de8.ts(14,22): error TS2304: Cannot find name 'select_consonants'.\n",
      "timestamp": 1660334471
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.includes(char)) {\n            result.push(s[i]);\n        }\n        else if (consonants.includes(char)) {\n            if (result.length >= n) {\n                break;\n            }\n            result.push(s[i]);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n  'y',\n  'h',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphsz5utxa.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsz5utxa.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'r', 'y', 'h', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334471
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    if (s.length == 0) {\n        return result;\n    }\n    let words: string[] = s.split(\" \");\n    for (let word of words) {\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words(\"abc def ghi jkl\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpas8vsuf8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpas8vsuf8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334471
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzuomuvxj.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzuomuvxj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334471
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  // Your code here\n  \n  return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp687hu06d.js:16:12)\n    at Object.<anonymous> (/tmp/tmp687hu06d.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334471
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            count++;\n        }\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            count--;\n        }\n        if (count == n) {\n            result.push(s.substring(i, i + 1));\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abc def ghi jkl mno pqr stu vwx yz\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpiy6urmqm.js:32:12)\n    at Object.<anonymous> (/tmp/tmpiy6urmqm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334472
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\t\n\tlet words: string[] = s.split(\" \");\n\t\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word: string = words[i];\n\t\t\n\t\tlet consonants: string[] = word.split(\"\");\n\t\t\n\t\tlet consonantsCount: number = 0;\n\t\t\n\t\tfor (let j = 0; j < consonants.length; j++) {\n\t\t\tlet consonant: string = consonants[j];\n\t\t\t\n\t\t\tif (consonant == \"c\" || consonant == \"k\" || consonant == \"g\" || consonant == \"p\" || consonant == \"b\" || consonant == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant == \"z\" || consonant == \"x\" || consonant == \"r\" || consonant == \"m\" || consonant == \"n\" || consonant == \"h\" || consonant == \"w\" || consonant == \"y\" || consonant == \"j\" || consonant == \"q\" || consonant == \"t\" || consonant == \"v\" || consonant == \"s\" || consonant == \"r\" || consonant == \"w\" || consonant == \"p\" || consonant == \"b\" || consonant == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant == \"z\" || consonant == \"x\" || consonant == \"r\" || consonant == \"m\" || consonant == \"n\" || consonant == \"h\" || consonant == \"w\" || consonant == \"y\" || consonant == \"j\" || consonant == \"q\" || consonant == \"t\" || consonant == \"v\" || consonant == \"s\" || consonant == \"r\" || consonant == \"w\" || consonant == \"p\" || consonant == \"b\" || consonant == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant == \"z\" || consonant == \"x\" || consonant == \"r\" || consonant == \"m\" || consonant == \"n\" || consonant == \"h\" || consonant == \"w\" || consonant == \"y\" || consonant == \"j\" || consonant == \"q\" || consonant == \"t\" || consonant == \"v\" || consonant == \"s\" || consonant == \"r\" || consonant == \"w\" || consonant == \"p\" || consonant == \"b\" || consonant == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant == \"z\" || consonant == \"x\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334472
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let consonants: string[] = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    \n    for (let i = 0; i < s.length; i++) {\n        let letter = s[i];\n        if (consonants.indexOf(letter) !== -1) {\n            result.push(letter);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n  'h',\n  'd',\n  'l',\n  't',\n  't',\n  'l',\n  'l',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcpbd4eam.js:25:12)\n    at Object.<anonymous> (/tmp/tmpcpbd4eam.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'r', 'y', 'h', 'd',\n    'l', 't', 't', 'l',\n    'l', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334472
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            words.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpez2brj17.js:25:12)\n    at Object.<anonymous> (/tmp/tmpez2brj17.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    }
  ]
}