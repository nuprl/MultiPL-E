name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the list l.\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n\
    \  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2\n  }\n}\n",
  "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[(l.length\
    \ / 2) - 1];\n    }\n    return l[(l.length / 2)];\n}\n", "  if (l.length % 2\
    \ === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return (l[(l.length / 2)\
    \ - 1] + l[(l.length / 2)]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[(l.length / 2) - 1];\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1])\
    \ / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left =\
    \ median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left\
    \ + right) / 2);\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid - 1]) / 2;\n}\n", "  if (l.length === 0) {\n  \
    \  return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length %\
    \ 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n",
  "    if (l.length % 2 === 0) {\n        return l[(l.length / 2) - 1];\n    }\n \
    \   return l[l.length / 2];\n}\n", "  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n \
    \   return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  } else {\n    return\
    \ (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2) - 1]) / 2\n  }\n}\n",
  "  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return\
    \ l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n}\n", "    if\
    \ (l.length === 0) {\n        throw new RangeError('Cannot compute median of an\
    \ empty list');\n    }\n    const middle = Math.floor(l.length / 2);\n    if (middle\
    \ === 0) {\n        return l[0];\n    }\n    if (middle === 1) {\n        return\
    \ l[l.length - 1];\n    }\n    const medianValue = l[middle];\n    const leftMedian\
    \ = median(l.slice(0, middle));\n    const rightMedian = median(l.slice(middle\
    \ + 1));\n    return medianValue + Math.max(leftMedian, rightMedian);\n}\n", " \
    \ if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "  if (l.length === 0) {\n    throw\
    \ new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle\
    \ = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n\
    \  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const leftMedian =\
    \ median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle));\n\
    \  return ((leftMedian + rightMedian) / 2);\n}\n", "    let sortedArray = l.sort((a:\
    \ number, b: number) => a - b);\n    let middle = Math.floor(sortedArray.length\
    \ / 2);\n    if (sortedArray.length % 2 === 0) {\n        return sortedArray[middle];\n\
    \    } else {\n        return (sortedArray[middle - 1] + sortedArray[middle])\
    \ / 2;\n    }\n}\n", "  if (l.length === 0) {\n    throw new Error('Cannot calculate\
    \ median of an empty list');\n  }\n  const mid = Math.floor(l.length / 2);\n \
    \ if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length /\
    \ 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length\
    \ / 2) - 1];\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n}\n",
  "    if (l.length === 0) {\n        throw new RangeError('Cannot compute median\
    \ of an empty list');\n    }\n    const mid = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2 === 0) {\n        return l[mid];\n    }\n    const leftMedian\
    \ = median(l.slice(0, mid));\n    const rightMedian = median(l.slice(mid));\n\
    \    return leftMedian + rightMedian / 2;\n}\n", "  if (l.length === 0) {\n  \
    \  return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length %\
    \ 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n",
  "  if (l.length === 0) {\n    throw new Error('Cannot calculate median of an empty\
    \ list');\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const middle\
    \ = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[middle];\n\
    \  }\n  return l[middle-1] + median(l[middle]);\n}\n", "    if (l.length === 0)\
    \ {\n        throw new Error(\"Cannot calculate median of an empty list\");\n\
    \    }\n    const middle = Math.floor(l.length / 2);\n    if (middle === 0) {\n\
    \        return l[0];\n    }\n    if (middle === 1) {\n        return l[l.length\
    \ - 1];\n    }\n    const medianValue = l[middle];\n    let leftMedian = median(l);\n\
    \    let rightMedian = median(l.slice(0, middle + 1));\n    if (leftMedian > rightMedian)\
    \ {\n        return leftMedian;\n    }\n    return rightMedian;\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[Math.floor(l.length\
    \ / 2)];\n    } else {\n        return (l[l.length / 2] + l[l.length / 2 - 1])\
    \ / 2;\n    }\n}\n", "  let mid = Math.floor(l.length / 2);\n  if (l.length %\
    \ 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n",
  "  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return\
    \ l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n}\n", "  let\
    \ sortedArray = l.slice().sort((a: number, b: number) => a - b);\n  if (sortedArray.length\
    \ % 2 === 0) {\n    return sortedArray[Math.floor(sortedArray.length / 2)];\n\
    \  } else {\n    return sortedArray[Math.floor(sortedArray.length / 2) - 1];\n\
    \  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n\
    \  }\n  return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return l[(l.length /\
    \ 2)];\n}\n", "    if (l.length === 0) {\n        throw new RangeError('Cannot\
    \ calculate median of an empty list');\n    }\n    const middle = Math.floor(l.length\
    \ / 2);\n    if (middle === 0) {\n        return l[middle];\n    }\n    if (middle\
    \ === 1) {\n        return l[0];\n    }\n    const medianValue = l[middle];\n\
    \    let leftMedian = median(l);\n    let rightMedian = median(l.slice(middle\
    \ + 1));\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n  \
    \  }\n    return rightMedian;\n}\n", "    let mid = l.length / 2;\n    if (l.length\
    \ % 2 === 0) {\n        return l[mid];\n    } else {\n        return (l[mid] +\
    \ l[mid-1]) / 2;\n    }\n}\n", "    if (l.length % 2 === 0) {\n        return\
    \ l[(l.length / 2) - 1];\n    }\n    return l[(l.length / 2)];\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  } else {\n    return\
    \ (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2) - 1]) / 2\n  }\n}\n",
  "    if (l.length === 0) {\n        throw new RangeError('Cannot calculate median\
    \ of an empty list');\n    }\n    const mid = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2 === 0) {\n        return l[mid];\n    }\n    return (l[mid] +\
    \ l[mid-1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  } else {\n    return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length\
    \ / 2) - 1]) / 2\n  }\n}\n", "    if (l.length % 2 === 0) {\n        return l[Math.floor(l.length\
    \ / 2)];\n    } else {\n        return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length\
    \ / 2) - 1]) / 2;\n    }\n}\n", "    if (l.length === 0) {\n        throw new\
    \ Error(\"Cannot calculate median of an empty list\");\n    }\n    let middle\
    \ = Math.floor(l.length / 2);\n    let median = l[middle];\n    for (let i = middle\
    \ + 1; i < l.length; i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\n", "  if (l.length === 0)\
    \ {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n",
  "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  } else {\n\
    \    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2\n  }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n",
  "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left =\
    \ median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length\
    \ % 2 ? Math.max(left, right) : Math.min((left + right) / 2, right);\n}\n", " \
    \ if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  return l[mid];\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid\
    \ - 1]) / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid\
    \ = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n\
    \  return leftMedian + rightMedian / 2;\n}\n", "  if (l.length === 0) {\n    throw\
    \ new Error('Cannot compute median of an empty list');\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian\
    \ = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return\
    \ leftMedian + rightMedian / 2;\n}\n", "  let sortedArray = l.sort((a, b) => a\
    \ - b);\n  let middle = Math.floor(sortedArray.length / 2);\n  return sortedArray[middle];\n\
    }\n", "  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n  }\n  return l.reduce((p, c) => c + p, 0) / l.length;\n\
    }\n", "  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n  \
    \  return l[mid];\n  } else {\n    return (l[mid - 1] + l[mid]) / 2;\n  }\n}\n",
  "  let sortedArray = l.slice().sort((a: number, b: number) => a - b);\n  let middle\
    \ = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2 === 0) {\n\
    \    return sortedArray[middle];\n  } else {\n    return (sortedArray[middle -\
    \ 1] + sortedArray[middle]) / 2;\n  }\n}\n", "  let mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return\
    \ (l[mid] + l[mid-1]) / 2;\n  }\n}\n", "  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return\
    \ l[mid];\n  }\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian\
    \ = median(l.slice(mid));\n  return leftMedian + rightMedian / 2;\n}\n", "   \
    \ if (l.length === 0) {\n        throw new RangeError('Cannot compute median of\
    \ an empty list');\n    }\n    const mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 === 0) {\n        return l[mid];\n    }\n    const leftMedian = median(l.slice(0,\
    \ mid));\n    const rightMedian = median(l.slice(mid));\n    return leftMedian\
    \ + rightMedian / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n    else {\n        return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length\
    \ / 2) - 1]) / 2;\n    }\n}\n", "    if (l.length % 2 === 0) {\n        return\
    \ l[Math.floor(l.length / 2)];\n    }\n    else {\n        var mid = Math.floor(l.length\
    \ / 2);\n        var left = l.slice(0, mid);\n        var right = l.slice(mid);\n\
    \        return median(left) + median(right);\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        throw new RangeError('Cannot compute median of an empty list');\n\
    \    }\n    const middle = Math.floor(l.length / 2);\n    if (middle === 0) {\n\
    \        return l[0];\n    }\n    if (middle === 1) {\n        return l[l.length\
    \ - 1];\n    }\n    const medianValue = l[middle];\n    const leftMedian = median(l.slice(0,\
    \ middle));\n    const rightMedian = median(l.slice(middle + 1));\n    return\
    \ medianValue + leftMedian + rightMedian;\n}\n", "    if (l.length === 0) {\n\
    \        throw new Error('Cannot calculate median of an empty list');\n    }\n\
    \    let middle = Math.floor(l.length / 2);\n    if (middle === 0) {\n       \
    \ return l[0];\n    }\n    if (middle === 1) {\n        return l[l.length - 1];\n\
    \    }\n    let medianOfMiddle = Math.floor(middle);\n    let leftMedian = median(l.slice(0,\
    \ middle));\n    let rightMedian = median(l.slice(middle + 1));\n    return ((leftMedian\
    \ + rightMedian) / 2);\n}\n", "  if (l.length === 0) {\n    throw new Error(\"\
    Cannot compute median of an empty list\");\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return\
    \ (l[mid - 1] + l[mid]) / 2;\n  }\n}\n", "  let mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  else {\n    return (l[mid]\
    \ + l[mid-1]) / 2;\n  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  } else {\n    return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length\
    \ / 2) - 1]) / 2\n  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[l.length\
    \ / 2 - 1]\n  } else {\n    return l[l.length / 2]\n  }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n\
    }\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[Math.floor(l.length\
    \ / 2)];\n    } else {\n        var a = l[Math.floor(l.length / 2)];\n       \
    \ var b = l[l.length - 1];\n        return a + b / 2;\n    }\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  return (l[Math.floor(l.length\
    \ / 2)] + l[Math.floor(l.length / 2) - 1]) / 2;\n}\n", "  let sortedArray = l.sort((a:\
    \ number, b: number) => a - b);\n  if (sortedArray.length % 2 === 0) {\n    return\
    \ sortedArray[Math.floor(sortedArray.length / 2)];\n  } else {\n    return sortedArray[Math.floor(sortedArray.length\
    \ / 2) - 1];\n  }\n}\n", "  let sortedArray = l.sort((a, b) => a - b);\n  let\
    \ middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2 ===\
    \ 0) {\n    return sortedArray[middle];\n  } else {\n    return (sortedArray[middle\
    \ - 1] + sortedArray[middle]) / 2;\n  }\n}\n", "  if (l.length === 0) {\n    return\
    \ NaN;\n  }\n  const mid = l.length / 2;\n  return l[mid];\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  return (l[Math.floor(l.length\
    \ / 2)] + l[Math.floor(l.length / 2) - 1]) / 2;\n}\n", "  if (l.length % 2 ===\
    \ 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return l[l.length / 2]\n\
    \  }\n}\n", "    if (l.length % 2 === 0) {\n        return l[(l.length / 2) -\
    \ 1];\n    } else {\n        return l[(l.length / 2)];\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        throw new RangeError('Cannot calculate median of an empty\
    \ list');\n    }\n    const middle = Math.floor(l.length / 2);\n    if (middle\
    \ === 0) {\n        return l[0];\n    }\n    if (middle === 1) {\n        return\
    \ l[l.length - 1];\n    }\n    const medianValue = l[middle];\n    const leftMedian\
    \ = median(l.slice(0, middle));\n    const rightMedian = median(l.slice(middle\
    \ + 1));\n    return medianValue + Math.max(leftMedian, rightMedian);\n}\n", " \
    \ let mid = Math.floor(l.length / 2);\n  return l[mid];\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return (l[l.length /\
    \ 2] + l[l.length / 2 - 1]) / 2;\n}\n", "  let sortedArray = l.slice().sort((a:\
    \ number, b: number) => a - b);\n  let middle = Math.floor(sortedArray.length\
    \ / 2);\n  if (sortedArray.length % 2) return sortedArray[middle];\n  else return\
    \ (sortedArray[middle - 1] + sortedArray[middle]) / 2;\n}\n", "  let mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return\
    \ (l[mid - 1] + l[mid]) / 2;\n  }\n}\n", "    if (l.length === 0) {\n        throw\
    \ new Error(`Cannot compute median of an empty list`);\n    }\n    let mid = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2 === 0) {\n        return l[mid];\n    }\n    else\
    \ {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\n", "  if (l.length ===\
    \ 0) {\n    throw 'Cannot compute median of an empty list';\n  }\n  const sortedList\
    \ = l.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sortedList.length\
    \ / 2);\n  if (sortedList.length % 2 === 0) {\n    return sortedList[mid];\n \
    \ } else {\n    return (sortedList[mid - 1] + sortedList[mid]) / 2;\n  }\n}\n",
  "    if (l.length === 0) {\n        throw Error('Cannot calculate median of an empty\
    \ list');\n    }\n    if (l.length === 1) {\n        return l[0];\n    }\n   \
    \ const mid = Math.floor(l.length / 2);\n    const left = l.slice(0, mid);\n \
    \   const right = l.slice(mid);\n    return median(left) + median(right);\n}\n",
  "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  return l[mid];\n}\n", "    if (l.length === 0) {\n        throw new\
    \ RangeError('Cannot compute median of an empty list');\n    }\n    const mid\
    \ = Math.floor(l.length / 2);\n    if (l.length % 2) {\n        return l[mid];\n\
    \    }\n    const leftMedian = median(l.slice(0, mid));\n    const rightMedian\
    \ = median(l.slice(mid));\n    return leftMedian + rightMedian / 2;\n}\n", " \
    \   if (l.length % 2 === 0) {\n        return l[l.length / 2 - 1]\n    } else\
    \ {\n        return l[l.length / 2]\n    }\n}\n", "  if (l.length === 0) {\n \
    \   return NaN;\n  }\n  const mid = l.length / 2;\n  return l[mid];\n}\n", " \
    \ if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  return\
    \ (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2) - 1]) / 2;\n}\n",
  "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  let sortedArray = l.sort((a, b) => a - b);\n  if\
    \ (sortedArray.length % 2 === 0) {\n    return sortedArray[Math.floor(sortedArray.length\
    \ / 2)];\n  } else {\n    return sortedArray[Math.floor(sortedArray.length / 2)\
    \ - 1];\n  }\n}\n", "  let sortedArray = l.slice().sort((a: number, b: number)\
    \ => a - b);\n  let middleIndex = Math.floor(sortedArray.length / 2);\n  return\
    \ sortedArray[middleIndex];\n}\n", "  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n \
    \   return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n", "    if (l.length\
    \ % 2 === 0) {\n        return l[Math.floor(l.length / 2)];\n    }\n    return\
    \ l[Math.floor(l.length / 2)] + median(l[Math.floor(l.length / 2) + 1]);\n}\n",
  "    if (l.length === 0) {\n        throw new Error(`Cannot compute median of an\
    \ empty list`);\n    }\n    let mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 === 0) {\n        return l[mid];\n    }\n    let lower = l[mid];\n    let\
    \ upper = l[mid];\n    for (let i = mid + 1; i < l.length; i++) {\n        if\
    \ (l[i] < lower) {\n            lower = l[i];\n        }\n        if (l[i] > upper)\
    \ {\n            upper = l[i];\n        }\n    }\n    return (lower + upper) /\
    \ 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n\
    \  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n", "    if (l.length === 0) {\n        throw new RangeError('Cannot calculate\
    \ median of an empty list');\n    }\n    const middle = Math.floor(l.length /\
    \ 2);\n    if (middle === 0) {\n        return l[0];\n    }\n    if (middle ===\
    \ 1) {\n        return l[l.length - 1];\n    }\n    const medianValue = l[middle];\n\
    \    let leftMedian = median(l);\n    let rightMedian = median(l.slice(middle\
    \ + 1));\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n  \
    \  }\n    return rightMedian;\n}\n", "    if (l.length === 0) {\n        throw\
    \ new RangeError('Cannot compute median of an empty list');\n    }\n    const\
    \ mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n        return\
    \ l[mid];\n    }\n    return l[mid] + median(l[mid+1]);\n}\n", "  let sortedArray\
    \ = l.slice().sort((a: number, b: number) => a - b);\n  let middle = Math.floor(sortedArray.length\
    \ / 2);\n  return sortedArray[middle];\n}\n", "  if (l.length % 2 === 0) {\n \
    \   return l[l.length / 2 - 1]\n  } else {\n    return l[l.length / 2]\n  }\n\
    }\n", "  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n  \
    \  return l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n}\n",
  "  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty\
    \ list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 ===\
    \ 0) {\n    return l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n\
    \  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n\
    \  }\n  return (l[(l.length / 2) - 1] + l[l.length / 2]) / 2;\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  return (l[mid] + l[mid - 1]) / 2;\n}\n", "    if (l.length === 0) {\n\
    \        throw new Error('Cannot calculate median of an empty list');\n    }\n\
    \    const sortedList = l.slice().sort((a, b) => a - b);\n    const middleIndex\
    \ = Math.floor(sortedList.length / 2);\n    return sortedList[middleIndex];\n\
    }\n", "  if (l.length === 0) {\n    throw new Error('Cannot compute median of\
    \ an empty list');\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n",
  "    if (l.length === 0) {\n        throw Error('Cannot calculate median of an empty\
    \ list');\n    }\n    const middle = Math.floor(l.length / 2);\n    if (middle\
    \ === 0) {\n        return l[0];\n    }\n    if (middle === 1) {\n        return\
    \ l[l.length - 1];\n    }\n    const medianValue = l[middle];\n    let leftMedian\
    \ = median(l);\n    let rightMedian = median(l.slice(middle + 1));\n    if (leftMedian\
    \ > rightMedian) {\n        return leftMedian;\n    }\n    return rightMedian;\n\
    }\n", "    if (l.length === 0) {\n        throw new RangeError('Cannot compute\
    \ median of an empty list');\n    }\n    const mid = Math.floor(l.length / 2);\n\
    \    if (l.length % 2) {\n        return l[mid];\n    }\n    const left = median(l.slice(0,\
    \ mid));\n    const right = median(l.slice(mid));\n    return (left + right) /\
    \ 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n\
    \  }\n  return (l[(l.length / 2) - 1] + l[(l.length / 2)]) / 2;\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "    if (l.length === 0) {\n        throw new RangeError('Cannot\
    \ compute median of an empty list');\n    }\n    const middle = Math.floor(l.length\
    \ / 2);\n    if (middle === 0) {\n        return l[0];\n    }\n    if (middle\
    \ === 1) {\n        return l[l.length - 1];\n    }\n    const medianValue = l[middle];\n\
    \    let leftMedian = median(l);\n    let rightMedian = median(l.slice(middle\
    \ + 1));\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n  \
    \  }\n    return rightMedian;\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left)\
    \ + median(right);\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  return (l[mid] + l[mid - 1]) / 2;\n}\n", "    if (l.length === 0) {\n     \
    \   throw new RangeError('Cannot calculate median of an empty list');\n    }\n\
    \    const middle = Math.floor(l.length / 2);\n    if (middle === 0) {\n     \
    \   return l[0];\n    }\n    if (middle === 1) {\n        return l[l.length -\
    \ 1];\n    }\n    const medianValue = l[middle];\n    const leftMedian = median(l.slice(0,\
    \ middle));\n    const rightMedian = median(l.slice(middle + 1));\n    return\
    \ medianValue + Math.max(leftMedian, rightMedian);\n}\n", "  if (l.length % 2\
    \ === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  return (l[mid] + l[mid]) / 2;\n}\n", "    let sortedArray = l.sort((a:\
    \ number, b: number) => a - b);\n    let middleIndex = Math.floor(sortedArray.length\
    \ / 2);\n    return sortedArray[middleIndex];\n}\n", "  if (l.length % 2 === 0)\
    \ {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return\
    \ median(left) + median(right);\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[Math.floor(l.length / 2)];\n  }\n  return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length\
    \ / 2) - 1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length /\
    \ 2) - 1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n\
    \  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n\
    \  } else {\n    return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length /\
    \ 2) - 1]) / 2\n  }\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "    if (l.length % 2 === 0) {\n\
    \        return l[Math.floor(l.length / 2)];\n    }\n    return l[Math.floor(l.length\
    \ / 2)] + median(l.slice(Math.floor(l.length / 2)));\n}\n", "  if (l.length ===\
    \ 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n",
  "  let sortedArray = l.slice().sort((a: number, b: number) => a - b);\n  let middle\
    \ = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2 === 0) {\n\
    \    return sortedArray[middle];\n  } else {\n    return (sortedArray[middle -\
    \ 1] + sortedArray[middle]) / 2;\n  }\n}\n", "  if (l.length === 0) {\n    return\
    \ NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0)\
    \ {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const\
    \ right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "    if (l.length === 0) {\n        throw new Error('Cannot calculate\
    \ median of an empty list');\n    }\n    const middle = Math.floor(l.length /\
    \ 2);\n    if (middle === 0) {\n        return l[0];\n    }\n    if (middle ===\
    \ 1) {\n        return l[l.length - 1];\n    }\n    const medianValue = l[middle];\n\
    \    let leftMedian = median(l);\n    let rightMedian = median(l.slice(middle\
    \ + 1));\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n  \
    \  }\n    return rightMedian;\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[(l.length / 2) - 1];\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1])\
    \ / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian\
    \ = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return\
    \ leftMedian + rightMedian / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[Math.floor(l.length / 2)]\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2\n  }\n}\n", "    if (l.length === 0) {\n        throw Error('Cannot\
    \ compute median of an empty list');\n    }\n    const middle = Math.floor(l.length\
    \ / 2);\n    if (middle === 0) {\n        return l[0];\n    }\n    if (middle\
    \ === 1) {\n        return l[l.length - 1];\n    }\n    const medianValue = l[middle];\n\
    \    const leftMedian = median(l.slice(0, middle));\n    const rightMedian = median(l.slice(middle\
    \ + 1));\n    return medianValue + leftMedian + rightMedian;\n}\n", "    if (l.length\
    \ % 2 === 0) {\n        return l[Math.floor(l.length / 2)];\n    } else {\n  \
    \      return l[(l.length / 2) - 1];\n    }\n}\n", "  if (l.length === 0) {\n\
    \    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n",
  "  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return\
    \ l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n}\n", "    if\
    \ (l.length === 0) {\n        throw new Error(\"Cannot calculate median of an\
    \ empty list\");\n    }\n    l.sort();\n    var mid = l.length / 2;\n    if (l.length\
    \ % 2 === 0) {\n        return l[mid];\n    } else {\n        return (l[mid -\
    \ 1] + l[mid]) / 2;\n    }\n}\n", "    if (l.length === 0) {\n        throw new\
    \ RangeError('Cannot calculate median of an empty list');\n    }\n    const mid\
    \ = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n        return l[mid];\n\
    \    }\n    return l[mid] + median(l[mid+1]);\n}\n", "  let mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2) return l[mid];\n  else return (median(l[mid-1]) +\
    \ median(l[mid])) / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[(l.length\
    \ / 2) - 1];\n    }\n    return l[Math.floor(l.length / 2)];\n}\n", "    if (l.length\
    \ === 0) {\n        throw new Error('Cannot compute median of an empty list');\n\
    \    }\n    const mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0)\
    \ {\n        return l[mid];\n    }\n    return l[mid + 1] + l[mid];\n}\n", " \
    \ if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n\
    \    return l[Math.floor(l.length / 2)]\n  }\n  return (l[Math.floor(l.length\
    \ / 2)] + l[Math.floor(l.length / 2) - 1]) / 2\n}\n", "    if (l.length === 0)\
    \ {\n        throw new RangeError('Cannot compute median of an empty list');\n\
    \    }\n    const middle = Math.floor(l.length / 2);\n    if (middle === 0) {\n\
    \        return l[0];\n    }\n    if (middle === 1) {\n        return l[l.length\
    \ - 1];\n    }\n    const medianValue = l[middle];\n    const leftMedian = median(l.slice(0,\
    \ middle));\n    const rightMedian = median(l.slice(middle + 1));\n    return\
    \ medianValue + Math.max(leftMedian, rightMedian);\n}\n", "  if (l.length % 2\
    \ === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return l[l.length\
    \ / 2]\n  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length /\
    \ 2) - 1]) / 2;\n}\n", "    if (l.length === 0) {\n        throw new Error(`Cannot\
    \ calculate median of an empty list`);\n    }\n    const middle = Math.floor(l.length\
    \ / 2);\n    if (middle === 0) {\n        return l[0];\n    }\n    if (middle\
    \ === 1) {\n        return l[l.length - 1];\n    }\n    const medianOfMiddle =\
    \ median(l);\n    return medianOfMiddle + median(l).map(x => x - medianOfMiddle).reduce((a,\
    \ b) => a + b, 0) / 2;\n}\n", "    if (l.length % 2 === 0) {\n        return l[l.length\
    \ / 2 - 1]\n    } else {\n        return l[l.length / 2]\n    }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n", "  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n\
    \    return l[l.length / 2]\n  }\n}\n", "  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n \
    \   return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return Math.ceil((left + right) / 2);\n}\n", "  let\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n}\n", "  if (l.length ===\
    \ 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n",
  "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length === 0) {\n    throw new Error(\"Cannot\
    \ calculate median of an empty list\");\n  }\n  return l.reduce((prev, curr) =>\
    \ prev + curr, 0) / l.length;\n}\n", "  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  return l[mid];\n}\n", "    if\
    \ (l.length % 2 === 0) {\n        return l[Math.floor(l.length / 2)];\n    } else\
    \ {\n        return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2)\
    \ - 1]) / 2;\n    }\n}\n", "  if (l.length % 2 === 0) {\n    return l[l.length\
    \ / 2 - 1]\n  } else {\n    return l[(l.length / 2) - 1]\n  }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1]\n\
    \  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n}\n", "  if (l.length\
    \ === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n\
    \  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sortedList.length\
    \ / 2);\n  return sortedList[mid];\n}\n", "    if (l.length % 2 === 0) {\n   \
    \     return l[l.length / 2 - 1]\n    } else {\n        return l[l.length / 2]\n\
    \    }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length /\
    \ 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n", "  let sortedList = l.sort((a: number, b: number) => a - b);\n  if (sortedList.length\
    \ % 2 === 0) {\n    return sortedList[Math.floor(sortedList.length / 2)];\n  }\
    \ else {\n    return sortedList[sortedList.length / 2 - 1];\n  }\n}\n", "    let\
    \ sortedArray = l.sort((a: number, b: number) => a - b);\n    let middleIndex\
    \ = Math.floor(sortedArray.length / 2);\n    return sortedArray[middleIndex];\n\
    }\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n \
    \ } else {\n    return l[(l.length / 2) - 1]\n  }\n}\n", "  if (l.length === 0)\
    \ {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n",
  "    if (l.length === 0) {\n        throw new Error(\"Cannot calculate median of\
    \ an empty list\");\n    }\n    let middle = Math.floor(l.length / 2);\n    if\
    \ (middle === 0) {\n        return l[0];\n    }\n    if (middle === 1) {\n   \
    \     return l[l.length - 1];\n    }\n    let medianValue = l[middle];\n    for\
    \ (let i = middle - 1; i >= 0; i--) {\n        if (l[i] < medianValue) {\n   \
    \         medianValue = l[i];\n        }\n    }\n    return medianValue;\n}\n",
  "  let sortedArr = l.sort((a: number, b: number) => a - b);\n  let middle = Math.floor(sortedArr.length\
    \ / 2);\n  if (sortedArr.length % 2 === 0) {\n    return sortedArr[middle];\n\
    \  } else {\n    return (sortedArr[middle - 1] + sortedArr[middle]) / 2;\n  }\n\
    }\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length /\
    \ 2;\n  return l[mid];\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n\
    \  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return\
    \ l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "    if (l.length % 2\
    \ === 0) {\n        return l[Math.floor(l.length / 2)];\n    } else {\n      \
    \  let mid = Math.floor(l.length / 2);\n        let low = l[mid];\n        let\
    \ high = l[mid+1];\n        return (high + low) / 2;\n    }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1])\
    \ / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length /\
    \ 2)];\n  }\n  const m1 = l[Math.floor(l.length / 2)];\n  const m2 = l[l.length\
    \ - 1];\n  return (m1 + m2) / 2;\n}\n", "    if (l.length % 2 === 0) {\n     \
    \   return l[Math.floor(l.length / 2)];\n    }\n    return l[Math.floor(l.length\
    \ / 2)] + median(l.slice(0, Math.floor(l.length / 2)));\n}\n", "  if (l.length\
    \ % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  return (l[Math.floor(l.length\
    \ / 2)] + l[Math.floor(l.length / 2) - 1]) / 2;\n}\n", "  let sortedArray = l.slice().sort((a:\
    \ number, b: number) => a - b);\n  let middleIndex = Math.floor(sortedArray.length\
    \ / 2);\n  return sortedArray[middleIndex];\n}\n", "  if (l.length === 0) {\n\
    \    return NaN;\n  }\n  const middle = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return l[middle];\n  }\n  return (l[middle - 1] + l[middle])\
    \ / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "  let mid = l.length / 2;\n  if\
    \ (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return l[mid - 1]\
    \ + l[mid];\n  }\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length /\
    \ 2) - 1]) / 2;\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n", "  let mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2) return l[mid];\n  else return (median(l[mid-1]) +\
    \ median(l[mid])) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  } else {\n    return (l[Math.floor(l.length / 2) - 1] + l[Math.floor(l.length\
    \ / 2)]) / 2\n  }\n}\n", "    if (l.length % 2 === 0) {\n        return l[(l.length\
    \ / 2) - 1];\n    }\n    return l[l.length / 2];\n}\n", "  if (l.length % 2 ===\
    \ 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return l[(l.length / 2)];\n\
    }\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n", "  if (l.length % 2 === 0) {\n    return l[(l.length\
    \ / 2) - 1];\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n}\n",
  "    if (l.length === 0) {\n        throw new RangeError('Cannot compute median\
    \ of an empty list');\n    }\n    const middle = Math.floor(l.length / 2);\n \
    \   if (middle === 0) {\n        return l[0];\n    }\n    if (middle === 1) {\n\
    \        return l[l.length - 1];\n    }\n    const medianValue = l[middle];\n\
    \    let leftMedian = median(l);\n    let rightMedian = median(l.slice(middle\
    \ + 1));\n    return medianValue + ((leftMedian + rightMedian) / 2);\n}\n", " \
    \ if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid - 1]) / 2;\n}\n", "  if (l.length === 0) {\n    throw new Error(\"Cannot\
    \ calculate median of an empty list\");\n  }\n  let mid = Math.floor(l.length\
    \ / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  let lower = l[mid];\n\
    \  let upper = l[mid];\n  for (let i = mid + 1; i < l.length; i++) {\n    if (l[i]\
    \ < lower) {\n      lower = l[i];\n    }\n    if (l[i] > upper) {\n      upper\
    \ = l[i];\n    }\n  }\n  return ((lower + upper) / 2);\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  return\
    \ l[mid];\n}\n", "  if (l.length === 0) {\n    return NaN;\n  }\n  const mid =\
    \ Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n\
    \  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n", "  if (l.length % 2 === 0) {\n    return\
    \ l[l.length / 2 - 1]\n  } else {\n    return l[(l.length / 2) - 1]\n  }\n}\n",
  "  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty\
    \ list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid =\
    \ Math.floor(l.length / 2);\n  return median(l.slice(0, mid), l.slice(mid));\n\
    }\n", "    if (l.length % 2 === 0) {\n        return l[Math.floor(l.length / 2)];\n\
    \    } else {\n        var a = l[Math.floor(l.length / 2)];\n        var b = l[Math.floor(l.length\
    \ / 2) - 1];\n        return a + b / 2;\n    }\n}\n", "  if (l.length % 2 ===\
    \ 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return (l[(l.length / 2) - 1]\
    \ + l[(l.length / 2)]) / 2;\n}\n", "    if (l.length === 0) {\n        throw new\
    \ Error(`Cannot calculate median of an empty list`);\n    }\n    const sortedList\
    \ = l.slice().sort((a, b) => a - b);\n    const middleIndex = Math.floor(sortedList.length\
    \ / 2);\n    return sortedList[middleIndex];\n}\n", "    if (l.length === 0) {\n\
    \        throw new Error(\"Cannot compute median of an empty list\");\n    }\n\
    \    l.sort((a, b) => a - b);\n    const mid = Math.floor(l.length / 2);\n   \
    \ if (l.length % 2 === 0) {\n        return l[mid];\n    }\n    return l[mid -\
    \ 1] + l[mid];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
