{
  "language": "ts",
  "name": "HumanEval_61_correct_bracketing",
  "results": [
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_found = false;\n\tlet closing_found = false;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tif (brackets[opening_next] === brackets[closing_next]) {\n\t\t\topening_found = true;\n\t\t\tclosing_found = true;\n\t\t\topening_next = opening + 1;\n\t\t\tclosing_next = closing + 1;\n\t\t} else {\n\t\t\tif (brackets[opening_next] === \")\") {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_next = opening + 1;\n\t\t\t\tclosing_next = closing + 1;\n\t\t\t} else if (brackets[opening_next] === \"(\") {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_next = opening + 1;\n\t\t\t\tclosing_next = closing + 1;\n\t\t\t} else {\n\t\t\t\tif (opening_found && closing_found) {\n\t\t\t\t\topening_found = false;\n\t\t\t\t\tclosing_found = false;\n\t\t\t\t\topening_next = opening + 1;\n\t\t\t\t\tclosing_next = closing + 1;\n\t\t\t\t} else if (opening_found) {\n\t\t\t\t\topening_found = false;\n\t\t\t\t\topening_next = opening + 1;\n\t\t\t\t\topening_prev = opening - 1;\n\t\t\t\t} else if (closing_found) {\n\t\t\t\t\tclosing_found = false;\n\t\t\t\t\tclosing_next = closing + 1;\n\t\t\t\t\tclosing_prev = closing - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_found && closing_found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm8idfn3l.js:57:12)\n    at Object.<anonymous> (/tmp/tmpm8idfn3l.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": -1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet j = 0;\n\tlet brackets_correct = true;\n\twhile (i < opening_brackets_length && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] === closing_brackets[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else {\n\t\t\tbrackets_correct = false;\n\t\t}\n\t}\n\treturn brackets_correct;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket) => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (!opening_brackets_set.has(opening_brackets[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tif (!closing_brackets_set.has(closing_brackets[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4o6f58bx.js:33:12)\n    at Object.<anonymous> (/tmp/tmp4o6f58bx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2e706cw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2e706cw9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy6iszj4g.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy6iszj4g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet i: number;\n\tlet j: number;\n\tlet opening_brackets_length: number;\n\tlet closing_brackets_length: number;\n\n\topening_brackets_length = opening_brackets.length;\n\tclosing_brackets_length = closing_brackets.length;\n\n\tfor (i = 0; i < opening_brackets_length; i++) {\n\t\tfor (j = 0; j < closing_brackets_length; j++) {\n\t\t\tif (opening_brackets[i] === closing_brackets[j]) {\n\t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\tclosing_brackets.splice(j, 1);\n\t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t\topening_brackets_length--;\n\t\t\t\tclosing_brackets_length--;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqlsw0vza.js:33:12)\n    at Object.<anonymous> (/tmp/tmpqlsw0vza.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tswitch (bracket) {\n\t\t\tcase '(':\n\t\t\t\topening_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tclosing_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\topening_brackets.push(1);\n\t\t\t\tclosing_brackets.push(1);\n\t\t}\n\t});\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tfor (let j = 0; j < closing_brackets.length; j++) {\n\t\t\tif (opening_brackets[i] === closing_brackets[j]) {\n\t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\tclosing_brackets.splice(j, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9fweq7r_.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9fweq7r_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy6iszj4g.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy6iszj4g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing = false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tcorrect_bracketing = true;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphq360e6g.js:25:12)\n    at Object.<anonymous> (/tmp/tmphq360e6g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length: number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\tlet i: number;\n\n\tfor (i = 0; i < opening_brackets_length; i++) {\n\t\tif (opening_brackets[i] !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfor (i = 0; i < closing_brackets_length; i++) {\n\t\tif (closing_brackets[i] !== \")\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprj4pqlv8.js:24:12)\n    at Object.<anonymous> (/tmp/tmprj4pqlv8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfpe5ut5e.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfpe5ut5e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tfor (let j = 0; j < closing_brackets.length; j++) {\n\t\t\tlet closing_bracket = closing_brackets[j];\n\t\t\tif (opening_bracket < closing_bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplhvf5w7o.js:29:12)\n    at Object.<anonymous> (/tmp/tmplhvf5w7o.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvw6jk7m4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvw6jk7m4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4pylzn9.js:20:12)\n    at Object.<anonymous> (/tmp/tmpj4pylzn9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.indexOf('(') !== -1) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.indexOf(')') !== -1) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbo5oip7k.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbo5oip7k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket == \"(\") {\n\t\t\tif (closing_bracket != \")\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (opening_bracket == \")\") {\n\t\t\tif (closing_bracket != \"(\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9epajcz2.js:25:12)\n    at Object.<anonymous> (/tmp/tmp9epajcz2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_counts: number[] = [];\n\tlet closing_counts: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t\topening_counts.push(brackets.length - i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t\tclosing_counts.push(brackets.length - i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_count = closing_counts[i];\n\t\tlet opening_count = opening_counts[i];\n\t\tif (opening_count !== closing_count) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_bracket = opening_bracket;\n\t\tlet closing_bracket = closing_brackets[opening_bracket];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy0u7prpy.ts(19,7): error TS2451: Cannot redeclare block-scoped variable 'opening_bracket'.\n../../../../tmp/tmpy0u7prpy.ts(25,7): error TS2451: Cannot redeclare block-scoped variable 'opening_bracket'.\n",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpscz4amd5.js:31:12)\n    at Object.<anonymous> (/tmp/tmpscz4amd5.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet next_opening_index = opening_brackets[i + 1];\n\t\tif (next_opening_index === undefined) {\n\t\t\t// The next opening bracket is at the end of the string.\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket = brackets[next_opening_index];\n\t\tif (next_bracket === \"(\") {\n\t\t\t// The next opening bracket is right after this one.\n\t\t\tcontinue;\n\t\t}\n\t\tlet closing_index = closing_brackets[i];\n\t\tlet next_closing_index = closing_brackets[i + 1];\n\t\tif (next_closing_index === undefined) {\n\t\t\t// The next closing bracket is at the end of the string.\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket = brackets[next_closing_index];\n\t\tif (next_bracket === \")\") {\n\t\t\t// The next closing bracket is right after this one.\n\t\t\tcontinue;\n\t\t}\n\t\t// This opening bracket does not have a corresponding closing bracket.\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa__aub_2.ts(21,7): error TS2451: Cannot redeclare block-scoped variable 'next_bracket'.\n../../../../tmp/tmpa__aub_2.ts(32,7): error TS2451: Cannot redeclare block-scoped variable 'next_bracket'.\n",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === \"(\" && closing_bracket === \")\") {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqxhtcf5m.js:20:12)\n    at Object.<anonymous> (/tmp/tmpqxhtcf5m.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\n\t// If there is no opening or closing bracket, return false.\n\tif (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\n\t// If there is only one opening or closing bracket, return true.\n\tif (opening === closing) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening or closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp91kukakc.ts(127,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335076
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_counter = 0;\n\tlet closing_counter = 0;\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets[opening_counter] = i;\n\t\t\topening_counter++;\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets[closing_counter] = i;\n\t\t\tclosing_counter++;\n\t\t}\n\t}\n\tif (opening_counter !== closing_brackets.length) return false;\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) return false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_length = opening_brackets.length - 1;\n\t\tlet opening_middle = opening_index + opening_length / 2;\n\t\tlet closing_middle = closing_index + closing_brackets.length / 2;\n\t\tlet opening_middle_bracket = brackets[opening_middle];\n\t\tlet closing_middle_bracket = brackets[closing_middle];\n\t\tif (opening_middle_bracket === closing_middle_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket === \"(\" && closing_middle_bracket === \")\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket === \")\" && closing_middle_bracket === \"(\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket === \"(\" && closing_middle_bracket === \"(\") {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxjx762s8.js:45:12)\n    at Object.<anonymous> (/tmp/tmpxjx762s8.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet correct_bracketing = true;\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeeatoku8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpeeatoku8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = false;\n\tlet closing_next = false;\n\tfor (let i = opening + 1; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\") {\n\t\t\topening_next = true;\n\t\t} else if (brackets[i] === \")\") {\n\t\t\tclosing_next = true;\n\t\t}\n\t\tif (opening_next && closing_next) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6bkrcntt.js:24:12)\n    at Object.<anonymous> (/tmp/tmp6bkrcntt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing = brackets.substring(1, brackets.length);\n\tlet opening_brackets = opening.split(\")\");\n\tlet closing_brackets = closing.split(\"(\");\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxtywmv7f.js:23:12)\n    at Object.<anonymous> (/tmp/tmpxtywmv7f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i + 1];\n\t\tif (next_opening_bracket === undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket = brackets[next_opening_bracket];\n\t\tif (next_bracket !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet next_closing_bracket = closing_brackets[i + 1];\n\t\tif (next_closing_bracket === undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket = brackets[next_closing_bracket];\n\t\tif (next_bracket !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb7z_pmi6.js:43:12)\n    at Object.<anonymous> (/tmp/tmpb7z_pmi6.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet closing_brackets = brackets.match(/\\)/g);\n\n\tif (opening_brackets === null || closing_brackets === null) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfct3_do0.js:21:12)\n    at Object.<anonymous> (/tmp/tmpfct3_do0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet closing_brackets = brackets.match(/\\)/g);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\treturn opening_brackets_count === closing_brackets_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5uxvib91.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5uxvib91.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tlet are_opening_brackets_correct = true;\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\tare_opening_brackets_correct = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn are_opening_brackets_correct;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphs2z2gdg.js:29:12)\n    at Object.<anonymous> (/tmp/tmphs2z2gdg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/[({]/);\n\tlet closing_brackets = brackets.match(/[)}\\]]/);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\n\tif (opening_brackets_count < closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index = 0;\n\tlet opening_brackets_length = opening_brackets_count;\n\tlet closing_brackets_length = closing_brackets_count;\n\n\twhile (opening_brackets_index < opening_brackets_length) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\n\t\topening_brackets_index += 1;\n\t\tclosing_brackets_index += 1;\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7878jto.js:29:12)\n    at Object.<anonymous> (/tmp/tmps7878jto.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length: number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\tlet i: number;\n\tlet j: number;\n\tlet opening_brackets_index: number;\n\tlet closing_brackets_index: number;\n\tlet opening_brackets_index_in_brackets: number;\n\tlet closing_brackets_index_in_brackets: number;\n\tlet opening_brackets_index_in_string: number;\n\tlet closing_brackets_index_in_string: number;\n\tlet opening_brackets_index_in_string_in_brackets: number;\n\tlet closing_brackets_index_in_string_in_brackets: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_1: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_1: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_2: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_2: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_3: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_3: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_4: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_4: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_5: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_5: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_6: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_6: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_7: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_7: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_8: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_8: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnnmipl1g.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvkaph8lc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvkaph8lc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx_jboy_c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpx_jboy_c.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing = brackets.substr(brackets.indexOf('(') + 1, 1);\n\treturn opening == closing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiw3782bf.js:11:12)\n    at Object.<anonymous> (/tmp/tmpiw3782bf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfpe5ut5e.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfpe5ut5e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count < closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmph95ueaxw.js:23:12)\n    at Object.<anonymous> (/tmp/tmph95ueaxw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2e706cw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2e706cw9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char == closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else {\n\t\t\tif (opening_char == \"(\" && closing_char == \")\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else if (opening_char == \"[\" && closing_char == \"]\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else if (opening_char == \"{\" && closing_char == \"}\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t}\n\t\t}\n\t}\n\tif (opening_count != closing_count) {\n\t\treturn false;\n\t}\n\tif (opening_prev < 0 || closing_prev < 0) {\n\t\treturn false;\n\t}\n\tif (opening_prev == 0 && closing_prev == 0) {\n\t\treturn true;\n\t}\n\tif (opening_prev == 0 && closing_prev == 1) {\n\t\treturn brackets[opening_prev] == brackets[closing_prev + 1];\n\t}\n\tif (opening_prev == 1 && closing_prev == 0) {\n\t\treturn brackets[opening_prev] == brackets[closing_prev - 1];\n\t}\n\tif (opening_prev == 1 && closing_prev == 1) {\n\t\treturn brackets[opening_prev] == brackets[closing_prev - 1] && brackets[opening_prev + 1] == brackets[closing_prev];\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9zr118mu.js:72:12)\n    at Object.<anonymous> (/tmp/tmp9zr118mu.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbg2rrup0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbg2rrup0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_154zljl.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_154zljl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp27ud7bt4.js:31:12)\n    at Object.<anonymous> (/tmp/tmp27ud7bt4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split('(');\n\tlet closing_brackets: string[] = brackets.split(')');\n\tlet i: number;\n\tlet j: number;\n\tlet opening_bracket: string;\n\tlet closing_bracket: string;\n\tlet brackets_ok: boolean;\n\tlet opening_found: boolean;\n\tlet closing_found: boolean;\n\tlet opening_found2: boolean;\n\tlet closing_found2: boolean;\n\tlet opening_found3: boolean;\n\tlet closing_found3: boolean;\n\n\tfor (i = 0; i < opening_brackets.length; i++) {\n\t\topening_bracket = opening_brackets[i];\n\t\topening_found = false;\n\t\tclosing_found = false;\n\t\topening_found2 = false;\n\t\tclosing_found2 = false;\n\t\topening_found3 = false;\n\t\tclosing_found3 = false;\n\n\t\tfor (j = 0; j < closing_brackets.length; j++) {\n\t\t\tclosing_bracket = closing_brackets[j];\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_found2 = true;\n\t\t\t\tclosing_found2 = true;\n\t\t\t\topening_found3 = true;\n\t\t\t\tclosing_found3 = true;\n\t\t\t} else if (opening_bracket.search(closing_bracket) !== -1) {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_found2 = true;\n\t\t\t\tclosing_found2 = true;\n\t\t\t\topening_found3 = true;\n\t\t\t\tclosing_found3 = true;\n\t\t\t} else {\n\t\t\t\topening_found = false;\n\t\t\t\tclosing_found = false;\n\t\t\t\topening_found2 = false;\n\t\t\t\tclosing_found2 = false;\n\t\t\t\topening_found3 = false;\n\t\t\t\tclosing_found3 = false;\n\t\t\t}\n\t\t}\n\n\t\tif (!opening_found) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (!closing_found) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (!opening_found2) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (!closing_found2) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (!opening_found3) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (!closing_found3) {\n\t\t\tbrackets_ok = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn brackets_ok;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcylao5i.js:35\n            else if (opening_bracket.search(closing_bracket) !== -1) {\n                                     ^\n\nSyntaxError: Invalid regular expression: /(/: Unterminated group\n    at String.search (<anonymous>)\n    at correct_bracketing (/tmp/tmprcylao5i.js:35:38)\n    at test (/tmp/tmprcylao5i.js:82:22)\n    at Object.<anonymous> (/tmp/tmprcylao5i.js:95:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxm06xz7e.js:31:12)\n    at Object.<anonymous> (/tmp/tmpxm06xz7e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_length--;\n\t\t\tclosing_brackets_length--;\n\t\t}\n\t}\n\n\treturn opening_brackets_length === 0 && closing_brackets_length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpulf_rwvs.js:21:12)\n    at Object.<anonymous> (/tmp/tmpulf_rwvs.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2e706cw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2e706cw9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpou44f0f0.js:20:12)\n    at Object.<anonymous> (/tmp/tmpou44f0f0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphz263csk.js:18:12)\n    at Object.<anonymous> (/tmp/tmphz263csk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\tif (opening > closing) {\n\t\treturn false;\n\t}\n\tlet openingBracket = brackets.substring(opening + 1, closing);\n\tlet closingBracket = brackets.substring(closing + 1, brackets.length);\n\treturn openingBracket === closingBracket;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuhohtxyy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpuhohtxyy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_length = opening_brackets.length;\n\t\tlet closing_brackets_length = closing_brackets.length;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index = closing_bracket;\n\t\twhile (opening_brackets_index > 0 && closing_brackets_index < closing_brackets_length) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_index - 1];\n\t\t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\t\t\tif (opening_bracket > closing_bracket) {\n\t\t\t\tlet temp = opening_bracket;\n\t\t\t\topening_bracket = closing_bracket;\n\t\t\t\tclosing_bracket = temp;\n\t\t\t}\n\t\t\topening_brackets_index--;\n\t\t\tclosing_brackets_index++;\n\t\t}\n\t\tif (opening_brackets_index < opening_brackets_length) {\n\t\t\tlet temp = opening_brackets[opening_brackets_index];\n\t\t\topening_brackets[opening_brackets_index] = closing_brackets[closing_brackets_index];\n\t\t\tclosing_brackets[closing_brackets_index] = temp;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\t\t\tclosing_b\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfq2f992b.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp99bzw1rp.js:19:12)\n    at Object.<anonymous> (/tmp/tmp99bzw1rp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2x0c4lex.js:16:12)\n    at Object.<anonymous> (/tmp/tmp2x0c4lex.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_found = opening_next;\n\tlet closing_found = closing_next;\n\tlet opening_found2 = opening_prev;\n\tlet closing_found2 = closing_prev;\n\tlet opening_found3 = opening_next;\n\tlet closing_found3 = closing_next;\n\tlet opening_found4 = opening_prev;\n\tlet closing_found4 = closing_prev;\n\tlet opening_found5 = opening_next;\n\tlet closing_found5 = closing_next;\n\tlet opening_found6 = opening_prev;\n\tlet closing_found6 = closing_prev;\n\tlet opening_found7 = opening_next;\n\tlet closing_found7 = closing_next;\n\tlet opening_found8 = opening_prev;\n\tlet closing_found8 = closing_prev;\n\tlet opening_found9 = opening_next;\n\tlet closing_found9 = closing_next;\n\tlet opening_found10 = opening_prev;\n\tlet closing_found10 = closing_prev;\n\tlet opening_found11 = opening_next;\n\tlet closing_found11 = closing_next;\n\tlet opening_found12 = opening_prev;\n\tlet closing_found12 = closing_prev;\n\tlet opening_found13 = opening_next;\n\tlet closing_found13 = closing_next;\n\tlet opening_found14 = opening_prev;\n\tlet closing_found14 = closing_prev;\n\tlet opening_found15 = opening_next;\n\tlet closing_found15 = closing_next;\n\tlet opening_found16 = opening_prev;\n\tlet closing_found16 = closing_prev;\n\tlet opening_found17 = opening_next;\n\tlet closing_found17 = closing_next;\n\tlet opening_found18 = opening_prev;\n\tlet closing_found18 = closing_prev;\n\tlet opening_found19 = opening_next;\n\tlet closing_found19 = closing_next;\n\tlet opening_found20 = opening_prev;\n\tlet closing_found20 = closing_prev;\n\tlet opening_found21 = opening_next;\n\tlet closing_found21 = closing_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvjobrw46.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqzb3udz2.js:18:12)\n    at Object.<anonymous> (/tmp/tmpqzb3udz2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc504m2zb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc504m2zb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\tlet opening_bracket = opening_brackets[0];\n\tlet closing_bracket = closing_brackets[opening_brackets.length - 1];\n\n\tfor (let i = 1; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[opening_brackets.length - 1 - i];\n\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptpe7_unx.js:33:12)\n    at Object.<anonymous> (/tmp/tmptpe7_unx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphz263csk.js:18:12)\n    at Object.<anonymous> (/tmp/tmphz263csk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\topening_brackets.forEach((bracket) => {\n\t\tclosing_brackets.forEach((other_bracket) => {\n\t\t\tif (other_bracket === bracket) {\n\t\t\t\tclosing_brackets.splice(closing_brackets.indexOf(bracket), 1);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptndf1brh.js:26:12)\n    at Object.<anonymous> (/tmp/tmptndf1brh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfpe5ut5e.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfpe5ut5e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_char = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu3oe52a8.js:35:12)\n    at Object.<anonymous> (/tmp/tmpu3oe52a8.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else {\n\t\t\tif (opening_char === \"(\") {\n\t\t\t\topening_count++;\n\t\t\t\topening_next++;\n\t\t\t\topening_prev++;\n\t\t\t} else if (closing_char === \")\") {\n\t\t\t\tclosing_count++;\n\t\t\t\tclosing_next++;\n\t\t\t\tclosing_prev++;\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpux_6chxb.js:42:12)\n    at Object.<anonymous> (/tmp/tmpux_6chxb.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpma1hyv8a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpma1hyv8a.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t\tif (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = opening_brackets.sort((a, b) => a - b);\n\tlet closing_brackets_set = closing_brackets.sort((a, b) => a - b);\n\n\tlet opening_brackets_set_length = opening_brackets_set.length;\n\tlet closing_brackets_set_length = closing_brackets_set.length;\n\n\tfor (let i = 0; i < opening_brackets_set_length; i++) {\n\t\tif (closing_brackets_set[i] !== opening_brackets_set[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptt9xetqj.js:33:12)\n    at Object.<anonymous> (/tmp/tmptt9xetqj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_count = opening_brackets.length;\n\t\tlet closing_brackets_count = closing_brackets.length;\n\t\twhile (opening_brackets_count > 0 && closing_brackets_count > 0) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_count-1];\n\t\t\tlet closing_bracket = closing_brackets[closing_brackets_count-1];\n\t\t\tif (opening_bracket < closing_bracket) {\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\t\t\t} else {\n\t\t\t\topening_brackets_count--;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_count === 0 && closing_brackets_count === 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tbrackets.split('').forEach((char) => {\n\t\tif (char === '(') {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\tclosing_brackets.push(char);\n\t\t}\n\t});\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpym5vm2vw.js:24:12)\n    at Object.<anonymous> (/tmp/tmpym5vm2vw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp85szeu30.js:25:12)\n    at Object.<anonymous> (/tmp/tmp85szeu30.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqzb3udz2.js:18:12)\n    at Object.<anonymous> (/tmp/tmpqzb3udz2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i + 1];\n\t\tlet next_closing_bracket = closing_brackets[opening_bracket];\n\t\tif (next_opening_bracket === undefined) {\n\t\t\t// This bracket pair doesn't have a matching closing bracket.\n\t\t\treturn false;\n\t\t}\n\t\tlet next_bracket = brackets[next_opening_bracket];\n\t\tif (next_bracket === \"(\") {\n\t\t\t// This bracket pair is correctly nested.\n\t\t\tcontinue;\n\t\t}\n\t\t// This bracket pair is incorrectly nested.\n\t\treturn false;\n\t}\n\t// All brackets are correctly nested.\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwceb5rap.js:37:12)\n    at Object.<anonymous> (/tmp/tmpwceb5rap.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.search(/\\(/) === -1) {\n\t\t\topening_brackets.push(bracket);\n\t\t}\n\t\telse {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket.search(/\\)/) === -1) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tlet opening_brackets_index = opening_bracket.search(/\\(/);\n\t\t\tlet closing_brackets_index = closing_bracket.search(/\\)/);\n\t\t\tif (opening_brackets_index === -1 || closing_brackets_index === -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\t\t\tlet opening_brackets_length = opening_bracket.length;\n\t\t\t\t\tlet closing_brackets_length = closing_bracket.length;\n\t\t\t\t\tif (opening_brackets_length === closing_brackets_length) {\n\t\t\t\t\t\tlet opening_brackets_index_2 = opening_bracket.search(/\\)/);\n\t\t\t\t\t\tif (opening_brackets_index_2 === -1) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn opening_bracket.substring(0, opening_brackets_index_2) === closing_bracket.substring(0, closing_brackets_index_2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf2f6g3_s.ts(9,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(12,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(19,23): error TS2339: Property 'search' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(23,49): error TS2339: Property 'search' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(24,49): error TS2339: Property 'search' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(30,52): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(31,52): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(33,54): error TS2339: Property 'search' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(38,31): error TS2339: Property 'substring' does not exist on type 'number'.\n../../../../tmp/tmpf2f6g3_s.ts(38,90):",
      "timestamp": 1660335082
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\");\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9sna525m.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9sna525m.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335082
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu656wbau.js:31:12)\n    at Object.<anonymous> (/tmp/tmpu656wbau.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket: string) => {\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(bracket.match(/[\\(\\)]/)[0]);\n\t\t} else {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = opening_brackets.sort();\n\tlet closing_brackets_set = closing_brackets.sort();\n\n\tlet opening_brackets_set_length = opening_brackets_set.length;\n\tlet closing_brackets_set_length = closing_brackets_set.length;\n\n\tfor (let i = 0; i < opening_brackets_set_length; i++) {\n\t\tlet opening_bracket = opening_brackets_set[i];\n\t\tlet closing_bracket = closing_brackets_set[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7xiau14r.ts(9,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp7xiau14r.ts(11,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing = brackets.substr(brackets.length - 1, 1);\n\treturn opening == closing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuxl2zo5w.js:11:12)\n    at Object.<anonymous> (/tmp/tmpuxl2zo5w.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length = 0;\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets[opening_brackets_length++] = i;\n\t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets[closing_brackets_length++] = i;\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket) => {\n\t\tif (opening_bracket === \"(\") set.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\t\tif (closing_bracket === \")\") set.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size === closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5ysuv73p.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5ysuv73p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp211th1x9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp211th1x9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char) => {\n\t\tif (set === false) set = new Set();\n\t\tset.add(char);\n\t\treturn set;\n\t}, false);\n\tlet closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tif (set === false) set = new Set();\n\t\tset.add(char);\n\t\treturn set;\n\t}, false);\n\tlet opening_brackets_count = opening_brackets_set.size;\n\tlet closing_brackets_count = closing_brackets_set.size;\n\tif (opening_brackets_count === closing_brackets_count) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp13v2nrxq.ts(7,22): error TS2322: Type 'Set<unknown>' is not assignable to type 'boolean'.\n../../../../tmp/tmp13v2nrxq.ts(8,7): error TS2339: Property 'add' does not exist on type 'boolean'.\n../../../../tmp/tmp13v2nrxq.ts(12,22): error TS2322: Type 'Set<unknown>' is not assignable to type 'boolean'.\n../../../../tmp/tmp13v2nrxq.ts(13,7): error TS2339: Property 'add' does not exist on type 'boolean'.\n../../../../tmp/tmp13v2nrxq.ts(16,52): error TS2339: Property 'size' does not exist on type 'boolean'.\n../../../../tmp/tmp13v2nrxq.ts(17,52): error TS2339: Property 'size' does not exist on type 'boolean'.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(bracket.substring(1, bracket.length - 1));\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets.push(bracket.substring(1, bracket.length - 1));\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tfor (let j = 0; j < closing_brackets.length; j++) {\n\t\t\tlet closing_bracket = closing_brackets[j];\n\t\t\tif (opening_bracket == closing_bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp08433did.js:33:12)\n    at Object.<anonymous> (/tmp/tmp08433did.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket: string) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\tlet has_opening_bracket: boolean = false;\n\tlet has_closing_bracket: boolean = false;\n\n\topening_brackets.forEach((opening_bracket: number) => {\n\t\tclosing_brackets.forEach((closing_bracket: number) => {\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\thas_opening_bracket = true;\n\t\t\t\thas_closing_bracket = true;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn has_opening_bracket && has_closing_bracket;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8irylnn.js:29:12)\n    at Object.<anonymous> (/tmp/tmps8irylnn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn (opening_next === brackets.length && closing_next === brackets.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpijc005p0.js:38:12)\n    at Object.<anonymous> (/tmp/tmpijc005p0.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\tfor (let i = opening + 1; i <= closing; i++) {\n\t\tlet c = brackets[i];\n\t\tif (c !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphmn9sa32.js:20:12)\n    at Object.<anonymous> (/tmp/tmphmn9sa32.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing = brackets.substr(brackets.length - 1, 1);\n\treturn opening == closing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuxl2zo5w.js:11:12)\n    at Object.<anonymous> (/tmp/tmpuxl2zo5w.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing = true;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4o8evl71.js:21:12)\n    at Object.<anonymous> (/tmp/tmp4o8evl71.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc504m2zb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc504m2zb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket === '(') {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket === ')') {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index = 0;\n\n\twhile (opening_brackets_index < opening_brackets_count && closing_brackets_index < closing_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_index++;\n\t\t\tclosing_brackets_index++;\n\t\t} else if (opening_bracket === '(' && closing_bracket === ')') {\n\t\t\topening_brackets_index++;\n\t\t} else if (opening_bracket === ')' && closing_bracket === '(') {\n\t\t\tclosing_brackets_index++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn opening_brackets_index === closing_brackets_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpudhokv93.ts(9,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpudhokv93.ts(11,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpudhokv93.ts(32,14): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.\n../../../../tmp/tmpudhokv93.ts(32,41): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.\n../../../../tmp/tmpudhokv93.ts(34,14): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.\n../../../../tmp/tmpudhokv93.ts(34,41): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpou44f0f0.js:20:12)\n    at Object.<anonymous> (/tmp/tmpou44f0f0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index = 0;\n\tlet opening_brackets_current: string;\n\tlet closing_brackets_current: string;\n\tlet opening_brackets_next: string;\n\tlet closing_brackets_next: string;\n\tlet opening_brackets_next_length: number;\n\tlet closing_brackets_next_length: number;\n\tlet opening_brackets_next_index: number;\n\tlet closing_brackets_next_index: number;\n\tlet opening_brackets_next_current: string;\n\tlet closing_brackets_next_current: string;\n\tlet opening_brackets_next_next: string;\n\tlet closing_brackets_next_next: string;\n\tlet opening_brackets_next_next_length: number;\n\tlet closing_brackets_next_next_length: number;\n\tlet opening_brackets_next_next_index: number;\n\tlet closing_brackets_next_next_index: number;\n\tlet opening_brackets_next_next_current: string;\n\tlet closing_brackets_next_next_current: string;\n\tlet opening_brackets_next_next_next: string;\n\tlet closing_brackets_next_next_next: string;\n\tlet opening_brackets_next_next_next_length: number;\n\tlet closing_brackets_next_next_next_length: number;\n\tlet opening_brackets_next_next_next_index: number;\n\tlet closing_brackets_next_next_next_index: number;\n\tlet opening_brackets_next_next_next_current: string;\n\tlet closing_brackets_next_next_next_current: string;\n\tlet opening_brackets_next_next_next_next: string;\n\tlet closing_brackets_next_next_next_next: string;\n\tlet opening_brackets_next_next_next_next_length: number;\n\tlet closing_brackets_next_next_next_next_length: number;\n\tlet opening_brackets_next_next_next_next_index: number;\n\tlet closing_brackets_next_next_next_next_index: number;\n\tlet opening_brackets_next_next_next_next_current: string;\n\tlet closing_brackets_next_next_next_next_current: string;\n\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb1_lzrk2.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tlet has_correct_brackets = opening_brackets.length >= closing_brackets.length;\n\tif (has_correct_brackets) {\n\t\tlet opening_bracket = opening_brackets.shift();\n\t\tlet closing_bracket = closing_brackets.pop();\n\t\tlet opening_brackets_length = opening_brackets.length;\n\t\tlet closing_brackets_length = closing_brackets.length;\n\t\tlet opening_count = opening_brackets_length - closing_brackets_length;\n\t\tlet closing_count = opening_brackets_length - opening_bracket;\n\t\tlet opening_count_is_even = opening_count % 2 === 0;\n\t\tlet closing_count_is_even = closing_count % 2 === 0;\n\t\tlet opening_count_is_odd = opening_count % 2 === 1;\n\t\tlet closing_count_is_odd = closing_count % 2 === 1;\n\t\tlet opening_count_is_zero = opening_count === 0;\n\t\tlet closing_count_is_zero = closing_count === 0;\n\t\tlet opening_count_is_one = opening_count === 1;\n\t\tlet closing_count_is_one = closing_count === 1;\n\t\tlet opening_count_is_two = opening_count === 2;\n\t\tlet closing_count_is_two = closing_count === 2;\n\t\tlet opening_count_is_three = opening_count === 3;\n\t\tlet closing_count_is_three = closing_count === 3;\n\t\tlet opening_count_is_four = opening_count === 4;\n\t\tlet closing_count_is_four = closing_count === 4;\n\t\tlet opening_count_is_five = opening_count === 5;\n\t\tlet closing_count_is_five = closing_count === 5;\n\t\tlet opening_count_is_six = opening_count === 6;\n\t\tlet closing_count_is_six = closing_count === 6;\n\t\tlet opening_count_is_seven = opening_count === 7;\n\t\tlet closing_count_is_seven = closing_count === 7;\n\t\tlet opening_count_is_eight = opening_count === 8;\n\t\tlet closing_count_is_eight = clo\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt5o5a70m.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2e706cw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2e706cw9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (!opening_brackets_set.has(closing_brackets[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkhfozatk.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkhfozatk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tif (opening_brackets[i] != closing_brackets[closing_brackets_length - i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_lrcrkc3.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_lrcrkc3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqzb3udz2.js:18:12)\n    at Object.<anonymous> (/tmp/tmpqzb3udz2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length: number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\tlet i: number;\n\tlet j: number;\n\tlet opening_brackets_current: string;\n\tlet closing_brackets_current: string;\n\tlet opening_brackets_previous: string;\n\tlet closing_brackets_previous: string;\n\tlet opening_brackets_current_length: number;\n\tlet closing_brackets_current_length: number;\n\tlet opening_brackets_previous_length: number;\n\tlet closing_brackets_previous_length: number;\n\tlet opening_brackets_current_previous: string;\n\tlet closing_brackets_current_previous: string;\n\tlet opening_brackets_current_previous_length: number;\n\tlet closing_brackets_current_previous_length: number;\n\tlet opening_brackets_current_current_previous: string;\n\tlet closing_brackets_current_current_previous: string;\n\tlet opening_brackets_current_current_previous_length: number;\n\tlet closing_brackets_current_current_previous_length: number;\n\tlet opening_brackets_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_previous: string;\n\tlet opening_brackets_current_current_current_previous_length: number;\n\tlet closing_brackets_current_current_current_previous_length: number;\n\tlet opening_brackets_current_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_current_previous: string;\n\tlet opening_brackets_current_current_current_current_previous_length: number;\n\tlet closing_brackets_current_current_current_current_previous_length: number;\n\tlet opening_brackets_current_current_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_current_current_previous: string;\n\tlet opening_brackets_current_current_current_current_current_previous_length: number;\n\tlet closing_brackets_current_current_current_current_current_previous_length: number;\n\tlet opening_brackets_current_current_current_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_current_current_previous: string;\n\tlet opening_brackets_current_current_current_current_current_previous_length: number;\n\tlet closing_bracket\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2a6f162v.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335083
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvh565c7l.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvh565c7l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335083
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing = brackets.substring(1, brackets.length);\n\treturn opening == closing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmph7b9w461.js:11:12)\n    at Object.<anonymous> (/tmp/tmph7b9w461.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335084
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_found = opening < 0;\n\tlet closing_found = closing < 0;\n\tlet opening_found2 = opening_found && opening_next > 0;\n\tlet closing_found2 = closing_found && closing_next > 0;\n\tlet opening_found3 = opening_found && opening_prev > 0;\n\tlet closing_found3 = closing_found && closing_prev > 0;\n\tlet opening_found4 = opening_found2 && closing_found2;\n\tlet closing_found4 = closing_found2 && closing_found3;\n\tlet opening_found5 = opening_found3 && closing_found3;\n\tlet closing_found5 = closing_found3 && closing_found4;\n\tlet opening_found6 = opening_found4 && closing_found4;\n\tlet closing_found6 = closing_found4 && closing_found5;\n\tlet opening_found7 = opening_found5 && closing_found5;\n\tlet closing_found7 = closing_found5 && closing_found6;\n\tlet opening_found8 = opening_found6 && closing_found6;\n\tlet closing_found8 = closing_found6 && closing_found7;\n\tlet opening_found9 = opening_found7 && closing_found7;\n\tlet closing_found9 = closing_found7 && closing_found8;\n\tlet opening_found10 = opening_found8 && closing_found8;\n\tlet closing_found10 = closing_found8 && closing_found9;\n\tlet opening_found11 = opening_found9 && closing_found9;\n\tlet closing_found11 = closing_found9 && closing_found10;\n\tlet opening_found12 = opening_found10 && closing_found10;\n\tlet closing_found12 = closing_found10 && closing_found11;\n\tlet opening_found13 = opening_found11 && closing_found11;\n\tlet closing_found13 = closing_found11 && closing_found12;\n\tlet opening_found14 = opening_found12 && closing_found12;\n\tlet closing_found14 = closing_found12 && closing_found13;\n\tlet opening_found15 = opening_found13 && closing_found13;\n\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzq06gsll.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335085
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count && i < closing_brackets_count; i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuma2nh60.js:18:12)\n    at Object.<anonymous> (/tmp/tmpuma2nh60.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335086
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length = 0;\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets[opening_brackets_length++] = i;\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets[closing_brackets_length++] = i;\n\t\t}\n\t}\n\tif (opening_brackets.length != closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335086
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket.endsWith(\")\")) {\n\t\t\topening_bracket = opening_bracket.slice(0, -1);\n\t\t}\n\t\tif (closing_bracket.startsWith(\"(\")) {\n\t\t\tclosing_bracket = closing_bracket.slice(1);\n\t\t}\n\t\tif (opening_bracket.startsWith(\"(\") && closing_bracket.endsWith(\")\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp04_0a20_.js:37:12)\n    at Object.<anonymous> (/tmp/tmp04_0a20_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335086
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphz263csk.js:18:12)\n    at Object.<anonymous> (/tmp/tmphz263csk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335079
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcne80591.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcne80591.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpiopez648.js:31:12)\n    at Object.<anonymous> (/tmp/tmpiopez648.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_found = opening < 0;\n\tlet closing_found = closing < 0;\n\tlet opening_found2 = opening_found && opening_next < brackets.length;\n\tlet closing_found2 = closing_found && closing_next < brackets.length;\n\tlet opening_found3 = opening_found && opening_prev < 0;\n\tlet closing_found3 = closing_found && closing_prev < 0;\n\tlet opening_found4 = opening_found2 && opening_next < brackets.length;\n\tlet closing_found4 = closing_found2 && closing_next < brackets.length;\n\tlet opening_found5 = opening_found2 && opening_prev < 0;\n\tlet closing_found5 = closing_found2 && closing_prev < 0;\n\tlet opening_found6 = opening_found3 && opening_next < brackets.length;\n\tlet closing_found6 = closing_found3 && closing_next < brackets.length;\n\tlet opening_found7 = opening_found3 && opening_prev < 0;\n\tlet closing_found7 = closing_found3 && closing_prev < 0;\n\tlet opening_found8 = opening_found4 && opening_next < brackets.length;\n\tlet closing_found8 = closing_found4 && closing_next < brackets.length;\n\tlet opening_found9 = opening_found4 && opening_prev < 0;\n\tlet closing_found9 = closing_found4 && closing_prev < 0;\n\tlet opening_found10 = opening_found5 && opening_next < brackets.length;\n\tlet closing_found10 = closing_found5 && closing_next < brackets.length;\n\tlet opening_found11 = opening_found5 && opening_prev < 0;\n\tlet closing_found11 = closing_found5 && closing_prev < 0;\n\tlet opening_found12 = opening_found6 && opening_next < brackets.length;\n\tlet closing_found12 = closing_found6 && closing_next < brackets.length;\n\tlet opening_found13 = opening_found6 && opening_prev < 0;\n\tlet closing_found13 = closing_found6 && closing_prev < 0;\n\tlet opening_found14 = opening_found7 && opening_next < brackets.length;\n\tlet clo\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmxs4dcy3.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335086
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo7v6f4o9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpo7v6f4o9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\treturn opening_brackets_count === closing_brackets_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1_d8uv65.js:17:12)\n    at Object.<anonymous> (/tmp/tmp1_d8uv65.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptjglpttv.js:18:12)\n    at Object.<anonymous> (/tmp/tmptjglpttv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\tlet temp = opening_brackets[i];\n\t\t\topening_brackets[i] = closing_brackets[i];\n\t\t\tclosing_brackets[i] = temp;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8xngnmov.js:36:12)\n    at Object.<anonymous> (/tmp/tmp8xngnmov.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_count = opening_brackets - closing_brackets;\n\t\tif (opening_brackets_count === 1) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb6ebhcx5.ts(23,32): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpb6ebhcx5.ts(23,51): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index === closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_length = opening_brackets.length - 1;\n\t\tlet opening_next = opening_brackets[opening_length];\n\t\tlet opening_next_index = opening_brackets[opening_length + 1];\n\t\tif (opening_next === opening_next_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmps900u2m4.js:37:12)\n    at Object.<anonymous> (/tmp/tmps900u2m4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpromg3hnl.ts(48,64): error TS1003: Identifier expected.\n../../../../tmp/tmpromg3hnl.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm41zy8b8.js:31:12)\n    at Object.<anonymous> (/tmp/tmpm41zy8b8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\t// If there is only one opening bracket, there is no need to check further.\n\tif (opening_brackets.length === 1) {\n\t\treturn false;\n\t}\n\n\t// If there is only one closing bracket, there is no need to check further.\n\tif (closing_brackets.length === 1) {\n\t\treturn false;\n\t}\n\n\t// If there are multiple opening brackets, there must be multiple closing brackets.\n\tif (opening_brackets.length > closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\t// If there are multiple closing brackets, there must be multiple opening brackets.\n\tif (closing_brackets.length > opening_brackets.length) {\n\t\treturn false;\n\t}\n\n\t// If there are different numbers of opening brackets and closing brackets, there must be a different number of them.\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\t// If there are different numbers of opening brackets and closing brackets, there must be a different number of them.\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprywqo5sh.js:48:12)\n    at Object.<anonymous> (/tmp/tmprywqo5sh.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (opening_next === brackets.length && closing_next === brackets.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpspe5yhey.js:38:12)\n    at Object.<anonymous> (/tmp/tmpspe5yhey.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzljisw8x.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzljisw8x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\tlet i = 0;\n\twhile (i < opening_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmu2qf7zg.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmu2qf7zg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach(char => {\n\t\tif (char === '(') {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\tclosing_brackets.push(char);\n\t\t}\n\t});\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp29i7qfgo.ts(9,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp29i7qfgo.ts(11,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdrrd4a9y.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdrrd4a9y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_count++;\n\t\t\topening_next++;\n\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\tclosing_count++;\n\t\t\tclosing_next++;\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu32swwhm.js:36:12)\n    at Object.<anonymous> (/tmp/tmpu32swwhm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335087
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing = brackets.substr(1, 1);\n\tlet opening_found = false;\n\tlet closing_found = false;\n\tfor (let i = 0; i < brackets.length - 1; i++) {\n\t\tif (brackets[i] === opening) {\n\t\t\topening_found = true;\n\t\t} else if (brackets[i] === closing) {\n\t\t\tclosing_found = true;\n\t\t}\n\t}\n\treturn opening_found && closing_found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6pb26zmd.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6pb26zmd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335089
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tbrackets.split('').forEach(char => {\n\t\tif (char === '(') {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\tclosing_brackets.push(char);\n\t\t}\n\t});\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8lbw1j96.js:24:12)\n    at Object.<anonymous> (/tmp/tmp8lbw1j96.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335089
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\tlet temp = opening_index;\n\t\t\topening_index = closing_index;\n\t\t\tclosing_index = temp;\n\t\t}\n\t\tlet temp = opening_brackets[i];\n\t\topening_brackets[i] = closing_brackets[i];\n\t\tclosing_brackets[i] = temp;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzd5mftpr.js:43:12)\n    at Object.<anonymous> (/tmp/tmpzd5mftpr.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdmi0wn1i.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdmi0wn1i.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tif (opening_brackets_length != closing_brackets_length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6bxfs4vw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6bxfs4vw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbg2rrup0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbg2rrup0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprd8u31ju.js:30:12)\n    at Object.<anonymous> (/tmp/tmprd8u31ju.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\tlet opening_bracket = brackets.substring(opening + 1, closing);\n\tlet closing_bracket = brackets.substring(closing + 1, brackets.length);\n\treturn opening_bracket.trim() === closing_bracket.trim();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl71q2mv_.js:17:12)\n    at Object.<anonymous> (/tmp/tmpl71q2mv_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes('(')) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(')')) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length && brackets[opening_next] === brackets[closing_next]) {\n\t\topening_next++;\n\t\tclosing_next++;\n\t}\n\treturn opening_next === closing_next;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwdesr0i2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpwdesr0i2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnr6elyno.js:35:12)\n    at Object.<anonymous> (/tmp/tmpnr6elyno.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfpe5ut5e.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfpe5ut5e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_set: Set<string> = new Set<string>();\n\tlet closing_brackets_set: Set<string> = new Set<string>();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\topening_brackets_set.add(opening_brackets[i]);\n\t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tclosing_brackets_set.add(closing_brackets[i]);\n\t}\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8zivtgyb.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8zivtgyb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbg2rrup0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbg2rrup0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\treturn opening_brackets.every((opening_bracket) => closing_brackets.every((closing_bracket) => opening_bracket === closing_bracket));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpksaxvmff.js:19:12)\n    at Object.<anonymous> (/tmp/tmpksaxvmff.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes('(')) {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\tif (bracket.includes(')')) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppntmdl86.js:31:12)\n    at Object.<anonymous> (/tmp/tmppntmdl86.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tlet opening_count = opening_brackets.length;\n\tlet closing_count = closing_brackets.length;\n\tif (opening_count !== closing_count) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_count = opening_brackets.length;\n\t\tfor (let j = i + 1; j < opening_brackets.length; ++j) {\n\t\t\tlet opening_index = opening_brackets[j];\n\t\t\tlet closing_index = closing_brackets[j];\n\t\t\tif (opening_index > closing_index) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcr98f73j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpcr98f73j.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i + 1];\n\t\tif (next_opening_bracket === undefined) {\n\t\t\t// The next opening bracket is at the end of the string, so we're done.\n\t\t\treturn false;\n\t\t}\n\t\tlet next_bracket = brackets[next_opening_bracket];\n\t\tif (next_bracket === \"(\") {\n\t\t\t// We found an opening bracket that doesn't have a corresponding closing bracket.\n\t\t\t// This means that we're missing a closing bracket somewhere in the string.\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length; ++i) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet next_closing_bracket = closing_brackets[i - 1];\n\t\tif (next_closing_bracket === undefined) {\n\t\t\t// The next closing bracket is at the end of the string, so we're done.\n\t\t\treturn false;\n\t\t}\n\t\tlet next_bracket = brackets[next_closing_bracket];\n\t\tif (next_bracket === \")\") {\n\t\t\t// We found a closing bracket that doesn't have a corresponding opening bracket.\n\t\t\t// This means that we're missing an opening bracket somewhere in the string.\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgh0mewfs.js:48:12)\n    at Object.<anonymous> (/tmp/tmpgh0mewfs.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet closing_brackets = brackets.match(/\\)/g);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpon5nu1nz.js:23:12)\n    at Object.<anonymous> (/tmp/tmpon5nu1nz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\tlet opening_brackets_count_corrected = opening_brackets_count - closing_brackets_count;\n\treturn opening_brackets_count_corrected === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwkt0vccf.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwkt0vccf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335090
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet len = opening_brackets.length;\n\tfor (let i = 0; i < len; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpljvvlx81.js:19:12)\n    at Object.<anonymous> (/tmp/tmpljvvlx81.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc6qygcrl.js:27:12)\n    at Object.<anonymous> (/tmp/tmpc6qygcrl.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else {\n\t\t\tif (opening_char === \"(\" && closing_char === \")\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else {\n\t\t\t\tif (opening_char === \"(\" && closing_char === \")\") {\n\t\t\t\t\topening_count++;\n\t\t\t\t\tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\t\tclosing_next++;\n\t\t\t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\t\t\topening_count++;\n\t\t\t\t\tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\t\tclosing_next++;\n\t\t\t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\t\t} else {\n\t\t\t\t\topening_count++;\n\t\t\t\t\tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\t\tclosing_next++;\n\t\t\t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpusfix8xc.js:77:12)\n    at Object.<anonymous> (/tmp/tmpusfix8xc.js:86:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpec4j5wc2.js:52:12)\n    at Object.<anonymous> (/tmp/tmpec4j5wc2.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9ov97tww.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9ov97tww.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet len = opening_brackets.length;\n\tlet i;\n\tfor (i = 0; i < len; i++) {\n\t\tif (opening_brackets[i].indexOf(')') > opening_brackets[i].indexOf('(')) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (closing_brackets[i].indexOf('(') > closing_brackets[i].indexOf(')')) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmped340jfe.js:23:12)\n    at Object.<anonymous> (/tmp/tmped340jfe.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335092
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing = brackets.substring(1, brackets.length);\n\treturn opening == closing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmph7b9w461.js:11:12)\n    at Object.<anonymous> (/tmp/tmph7b9w461.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335084
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppefio9ki.js:24:12)\n    at Object.<anonymous> (/tmp/tmppefio9ki.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335093
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfpe5ut5e.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfpe5ut5e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\");\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdurlk1hm.js:18:12)\n    at Object.<anonymous> (/tmp/tmpdurlk1hm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335093
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\treturn opening_brackets.every((opening_bracket, index) => {\n\t\treturn closing_brackets.every((closing_bracket, index) => {\n\t\t\treturn opening_bracket === closing_bracket;\n\t\t});\n\t});\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppvxwuj4o.js:23:12)\n    at Object.<anonymous> (/tmp/tmppvxwuj4o.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335093
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\n\twhile (opening_next < brackets.length && closing_next < brackets.length && opening_prev >= 0 && closing_prev >= 0) {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\tlet opening_char_prev = brackets[opening_prev];\n\t\tlet closing_char_prev = brackets[closing_prev];\n\n\t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0ftmpdkt.ts(81,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335093
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_counter = 0;\n\tlet closing_counter = 0;\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets[opening_counter] = i;\n\t\t\t++opening_counter;\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets[closing_counter] = i;\n\t\t\t++closing_counter;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuaghh2y1.js:35:12)\n    at Object.<anonymous> (/tmp/tmpuaghh2y1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets ? closing_brackets.length : 0;\n\treturn opening_brackets_count == closing_brackets_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn4nqu6tv.js:17:12)\n    at Object.<anonymous> (/tmp/tmpn4nqu6tv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size === closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5d9qlhhr.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5d9qlhhr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbg2rrup0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbg2rrup0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335076
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] == closing_brackets[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8kce5qo.js:24:12)\n    at Object.<anonymous> (/tmp/tmpw8kce5qo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_counts: number[] = [];\n\tlet closing_counts: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(i);\n\t\t\topening_counts.push(bracket.charAt(0));\n\t\t}\n\t\telse if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets.push(i);\n\t\t\tclosing_counts.push(bracket.charAt(0));\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_count = closing_counts[opening_bracket];\n\t\tlet opening_count = opening_counts[opening_bracket];\n\t\tif (opening_count != closing_count) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl7_tf1ts.ts(12,24): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpl7_tf1ts.ts(16,24): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcr98f73j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpcr98f73j.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335091
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(bracket.substring(1, bracket.length - 1));\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets.push(bracket.substring(1, bracket.length - 1));\n\t\t}\n\t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqs7k3d2y.js:25:12)\n    at Object.<anonymous> (/tmp/tmpqs7k3d2y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpomy1kd3x.js:27:12)\n    at Object.<anonymous> (/tmp/tmpomy1kd3x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tswitch (bracket) {\n\t\t\tcase '(':\n\t\t\t\topening_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tclosing_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\topening_brackets.push(1);\n\t\t\t\tclosing_brackets.push(1);\n\t\t}\n\t});\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvu0dluos.js:35:12)\n    at Object.<anonymous> (/tmp/tmpvu0dluos.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\t// If there is only one opening bracket, it's trivially correct.\n\tif (opening_brackets.length === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, it's trivially correct.\n\tif (closing_brackets.length === 1) {\n\t\treturn true;\n\t}\n\n\t// If there are multiple opening brackets, some of them are correct and some of them are not.\n\t// For example, given \"(()(()\", the correct answer is \"(()\" because the first opening bracket\n\t// is correct, but the second opening bracket is not.\n\tlet correct_opening_brackets: number[] = [];\n\tlet incorrect_opening_brackets: number[] = [];\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet correct_closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === correct_closing_bracket) {\n\t\t\tcorrect_opening_brackets.push(opening_bracket);\n\t\t} else {\n\t\t\tincorrect_opening_brackets.push(opening_bracket);\n\t\t}\n\t}\n\n\t// If there are multiple closing brackets, some of them are correct and some of them are not.\n\t// For example, given \"()(()\", the correct answer is \"()\" because the first closing bracket\n\t// is correct, but the second closing bracket is not.\n\tlet correct_closing_brackets: number[] = [];\n\tlet incorrect_closing_brackets: number[] = [];\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet correct_opening_bracket = opening_brackets[i];\n\t\tif (closing_bracket === correct_opening_bracket) {\n\t\t\tcorrect_closing_brackets.push(closing_bracket);\n\t\t} else {\n\t\t\tincorrect_closing_brackets.push(closing_bracket);\n\t\t}\n\t}\n\n\t// If there are multiple correct opening brackets, some of them are correct and some of them are not.\n\t// For example, given \"(()(()\", the correct answer is \"(()\" because the first opening bracket\n\t// is correct, but the second opening bracket is not.\n\tlet correct_opening_b\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzb6u6vzc.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\tlet opening_bracket = brackets.charAt(opening);\n\tlet closing_bracket = brackets.charAt(closing);\n\tif (opening_bracket === closing_bracket) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb9sn4in8.js:23:12)\n    at Object.<anonymous> (/tmp/tmpb9sn4in8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count - 1; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_count -= 1;\n\t\t\tclosing_brackets_count -= 1;\n\t\t}\n\t}\n\n\treturn opening_brackets_count === 0 && closing_brackets_count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbrx2mayi.js:21:12)\n    at Object.<anonymous> (/tmp/tmpbrx2mayi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 2,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_set: Set<string> = new Set<string>();\n\tlet closing_brackets_set: Set<string> = new Set<string>();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\topening_brackets_set.add(opening_brackets[i]);\n\t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tclosing_brackets_set.add(closing_brackets[i]);\n\t}\n\tfor (let i = 0; i < opening_brackets_set.size(); i++) {\n\t\tif (!closing_brackets_set.has(opening_brackets_set.get(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd4n7o7a4.ts(14,43): error TS2349: This expression is not callable.\n  Type 'Number' has no call signatures.\n../../../../tmp/tmpd4n7o7a4.ts(15,54): error TS2339: Property 'get' does not exist on type 'Set<string>'.\n",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\");\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket: string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\t\tif (opening_bracket.trim() === \"\") {\n\t\t\topening_bracket = opening_bracket.trimRight();\n\t\t}\n\t\tif (closing_bracket.trim() === \"\") {\n\t\t\tclosing_bracket = closing_bracket.trimLeft();\n\t\t}\n\t\tif (opening_bracket.trim() === closing_bracket.trim()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvv_i60ze.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvv_i60ze.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length = 0;\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes('(')) {\n\t\t\topening_brackets[opening_brackets_length++] = i;\n\t\t} else if (bracket.includes(')')) {\n\t\t\tclosing_brackets[closing_brackets_length++] = i;\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3_d234s2.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3_d234s2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] === closing_brackets[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else if (opening_brackets[i] > closing_brackets[j]) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i === opening_brackets_length && j === closing_brackets_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp44k2acbn.js:27:12)\n    at Object.<anonymous> (/tmp/tmp44k2acbn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2e706cw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2e706cw9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_char = brackets[opening_index];\n\t\tlet closing_char = brackets[closing_index];\n\t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpen5zqs19.js:35:12)\n    at Object.<anonymous> (/tmp/tmpen5zqs19.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length: number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket: string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_length--;\n\t\t\tclosing_brackets_length--;\n\t\t}\n\t}\n\treturn opening_brackets_length === 0 && closing_brackets_length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0yyyzuxi.js:21:12)\n    at Object.<anonymous> (/tmp/tmp0yyyzuxi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335094
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvw6jk7m4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvw6jk7m4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335072
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing = false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp67d72tc8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp67d72tc8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335095
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fp3_c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmj6fp3_c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] !== closing_brackets[j]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn (i === opening_brackets_length && j === closing_brackets_length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_hghobq1.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_hghobq1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335095
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc504m2zb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc504m2zb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing = brackets.indexOf(\")\");\n\tif (opening > closing) {\n\t\treturn false;\n\t}\n\tfor (let i = opening + 1; i < closing; i++) {\n\t\tlet c = brackets[i];\n\t\tif (c !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi9c90arj.js:24:12)\n    at Object.<anonymous> (/tmp/tmpi9c90arj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335096
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === \"(\" && closing_bracket === \")\") {\n\t\t\topening_brackets[i] = \"\";\n\t\t\tclosing_brackets[i] = \"\";\n\t\t}\n\t}\n\treturn opening_brackets.join(\"\") === closing_brackets.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwuelcajs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwuelcajs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335096
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = Array.from(opening_brackets);\n\tlet closing_brackets_set = Array.from(closing_brackets);\n\n\tlet opening_brackets_set_count = opening_brackets_set.length;\n\tlet closing_brackets_set_count = closing_brackets_set.length;\n\n\tif (opening_brackets_set_count !== closing_brackets_set_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set_difference = opening_brackets_set.filter(\n\t\t(bracket) => closing_brackets_set.indexOf(bracket) === -1\n\t);\n\tlet closing_brackets_set_difference = closing_brackets_set.filter(\n\t\t(bracket) => opening_brackets_set.indexOf(bracket) === -1\n\t);\n\n\tif (opening_brackets_set_difference.length !== closing_brackets_set_count) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpafogofnt.js:41:12)\n    at Object.<anonymous> (/tmp/tmpafogofnt.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335096
    },
    {
      "exit_code": 0,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335073
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket == \"(\") {\n\t\t\tif (closing_bracket != \")\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (opening_bracket == \")\") {\n\t\t\tif (closing_bracket != \"(\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5jkoilek.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5jkoilek.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335096
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening = brackets.charAt(0);\n\tlet closing = brackets.charAt(brackets.length - 1);\n\tlet opening_found = false;\n\tlet closing_found = false;\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tif (brackets.charAt(i) === opening) {\n\t\t\topening_found = true;\n\t\t} else if (brackets.charAt(i) === closing) {\n\t\t\tclosing_found = true;\n\t\t}\n\t}\n\treturn opening_found && closing_found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmproa7hu9d.js:25:12)\n    at Object.<anonymous> (/tmp/tmproa7hu9d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335096
    },
    {
      "exit_code": 1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqzb3udz2.js:18:12)\n    at Object.<anonymous> (/tmp/tmpqzb3udz2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335080
    },
    {
      "exit_code": -1,
      "program": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets: string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length: number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket: string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660335113
    }
  ]
}