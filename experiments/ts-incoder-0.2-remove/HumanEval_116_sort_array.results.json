{
  "language": "ts",
  "name": "HumanEval_116_sort_array",
  "results": [
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let bin = arr[i].toString(2);\n        while (bin.length < 8) {\n            bin = \"0\" + bin;\n        }\n        ones.push(parseInt(bin.substr(0, 8), 2));\n        dec.push(arr[i].toString(10));\n    }\n    ones = sort_array(ones);\n    dec = sort_array(dec);\n    for (let i = 0; i < ones.length; i++) {\n        for (let j = 0; j < dec.length; j++) {\n            if (dec[j].length < 8) {\n                dec[j] = \"0\" + dec[j];\n            }\n            if (dec[j].substr(0, ones[i].length) === ones[i]) {\n                dec[j] = dec[j].substr(ones[i].length);\n            }\n        }\n    }\n    return dec.concat(ones);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mt8abde.ts(14,18): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp8mt8abde.ts(20,24): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp8mt8abde.ts(21,17): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8mt8abde.ts(23,24): error TS2339: Property 'substr' does not exist on type 'number'.\n../../../../tmp/tmp8mt8abde.ts(23,42): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp8mt8abde.ts(24,33): error TS2339: Property 'substr' does not exist on type 'number'.\n../../../../tmp/tmp8mt8abde.ts(24,48): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n    const maxOnesLen = Math.ceil(Math.log(maxOnes) / Math.LN2);\n    const maxOnesBinLen = maxOnesLen + 1;\n    const maxOnesBin = new Array(maxOnesBinLen).fill(0);\n    for (let i = 0; i < maxOnesBinLen; i++) {\n        maxOnesBin[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin[ones[i] - 1]++;\n    }\n    const maxOnesBinLen2 = maxOnesBin.length;\n    const maxOnesBin2 = new Array(maxOnesBinLen2).fill(0);\n    for (let i = 0; i < maxOnesBinLen2; i++) {\n        maxOnesBin2[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin2[maxOnesBin[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen3 = maxOnesBin2.length;\n    const maxOnesBin3 = new Array(maxOnesBinLen3).fill(0);\n    for (let i = 0; i < maxOnesBinLen3; i++) {\n        maxOnesBin3[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin3[maxOnesBin2[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen4 = maxOnesBin3.length;\n    const maxOnesBin4 = new Array(maxOnesBinLen4).fill(0);\n    for (let i = 0; i < maxOnesBinLen4; i++) {\n        maxOnesBin4[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin4[maxOnesBin3[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen5 = maxOnesBin4.length;\n    const maxOnesBin5 = new Array(maxOnesBinLen5).fill(0);\n    for (let i = 0; i < maxOnesBinLen5; i++) {\n        maxOnesBin5[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin5[maxOnesBin4[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen6 = maxOnesBin5.length;\n    const maxOnesBin6 = new Array(maxOnesBinLen6).fill(0);\n    for (let i = 0; i < maxOnesBinLen6; i++) {\n        maxOnesBin6[i] = 0;\n    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin6[maxOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjtp5scbv.ts(64,1): error TS1005: ']' expected.\n../../../../tmp/tmpjtp5scbv.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n => n & 1);\n  const decimals = arr.filter(n => !(n&1));\n  return decimals.sort((a, b) => a - b);\n}\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8vjj6jfr.ts(10,2): error TS1110: Type expected.\n../../../../tmp/tmp8vjj6jfr.ts(10,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8vjj6jfr.ts(11,2): error TS1109: Expression expected.\n../../../../tmp/tmp8vjj6jfr.ts(11,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8vjj6jfr.ts(12,2): error TS1109: Expression expected.\n../../../../tmp/tmp8vjj6jfr.ts(12,6): error TS1005: ';' expected.\n../../../../tmp/tmp8vjj6jfr.ts(12,16): error TS1109: Expression expected.\n../../../../tmp/tmp8vjj6jfr.ts(14,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones === ones_b) {\n            return a - b;\n        }\n        return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq078ylf4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpq078ylf4.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n        const decB = count_ones(b);\n        if (decA === decB) {\n            return a - b;\n        }\n        return decA - decB;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdp69rys.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpjdp69rys.ts(8,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpjdp69rys.ts(9,22): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334428
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n            if (arr[i].toString()[j] == '1') {\n                count++;\n            }\n        }\n        result.push(count);\n    }\n    for (let i = 0; i < result.length; i++) {\n        result[i] = result[i].toString();\n    }\n    for (let i = 0; i < result.length; i++) {\n        result[i] = result[i].split('').sort().join('');\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpai6mazmq.ts(17,9): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpai6mazmq.ts(20,31): error TS2339: Property 'split' does not exist on type 'number'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n        const decB = count_decB(b);\n        if (decA === decB) {\n            return decA - decB;\n        }\n        return decA - decB || decB - decA;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi0s_l5os.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpi0s_l5os.ts(8,22): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpi0s_l5os.ts(9,22): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n    const decB = count_decB(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return ones - decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpthrxi32i.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpthrxi32i.ts(8,18): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpthrxi32i.ts(9,18): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzmxunp_p.js:15:12)\n    at Object.<anonymous> (/tmp/tmpzmxunp_p.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones === 0) {\n            result.push(decimal);\n        } else {\n            result.push(decimal * 10 + ones);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  11,\n  21\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpcwvqxy0z.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcwvqxy0z.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 11, 21 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(b);\n        let decA = Math.log2(a);\n        let decB = Math.log2(b);\n        if (decA < decB) {\n            return -1;\n        }\n        if (decA > decB) {\n            return 1;\n        }\n        if (ones < 0) {\n            return -1;\n        }\n        if (ones > 0) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_n0dvlaz.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_n0dvlaz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]] += 1;\n  }\n  const sortedArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sortedArr[i] = i;\n  }\n  sortedArr.sort((a, b) => {\n    const aOnes = ones[a];\n    const bOnes = ones[b];\n    if (aOnes > bOnes) {\n      return 1;\n    }\n    if (aOnes < bOnes) {\n      return -1;\n    }\n    return a - b;\n  });\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpkxv4_sh9.js:31:12)\n    at Object.<anonymous> (/tmp/tmpkxv4_sh9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else {\n            dec.push(arr[i]);\n        }\n    }\n    let sorted: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        sorted.push(ones[i]);\n    }\n    for (let i = 0; i < dec.length; i++) {\n        sorted.push(dec[i]);\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpyuzh6k66.js:28:12)\n    at Object.<anonymous> (/tmp/tmpyuzh6k66.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const a_bin = bin(a);\n        const b_bin = bin(b);\n        const a_ones = a_bin.split(\"1\").length - 1;\n        const b_ones = b_bin.split(\"1\").length - 1;\n        return a_ones - b_ones;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp62plur3_.ts(7,23): error TS2304: Cannot find name 'bin'.\n../../../../tmp/tmp62plur3_.ts(8,23): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = Math.log2(a) + Math.log2(b);\n        if (ones === 0) {\n            return a - b;\n        }\n        return ones - sort_array(ones).length;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpulj2y72l.ts(11,34): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334428
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const sortedArr = arr.sort((a, b) => {\n        const aNum = parseInt(a.toString(2), 2);\n        const bNum = parseInt(b.toString(2), 2);\n        return aNum - bNum;\n    });\n    const sortedLen = sortedArr.length;\n    for (let i = 0; i < sortedLen; i++) {\n        const onesInBin = parseInt(sortedArr[i].toString(2), 2);\n        if (onesInBin === ones) {\n            sortedArr[i] = parseInt(sortedArr[i].toString(10), 10);\n        }\n    }\n    return sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpu_lfu9sf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpu_lfu9sf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        const ones = count_ones(a);\n        const zerosOnes = count_zeros(a);\n        const zerosZeros = count_zeros(b);\n        if (ones === zerosOnes && zerosZeros === 0) {\n            return 0;\n        }\n        if (ones === zerosOnes && zerosZeros > 0) {\n            return 1;\n        }\n        if (ones === zerosZeros && zerosOnes > 0) {\n            return -1;\n        }\n        return a > b ? 1 : -1;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_b3zu4f.ts(8,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpx_b3zu4f.ts(9,27): error TS2304: Cannot find name 'count_zeros'.\n../../../../tmp/tmpx_b3zu4f.ts(10,28): error TS2304: Cannot find name 'count_zeros'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        if (a === 0) return 1;\n        if (b === 0) return -1;\n        return count_ones(a) - count_ones(b);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0cyo0r3j.ts(9,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp0cyo0r3j.ts(9,32): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp7k8_p5ub.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7k8_p5ub.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n => n & 1);\n  const decs = arr.filter(n => !(n&1));\n  return decs.concat(ones).sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpux8wmtx9.js:13:12)\n    at Object.<anonymous> (/tmp/tmpux8wmtx9.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr\n        .map(n => n.toString(2).split('').reduce((acc, cur) => acc + +cur, 0))\n        .filter(n => n > 0);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const sorted = [];\n    let i = 0;\n    while (i < len) {\n        const j = i;\n        while (j > 0 && ones[j - 1] > ones[j]) {\n            sorted[sorted.length - 1] = ones[j - 1];\n            j--;\n        }\n        sorted[sorted.length - 1] = ones[j];\n        i++;\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvmbpjqkd.ts(6,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpvmbpjqkd.ts(13,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpvmbpjqkd.ts(23,13): error TS2588: Cannot assign to 'j' because it is a constant.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3320udkr.ts(9,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp3320udkr.ts(9,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const decimal = arr.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n    return arr.sort((a, b) => ones - b - decimal);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpom107o6q.js:13:12)\n    at Object.<anonymous> (/tmp/tmpom107o6q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2, 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones > ones_b) {\n            return -1;\n        } else if (ones < ones_b) {\n            return 1;\n        } else {\n            return count_dec(a) - count_dec(b);\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsyry_f77.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpsyry_f77.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpsyry_f77.ts(14,20): error TS2304: Cannot find name 'count_dec'.\n../../../../tmp/tmpsyry_f77.ts(14,35): error TS2304: Cannot find name 'count_dec'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] & 1) {\n                count++;\n            }\n        }\n        sorted.push(count);\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0s9fe50d.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0s9fe50d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3, 3, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = ~~(a / 2);\n        const zeros = a % 2;\n        const decimal = ~~(b / 2);\n        const decimal2 = b % 2;\n        if (ones === 0 && zeros === 0) {\n            return decimal;\n        }\n        if (ones === 0 && decimal2 === 0) {\n            return decimal;\n        }\n        if (zeros === 0 && decimal2 === 0) {\n            return decimal;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n        }\n        if (zeros === 0 && decimal \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq5tti4lv.ts(117,1): error TS1005: ')' expected.\n../../../../tmp/tmpq5tti4lv.ts(133,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == 1) {\n            ones.push(i);\n        } else {\n            dec.push(arr[i]);\n        }\n    }\n    dec.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(dec[ones[i]]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmt0kax44.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmt0kax44.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n            if (arr[i].toString()[j] == '1') {\n                count++;\n            }\n        }\n        result.push(count);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = 0; i < result.length; i++) {\n        if (result[i] != 0) {\n            result[i] = result[i] * Math.pow(10, result[i].toString().length - 1);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpfww885zq.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfww885zq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n    if (ones === twos) {\n      return a.localeCompare(b);\n    }\n    return ones - twos;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7olp7vcd.ts(10,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp7olp7vcd.ts(11,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp7olp7vcd.ts(13,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => {\n        if (val === 1) {\n            acc += 1;\n        }\n        return acc;\n    }, 0);\n    const decimal = arr.reduce((acc, val) => {\n        if (val === 1) {\n            acc += 1;\n        }\n        return acc;\n    }, 0);\n    if (ones === len) {\n        return arr;\n    }\n    if (decimal === len) {\n        return arr.sort((a, b) => a - b);\n    }\n    return arr.sort((a, b) => {\n        const aDecimal = a.toString(2);\n        const bDecimal = b.toString(2);\n        if (aDecimal === bDecimal) {\n            return 0;\n        }\n        if (aDecimal === 1) {\n            return 1;\n        }\n        if (bDecimal === 1) {\n            return -1;\n        }\n        return aDecimal > bDecimal ? 1 : -1;\n    });\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0920zg6o.ts(34,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmp0920zg6o.ts(37,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones === ones_b) {\n            return a - b;\n        }\n        return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq078ylf4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpq078ylf4.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n            if (arr[i].toString()[j] == \"1\") {\n                count++;\n            }\n        }\n        result.push(count);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = 0; i < result.length; i++) {\n        result[i] = parseInt(result[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3i0j20st.ts(18,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones === 0) {\n            result.push(decimal);\n        } else {\n            result.push(decimal * 10 + ones);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  11,\n  21\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpcwvqxy0z.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcwvqxy0z.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 11, 21 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n        } else {\n            zeros.push(num);\n        }\n    }\n    zeros.sort((a, b) => a - b);\n    ones.sort((a, b) => a - b);\n    return zeros.concat(ones);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpt3z3dl22.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt3z3dl22.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4, 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOrOnes = binToInt(b);\n        if (ones > zerosOrOnes) {\n            return -1;\n        } else if (ones < zerosOrOnes) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqdg6a8mp.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpqdg6a8mp.ts(8,29): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const decimal = ones / Math.pow(2, len);\n    const decimals = arr.map(val => val * decimal);\n    return decimals.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.46875,\n  0.9375,\n  1.40625,\n  1.875,\n  2.34375\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpo51t2xem.js:18:12)\n    at Object.<anonymous> (/tmp/tmpo51t2xem.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.46875, 0.9375, 1.40625, 1.875, 2.34375 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n        if (ones === zerosOnes) {\n            return a - b;\n        }\n        return zerosOnes - ones;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0oyyfm01.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmp0oyyfm01.ts(8,27): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones === ones_b) {\n            return a - b;\n        }\n        return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq078ylf4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpq078ylf4.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpok_fzjg4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpok_fzjg4.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedOnes = decimalsSorted.filter(x => x === 1);\n    const decimalsSortedOnesSorted = decimalsSortedOnes.sort((a, b) => a - b);\n    const decimalsSortedOnesSortedSortedArray = decimalsSortedOnesSorted.map(x => [x, 1]);\n    const decimalsSortedOnesSortedSortedArraySorted = decimalsSortedOnesSortedSortedArray.sort((a, b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArray = decimalsSortedOnesSortedSortedArraySorted.map(x => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySorted = decimalsSortedOnesSortedSortedArraySortedArray.sort((a, b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArray = decimalsSortedOnesSortedSortedArraySortedArraySorted.map(x => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySorted = decimalsSortedOnesSortedSortedArraySortedArraySortedArray.sort((a, b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArray = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySorted.map(x => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted.sort((a, b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArray = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted.map(x => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySorted = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArray.sort((a, b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArray = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArraySorted.map(x => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArraySorted = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySorted\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps78vovpi.ts(39,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter((x) => x === 1);\n    const decimals = arr.filter((x) => x % 1 === 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmppak8vc4u.js:15:12)\n    at Object.<anonymous> (/tmp/tmppak8vc4u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n    if (onesB > ones) {\n      return 1;\n    }\n    if (onesB < ones) {\n      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpugdl0kd8.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpugdl0kd8.ts(8,19): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n        if (ones < zerosOnes) {\n            return -1;\n        } else if (ones > zerosOnes) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpljdqx78s.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpljdqx78s.ts(8,27): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const decimals = arr.map(val => Math.log2(val + 1)).reduce((acc, val) => acc + val, 0);\n    return arr.sort((a, b) => ones - b - decimals);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpy1g0pto7.js:13:12)\n    at Object.<anonymous> (/tmp/tmpy1g0pto7.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n    if (ones_b > ones) {\n      return 1;\n    }\n    if (ones_b < ones) {\n      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnugims_t.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpnugims_t.ts(8,20): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334432
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => {\n        let oneCount = 0;\n        let decCount = 0;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] === 1) {\n                oneCount++;\n            } else {\n                decCount++;\n            }\n        }\n        if (oneCount === decCount) {\n            return a - b;\n        } else {\n            return decCount - oneCount;\n        }\n    });\n    return sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8_yf7_6a.ts(10,31): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n        if (decA === ones) {\n            return a - b;\n        }\n        return decA - ones;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_sxh_xoz.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp_sxh_xoz.ts(8,22): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpok_fzjg4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpok_fzjg4.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] & 1) {\n                count++;\n            }\n        }\n        sortedArr.push(count);\n    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0c78up06.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0c78up06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3, 3, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334433
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedOnes = decimalsSorted.filter(x => x === 1);\n    const decimalsSortedOnesSorted = decimalsSortedOnes.sort((a, b) => a - b);\n    const decimalsSortedOnesSortedSorted: number[] = [];\n    for (let i = 0; i < decimalsSortedOnesSorted[0]; i++) {\n        decimalsSortedOnesSortedSorted.push(1);\n    }\n    for (let i = 0; i < decimalsSortedOnesSortedSorted[0]; i++) {\n        decimalsSortedOnesSortedSorted.push(0);\n    }\n    for (let i = 0; i < decimalsSortedOnesSortedSorted[0]; i++) {\n        decimalsSortedOnesSortedSorted.push(-1);\n    }\n    const sortedArray = decimalsSortedOnesSortedSorted;\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpv_y4r870.js:27:12)\n    at Object.<anonymous> (/tmp/tmpv_y4r870.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return 1;\n    }\n    return a - b;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpstbh46ds.ts(7,18): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpstbh46ds.ts(8,18): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter((x) => x === 1);\n    const decimals = arr.filter((x) => x % 1 !== 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp542g317d.js:15:12)\n    at Object.<anonymous> (/tmp/tmp542g317d.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9pzbscct.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp9pzbscct.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n    const len = ones.length;\n    if (len > 0) {\n        ones = sort_array(ones);\n    }\n    const len = zeros.length;\n    if (len > 0) {\n        zeros = sort_array(zeros);\n    }\n    const len = ones.length;\n    const ones_len = len * 8 + len * 4;\n    const zeros_len = len * 4 + len * 2;\n    const ones_arr: number[] = new Array(ones_len);\n    const zeros_arr: number[] = new Array(zeros_len);\n    for (let i = 0; i < ones_len; i++) {\n        ones_arr[i] = ones[i];\n    }\n    for (let i = 0; i < zeros_len; i++) {\n        zeros_arr[i] = zeros[i];\n    }\n    const ones_arr2 = ones_arr.sort((a, b) => a - b);\n    const zeros_arr2 = zeros_arr.sort((a, b) => a - b);\n    const arr2 = ones_arr2.concat(zeros_arr2);\n    return arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzvv89nbk.ts(6,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpzvv89nbk.ts(12,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpzvv89nbk.ts(14,9): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmpzvv89nbk.ts(16,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpzvv89nbk.ts(18,9): error TS2588: Cannot assign to 'zeros' because it is a constant.\n../../../../tmp/tmpzvv89nbk.ts(20,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n        if (ones === onesB) {\n            return a - b;\n        }\n        return ones - onesB;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpieoft4f0.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpieoft4f0.ts(8,23): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n    if (ones === twos) {\n      return a.localeCompare(b);\n    }\n    return ones - twos;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa6y70kfh.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpa6y70kfh.ts(8,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpa6y70kfh.ts(10,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const zeros: number[] = [];\n    const decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n        } else if (num === 0) {\n            zeros.push(num);\n        } else {\n            decimals.push(num);\n        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n    decimals = sort_array(decimals);\n    const result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe07y8usr.ts(19,5): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmpe07y8usr.ts(20,5): error TS2588: Cannot assign to 'zeros' because it is a constant.\n../../../../tmp/tmpe07y8usr.ts(21,5): error TS2588: Cannot assign to 'decimals' because it is a constant.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevkh7uz2.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpevkh7uz2.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let one = arr[i];\n        if (one > 0) {\n            ones.push(one);\n        } else {\n            dec.push(one);\n        }\n    }\n    ones = sort_array(ones);\n    dec = sort_array(dec);\n    let result = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n        result.push(dec[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkd4btvi9.js:5\nfunction sort_array(arr) {\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpkd4btvi9.js:5:20)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n    at sort_array (/tmp/tmpkd4btvi9.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones > ones_b) {\n            return -1;\n        } else if (ones < ones_b) {\n            return 1;\n        } else {\n            return count_dec(a) - count_dec(b);\n        }\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwbj0yh50.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpwbj0yh50.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpwbj0yh50.ts(14,20): error TS2304: Cannot find name 'count_dec'.\n../../../../tmp/tmpwbj0yh50.ts(14,35): error TS2304: Cannot find name 'count_dec'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n        } else {\n            zeros.push(num);\n        }\n    }\n    const onesCount = ones.length;\n    const zerosCount = zeros.length;\n    if (onesCount === zerosCount) {\n        return arr;\n    }\n    if (onesCount > zerosCount) {\n        ones.sort((a, b) => a - b);\n        return ones;\n    }\n    zeros.sort((a, b) => a - b);\n    return zeros;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd_wssyat.js:32:12)\n    at Object.<anonymous> (/tmp/tmpd_wssyat.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals = decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    return ones.concat(decimals);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp91qrkf71.js:23:12)\n    at Object.<anonymous> (/tmp/tmp91qrkf71.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    const aLen = aStr.length;\n    const bLen = bStr.length;\n    let aCount = 0;\n    let bCount = 0;\n    for (let i = 0; i < aLen; i++) {\n      if (aStr[i] === '1') aCount++;\n    }\n    for (let i = 0; i < bLen; i++) {\n      if (bStr[i] === '1') bCount++;\n    }\n    return aCount - bCount;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  4,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_70fog_2.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_70fog_2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4, 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = count_ones(a);\n        let zerosOnes = count_zeros(a);\n        let zerosZeros = count_zeros(b);\n        if (ones === zerosOnes) {\n            return zerosZeros - zerosOnes;\n        }\n        return zerosZeros - zerosOnes - ones;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpveb0ici1.ts(8,20): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpveb0ici1.ts(9,25): error TS2304: Cannot find name 'count_zeros'.\n../../../../tmp/tmpveb0ici1.ts(10,26): error TS2304: Cannot find name 'count_zeros'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const ones_b = count_ones(a);\n        if (ones_b < ones) {\n            return -1;\n        }\n        if (ones_b > ones) {\n            return 1;\n        }\n        return a - b;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmuxdnksi.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpmuxdnksi.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(i);\n        } else {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(arr[ones[i]]);\n    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxfimgv1c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxfimgv1c.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        }\n        const aStr = a.toString(2);\n        const bStr = b.toString(2);\n        const aLen = aStr.length;\n        const bLen = bStr.length;\n        if (aLen === bLen) {\n            return aStr.localeCompare(bStr);\n        }\n        return aLen - bLen;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxvictrhw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpxvictrhw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n        if (ones < twos) {\n            return -1;\n        } else if (ones > twos) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptvdr5yav.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmptvdr5yav.ts(8,22): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    const decimalsSortedWithOnesSorted = decimalsSortedWithOnes.sort((a, b) => a - b);\n    return decimalsSortedWithOnesSorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxk6v4sbh.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxk6v4sbh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n        if (ones === twos) {\n            return a - b;\n        }\n        return ones - twos;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeu3zgxim.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpeu3zgxim.ts(8,22): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp8ok12kg2.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8ok12kg2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334437
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        sorted.push(arr[i]);\n    }\n    sorted = sorted.sort((a, b) => {\n        if (a.toString(2).length <= b.toString(2).length) {\n            return -1;\n        }\n        if (a.toString(2).length >= b.toString(2).length) {\n            return 1;\n        }\n        return a.toString(2).localeCompare(b.toString(2));\n    });\n    return sorted;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n  2,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpf1ewnptr.js:24:12)\n    at Object.<anonymous> (/tmp/tmpf1ewnptr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334437
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    const ones = arr.filter((x) => x === 1);\n    const decs = arr.filter((x) => x % 1 === 0);\n    const decLen = decs.length;\n    const decOnes = decs.filter((x) => x === 1);\n    const decOnesLen = decOnes.length;\n    if (decLen === 0 || decOnesLen === 0) {\n        return ones;\n    }\n    const decOnesSum = decOnes.reduce((a, b) => a + b, 0);\n    const decSum = decs.reduce((a, b) => a + b, 0);\n    const decOnesSumAbs = Math.abs(decOnesSum);\n    const decSumAbs = Math.abs(decSum);\n    const decOnesSumAbsDiff = Math.abs(decOnesSum - decSum);\n    const decOnesSumAbsDiffAbs = Math.abs(decOnesSumAbsDiff);\n    const decOnesSumAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbs);\n    const decOnesSumAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiff);\n    const decOnesSumAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbs);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiff);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbs);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiff);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbs);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs);\n    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAb\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp09my9g3l.ts(47,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334437
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(x => x === 1);\n  const decimals = arr.filter(x => x % 1 !== 0);\n  return decimals.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpjn2eu5q5.js:13:12)\n    at Object.<anonymous> (/tmp/tmpjn2eu5q5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.reduce((acc, x) => acc + (x ? 1 : 0), 0);\n    const decimals = arr.map(x => x ? Math.log(x) / Math.LN2 : 0);\n    return decimals.map(x => Math.round(x * ones));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  12,\n  5,\n  8,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmptqd7oc08.js:13:12)\n    at Object.<anonymous> (/tmp/tmptqd7oc08.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 12, 5, 8, 10 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_1ofk293.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_1ofk293.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n    if (ones === onesB) {\n      return a - b;\n    }\n    return ones - onesB;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpui2t8hio.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpui2t8hio.ts(8,19): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.filter((x) => x === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const maxOnes = Math.ceil(Math.log2(len));\n    const maxDec = Math.pow(10, maxOnes);\n    const maxDecStr = maxDec.toString();\n    const decStr = ones\n        .map((x) => maxDecStr.substring(0, maxDecStr.length - x.length))\n        .join('');\n    const decArr = decStr.split('');\n    const decArr = decArr.map((x) => parseInt(x, 10));\n    const decArr = decArr.sort((a, b) => a - b);\n    const decArr = decArr.map((x) => x * Math.pow(10, maxOnes - decArr.indexOf(x)));\n    const decArr = decArr.map((x) => Math.ceil(x));\n    const decArr = decArr.map((x) => Math.max(x, 0));\n    const decArr = decArr.map((x) => Math.min(x, len - 1));\n    const decArr = decArr.map((x) => arr[x]);\n    return decArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_8gkfufw.ts(6,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp_8gkfufw.ts(11,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp_8gkfufw.ts(19,65): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp_8gkfufw.ts(21,11): error TS2451: Cannot redeclare block-scoped variable 'decArr'.\n../../../../tmp/tmp_8gkfufw.ts(22,11): error TS2451: Cannot redeclare block-scoped variable 'decArr'.\n../../../../tmp/tmp_8gkfufw.ts(23,11): error TS2451: Cannot redeclare block-scoped variable 'decArr'.\n../../../../tmp/tmp_8gkfufw.ts(23,42): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp_8gkfufw.ts(23,46): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp_8gkfufw.ts(24,11): error TS2451: Cannot redeclare block-scoped variable 'decArr'",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aNum = parseInt(a.toString(2), 2);\n        let bNum = parseInt(b.toString(2), 2);\n        return aNum - bNum;\n    });\n    return sortedArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmplgf4787j.js:17:12)\n    at Object.<anonymous> (/tmp/tmplgf4787j.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevkh7uz2.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpevkh7uz2.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const decimals = arr.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n    const decimalsArr = decimals.toString(2).split('');\n    const decimalsArrLen = decimalsArr.length;\n    const decimalsArrMax = Math.max(...decimalsArr);\n    const decimalsArrMin = Math.min(...decimalsArr);\n    const decimalsArrSum = decimalsArr.reduce((acc, val) => acc + val, 0);\n    const decimalsArrSumArr = decimalsArrSum.toString(2).split('');\n    const decimalsArrSumArrLen = decimalsArrSumArr.length;\n    const decimalsArrSumArrMax = Math.max(...decimalsArrSumArr);\n    const decimalsArrSumArrMin = Math.min(...decimalsArrSumArr);\n    const decimalsArrSumArrSum = decimalsArrSumArr.reduce((acc, val) => acc + val, 0);\n    const decimalsArrSumArrSumArr = decimalsArrSumArrSum.toString(2).split('');\n    const decimalsArrSumArrSumArrLen = decimalsArrSumArrSumArr.length;\n    const decimalsArrSumArrSumArrMax = Math.max(...decimalsArrSumArrSumArr);\n    const decimalsArrSumArrSumArrMin = Math.min(...decimalsArrSumArrSumArr);\n    const decimalsArrSumArrSumArrSum = decimalsArrSumArrSumArr.reduce((acc, val) => acc + val, 0);\n    const decimalsArrSumArrSumArrSumArr = decimalsArrSumArrSumArrSum.toString(2).split('');\n    const decimalsArrSumArrSumArrSumArrLen = decimalsArrSumArrSumArrSumArr.length;\n    const decimalsArrSumArrSumArrSumArrMax = Math.max(...decimalsArrSumArrSumArrSumArr);\n    const decimalsArrSumArrSumArrSumArrMin = Math.min(...decimalsArrSumArrSumArrSumArr);\n    const decimalsArrSumArrSumArrSumArrSum = decimalsArrSumArrSumArrSumArr.reduce((acc, val) => acc + val, 0);\n    const decimalsArrSumArrSumArrSumArrSumArr = decimalsArrSumArrSumArrSumArrSum.toString(2).split('');\n    const decimalsArrSumArrSumArrSumArrSumArrLen = decimalsArrSumArrSumArrSumArrSumArr.length;\n    const decimals\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpre8tu9et.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aNum = parseInt(a.toString(2));\n        let bNum = parseInt(b.toString(2));\n        return aNum - bNum;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp__h39284.js:17:12)\n    at Object.<anonymous> (/tmp/tmp__h39284.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0x65jyyc.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0x65jyyc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) return arr;\n    const ones = arr.reduce((acc, val) => acc + val, 0);\n    const decimal = ones / Math.pow(2, len - 1);\n    return arr.sort((a, b) => a - b * decimal);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpcj2p4u57.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcj2p4u57.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j] === 1) {\n                count++;\n            }\n        }\n        if (count === 0) {\n            sorted.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < sorted.length; i++) {\n        let count = 0;\n        for (let j = 0; j < sorted[i].length; j++) {\n            if (sorted[i][j] === 1) {\n                count++;\n            }\n        }\n        if (count === 0) {\n            sorted.splice(i, 1);\n            i--;\n        }\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf6c1zyrn.ts(9,36): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpf6c1zyrn.ts(20,39): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdp5ckknr.ts(7,18): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpdp5ckknr.ts(8,18): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let one = arr[i];\n        if (one > 0) {\n            ones.push(one);\n        } else {\n            dec.push(one);\n        }\n    }\n    ones = sort_array(ones);\n    dec = sort_array(dec);\n    return dec.concat(ones);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjx7wkknn.js:5\nfunction sort_array(arr) {\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpjx7wkknn.js:5:20)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n    at sort_array (/tmp/tmpjx7wkknn.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i];\n        let decimal = ones * Math.pow(10, arr.length - i - 1);\n        sortedArr.push(decimal);\n    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphadlyd5g.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmphadlyd5g.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphadlyd5g.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmphadlyd5g.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphadlyd5g.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmphadlyd5g.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmphadlyd5g.ts(17,16): error TS1109: Expression expected.\n../../../../tmp/tmphadlyd5g.ts(19,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        if (a.toString(2).length !== b.toString(2).length) {\n            return a.toString(2).length - b.toString(2).length;\n        }\n        return a > b ? 1 : -1;\n    });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp6usq0gae.js:17:12)\n    at Object.<anonymous> (/tmp/tmp6usq0gae.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, x) => acc + (x === 1 ? 1 : 0), 0);\n    const tens = arr.reduce((acc, x) => acc + (x === 10 ? 1 : 0), 0);\n    const hundreds = arr.reduce((acc, x) => acc + (x === 100 ? 1 : 0), 0);\n    const thousands = arr.reduce((acc, x) => acc + (x === 1000 ? 1 : 0), 0);\n    const tenThousands = arr.reduce((acc, x) => acc + (x === 10000 ? 1 : 0), 0);\n    const oneThousands = arr.reduce((acc, x) => acc + (x === 100000 ? 1 : 0), 0);\n    const tenMillions = arr.reduce((acc, x) => acc + (x === 1000000 ? 1 : 0), 0);\n    const oneMillions = arr.reduce((acc, x) => acc + (x === 10000000 ? 1 : 0), 0);\n    const tenBillions = arr.reduce((acc, x) => acc + (x === 100000000 ? 1 : 0), 0);\n    const oneBillions = arr.reduce((acc, x) => acc + (x === 1000000000 ? 1 : 0), 0);\n    const tenTrillions = arr.reduce((acc, x) => acc + (x === 10000000000 ? 1 : 0), 0);\n    const oneTrillions = arr.reduce((acc, x) => acc + (x === 100000000000 ? 1 : 0), 0);\n    const tenQuadrillions = arr.reduce((acc, x) => acc + (x === 1000000000000 ? 1 : 0), 0);\n    const oneQuadrillions = arr.reduce((acc, x) => acc + (x === 10000000000000 ? 1 : 0), 0);\n    const tenQuintillions = arr.reduce((acc, x) => acc + (x === 100000000000000 ? 1 : 0), 0);\n    const oneQuintillions = arr.reduce((acc, x) => acc + (x === 1000000000000000 ? 1 : 0), 0);\n    const tenSextillions = arr.reduce((acc, x) => acc + (x === 10000000000000000 ? 1 : 0), 0);\n    const oneSextillions = arr.reduce((acc, x) => acc + (x === 100000000000000000 ? 1 : 0), 0);\n    const tenSeptillions = arr.reduce((acc, x) => acc + (x === 100000000000000000 ? 1 : 0), 0);\n    const oneSeptillions = arr.reduce((acc, x) => acc + (x === 1000000000000000010 ? 1 : 0), 0);\n    const tenOctillions = arr.reduce((acc, x) => acc + (x === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptj6729le.ts(31,9): error TS1005: ')' expected.\n../../../../tmp/tmptj6729le.ts(47,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones_count = arr[i] & 1;\n        ones.push(ones_count);\n        decimals.push(arr[i] / ones_count);\n    }\n    decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(decimals[i] * ones[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  5,\n  Infinity,\n  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp5c5wdj0j.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5c5wdj0j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 5, Infinity, Infinity ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aOnes = count_ones(a);\n        let bOnes = count_ones(b);\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9dv1lgr5.ts(8,21): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp9dv1lgr5.ts(9,21): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n        const decB = count_decB(b);\n        if (decA === decB) {\n            return decA - decB;\n        }\n        return decA - decB || decB - decA;\n    });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptqo6468b.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmptqo6468b.ts(8,22): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmptqo6468b.ts(9,22): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.reduce((acc, x) => acc + (x === 1 ? 1 : 0), 0);\n    const decimal = arr.reduce((acc, x) => acc + (x === 1 ? 0 : 1), 0);\n    return arr.sort((a, b) => decimal.localeCompare(ones, a, b));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5welokd0.ts(8,39): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n    const decimals = len * 8 - ones;\n    if (decimals <= 0) {\n        return arr;\n    }\n    const decimalPower = Math.pow(10, decimals);\n    const decimalSum = arr.reduce((acc, val) => acc + val * decimalPower, 0);\n    const decimalSumPower = Math.pow(10, decimalSum);\n    const decimalSumPowerFloor = Math.floor(decimalSumPower);\n    const decimalSumPowerFloorFloor = Math.floor(decimalSumPowerFloor);\n    const decimalSumPowerFloorFloorFloor = Math.floor(decimalSumPowerFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n    const decimalSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg_ndu5ba.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzmxunp_p.js:15:12)\n    at Object.<anonymous> (/tmp/tmpzmxunp_p.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334429
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    if (ones.length === 0) {\n        return arr;\n    }\n    const sorted = [];\n    let max = 0;\n    for (let i = 0; i < len; i++) {\n        const one = ones[i];\n        const index = arr.indexOf(one);\n        if (index === -1) {\n            throw new Error(`Cannot find ${one} in ${arr}`);\n        }\n        const val = arr[index];\n        if (val > max) {\n            max = val;\n        }\n        sorted.push(val);\n    }\n    for (let i = 0; i < len; i++) {\n        const one = ones[i];\n        const index = arr.indexOf(one);\n        if (index === -1) {\n            throw new Error(`Cannot find ${one} in ${arr}`);\n        }\n        const val = arr[index];\n        if (val > max) {\n            max = val;\n        }\n        sorted.push(val);\n    }\n    for (let i = 0; i < len; i++) {\n        const one = ones[i];\n        const index = arr.indexOf(one);\n        if (index === -1) {\n            throw new Error(`Cannot find ${one} in ${arr}`);\n        }\n        const val = arr[index];\n        if (val > max) {\n            max = val;\n        }\n        sorted.push(val);\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpskeuz7n5.js:20\n            throw new Error(`Cannot find ${one} in ${arr}`);\n            ^\n\nError: Cannot find undefined in 1,5,2,3,4\n    at sort_array (/tmp/tmpskeuz7n5.js:20:19)\n    at test (/tmp/tmpskeuz7n5.js:57:22)\n    at Object.<anonymous> (/tmp/tmpskeuz7n5.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpovsyf6_e.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpovsyf6_e.ts(8,23): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n        if (ones < twos) {\n            return -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcidqcic8.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpcidqcic8.ts(8,22): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones === ones_b) {\n            return a - b;\n        }\n        return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq078ylf4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpq078ylf4.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334429
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = count_ones(a);\n        let decimal = count_decimal(a);\n        if (ones < decimal) {\n            return -1;\n        }\n        if (ones > decimal) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpadn0vkao.ts(8,20): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpadn0vkao.ts(9,23): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpok_fzjg4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpok_fzjg4.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    let ones: number[] = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones_count = arr[i] & 1;\n        decimals.push(arr[i] / Math.pow(2, ones_count));\n        ones.push(ones_count);\n    }\n    decimals = decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    for (let i = 0; i < ones.length; i++) {\n        sorted.push(decimals[i] * Math.pow(2, ones[i]));\n    }\n    return sorted;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.5,\n  1.5,\n  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpwgq54bph.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwgq54bph.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.5, 1.5, 4, 5, 8 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let bin = bin(arr[i]);\n        let index = bin.indexOf(\"1\");\n        if (index > -1) {\n            ones.push(arr[i]);\n        } else {\n            dec.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    dec = sort_array(dec);\n    let result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let i = 0; i < dec.length; i++) {\n        result.push(dec[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfcfq5zcj.ts(9,19): error TS2448: Block-scoped variable 'bin' used before its declaration.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const decs = arr.map((x) => parseInt(x.toString(10), 10));\n  const sorted = [...ones, ...decs].sort((a, b) => a - b);\n  return sorted.map((x) => x / Math.pow(2, len));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.03125,\n  0.03125,\n  0.0625,\n  0.09375,\n  0.125,\n  0.15625\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpy7g88p9q.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy7g88p9q.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.03125, 0.03125, 0.0625, 0.09375, 0.125, 0.15625 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevkh7uz2.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpevkh7uz2.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        }\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones === ones_b) {\n            return a < b ? -1 : 1;\n        }\n        return ones - ones_b;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmposy1afn0.ts(10,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmposy1afn0.ts(11,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n        if (ones < twos) {\n            return -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcidqcic8.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpcidqcic8.ts(8,22): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(i);\n        } else {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals = decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(arr[ones[i]]);\n    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpj1w5moj2.js:30:12)\n    at Object.<anonymous> (/tmp/tmpj1w5moj2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] == 1) {\n                count++;\n            }\n        }\n        sorted.push(count);\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = sorted[i];\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmcvx8n99.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmcvx8n99.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1, 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones > 0) {\n            sortedArr.push(decimal);\n        } else {\n            sortedArr.push(decimal * -1);\n        }\n    }\n    return sortedArr.sort((a, b) => a - b);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -2,\n  -1,\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpsf_ur6n0.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsf_ur6n0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -2, -1, 0, 1, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[] = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else {\n            zeros.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n    return ones.concat(zeros);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp329v7j52.js:10\n            ones.push(arr[i]);\n                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n    at sort_array (/tmp/tmp329v7j52.js:10:18)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n    at sort_array (/tmp/tmp329v7j52.js:16:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_9r0as3k.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp_9r0as3k.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else {\n            zeros.push(arr[i]);\n        }\n    }\n    const onesCount = ones.length;\n    const zerosCount = zeros.length;\n    if (onesCount === zerosCount) {\n        return ones;\n    }\n    if (onesCount > zerosCount) {\n        return ones;\n    }\n    return zeros;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp91f1cjq3.js:29:12)\n    at Object.<anonymous> (/tmp/tmp91f1cjq3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return -1;\n    });\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp32z6x93d.js:19:12)\n    at Object.<anonymous> (/tmp/tmp32z6x93d.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        let curr = arr[i];\n        while (curr) {\n            count += curr & 1;\n            curr >>= 1;\n        }\n        result.push(count);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = 0; i < result.length; i++) {\n        result[i] = result[i] / Math.pow(2, i);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0.5,\n  0.25,\n  0.25,\n  0.125\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpl89hldtc.js:25:12)\n    at Object.<anonymous> (/tmp/tmpl89hldtc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0.5, 0.25, 0.25, 0.125 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const bin = arr[i].toString(2).padStart(32, '0');\n    const count = map.get(bin) || 0;\n    map.set(bin, count + 1);\n  }\n  const sortedArray = Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a));\n  return sortedArray.map(i => parseInt(i, 2));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmprlam7392.js:18:12)\n    at Object.<anonymous> (/tmp/tmprlam7392.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i] % 2;\n        sorted.push(ones);\n        arr[i] /= 2;\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] *= 2;\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpbj6mjil0.js:21:12)\n    at Object.<anonymous> (/tmp/tmpbj6mjil0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 1, 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n    if (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return 1;\n    }\n    return count_ones(a) - count_ones(b);\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcuo53gs6.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpcuo53gs6.ts(8,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpcuo53gs6.ts(15,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpcuo53gs6.ts(15,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334443
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n        if (ones === zerosOnes) {\n            return a.localeCompare(b);\n        }\n        return ones - zerosOnes;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzw4tq_3y.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpzw4tq_3y.ts(8,27): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpzw4tq_3y.ts(10,22): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n        let twos = Math.log2(b);\n        if (ones < twos) {\n            return -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpjsjglrl_.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjsjglrl_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    let oneCount: number = 0;\n    let decimalCount: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            oneCount++;\n        } else {\n            decimalCount++;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (oneCount > decimalCount) {\n            sortedArr.push(arr[i]);\n            oneCount--;\n        } else {\n            sortedArr.push(arr[i] * 10 + arr[i + 1]);\n            decimalCount--;\n        }\n    }\n    return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  52,\n  23,\n  34,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_ji0ue8v.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_ji0ue8v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 52, 23, 34, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334444
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a < b ? -1 : 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw3bq34sn.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpw3bq34sn.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] == i) {\n                count++;\n            }\n        }\n        sorted.push(count);\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = sorted[i];\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmplfimcrk4.js:25:12)\n    at Object.<anonymous> (/tmp/tmplfimcrk4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334444
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimals = Math.log2(ones);\n  const decimalsArr = new Array(decimals + 1).fill(0);\n  for (let i = 0; i < decimals; i++) {\n    decimalsArr[i] = Math.pow(2, i);\n  }\n  const decimalsArrLen = decimalsArr.length;\n  const decimalsArrArr = new Array(decimalsArrLen).fill(0);\n  for (let i = 0; i < decimalsArrLen; i++) {\n    decimalsArrArr[i] = decimalsArrArr[i] + decimalsArr[i];\n  }\n  const decimalsArrArrLen = decimalsArrArr.length;\n  const decimalsArrArrArr = new Array(decimalsArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrLen; i++) {\n    decimalsArrArrArr[i] = decimalsArrArrArr[i] + decimalsArrArr[i];\n  }\n  const decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const decimalsArrArrArrArr = new Array(decimalsArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrLen; i++) {\n    decimalsArrArrArrArr[i] = decimalsArrArrArrArr[i] + decimalsArrArrArr[i];\n  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArr.length;\n  const decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i] = decimalsArrArrArrArrArr[i] + decimalsArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n  const decimalsArrArrArrArrArrArr = new Array(decimalsArrArrArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArrArr[i] = decimalsArrArrArrArrArrArr[i] + decimalsArrArrArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArrArr.length;\n  const decimalsArrArrArrArrArrArrArr = new Array(decimalsArrArrArrArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArrArr[i] = decimalsArrArrArrArrArrArr[i] + decimals\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod7hgylo.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334443
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 === 0);\n    const sortedOnes = ones\n        .map(x => parseInt(x.toString(2), 2))\n        .sort((a, b) => a - b);\n    const sortedDecimals = decimals\n        .map(x => parseInt(x.toString(10), 10))\n        .sort((a, b) => a - b);\n    return sortedOnes.concat(sortedDecimals);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp27btca2q.js:19:12)\n    at Object.<anonymous> (/tmp/tmp27btca2q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i];\n        let decimal = ones - ones * ones * ones;\n        sortedArr.push(decimal);\n    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -120,\n  -60,\n  -24,\n  -6,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpj1bs3wzb.js:18:12)\n    at Object.<anonymous> (/tmp/tmpj1bs3wzb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -120, -60, -24, -6, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    let ones = 0;\n    let decimal = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones++;\n        } else {\n            decimal = decimal + arr[i] * Math.pow(10, arr.length - i - 1);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            result.push(ones);\n        } else {\n            result.push(decimal);\n        }\n    }\n    result.sort((a, b) => {\n        return a - b;\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5234,\n  5234,\n  5234,\n  5234\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp2va7hiub.js:33:12)\n    at Object.<anonymous> (/tmp/tmp2va7hiub.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5234, 5234, 5234, 5234 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const decs: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i] & 1;\n        if (one) {\n            ones.push(one);\n        } else {\n            decs.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    decs = sort_array(decs);\n    return decs.concat(ones);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_up0z32h.ts(16,5): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmp_up0z32h.ts(17,5): error TS2588: Cannot assign to 'decs' because it is a constant.\n",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpovsyf6_e.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpovsyf6_e.ts(8,23): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n    const maxDecimal = Math.pow(10, Math.ceil(Math.log10(maxOnes)));\n    const maxDecimalLen = Math.ceil(Math.log10(maxDecimal));\n    const maxDecimalDigits = maxDecimalLen - 1;\n    const maxDecimalDigit = Math.pow(10, maxDecimalDigits);\n    const maxDecimalNum = Math.floor(maxDecimalDigit * maxOnes);\n    const maxDecimalNumLen = Math.ceil(Math.log10(maxDecimalNum));\n    const maxDecimalNumDigits = maxDecimalNumLen - 1;\n    const maxDecimalNumDigit = Math.pow(10, maxDecimalNumDigits);\n    const maxDecimalNumNum = Math.floor(maxDecimalNumDigit * maxOnes);\n    const maxDecimalNumNumLen = Math.ceil(Math.log10(maxDecimalNumNum));\n    const maxDecimalNumNumDigits = maxDecimalNumNumLen - 1;\n    const maxDecimalNumNumDigit = Math.pow(10, maxDecimalNumNumDigits);\n    const maxDecimalNumNumNum = Math.floor(maxDecimalNumNumDigit * maxOnes);\n    const maxDecimalNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNum));\n    const maxDecimalNumNumNumDigits = maxDecimalNumNumNumLen - 1;\n    const maxDecimalNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumDigits);\n    const maxDecimalNumNumNumNum = Math.floor(maxDecimalNumNumNumNumDigit * maxOnes);\n    const maxDecimalNumNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNumNum));\n    const maxDecimalNumNumNumNumDigits = maxDecimalNumNumNumNumLen - 1;\n    const maxDecimalNumNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumNumDigits);\n    const maxDecimalNumNumNumNumNum = Math.floor(maxDecimalNumNumNumNumNumDigit * maxOnes);\n    const maxDecimalNumNumNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNumNumNum));\n    const maxDecimalNumNumNumNumNumDigits = maxDecimalNumNumNumNumNumLen - 1;\n    const maxDecimalNumNumNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumNumNumDigits);\n    const maxDecimalNumNumNumNumNumNum = Math.floor(maxDecimalNumNumNumNumNumNumDigit * maxOnes);\n    const maxDecimalNumNumNumNumNumNumLen = Math.ceil(Math.log10(max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeb9p02im.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpeb9p02im.ts(42,9): error TS1005: ',' expected.\n../../../../tmp/tmpeb9p02im.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, x) => acc + x, 0);\n    const dec = ones / Math.pow(2, len);\n    const arr2 = arr.sort((a, b) => a - b);\n    return arr2.map(x => x * dec);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.46875,\n  0.9375,\n  1.40625,\n  1.875,\n  2.34375\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzha1t8lw.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzha1t8lw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.46875, 0.9375, 1.40625, 1.875, 2.34375 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n        if (ones === onesB) {\n            return a - b;\n        }\n        return ones - onesB;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpieoft4f0.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpieoft4f0.ts(8,23): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmuou6djz.js:15:12)\n    at Object.<anonymous> (/tmp/tmpmuou6djz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n    const sortedOnes = ones.sort((a, b) => a - b);\n    const sortedZeros = zeros.sort((a, b) => a - b);\n    const sortedArray = sortedOnes.concat(sortedZeros);\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmptn7dxrgj.js:16:12)\n    at Object.<anonymous> (/tmp/tmptn7dxrgj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(arr[i] ? 1 : 0);\n    }\n    counts = counts.sort((a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        result.push(counts[i]);\n    }\n    for (let i = 0; i < counts.length; i++) {\n        result.push(counts[i] / Math.pow(2, counts.length - 1 - i));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  0.0625,\n  0.125,\n  0.25,\n  0.5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpv1gea_pz.js:23:12)\n    at Object.<anonymous> (/tmp/tmpv1gea_pz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n        1,    1,      1,\n        1,    1, 0.0625,\n    0.125, 0.25,    0.5,\n        1\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n        const decB = count_decB(b);\n        if (decA === decB) {\n            return ones - decA;\n        }\n        return decA - decB;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4t063qhp.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp4t063qhp.ts(8,22): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmp4t063qhp.ts(9,22): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n    const decB = count_decB(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjmc_adzj.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpjmc_adzj.ts(8,18): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpjmc_adzj.ts(9,18): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n        const decB = count_decB(b);\n        if (decA === decB) {\n            return ones - decA;\n        }\n        return decA - decB;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgqhoopwe.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpgqhoopwe.ts(8,22): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpgqhoopwe.ts(9,22): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n        const decB = count_ones(b);\n        if (decA === decB) {\n            return ones - decA;\n        }\n        return decA - decB;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmbmv0dfx.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpmbmv0dfx.ts(8,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpmbmv0dfx.ts(9,22): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.filter((x) => x === 1);\n    if (ones.length === 0) {\n        return arr;\n    }\n    const dec = ones\n        .map((x) => parseInt(x.toString(2), 10))\n        .sort((a, b) => a - b);\n    const bin = ones\n        .map((x) => parseInt(x.toString(2), 2))\n        .sort((a, b) => a - b);\n    const dec2bin = dec.map((x) => parseInt(x, 2));\n    const bin2dec = bin.map((x) => parseInt(x, 10));\n    const dec2bin2 = dec.map((x) => parseInt(x.toString(2), 2));\n    const bin2dec2 = bin.map((x) => parseInt(x, 10));\n    const dec2bin3 = dec.map((x) => parseInt(x.toString(3), 10));\n    const bin2dec3 = bin.map((x) => parseInt(x, 10));\n    const dec2bin4 = dec.map((x) => parseInt(x.toString(4), 10));\n    const bin2dec4 = bin.map((x) => parseInt(x, 10));\n    const dec2bin5 = dec.map((x) => parseInt(x.toString(5), 10));\n    const bin2dec5 = bin.map((x) => parseInt(x, 10));\n    const dec2bin6 = dec.map((x) => parseInt(x.toString(6), 10));\n    const bin2dec6 = bin.map((x) => parseInt(x, 10));\n    const dec2bin7 = dec.map((x) => parseInt(x.toString(7), 10));\n    const bin2dec7 = bin.map((x) => parseInt(x, 10));\n    const dec2bin8 = dec.map((x) => parseInt(x.toString(8), 10));\n    const bin2dec8 = bin.map((x) => parseInt(x, 10));\n    const dec2bin9 = dec.map((x) => parseInt(x.toString(9), 10));\n    const bin2dec9 = bin.map((x) => parseInt(x, 10));\n    const dec2bin10 = dec.map((x) => parseInt(x.toString(10), 10));\n    const bin2dec10 = bin.map((x) => parseInt(x, 10));\n    const dec2bin11 = dec.map((x) => parseInt(x.toString(11), 10));\n    const bin2dec11 = bin.map((x) => parseInt(x, 10));\n    const dec2bin12 = dec.map((x) => parseInt(x.toString(12), 10));\n    const bin2dec12 = bin.map((x) => parseInt(x, 10));\n    const dec2bin13 = dec.map((x) => parseInt(x.toString(13), \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzy92gvf8.ts(45,9): error TS1005: ',' expected.\n../../../../tmp/tmpzy92gvf8.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    let ones: number[] = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n        } else if (num === 0) {\n            zeros.push(num);\n        } else {\n            let index = ones.length - 1;\n            while (index >= 0) {\n                if (ones[index] > num) {\n                    ones[index + 1] = ones[index];\n                    ones[index] = num;\n                    break;\n                }\n                index--;\n            }\n        }\n    }\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxk_2fid6.js:40:12)\n    at Object.<anonymous> (/tmp/tmpxk_2fid6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n        let twos = Math.log2(b);\n        if (ones < twos) {\n            return -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your solution works perfectly for small arrays but for large arrays it takes too much time. My array is of size 10^6 and it takes around 1 minute to sort it using your solution. Can you suggest any faster solution?\n<|/ c |>\n<| c |>\nI updated my answer, please check it out\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for small arrays but for large arrays it takes too much time. My array is of size 10^6 and it takes around 1 minute to sort it using your solution. Can you suggest any faster solution?\n<|/ c |>\n<| c |>\nI updated my answer, please check it out\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for small arrays but for large arrays it takes too much time. My array is of size 10^6 and it takes around 1 minute to sort it using your solution. Can you suggest any faster solution?\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa5zcgmdr.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpa5zcgmdr.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa5zcgmdr.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpa5zcgmdr.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa5zcgmdr.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpa5zcgmdr.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,8): error TS1005: ';' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,12): error TS1005: '(' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,17): error TS1005: ';' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,30): error TS1005: ';' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,39): error TS1005: ')' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa5zcgmdr.ts(23,59): error TS1005: '(' expected.\n../../../../tmp/tmpa5zcgmdr.ts(23,65): error TS1005: ';' expecte",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i] & 1;\n        arr[i] = arr[i] >> 1;\n        if (ones > 0) {\n            sortedArr.push(arr[i]);\n        }\n    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp3m6cy0qg.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3m6cy0qg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.filter((x) => x === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const biggest = ones[len - 1];\n    const biggestIndex = arr.findIndex((x) => x > biggest);\n    const biggestOne = arr[biggestIndex];\n    const biggestOneIndex = arr.findIndex((x) => x === biggestOne);\n    const onesCount = biggestIndex - biggestOneIndex;\n    const decimal = biggestOne / Math.pow(2, onesCount);\n    const decimalIndex = arr.findIndex((x) => x === decimal);\n    const decimalOne = arr[decimalIndex];\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjcejqqxu.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpjcejqqxu.ts(46,9): error TS1005: ',' expected.\n../../../../tmp/tmpjcejqqxu.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter((x) => x === 1);\n    const zeros = arr.filter((x) => x === 0);\n    const onesCount = ones.length;\n    const zerosCount = zeros.length;\n    if (onesCount === zerosCount) {\n        return arr;\n    }\n    if (onesCount > zerosCount) {\n        return sort_array(ones);\n    }\n    return sort_array(zeros);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3ulqy82x.js:6\n    const ones = arr.filter((x) => x === 1);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.filter (<anonymous>)\n    at sort_array (/tmp/tmp3ulqy82x.js:6:22)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n    at sort_array (/tmp/tmp3ulqy82x.js:14:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBin = bin(a);\n    const bBin = bin(b);\n    const aLen = aBin.length;\n    const bLen = bBin.length;\n    const aOnes = aBin.substr(aLen - 1);\n    const bOnes = bBin.substr(bLen - 1);\n    if (aOnes === bOnes) return aLen - bLen;\n    return aOnes.localeCompare(bOnes);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd10ouv3y.ts(9,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n../../../../tmp/tmpd10ouv3y.ts(10,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n    const len = ones.length;\n    if (len === 1) {\n        return sort_array(zeros);\n    }\n    const ones_len = ones.length;\n    const zeros_len = zeros.length;\n    const max_len = Math.max(ones_len, zeros_len);\n    const min_len = Math.min(ones_len, zeros_len);\n    const max_ones = ones_len - 1;\n    const min_zeros = zeros_len - 1;\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt0vjc9nk.ts(56,26): error TS1003: Identifier expected.\n../../../../tmp/tmpt0vjc9nk.ts(73,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        if (a === 1) {\n            return -1;\n        }\n        if (b === 1) {\n            return 1;\n        }\n        return a - b;\n    });\n    return sortedArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp8wfolb2z.js:21:12)\n    at Object.<anonymous> (/tmp/tmp8wfolb2z.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => {\n        let aNum = parseInt(a.toString(2));\n        let bNum = parseInt(b.toString(2));\n        return aNum - bNum;\n    });\n    return sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpsgfob0_2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpsgfob0_2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => {\n        return acc + val;\n    }, 0);\n    const decimals = ones - arr.reduce((acc, val) => {\n        return acc + val * Math.pow(10, arr.length - 1 - val);\n    }, 0);\n    return arr.sort((a, b) => {\n        return decimals - a * Math.pow(10, arr.length - 1 - b) - b * Math.pow(10, arr.length - 1 - a);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpehjqekgs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpehjqekgs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2, 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    let ones: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n        } else {\n            let index = ones.length - 1;\n            let ones_count = ones[index];\n            let decimal_value = num / ones_count;\n            let decimal_value = decimal_value * ones_count;\n            result.push(decimal_value);\n            ones[index] = 0;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpscbu3khg.ts(15,17): error TS2451: Cannot redeclare block-scoped variable 'decimal_value'.\n../../../../tmp/tmpscbu3khg.ts(16,17): error TS2451: Cannot redeclare block-scoped variable 'decimal_value'.\n",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    let counts: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let index = counts[num];\n        if (index === undefined) {\n            counts[num] = result.length;\n            result.push(num);\n        } else {\n            let pos = result[index];\n            result[index] = num;\n            result[pos] = num;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpyjx5t0dm.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyjx5t0dm.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9pzbscct.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp9pzbscct.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    let ones: number[] = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            ones.push(arr[i]);\n        } else {\n            zeros.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpocgz5oei.js:5\nfunction sort_array(arr) {\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpocgz5oei.js:5:20)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n    at sort_array (/tmp/tmpocgz5oei.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones: number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else {\n            zeros.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n    const result: number[] = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8yftart9.ts(15,5): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmp8yftart9.ts(16,5): error TS2588: Cannot assign to 'zeros' because it is a constant.\n",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n        let twos = Math.log2(b);\n        if (ones < twos) {\n            return -1;\n        } else if (ones > twos) {\n            return 1;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp67qm_nce.js:25:12)\n    at Object.<anonymous> (/tmp/tmp67qm_nce.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdp5ckknr.ts(7,18): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpdp5ckknr.ts(8,18): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n        let twos = Math.log2(b);\n        if (ones < twos) {\n            return -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp5t6szxdm.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5t6szxdm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aBin = binToInt(a);\n        let bBin = binToInt(b);\n        let aOnes = aBin >> 1;\n        let bOnes = bBin >> 1;\n        if (aOnes > bOnes) {\n            return 1;\n        } else if (aOnes < bOnes) {\n            return -1;\n        } else {\n            return aBin - bBin;\n        }\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi0uocefm.ts(8,20): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpi0uocefm.ts(9,20): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0x65jyyc.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0x65jyyc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i];\n        let decimal = ones - 1;\n        sortedArr.push(decimal);\n    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpy7suyl6v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy7suyl6v.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const decimals = arr.filter((x) => x % 1 === 0);\n  const decimalsLen = decimals.length;\n  if (decimalsLen === 0) {\n    return ones;\n  }\n  const decimalsSum = decimals.reduce((acc, x) => acc + x, 0);\n  const decimalsSumDecimals = decimalsSum / decimalsLen;\n  const decimalsSumDecimalsLen = decimalsSumDecimals.length;\n  const decimalsSumDecimalsLenDecimals = decimalsSumDecimalsLen / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimals = decimalsSumDecimalsLenDecimalsLen / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimals = decimalsSumDecimalsLenDecimalsLenDecimalsLen / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9pwyngej.ts(46,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr\n        .map((x) => parseInt(x.toString(2), 2))\n        .sort((a, b) => a - b);\n    const decimals = arr\n        .map((x) => parseInt(x.toString(10), 10))\n        .sort((a, b) => a - b);\n    const len = ones.length;\n    let i = 0;\n    while (i < len) {\n        if (ones[i] === 1) {\n            ones[i] = decimals[i];\n            i++;\n        } else {\n            ones[i] = 0;\n        }\n    }\n    return ones;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6yy0x58g.ts(6,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp6yy0x58g.ts(16,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n        if (ones < zerosOnes) {\n            return -1;\n        }\n        if (ones > zerosOnes) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4a1901q_.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmp4a1901q_.ts(8,27): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6sfd7s_d.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp6sfd7s_d.ts(8,23): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n => n & 1);\n  const decimals = arr.filter(n => !(n&1));\n  \n  return [...ones, ...decimals].sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmph8ztvbwe.js:13:12)\n    at Object.<anonymous> (/tmp/tmph8ztvbwe.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones > ones_b) {\n            return -1;\n        } else if (ones < ones_b) {\n            return 1;\n        } else {\n            return count_ones(a) - count_ones(b);\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsfj1h9gn.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpsfj1h9gn.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpsfj1h9gn.ts(14,20): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpsfj1h9gn.ts(14,36): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const result: number[] = [];\n    const map = new Map<number, number>();\n    for (const num of arr) {\n        const bin = num.toString(2);\n        const count = map.get(bin);\n        if (count === undefined) {\n            map.set(bin, 1);\n            result.push(num);\n        } else {\n            map.set(bin, count + 1);\n        }\n    }\n    result.sort((a, b) => map.get(a) - map.get(b));\n    return result.map(num => num.toString(2));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph6re44j9.ts(10,31): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmph6re44j9.ts(12,21): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmph6re44j9.ts(15,21): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmph6re44j9.ts(19,5): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0x65jyyc.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0x65jyyc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        } else if (ones_b < ones) {\n            return 1;\n        } else {\n            return count_ones(a) - count_ones(b);\n        }\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqfgdzlqb.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpqfgdzlqb.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpqfgdzlqb.ts(14,20): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpqfgdzlqb.ts(14,36): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334450
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr = [];\n    let oneCount = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            oneCount++;\n        } else {\n            sortedArr.push(oneCount);\n            oneCount = 0;\n        }\n    }\n    sortedArr.push(oneCount);\n    return sortedArr.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_iyuy02_.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_iyuy02_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(0);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        counts[arr[i]]++;\n    }\n    let sorted: number[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        sorted.push(counts[i]);\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        arr[i] = sorted[i];\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  1,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp6gn8v3nt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6gn8v3nt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 1, 1, NaN ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted: number[] = [];\n    let ones: number[] = [];\n    let decimal: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            ones.push(arr[i]);\n        } else {\n            decimal.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n    decimal = sort_array(decimal);\n    sorted = ones.concat(decimal);\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpghkptpa5.js:5\nfunction sort_array(arr) {\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpghkptpa5.js:5:20)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n    at sort_array (/tmp/tmpghkptpa5.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = ~~(a / 2);\n        const tens = a % 2;\n        const tensOnes = ~~(b / 2);\n        const tensOnesOnes = b % 2;\n        if (ones === tens) {\n            return tensOnesOnes - tensOnes;\n        }\n        return tensOnes - tens;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  1,\n  3,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpc31jo_m4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc31jo_m4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 1, 3, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334451
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n    const decB = count_decB(b);\n    if (decA === decB) {\n      return ones - decA;\n    }\n    return decA - decB;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0hdy4oaw.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp0hdy4oaw.ts(8,18): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmp0hdy4oaw.ts(9,18): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334451
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.reduce((acc, val) => {\n        if (val === 1) {\n            acc += 1;\n        }\n        return acc;\n    }, 0);\n    if (ones === len) {\n        return arr;\n    }\n    const decimal = ones / len;\n    const decimals = decimal.toFixed(2);\n    const decimalArray = decimal.split('.');\n    const decimalArrayLen = decimalArray.length;\n    const decimalArrayLen2 = decimalArrayLen + 1;\n    const decimalArray2 = new Array(decimalArrayLen2);\n    for (let i = 0; i < decimalArrayLen2; i++) {\n        decimalArray2[i] = decimalArray[i];\n    }\n    decimalArray2[decimalArrayLen2] = '0';\n    for (let i = decimalArrayLen2; i < decimalArrayLen; i++) {\n        decimalArray2[i] = decimalArray[i - decimalArrayLen2];\n    }\n    return decimalArray2.sort((a, b) => {\n        const aNum = parseInt(a, 10);\n        const bNum = parseInt(b, 10);\n        return aNum - bNum;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6_rt8hqg.ts(21,34): error TS2339: Property 'split' does not exist on type 'number'.\n",
      "timestamp": 1660334451
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevkh7uz2.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpevkh7uz2.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) return arr;\n    const ones = arr.filter((x) => x === 1);\n    const len = ones.length;\n    if (len === 0) return arr;\n    const arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        arr[i] = ones[len - i - 1];\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsqpopv1p.ts(5,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpsqpopv1p.ts(6,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpsqpopv1p.ts(9,11): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpsqpopv1p.ts(11,11): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones = arr[i];\n        let decimal = ones - ones * ones;\n        result.push(decimal);\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -20,\n  -12,\n  -6,\n  -2,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpx7isenyt.js:18:12)\n    at Object.<anonymous> (/tmp/tmpx7isenyt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -20, -12, -6, -2, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n    if (ones > ones_b) {\n      return -1;\n    }\n    if (ones < ones_b) {\n      return 1;\n    }\n    return a - b;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxyzw1_91.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpxyzw1_91.ts(8,20): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let oneCount = 0;\n        let decimalCount = 0;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] == 1) {\n                oneCount++;\n            } else {\n                decimalCount++;\n            }\n        }\n        if (oneCount > decimalCount) {\n            return -1;\n        } else if (oneCount < decimalCount) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    return sortedArray;\n}\n</code>\n<|/ a tags=sorting,javascript,arrays |>\n<| c |>\nThis doesn't work if there are two or more 1's in the array. For example, `[1,1,1,1]` returns `[1,1,1,1]` instead of `[1,1,1,0]`.\n<|/ c |>\n<| c |>\nIt does work if there are two or more 1's in the array. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\n<|/ c |>\n<| a tags=sorting,javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptc2e1j26.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmptc2e1j26.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptc2e1j26.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmptc2e1j26.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptc2e1j26.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmptc2e1j26.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmptc2e1j26.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmptc2e1j26.ts(30,46): error TS1005: ';' expected.\n../../../../tmp/tmptc2e1j26.ts(30,55): error TS1005: ';' expected.\n../../../../tmp/tmptc2e1j26.ts(30,66): error TS1005: ';' expected.\n../../../../tmp/tmptc2e1j26.ts(30,87): error TS1005: ';' expected.\n../../../../tmp/tmptc2e1j26.ts(30,95): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmptc2e1j26.ts(30,107): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOrOnes = binToInt(b);\n        if (ones === zerosOrOnes) {\n            return 0;\n        }\n        if (ones < zerosOrOnes) {\n            return -1;\n        }\n        return 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpax1ik74r.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpax1ik74r.ts(8,29): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let oneCount = 0;\n        let decCount = 0;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] == 1) {\n                oneCount++;\n            } else {\n                decCount++;\n            }\n        }\n        if (oneCount > decCount) {\n            return -1;\n        } else if (oneCount < decCount) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpldngyu58.ts(10,31): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n        const decB = count_decB(b);\n        if (decA === decB) {\n            return count_decA(a) - count_decB(b);\n        }\n        return decA - decB;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu8yhc1km.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpu8yhc1km.ts(8,22): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpu8yhc1km.ts(9,22): error TS2304: Cannot find name 'count_decB'.\n../../../../tmp/tmpu8yhc1km.ts(11,20): error TS2304: Cannot find name 'count_decA'.\n../../../../tmp/tmpu8yhc1km.ts(11,36): error TS2304: Cannot find name 'count_decB'.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n    if (ones === onesB) {\n      return a - b;\n    }\n    return ones - onesB;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpui2t8hio.ts(7,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpui2t8hio.ts(8,19): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(0);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        counts[arr[i]]++;\n    }\n    let sorted: number[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        sorted.push(i);\n    }\n    sorted.sort((a, b) => {\n        if (counts[a] === counts[b]) {\n            return a - b;\n        }\n        return counts[a] - counts[b];\n    });\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxaaz8aqj.js:28:12)\n    at Object.<anonymous> (/tmp/tmpxaaz8aqj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones < decimal) {\n            return -1;\n        }\n        if (ones > decimal) {\n            return 1;\n        }\n        return 0;\n    });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp32m3v9t3.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp32m3v9t3.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n        if (ones === zerosOnes) {\n            return a.localeCompare(b);\n        }\n        return ones - zerosOnes;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9bjm3j3t.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmp9bjm3j3t.ts(8,27): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmp9bjm3j3t.ts(10,22): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n        if (ones === decimal) {\n            return a - b;\n        }\n        return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpok_fzjg4.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpok_fzjg4.ts(8,25): error TS2304: Cannot find name 'count_decimal'.\n",
      "timestamp": 1660334433
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxmsf2m1v.ts(9,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpxmsf2m1v.ts(9,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_1ofk293.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_1ofk293.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const biggest = ones[len - 1];\n    const smallest = ones[0];\n    const biggestIndex = arr.indexOf(biggest);\n    const smallestIndex = arr.indexOf(smallest);\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n    const smallest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbhm6px79.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n        let twos = Math.log2(b);\n        if (ones < twos) {\n            return -1;\n        } else if (ones > twos) {\n            return 1;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp67qm_nce.js:25:12)\n    at Object.<anonymous> (/tmp/tmp67qm_nce.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a: number, b: number) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones_b < ones) {\n            return -1;\n        }\n        if (ones_b > ones) {\n            return 1;\n        }\n        return a - b;\n    });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ph7z6fx.ts(7,22): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp9ph7z6fx.ts(8,24): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n        if (ones < twos) {\n            return -1;\n        } else if (ones > twos) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptvdr5yav.ts(7,22): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmptvdr5yav.ts(8,22): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334436
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) return arr;\n    const ones = arr.filter(x => x === 1);\n    const dec = ones.length * 10;\n    const sorted = ones\n        .map(x => [x, dec])\n        .sort((a, b) => b[1] - a[1])\n        .map(x => x[0]);\n    return sorted.map(x => arr[x]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpux90y480.js:20:12)\n    at Object.<anonymous> (/tmp/tmpux90y480.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const len = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones = arr.filter((v) => v === 1);\n    const len = ones.length;\n    if (len === 0) {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n    const maxDecimal = Math.max.apply(null, ones.map(v => v.toString().split('').map(Number).reduce((a, b) => a + b, 0)));\n    const decimal = maxDecimal.toString().split('').map(Number).reduce((a, b) => a + b, 0);\n    const decimalLen = decimal.toString().length;\n    const decimalNum = decimalLen / Math.pow(10, decimalLen);\n    const decimalNumLen = Math.ceil(decimalNum);\n    const decimalNumStr = decimalNum.toString();\n    const decimalNumStrLen = decimalNumStr.length;\n    const decimalNumStrArr = decimalNumStr.split('');\n    const decimalNumStrArrLen = decimalNumStrArr.length;\n    const decimalNumStrArrLen2 = decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen3 = decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen4 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen5 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen6 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen7 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen8 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen9 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen10 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe0io57y7.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const sortedArr = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    const aBin = parseInt(a.toString(2), 2);\n    const bBin = parseInt(b.toString(2), 2);\n    return aBin - bBin;\n  });\n  const sortedArr2 = sortedArr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    const aDec = a.toString(10);\n    const bDec = b.toString(10);\n    return aDec - bDec;\n  });\n  return sortedArr2.concat(sortedArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps_egyomm.ts(25,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmps_egyomm.ts(25,19): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones = arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n & 1));\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp5157vnnb.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5157vnnb.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    }
  ]
}