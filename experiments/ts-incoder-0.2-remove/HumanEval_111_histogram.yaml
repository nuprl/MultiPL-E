name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\nfunction histogram(test: string): {[key: string]: number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "    const histogram: { [key: string]: number } = {};\n  \
    \  for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter] == null) {\n            histogram[letter] = 0;\n\
    \        }\n        histogram[letter]++;\n    }\n    return histogram;\n}\n",
  "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    const count = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    histogram[letter] = count;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"\
    abracadabra\"));", "  const histogram: { [key: string]: number } = {};\n  for\
    \ (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    test.split(' ').forEach((letter: string) => {\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    });\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "    const\
    \ histogram: { [key: string]: number } = {};\n    const letters = test.split('\
    \ ');\n    letters.forEach(letter => {\n        if (histogram[letter] == null)\
    \ {\n            histogram[letter] = 0;\n        }\n        histogram[letter]++;\n\
    \    });\n    return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    for\
    \ (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n     \
    \   if (histogram[letter]) {\n            histogram[letter]++;\n        } else\
    \ {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const char = test[i];\n    if (histogram.hasOwnProperty(char)) {\n      histogram[char]\
    \ = histogram[char] + 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n", "    const histogram: any = {};\n    let max = 0;\n\
    \    for (let i = 0; i < test.length; i++) {\n        const char = test.charAt(i);\n\
    \        if (histogram[char]) {\n            histogram[char]++;\n        } else\
    \ {\n            histogram[char] = 1;\n        }\n        if (histogram[char]\
    \ > max) {\n            max = histogram[char];\n        }\n    }\n    return histogram;\n\
    }\n", "    const histogram: any = {};\n    const testArray = test.split('');\n\
    \    testArray.forEach((letter) => {\n        histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    });\n    return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  const testArray = test.split('');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c ", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const char = test.charAt(i);\n    if (histogram.hasOwnProperty(char))\
    \ {\n      histogram[char] = histogram[char] + 1;\n    } else {\n      histogram[char]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter] == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  test.split('\
    \ ').forEach((letter: string) => {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ { [key: string]: number } = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    test.split('\
    \ ').forEach(letter => {\n        histogram[letter] = (histogram[letter] || 0)\
    \ + 1;\n    });\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  const testArray = test.split(' ');\n  for (let i = 0; i < testArray.length;\
    \ i++) {\n    const letter = testArray[i].toLowerCase();\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    test.split('\
    \ ').forEach((letter: string) => {\n        histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n    });\n    return histogram;\n}\n", "  const histogram: { [key:\
    \ string]: number } = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ char = test.charAt(i);\n    if (histogram[char]) {\n      histogram[char] +=\
    \ 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc ", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    histogram[letter] = histogram.hasOwnProperty(letter)\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    test.split(' ').forEach((letter: string) => {\n        histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  const testArray = test.split(' ');\n  for\
    \ (let i = 0; i < testArray.length; i++) {\n    const letter = testArray[i].toLowerCase();\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    const testArray = test.split(' ');\n    for (let i = 0; i < testArray.length;\
    \ i++) {\n        const letter = testArray[i];\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    const histogram: any\
    \ = {};\n    test.split(' ').forEach((letter: string) => {\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n    });\n    return histogram;\n\
    }\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++)\
    \ {\n        const letter = test[i];\n        if (histogram[letter] == null) {\n\
    \            histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  const testArray = test.split(' ');\n  for (let i = 0; i < testArray.length;\
    \ i++) {\n    const letter = testArray[i];\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    test.split(' ').forEach(letter => {\n        histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach(letter => {\n\
    \        histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \    });\n    return histogram;\n}\n", "  const histogram: { [key: string]: number\
    \ } = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n    } else\
    \ {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n}\n", " \
    \   const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n\
    \        const letter = test[i];\n        if (histogram[letter] == null) {\n \
    \           histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n", "    const histogram: any = {};\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "    const histogram: any = {};\n    test.split('\
    \ ').forEach((letter) => {\n        histogram[letter] = (histogram[letter] ||\
    \ 0) + 1;\n    });\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  const testArray = test.split(' ');\n  testArray.forEach(letter => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter => {\n \
    \   histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n\
    \  return histogram;\n}\n\nconsole.log(histogram('a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ", " \
    \ const histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter] === undefined)\
    \ {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    const\
    \ testArray = test.split('');\n    testArray.forEach((letter) => {\n        if\
    \ (histogram[letter] == null) {\n            histogram[letter] = 1;\n        }\
    \ else {\n            histogram[letter] += 1;\n        }\n    });\n    return\
    \ histogram;\n}\n", "    const histogram: any = {};\n    let maxCount = 0;\n \
    \   let maxLetter = '';\n    for (let i = 0; i < test.length; i++) {\n       \
    \ const letter = test[i];\n        const count = histogram[letter];\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxLetter =\
    \ letter;\n        }\n        histogram[letter] = count + 1;\n    }\n    return\
    \ histogram;\n}\n", "    const histogram: any = {};\n    test.split(' ').forEach((letter)\
    \ => {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n \
    \   return histogram;\n}\n", "    const histogram: any = {};\n    for (let i =\
    \ 0; i < test.length; i++) {\n        const letter = test.charAt(i);\n       \
    \ if (histogram[letter] === undefined) {\n            histogram[letter] = 1;\n\
    \        } else {\n            histogram[letter] += 1;\n        }\n    }\n   \
    \ return histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i\
    \ < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    for\
    \ (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n     \
    \   const count = histogram[letter];\n        histogram[letter] = count ? count\
    \ + 1 : 1;\n    }\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const char = test[i];\n    histogram[char]\
    \ = histogram.hasOwnProperty(char) ? histogram[char] + 1 : 1;\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"abracadabra\"));", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter] == null) {\n  \
    \    histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}", "    const histogram: any = {};\n    const testArray = test.split('\
    \ ');\n    testArray.forEach((letter: string) => {\n        if (histogram[letter]\
    \ == null) {\n            histogram[letter] = 0;\n        }\n        histogram[letter]++;\n\
    \    });\n    return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter] =\
    \ (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b ", "    const histogram: any = {};\n    const testArray\
    \ = test.split(' ');\n    testArray.forEach((letter: string) => {\n        if\
    \ (histogram[letter] === undefined) {\n            histogram[letter] = 1;\n  \
    \      } else {\n            histogram[letter] += 1;\n        }\n    });\n   \
    \ return histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i\
    \ < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  test.split('\
    \ ').forEach(letter => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach((letter: string)\
    \ => {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n \
    \   return histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0;\
    \ i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abracadabra\"));",
  "    const histogram: any = {};\n    const testArray = test.split('');\n    testArray.forEach((letter)\
    \ => {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n \
    \   return histogram;\n}\n", "    const histogram: any = {};\n    for (let i =\
    \ 0; i < test.length; i++) {\n        const letter = test[i];\n        const count\
    \ = histogram[letter] || 0;\n        histogram[letter] = count + 1;\n    }\n \
    \   return histogram;\n}\n", "  const histogram: any = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a ", " \
    \ const histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter:\
    \ string) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n   \
    \ } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    histogram[letter] = (histogram[letter] || 0)\
    \ + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram.hasOwnProperty(letter) ? histogram[letter] + 1 : 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test.charAt(i);\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "    const histogram: { [key: string]:\
    \ number; } = {};\n    test.split(' ').forEach((letter) => {\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n    });\n    return histogram;\n\
    }\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++)\
    \ {\n        const letter = test[i];\n        if (histogram[letter]) {\n     \
    \       histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  const histogram: { [key:\
    \ string]: number } = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    const testArray = test.split(' ');\n\
    \    testArray.forEach((letter: string) => {\n        if (histogram[letter]) {\n\
    \            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    });\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n    } else\
    \ {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter] == null) {\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    test.split('\
    \ ').forEach((letter) => {\n        histogram[letter] = (histogram[letter] ||\
    \ 0) + 1;\n    });\n    return histogram;\n}\n", "    const histogram: any = {};\n\
    \    const testArray = test.split(' ');\n    testArray.forEach((letter: string)\
    \ => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n", "    const histogram: any = {};\n    const\
    \ testArray = test.split(' ');\n    testArray.forEach((letter: string) => {\n\
    \        if (histogram[letter] == null) {\n            histogram[letter] = 1;\n\
    \        } else {\n            histogram[letter] += 1;\n        }\n    });\n \
    \   return histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0;\
    \ i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ", "  const histogram:\
    \ any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter:\
    \ string) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    test.split(' ').forEach(letter => {\n        histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n    });\n    return histogram;\n}\n", "    const histogram: any\
    \ = {};\n    test.split(' ').forEach((letter: string) => {\n        histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n}\n", "   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c ", "    const histogram: any = {};\n    for (let\
    \ i = 0; i < test.length; i++) {\n        const letter = test[i];\n        if\
    \ (histogram[letter]) {\n            histogram[letter]++;\n        } else {\n\
    \            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter => {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter] == null) {\n  \
    \    histogram[letter] = 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach((letter: string)\
    \ => {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n \
    \   return histogram;\n}\n", "  const histogram: any = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  }\n  return histogram;\n}\n", "    const histogram: any = {};\n    const testArray\
    \ = test.split(' ');\n    testArray.forEach((letter: string) => {\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n    });\n    return histogram;\n\
    }\n", "  const histogram: Record<string, number> = {};\n  for (const letter of\
    \ test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a ", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const char = test[i];\n    histogram[char] =\
    \ histogram.hasOwnProperty(char) ? histogram[char] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter => {\n \
    \   histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n\
    \  return histogram;\n}\n", "    const histogram: any = {};\n    for (let i =\
    \ 0; i < test.length; i++) {\n        const letter = test[i];\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    const histogram: any\
    \ = {};\n    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: Record<string, number> = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram.hasOwnProperty(letter) ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: { [key: string]: number\
    \ } = {};\n  const letters = test.split(' ');\n  letters.forEach(letter => {\n\
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const char = test[i];\n    if (histogram[char]) {\n      histogram[char]++;\n\
    \    } else {\n      histogram[char] = 1;\n    }\n  }\n  return histogram;\n}\n\
    \nconsole.log(histogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc ab", "    const histogram: any = {};\n    for (let\
    \ i = 0; i < test.length; i++) {\n        const letter = test[i];\n        if\
    \ (histogram[letter] == null) {\n            histogram[letter] = 1;\n        }\
    \ else {\n            histogram[letter]++;\n        }\n    }\n    return histogram;\n\
    }\n", "    const histogram: any = {};\n    const letters = test.split('');\n \
    \   letters.forEach((letter) => {\n        if (histogram[letter]) {\n        \
    \    histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    });\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c ", "  const histogram: any = {};\n  const testArray\
    \ = test.split(' ');\n  for (let i = 0; i < testArray.length; i++) {\n    const\
    \ letter = testArray[i].toLowerCase();\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: { [key: string]: number; } = {};\n  for (let i = 0;\
    \ i < test.length; i++) {\n    const char = test[i];\n    histogram[char] = (histogram[char]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test.charAt(i);\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    const count = histogram[letter];\n    histogram[letter]\
    \ = count ? count + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n\
    \  return histogram;\n}\n\nconsole.log(histogram(\"abracadabra\"));", "  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  test.split('\
    \ ').forEach((letter) => {\n    histogram[letter] = (histogram[letter] || 0) +\
    \ 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc\
    \ ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ", "  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++)\
    \ {\n        const letter = test[i];\n        if (histogram[letter]) {\n     \
    \       histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    const count = histogram[letter] || 0;\n    histogram[letter] = count + 1;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  const testArray\
    \ = test.split(' ');\n  for (let i = 0; i < testArray.length; i++) {\n    const\
    \ letter = testArray[i];\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n",
  "  const histogram: Record<string, number> = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc ", "    const histogram: any = {};\n    test.split(' ').forEach((letter:\
    \ string) => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 0;\n        }\n        histogram[letter]++;\n    });\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach(letter => {\n\
    \        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter] == null) {\n\
    \      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ",
  "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n \
    \       const letter = test[i];\n        if (histogram[letter] == null) {\n  \
    \          histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter] == null) {\n      histogram[letter] = 1;\n    } else {\n\
    \      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  const testArray = test.split('');\n  testArray.forEach((letter:\
    \ string) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n   \
    \ } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(' ').forEach((letter: string)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach(letter => {\n\
    \        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 0;\n        }\n        histogram[letter]++;\n    });\n    return histogram;\n\
    }\n", "  const histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\nconsole.log(histogram(\"abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ", "   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        if (histogram[letter]) {\n            histogram[letter]++;\n    \
    \    } else {\n            histogram[letter] = 1;\n        }\n    });\n    return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    if (histogram[letter]\
    \ === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]\
    \ += 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    test.split(' ').forEach(letter => {\n        histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n    });\n    return histogram;\n}\n", "    const histogram: any\
    \ = {};\n    const testArray = test.split(' ');\n    testArray.forEach(letter\
    \ => {\n        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter]++;\n        }\n    });\n\
    \    return histogram;\n}\n", "    const histogram: any = {};\n    const testArray\
    \ = test.split(' ');\n    testArray.forEach((letter: string) => {\n        const\
    \ letterCount = histogram[letter] ? histogram[letter] + 1 : 1;\n        histogram[letter]\
    \ = letterCount;\n    });\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n    return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c ", "  const histogram: any = {};\n  for (const letter\
    \ of test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test.charAt(i);\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const char = test[i];\n    histogram[char] = histogram.hasOwnProperty(char)\
    \ ? histogram[char] + 1 : 1;\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    for (let i = 0; i < test.length; i++) {\n        const letter\
    \ = test[i];\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    }\n    return histogram;\n}\n", "    const histogram: any = {};\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "    const histogram: any = {};\n    const testArray = test.split(' ');\n\
    \    for (let i = 0; i < testArray.length; i++) {\n        const letter = testArray[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n", "  const histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter)\
    \ => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n \
    \   } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++)\
    \ {\n        const letter = test[i];\n        if (histogram[letter]) {\n     \
    \       histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n\
    \  return histogram;\n}\n", "    const histogram: any = {};\n    const testArray\
    \ = test.split(' ');\n    testArray.forEach((letter: string) => {\n        if\
    \ (histogram[letter] === undefined) {\n            histogram[letter] = 1;\n  \
    \      } else {\n            histogram[letter] += 1;\n        }\n    });\n   \
    \ return histogram;\n}\n", "  const histogram: Record<string, number> = {};\n\
    \  test.split(' ').forEach((letter) => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "    const histogram: any = {};\n\
    \    const testArray = test.split(' ');\n    testArray.forEach(letter => {\n \
    \       if (histogram[letter] == null) {\n            histogram[letter] = 1;\n\
    \        } else {\n            histogram[letter]++;\n        }\n    });\n    return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  test.split(' ').forEach(letter\
    \ => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n \
    \   } else {\n      histogram[letter]++;\n    }\n  });\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    test.split(' ').forEach(letter => {\n\
    \        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter] == null) {\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n \
    \   }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const char = test[i];\n    if (histogram.hasOwnProperty(char)) {\n      histogram[char]\
    \ = histogram[char] + 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n", "  const histogram: Record<string, number> = {};\n\
    \  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "    const\
    \ histogram: any = {};\n    test.split(' ').forEach(letter => {\n        histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    histogram[letter] = (histogram[letter] || 0)\
    \ + 1;\n  }\n  return histogram;\n}\n", "  const histogram: Record<string, number>\
    \ = {};\n  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ { [key: string]: number } = {};\n  test.split(' ').forEach((letter) => {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length;\
    \ i++) {\n        const letter = test[i];\n        if (histogram[letter]) {\n\
    \            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "    const histogram:\
    \ any = {};\n    let max = 0;\n    for (let i = 0; i < test.length; i++) {\n \
    \       const letter = test[i];\n        const count = histogram[letter];\n  \
    \      if (count > max) {\n            max = count;\n        }\n        histogram[letter]\
    \ = count + 1;\n    }\n    return histogram;\n}\n", "    const histogram: any\
    \ = {};\n    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        if (histogram[letter] == null) {\n            histogram[letter] = 0;\n\
    \        }\n        histogram[letter]++;\n    }\n    return histogram;\n}\n",
  "  const histogram: { [key: string]: number } = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const char = test.charAt(i);\n    if (histogram[char]) {\n      histogram[char]\
    \ += 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "    const histogram: any = {};\n    for (let i = 0; i < test.length; i++)\
    \ {\n        const letter = test.charAt(i);\n        if (histogram[letter]) {\n\
    \            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  const histogram: any\
    \ = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(' ')) {\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: { [key: string]: number }\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
