name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 2:\n// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n// Example 3:\n// Example 4:\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n\
    \    if (curr < arr[acc]) acc = i;\n    return acc;\n  }, 0);\n  return [evenValues[minIndex],\
    \ minIndex];\n}\n", "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
    \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) =>\
    \ {\n    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return [evenValues[minIndex], minIndex];\n}\n", "  let minIndex = -1;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const minEven = arr.reduce((prev, curr)\
    \ => {\n    if (prev === undefined || prev === null || prev === curr) {\n    \
    \  return prev;\n    }\n    if (prev % 2 === 0 && curr % 2 === 0) {\n      return\
    \ prev;\n    }\n    return curr;\n  }, undefined);\n  if (minEven === undefined)\
    \ {\n    return [];\n  }\n  const index = arr.indexOf(minEven);\n  return [minEven,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(x\
    \ => x % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues[0];\n  const smallestIndex = 0;\n  for (let i\
    \ = 1; i < evenValues.length; i++) {\n    if (evenValues[i] < smallestEvenValue)\
    \ {\n      smallestEvenValue = evenValues[i];\n      smallestIndex = i;\n    }\n\
    \  }\n  return [smallestEvenValue, smallestIndex];\n}\n", "  let minIndex = 0;\n\
    \  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) =>\
    \ {\n    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const result = [];\n  let minIndex = 0;\n  let minValue =\
    \ arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue,\
    \ minIndex);\n  return result;\n}\n", "  const evens = arr.filter(n => n % 2 ===\
    \ 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const min = evens.reduce((prev,\
    \ curr) => Math.min(prev, curr), Infinity);\n  const index = evens.indexOf(min);\n\
    \  return [min, index];\n}\n", "  const evenValues = arr.filter(n => n % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue =\
    \ evenValues[0];\n  const smallestIndex = 0;\n  for (let i = 1; i < evenValues.length;\
    \ i++) {\n    if (evenValues[i] < smallestEvenValue) {\n      smallestEvenValue\
    \ = evenValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  const smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(minValue);\n  return [minValue, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a\
    \ < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = evenValues[0];\n  const smallestIndex = 0;\n  for (let i = 1; i < evenValues.length;\
    \ i++) {\n    if (evenValues[i] < smallestEvenValue) {\n      smallestEvenValue\
    \ = evenValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues[0];\n\
    \  const smallestIndex = 0;\n  for (let i = 1; i < evenValues.length; i++) {\n\
    \    if (evenValues[i] < smallestEvenValue) {\n      smallestEvenValue = evenValues[i];\n\
    \      smallestIndex = i;\n    }\n  }\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let\
    \ minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < len; i++) {\n\
    \    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const minIndex = Math.min(...arr.map(node => node\
    \ % 2));\n  const minValue = arr[minIndex];\n  const evens = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evens.length === 1) {\n    return [minValue, minIndex];\n\
    \  }\n  const minEven = evens.reduce((prev, curr) => Math.min(prev, curr), Infinity);\n\
    \  const minEvenIndex = evens.indexOf(minEven);\n  return [minEven, minEvenIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr,\
    \ i) => {\n    return curr < acc ? i : acc;\n  }, evenValues[0]);\n  return [evenValues[minIndex],\
    \ minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
    \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, cur, idx) =>\
    \ {\n    if (idx === 0) {\n      return [cur, idx];\n    }\n    if (cur < acc[0])\
    \ {\n      return [cur, idx];\n    }\n    return acc;\n  }, [evenValues[0]]);\n\
    }\n", "  const even = arr.filter(node => node % 2 === 0);\n  if (even.length ===\
    \ 0) return [];\n  const index = even.indexOf(Math.min(...even));\n  return [Math.min(...even),\
    \ index];\n}\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  const minValue = Math.min(...evenValues);\n  const\
    \ minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n",
  "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evens = arr.filter(node\
    \ => node % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEven = evens.reduce((prev, curr) => Math.min(prev, curr));\n  const\
    \ index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n", " \
    \ let minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n", "  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ minIndex = findSmallestIndex(arr);\n  if (minIndex === -1) {\n    return [];\n\
    \  }\n  const minValue = arr[minIndex];\n  const result = [minValue, minIndex];\n\
    \  for (let i = minIndex + 1; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n \
    \     result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues[0];\n  const smallestIndex = 0;\n  for (let i = 1; i < evenValues.length;\
    \ i++) {\n    if (evenValues[i] < smallestEvenValue) {\n      smallestEvenValue\
    \ = evenValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((minIndex,\
    \ node, index) => {\n    if (node < minIndex) return index;\n    return minIndex;\n\
    \  }, Number.MAX_SAFE_INTEGER);\n  return [evenValues[minIndex], minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a\
    \ < b ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues\
    \ = evenValues.sort((a, b) => a - b);\n  return sortedEvenValues.reduce((acc,\
    \ val, i) => {\n    if (val === sortedEvenValues[0]) return [val, i];\n    if\
    \ (val < sortedEvenValues[0]) return acc;\n    return acc;\n  }, []);\n}\n", " \
    \ const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evens = arr.filter(node => node % 2 === 0);\n  if (evens.length\
    \ === 0) {\n    return [];\n  }\n  const smalest_value = evens[0];\n  const smalest_index\
    \ = evens.indexOf(smalest_value);\n  return [smalest_value, smalest_index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < arr[acc]) {\n\
    \      return i;\n    }\n    return acc;\n  }, 0);\n  return [evenValues[minIndex],\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.sort((a,\
    \ b) => a - b)[0];\n  const index = evenValues.indexOf(smallestEvenValue);\n \
    \ return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const result = [];\n  const minValue\
    \ = arr[0];\n  const minIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n\
    \    if (arr[i] === minValue) {\n      minIndex = i;\n    } else if (arr[i] ===\
    \ minValue && arr[i] % 2 === 0) {\n      minIndex = i;\n    }\n  }\n  if (minIndex\
    \ >= 0) {\n    result.push(minValue, minIndex);\n  }\n  return result;\n}\n",
  "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const result = [];\n  let minIndex\
    \ = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n\
    \    if (arr[i] === minValue) {\n      minIndex = i;\n      minValue = arr[i];\n\
    \    } else if (arr[i] === minValue && minIndex === -1) {\n      minIndex = i;\n\
    \      minValue = arr[i];\n    }\n  }\n  if (minIndex === -1) {\n    return [];\n\
    \  }\n  result.push(minValue, minIndex);\n  return result;\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  let minIndex = arr.length - 1;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, indexOfSmallestEvenValue];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minValue = arr[0];\n  let\
    \ minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.sort((a,\
    \ b) => a - b)[0];\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue =\
    \ evenValues.sort((a, b) => a - b)[0];\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  let minIndex = arr.findIndex(node => node % 2 === 0);\n\
    \  if (minIndex === -1) {\n    return [];\n  }\n  let minValue = arr[minIndex];\n\
    \  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0) {\n      if (arr[i] < minValue) {\n        minValue = arr[i];\n \
    \       minIndex = i;\n      }\n    }\n  }\n  result.push(minValue, minIndex);\n\
    \  return result;\n}\n", "  let min = arr[0];\n  let index = -1;\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n\
    \      index = i;\n    }\n  }\n  return [min, index];\n}\n", "  const even = arr.filter(n\
    \ => n % 2 === 0);\n  if (even.length === 0) {\n    return [];\n  }\n  const min\
    \ = even.sort((a, b) => a - b)[0];\n  const index = even.indexOf(min);\n  return\
    \ [min, index];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
    \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.sort((a, b) => a - b).slice(0, 1);\n\
    }\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const even = arr.filter(n => n\
    \ % 2 === 0);\n  if (even.length === 0) {\n    return [];\n  }\n  const smallest\
    \ = even.sort((a, b) => a - b)[0];\n  const index = even.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((prev, curr,\
    \ index) => {\n    if (curr < prev) {\n      return index;\n    }\n    return\
    \ prev;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n\
    \  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue =\
    \ arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v => v %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const minValue = evenValues[minIndex];\n\
    \  const index = evenValues.indexOf(minValue);\n  return [minValue, index];\n\
    }\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, val, index) =>\
    \ {\n    return val < acc ? index : acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
    \ minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n\
    \    return [];\n  }\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = arr.findIndex(n => n === smallestEvenValue);\n  return\
    \ [smallestEvenValue, index];\n}\n", "  let minValue = arr[0];\n  let minIndex\
    \ = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const result = [];\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue,\
    \ minIndex);\n  return result;\n}\n", "  const evenValues = arr.filter(v => v\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(minValue);\n\
    \  return [minValue, index];\n}\n", "  const evenValues = arr.filter(n => n %\
    \ 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev,\
    \ curr, i, arr) => {\n    if (curr < prev) {\n      return curr;\n    }\n    if\
    \ (i === arr.length - 1) {\n      return prev;\n    }\n    return arr[i + 1];\n\
    \  });\n}\n", "  const even = arr.filter(node => node % 2 === 0);\n  if (even.length\
    \ === 0) return [];\n  const min = even.reduce((acc, cur, index) => {\n    if\
    \ (cur < acc) return cur;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n \
    \ const index = even.indexOf(min);\n  return [min, index];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minValue = arr[0];\n  let minIndex\
    \ = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minValue = arr[0];\n  let\
    \ minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const minValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const index = evenValues.indexOf(minValue);\n  return\
    \ [minValue, index];\n}\n", "  const minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const even = arr.filter(node =>\
    \ node % 2 === 0);\n  if (even.length === 0) return [];\n  const index = even.indexOf(Math.min(...even));\n\
    \  return [Math.min(...even), index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const minIndex = evenValues.reduce((prev, curr) => {\n    return Math.min(prev,\
    \ curr);\n  });\n  const minValue = evenValues[minIndex];\n  const minIndexes\
    \ = evenValues.map(node => node === minValue ? minIndex : -1);\n  const minIndexesSorted\
    \ = minIndexes.sort((a, b) => a - b);\n  const minIndexesSortedIndex = minIndexesSorted.reduce((prev,\
    \ curr) => {\n    return prev === -1 ? curr : prev;\n  });\n  return [minValue,\
    \ minIndexesSortedIndex];\n}\n", "  const evenValues = arr.filter(node => node\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((prev, curr, index) => {\n    if (prev === undefined || prev[0]\
    \ < curr) {\n      return [curr, index];\n    }\n    return prev;\n  }, undefined);\n\
    }\n", "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n\
    \  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n  if (minIndex === -1) {\n    return [];\n  }\n  const\
    \ minValue = arr[minIndex];\n  const evenIndex = arr.findIndex(node => node %\
    \ 2 === 0);\n  return [minValue, evenIndex];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = arr[0];\n  const minIndex = 0;\n  for (let i =\
    \ 1; i < len; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  let minIndex = arr.findIndex(node => node % 2 === 0);\n  if (minIndex\
    \ === -1) {\n    return [];\n  }\n  let minValue = arr[minIndex];\n  let evenIndex\
    \ = arr.findIndex(node => node % 2 === 0);\n  if (evenIndex === -1) {\n    return\
    \ [];\n  }\n  let evenValue = arr[evenIndex];\n  if (minValue === evenValue) {\n\
    \    return [minValue, minIndex];\n  }\n  if (minValue > evenValue) {\n    return\
    \ [minValue, minIndex];\n  }\n  return [evenValue, evenIndex];\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minIndex\
    \ = arr.findIndex(node => node % 2 === 0);\n  if (minIndex === -1) {\n    return\
    \ [];\n  }\n  const minValue = arr[minIndex];\n  const result = [minValue, minIndex];\n\
    \  for (let i = minIndex + 1; i < len; i++) {\n    const node = arr[i];\n    if\
    \ (node % 2 === 0) {\n      continue;\n    }\n    if (node < minValue) {\n   \
    \   minValue = node;\n      minIndex = i;\n    }\n  }\n  return result;\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  return evenValues.reduce((prev, curr) => {\n    if (prev ===\
    \ undefined || prev < curr) return curr;\n    return prev;\n  }, undefined);\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minIndex = evenValues.reduce((acc, curr, i, arr) => {\n    if (curr < arr[i\
    \ - 1]) {\n      return i;\n    }\n    return acc;\n  }, 0);\n  return [evenValues[minIndex],\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = evenValues[0];\n  const smallestIndex = 0;\n  for (let i = 1; i < evenValues.length;\
    \ i++) {\n    if (evenValues[i] < smallestEvenValue) {\n      smallestEvenValue\
    \ = evenValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((acc,\
    \ curr, i) => {\n    if (curr < evenValues[acc]) acc = i;\n    return acc;\n \
    \ }, 0);\n  return [evenValues[minIndex], minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n", "  let minIndex = arr.findIndex(node => node % 2 === 0);\n  if (minIndex\
    \ === -1) {\n    return [];\n  }\n  let minValue = arr[minIndex];\n  let result\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n\
    \      if (arr[i] < minValue) {\n        minValue = arr[i];\n        minIndex\
    \ = i;\n      }\n    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  return evenValues.reduce((prev, curr, index) => {\n    if (curr < prev) {\n\
    \      return curr;\n    }\n    return index;\n  }, evenValues[0]);\n}\n", " \
    \ const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr,\
    \ i) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return i;\n \
    \ }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  return\
    \ [minValue, minIndex];\n}\n", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return [];\n  }\n  const minValue = Math.min(...arr);\n  const minIndex =\
    \ arr.indexOf(minValue);\n  const evenIndex = minIndex % 2 === 0;\n  if (evenIndex)\
    \ {\n    return [minValue, minIndex];\n  }\n  const minIndex2 = arr.indexOf(minValue\
    \ - 1);\n  const evenIndex2 = minIndex2 % 2 === 0;\n  if (evenIndex2) {\n    return\
    \ [minValue - 1, minIndex2];\n  }\n  const minIndex3 = arr.indexOf(minValue -\
    \ 2);\n  const evenIndex3 = minIndex3 % 2 === 0;\n  if (evenIndex3) {\n    return\
    \ [minValue - 2, minIndex3];\n  }\n  const minIndex4 = arr.indexOf(minValue -\
    \ 3);\n  const evenIndex4 = minIndex4 % 2 === 0;\n  if (evenIndex4) {\n    return\
    \ [minValue - 3, minIndex4];\n  }\n  const minIndex5 = arr.indexOf(minValue -\
    \ 4);\n  const evenIndex5 = minIndex5 % 2 === 0;\n  if (evenIndex5) {\n    return\
    \ [minValue - 4, minIndex5];\n  }\n  const minIndex6 = arr.indexOf(minValue -\
    \ 5);\n  const evenIndex6 = minIndex6 % 2 === 0;\n  if (evenIndex6) {\n    return\
    \ [minValue - 5, minIndex6];\n  }\n  const minIndex7 = arr.indexOf(minValue -\
    \ 6);\n  const evenIndex7 = minIndex7 % 2 === 0;\n  if (evenIndex7) {\n    return\
    \ [minValue - 6, minIndex7];\n  }\n  const minIndex8 = arr.indexOf(minValue -\
    \ 7);\n  const evenIndex8 = minIndex8 % 2 === 0;\n  if (evenIndex8) {\n    return\
    \ [minValue - 7, minIndex8];\n  }\n  const minIndex9 = arr.indexOf(minValue -\
    \ 8);\n  const evenIndex9 = minIndex9 % 2 === 0;\n  if (evenIndex9) {\n    return\
    \ [minValue - 8, minIndex9];\n  }\n  const minIndex10 = arr.indexOf(minValue -\
    \ 9);\n  const evenIndex10 = minIndex10 % 2 === 0;\n  if (evenIndex10) {\n   \
    \ return [minValue - 9, minIndex10];\n  }\n  const minIndex11 = arr.indexOf(minValue\
    \ - 10);\n  const evenIndex11 = minIndex11 % 2 === 0;\n  if (evenIndex11) {\n\
    \    return [minValue - 10, minIndex11];\n  }\n  const minIndex12 = arr.indexOf(minValue\
    \ - 11);\n  const evenIndex12 = minIndex12 % 2 === 0;\n  if (evenIndex12) {\n\
    \    return [minValue - 11, minIndex12];\n  }\n  const minIndex13 = arr.indexOf(minValue\
    \ - 12);\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1;\
    \ i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const\
    \ evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  const min = evens.reduce((prev, curr) => Math.min(prev, curr));\n\
    \  const index = evens.indexOf(min);\n  return [min, index];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues[0];\n  const smallestIndex = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "  const result = [];\n  const minIndex\
    \ = arr.findIndex(node => node % 2 === 0);\n  if (minIndex === -1) {\n    return\
    \ result;\n  }\n  const minValue = arr[minIndex];\n  const minIndexes = arr.filter(node\
    \ => node % 2 === 0).map(node => node);\n  const minIndexesSorted = minIndexes.sort((a,\
    \ b) => a - b);\n  const minIndexesSortedEven = minIndexesSorted.filter(node =>\
    \ node % 2 === 0);\n  const minIndexesSortedEvenSorted = minIndexesSortedEven.sort((a,\
    \ b) => a - b);\n  const minIndexesSortedEvenSortedIndex = minIndexesSortedEvenSorted.indexOf(minValue);\n\
    \  if (minIndexesSortedEvenSortedIndex === -1) {\n    return [];\n  }\n  result.push(minValue);\n\
    \  result.push(minIndexesSortedEvenSortedIndex);\n  return result;\n}\n", "  let\
    \ minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++)\
    \ {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex =\
    \ i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ smallest = evens.reduce((prev, curr, index) => {\n    if (prev === undefined\
    \ || prev < curr) {\n      return curr;\n    }\n    return index;\n  }, undefined);\n\
    \  const index = evens.indexOf(smallest);\n  return [smallest, index];\n}\n",
  "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n\
    \  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const result = [];\n  let minValue = arr[0];\n  let minIndex = 0;\n \
    \ for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n     \
    \ minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue,\
    \ minIndex);\n  return result;\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue\
    \ = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  const min = evens.reduce((a, b) => Math.min(a, b));\n  const index\
    \ = evens.indexOf(min);\n  return [min, index];\n}\n", "  const result = [];\n\
    \  const len = arr.length;\n  if (len === 0) {\n    return result;\n  }\n  const\
    \ minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < len; i++) {\n\
    \    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) =>\
    \ Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minValue = arr[0];\n  let\
    \ minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((minIndex,\
    \ node, index) => {\n    if (node < minIndex) {\n      return index;\n    }\n\
    \    return minIndex;\n  }, Number.MAX_SAFE_INTEGER);\n  return [evenValues[minIndex],\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues[0];\n\
    \  const smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] === smallestEvenValue) {\n      if (arr[i] < smallestEvenValue) {\n\
    \        smallestEvenValue = arr[i];\n        smallestIndex = i;\n      }\n  \
    \  }\n  }\n  return [smallestEvenValue, smallestIndex];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minValue = arr[0];\n\
    \  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < arr[acc]) {\n\
    \      return i;\n    }\n    return acc;\n  }, 0);\n  return [arr[minIndex], minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex\
    \ = evenValues.reduce((acc, curr, i) => {\n    if (curr < evenValues[i]) return\
    \ i;\n    return acc;\n  }, 0);\n  return [evenValues[minIndex], minIndex];\n\
    }\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < arr[acc])\
    \ return i;\n    return acc;\n  }, 0);\n  return [evenValues[minIndex], minIndex];\n\
    }\n", "  const evens = arr.filter(v => v % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  const smallest = evens.reduce((a, b) => a < b ? a\
    \ : b);\n  const index = arr.indexOf(smallest);\n  return [smallest, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  let minValue = arr[0];\n\
    \  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const result = [];\n  let smallestEvenValue\
    \ = Number.MAX_SAFE_INTEGER;\n  let smallestIndex = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEvenValue\
    \ > arr[i]) {\n        smallestEvenValue = arr[i];\n        smallestIndex = i;\n\
    \      }\n    }\n  }\n  if (smallestEvenValue === Number.MAX_SAFE_INTEGER) {\n\
    \    return [];\n  }\n  result.push(smallestEvenValue, smallestIndex);\n  return\
    \ result;\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const result = [];\n\
    \  let minValue = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
    \  return result;\n}\n", "  const even = arr.filter(node => node % 2 === 0);\n\
    \  if (even.length === 0) {\n    return [];\n  }\n  return even.sort((a, b) =>\
    \ a - b).slice(0, 1);\n}\n", "  const result = [];\n  let minIndex = -1;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ result.push(minValue, minIndex);\n  return result;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  let minValue = arr[0];\n  let minIndex\
    \ = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n \
    \ for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n     \
    \ minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue,\
    \ minIndex);\n  return result;\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc)\
    \ return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue\
    \ = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) {\n    return [];\n  }\n  const minValue = evenValues.reduce((a,\
    \ b) => Math.min(a, b));\n  const minIndex = evenValues.indexOf(minValue);\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const result = [];\n  const minIndex\
    \ = arr.findIndex(node => node % 2 === 0);\n  if (minIndex === -1) {\n    return\
    \ result;\n  }\n  const minValue = arr[minIndex];\n  const minValueIndex = arr.indexOf(minValue);\n\
    \  result.push(minValue);\n  result.push(minValueIndex);\n  return result;\n}\n",
  "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, index)\
    \ => {\n    if (prev === undefined || curr < prev) {\n      return curr;\n   \
    \ }\n    return index;\n  });\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  let minValue = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, v,\
    \ i) => {\n    if (v < acc) {\n      return v;\n    }\n    return i;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  const result = [minValue, minIndex];\n\
    \  return result;\n}\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, indexOfSmallestEvenValue];\n}\n", "  const evenValues =\
    \ arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n \
    \ const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index\
    \ = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n}\n",
  "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr) => {\n\
    \    if (prev === undefined || prev < curr) {\n      return curr;\n    }\n   \
    \ return prev;\n  }, undefined);\n}\n", "  let minValue = arr[0];\n  let minIndex\
    \ = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const even = arr.filter(n => n % 2 === 0);\n  if (even.length\
    \ === 0) return [];\n  const index = even.indexOf(Math.min(...even));\n  return\
    \ [Math.min(...even), index];\n}\n", "  const evenValues = arr.filter(n => n %\
    \ 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const len = arr.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const minValue = arr[0];\n  const minIndex\
    \ = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const even = arr.filter(node => node % 2 === 0);\n  if (even.length ===\
    \ 0) {\n    return [];\n  }\n  const min = even.sort((a, b) => a - b).shift();\n\
    \  const index = even.indexOf(min);\n  return [min, index];\n}\n", "  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const smallestEven = evens.reduce((a, b) => a < b ? a : b);\n  const index\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n\
    \  const indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n \
    \ return [smallestEvenValue, indexOfSmallestEvenValue];\n}\n", "  const even =\
    \ arr.filter(n => n % 2 === 0);\n  if (even.length === 0) {\n    return [];\n\
    \  }\n  return even.sort((a, b) => a - b).slice(0, 1);\n}\n", "  let minValue\
    \ = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minValue = arr[0];\n\
    \  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const even = arr.filter(node => node\
    \ % 2 === 0);\n  if (even.length === 0) return [];\n  const smallestEven = even.sort((a,\
    \ b) => a - b)[0];\n  const index = even.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
