language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max: number =\
    \ 0;\n    var current: number = 0;\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        current = numbers[i];\n        if (current > max) {\n           \
    \ max = current;\n        }\n        else {\n            result.push(max);\n \
    \           max = current;\n        }\n    }\n    result.push(max);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpui9vyxli.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpui9vyxli.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let rolling_max = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rolling_max = Math.max(rolling_max,\
    \ numbers[i]);\n        result.push(rolling_max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max_number: number\
    \ = numbers[0];\n    var max_index: number = numbers.length - 1;\n    var max_value:\
    \ number;\n\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_number) {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n\n    for (var i = max_index; i >= 0; i--) {\n     \
    \   max_value = numbers[i];\n        for (var j = i - 1; j >= 0; j--) {\n    \
    \        if (numbers[j] > max_value) {\n                max_value = numbers[j];\n\
    \                max_index = j;\n            }\n        }\n        result.push(max_number);\n\
    \        max_number = max_value;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp3_3liauv.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3_3liauv.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 3,\
    \ 2 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let max_element = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_element)\
    \ {\n            rolling_max = [max_element];\n            max_element = numbers[i];\n\
    \        } else {\n            rolling_max.push(max_element);\n            max_element\
    \ = numbers[i];\n        }\n    }\n    rolling_max.push(max_element);\n    return\
    \ rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpucafu8fv.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpucafu8fv.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var rolling_number_index: number[] = [];\n    var rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var max_rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var rolling_number_index:\
    \ number[] = [];\n    var rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var rolling_number_index: number[] = [];\n    var rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var max_rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var rolling_number_index:\
    \ number[] = [];\n    var rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var rolling_number_index: number[] = [];\n    var rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var max_rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var rolling_number_index:\
    \ number[] = [];\n    var rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var rolling_number_index: number[] = [];\n    var rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var max_rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var rolling_number_index:\
    \ number[] = [];\n    var rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var rolling_number_index: number[] = [];\n    var rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var max_rolling_number:\
    \ number[] = [];\n    var max_rolling_number_index: number[] = [];\n    var rolling_number_index:\
    \ number[] = [];\n    var rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4941dlsa.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var index\
    \ = 0;\n    while (numbers.length > 0) {\n        if (numbers[index] > max) {\n\
    \            max = numbers[index];\n        }\n        index++;\n    }\n    result.push(max);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp9z2zl1qq.js:19:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9z2zl1qq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnc2j3iqd.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnc2j3iqd.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_list: number[] = [];\n    let rolling_max_number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max_number) {\n            rolling_max_number = numbers[i];\n    \
    \    }\n        rolling_max_list.push(rolling_max_number);\n    }\n    return\
    \ rolling_max_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ number[] = [];\n    var max_rolling_numbers_index: number[] = [];\n    var max_rolling_numbers_value:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwz0yphyg.ts(51,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpwz0yphyg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_rolling_max:\
    \ number = 0;\n    let max_rolling_max_index: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max_rolling_max) {\n  \
    \          max_rolling_max = numbers[i];\n            max_rolling_max_index =\
    \ i;\n        }\n    }\n    for (let i = max_rolling_max_index + 1; i < numbers.length;\
    \ i++) {\n        rolling_max.push(numbers[i]);\n    }\n    return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpalqqfep1.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpalqqfep1.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result = [];\n    let max = 0;\n    let currentMax\
    \ = 0;\n    let currentIndex = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        \
    \    currentMax = max;\n            currentIndex = i;\n        }\n    }\n    for\
    \ (let i = currentIndex; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ currentMax) {\n            result.push(currentMax);\n            currentMax\
    \ = numbers[i];\n        }\n    }\n    result.push(currentMax);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpug897tcp.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpug897tcp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_index\
    \ = i;\n            rolling_max_value = numbers[i];\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpvyhhmd9k.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvyhhmd9k.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_max: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5c7s0_kq.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_number: number[] = [];\n    let max_number_index:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        let\
    \ max_number = numbers[i];\n        let max_number_index = i;\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (numbers[j] > max_number)\
    \ {\n                max_number = numbers[j];\n                max_number_index\
    \ = j;\n            }\n        }\n        max_number_index.push(max_number_index);\n\
    \    }\n    return max_number;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_fhzmqmm.ts(15,26): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var index\
    \ = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            index = i;\n        }\n\
    \    }\n    result.push(max);\n    for (i = index; i < numbers.length; i++) {\n\
    \        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp24874hik.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp24874hik.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_index == numbers.length - 1)\
    \ {\n            rolling_max_array.push(rolling_max_value);\n            rolling_max_index\
    \ = 0;\n            rolling_max_value = 0;\n        }\n        if (numbers[i]\
    \ > rolling_max_value) {\n            rolling_max_value = numbers[i];\n      \
    \      rolling_max_index = i;\n        }\n    }\n    return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp2cn1yw5g.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2cn1yw5g.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const max_rolling_numbers: number[] = [];\n    const\
    \ rolling_max_number: number = numbers[0];\n    const rolling_max_number_index:\
    \ number = 0;\n    const max_rolling_number_index: number = 0;\n    const rolling_max_numbers:\
    \ number[] = [];\n    const rolling_max_number: number = numbers[0];\n    const\
    \ rolling_max_number_index: number = 0;\n    const max_rolling_number_index: number\
    \ = 0;\n    const rolling_max_numbers: number[] = [];\n    const rolling_max_number:\
    \ number = numbers[0];\n    const rolling_max_number_index: number = 0;\n    const\
    \ max_rolling_number_index: number = 0;\n    const rolling_max_numbers: number[]\
    \ = [];\n    const rolling_max_number: number = numbers[0];\n    const rolling_max_number_index:\
    \ number = 0;\n    const max_rolling_number_index: number = 0;\n    const rolling_max_numbers:\
    \ number[] = [];\n    const rolling_max_number: number = numbers[0];\n    const\
    \ rolling_max_number_index: number = 0;\n    const max_rolling_number_index: number\
    \ = 0;\n    const rolling_max_numbers: number[] = [];\n    const rolling_max_number:\
    \ number = numbers[0];\n    const rolling_max_number_index: number = 0;\n    const\
    \ max_rolling_number_index: number = 0;\n    const rolling_max_numbers: number[]\
    \ = [];\n    const rolling_max_number: number = numbers[0];\n    const rolling_max_number_index:\
    \ number = 0;\n    const max_rolling_number_index: number = 0;\n    const rolling_max_numbers:\
    \ number[] = [];\n    const rolling_max_number: number = numbers[0];\n    const\
    \ rolling_max_number_index: number = 0;\n    const max_rolling_number_index: number\
    \ = 0;\n    const rolling_max_numbers: number[] = [];\n    const rolling_max_number:\
    \ number = numbers[0];\n    const rolling_max_number_index: number = 0;\n    const\
    \ max_rolling_number_index: number = 0;\n    const rolling_max_numbers: number[]\
    \ = [];\n    const rolling_max_number: number = numbers[0];\n    const rolling_max_number_index:\
    \ number = 0;\n    const max_rolling_number_index: number = 0;\n    const rolling_max_numbers:\
    \ number[] = [];\n    const rolling_max_number: number = numbers[0];\n    const\
    \ rolling_max_number_index: number = 0;\n    const max_rolling_number_index: number\
    \ = 0;\n    const rolling_max_numbers: number[] = [];\n    const rolling_max_number:\
    \ number = numbers[0];\n    const rolling_max_number_index: number = 0;\n    const\
    \ max_rolling_number_index: number = 0;\n    const rolling_max_numbers: number[]\
    \ = [];\n    const rolling_max_number: number = numbers[0];\n    const rolling_max_number_index:\
    \ number = 0;\n    const max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpch8fsal7.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_element: number[] = [];\n    var max_index\
    \ = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > numbers[max_index]) {\n            max_element = numbers;\n            max_index\
    \ = i;\n        }\n    }\n    return max_element;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpwi0s6kt5.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwi0s6kt5.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n        }\n    }\n\
    \    result.push(rolling_max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp96x4vjdm.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp96x4vjdm.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_result = [];\n    const rolling_max_result_length\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        const rolling_max_element\
    \ = numbers[i];\n        let rolling_max_element_index = 0;\n        while (rolling_max_element_index\
    \ < rolling_max_result_length) {\n            if (rolling_max_element > rolling_max_result[rolling_max_element_index])\
    \ {\n                rolling_max_element = rolling_max_result[rolling_max_element_index];\n\
    \            }\n            rolling_max_element_index++;\n        }\n        rolling_max_result.push(rolling_max_element);\n\
    \        rolling_max_result_length++;\n    }\n    return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzfi2nnox.ts(11,17): error TS2588: Cannot assign to
    ''rolling_max_element'' because it is a constant.

    ../../../../../tmp/tmpzfi2nnox.ts(16,9): error TS2588: Cannot assign to ''rolling_max_result_length''
    because it is a constant.

    '
  timestamp: 1660008671
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var rollingMax\
    \ = 0;\n    var rollingMaxIndex = 0;\n    var rollingMaxIndex2 = 0;\n    var rollingMaxIndex3\
    \ = 0;\n    var rollingMaxIndex4 = 0;\n    var rollingMaxIndex5 = 0;\n    var\
    \ rollingMaxIndex6 = 0;\n    var rollingMaxIndex7 = 0;\n    var rollingMaxIndex8\
    \ = 0;\n    var rollingMaxIndex9 = 0;\n    var rollingMaxIndex10 = 0;\n    var\
    \ rollingMaxIndex11 = 0;\n    var rollingMaxIndex12 = 0;\n    var rollingMaxIndex13\
    \ = 0;\n    var rollingMaxIndex14 = 0;\n    var rollingMaxIndex15 = 0;\n    var\
    \ rollingMaxIndex16 = 0;\n    var rollingMaxIndex17 = 0;\n    var rollingMaxIndex18\
    \ = 0;\n    var rollingMaxIndex19 = 0;\n    var rollingMaxIndex20 = 0;\n    var\
    \ rollingMaxIndex21 = 0;\n    var rollingMaxIndex22 = 0;\n    var rollingMaxIndex23\
    \ = 0;\n    var rollingMaxIndex24 = 0;\n    var rollingMaxIndex25 = 0;\n    var\
    \ rollingMaxIndex26 = 0;\n    var rollingMaxIndex27 = 0;\n    var rollingMaxIndex28\
    \ = 0;\n    var rollingMaxIndex29 = 0;\n    var rollingMaxIndex30 = 0;\n    var\
    \ rollingMaxIndex31 = 0;\n    var rollingMaxIndex32 = 0;\n    var rollingMaxIndex33\
    \ = 0;\n    var rollingMaxIndex34 = 0;\n    var rollingMaxIndex35 = 0;\n    var\
    \ rollingMaxIndex36 = 0;\n    var rollingMaxIndex37 = 0;\n    var rollingMaxIndex38\
    \ = 0;\n    var rollingMaxIndex39 = 0;\n    var rollingMaxIndex40 = 0;\n    var\
    \ rollingMaxIndex41 = 0;\n    var rollingMaxIndex42 = 0;\n    var rollingMaxIndex43\
    \ = 0;\n    var rollingMaxIndex44 = 0;\n    var rollingMaxIndex45 = 0;\n    var\
    \ rollingMaxIndex46 = 0;\n    var rollingMaxIndex47 = 0;\n    var rollingMaxIndex48\
    \ = 0;\n    var rollingMaxIndex49 = 0;\n    var rollingMaxIndex50 = 0;\n    var\
    \ rollingMaxIndex51 = 0;\n    var rollingMaxIndex52 = 0;\n    var rollingMaxIndex53\
    \ = 0;\n    var rollingMaxIndex54 = 0;\n    var rollingMaxIndex55 = 0;\n    var\
    \ rollingMaxIndex56 = 0;\n    var rollingMaxIndex57 = 0;\n    var rollingMaxIndex58\
    \ = 0;\n    var rollingMaxIndex59 = 0;\n    var rollingMaxIndex60 = 0;\n    var\
    \ rollingMaxIndex61 = 0;\n    var rollingMaxIndex62 = 0;\n    var rollingMaxIndex63\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkmv96tv7.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    numbers.forEach(function(number)\
    \ {\n        rolling_max = Math.max(rolling_max, number);\n        result.push(rolling_max);\n\
    \    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008676
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var currentMax: number\
    \ = 0;\n    var currentMaxIndex: number = 0;\n    var currentMaxValue: number\
    \ = 0;\n    var currentMaxIndexValue: number = 0;\n    var currentMaxIndexValue2:\
    \ number = 0;\n    var currentMaxIndexValue3: number = 0;\n    var currentMaxIndexValue4:\
    \ number = 0;\n    var currentMaxIndexValue5: number = 0;\n    var currentMaxIndexValue6:\
    \ number = 0;\n    var currentMaxIndexValue7: number = 0;\n    var currentMaxIndexValue8:\
    \ number = 0;\n    var currentMaxIndexValue9: number = 0;\n    var currentMaxIndexValue10:\
    \ number = 0;\n    var currentMaxIndexValue11: number = 0;\n    var currentMaxIndexValue12:\
    \ number = 0;\n    var currentMaxIndexValue13: number = 0;\n    var currentMaxIndexValue14:\
    \ number = 0;\n    var currentMaxIndexValue15: number = 0;\n    var currentMaxIndexValue16:\
    \ number = 0;\n    var currentMaxIndexValue17: number = 0;\n    var currentMaxIndexValue18:\
    \ number = 0;\n    var currentMaxIndexValue19: number = 0;\n    var currentMaxIndexValue20:\
    \ number = 0;\n    var currentMaxIndexValue21: number = 0;\n    var currentMaxIndexValue22:\
    \ number = 0;\n    var currentMaxIndexValue23: number = 0;\n    var currentMaxIndexValue24:\
    \ number = 0;\n    var currentMaxIndexValue25: number = 0;\n    var currentMaxIndexValue26:\
    \ number = 0;\n    var currentMaxIndexValue27: number = 0;\n    var currentMaxIndexValue28:\
    \ number = 0;\n    var currentMaxIndexValue29: number = 0;\n    var currentMaxIndexValue30:\
    \ number = 0;\n    var currentMaxIndexValue31: number = 0;\n    var currentMaxIndexValue32:\
    \ number = 0;\n    var currentMaxIndexValue33: number = 0;\n    var currentMaxIndexValue34:\
    \ number = 0;\n    var currentMaxIndexValue35: number = 0;\n    var currentMaxIndexValue36:\
    \ number = 0;\n    var currentMaxIndexValue37: number = 0;\n    var currentMaxIndexValue38:\
    \ number = 0;\n    var currentMaxIndexValue39: number = 0;\n    var currentMaxIndexValue40:\
    \ number = 0;\n    var currentMaxIndexValue41: number = 0;\n    var currentMaxIndexValue42:\
    \ number = 0;\n    var currentMaxIndexValue43: number = 0;\n    var currentMaxIndexValue44:\
    \ number = 0;\n    var currentMaxIndexValue45: number = 0;\n    var currentMaxIndexValue46:\
    \ number = 0;\n    var currentMaxIndexValue47: number = 0;\n    var currentMaxIndexValue48:\
    \ number = 0;\n    var currentMaxIndexValue49: \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr0mpnlrj.ts(57,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpr0mpnlrj.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    for (var i = 0; i < numbers.length; i++) {\n   \
    \     if (rolling_max < numbers[i]) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (var i = rolling_max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp0dhc31kc.js:22:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0dhc31kc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = numbers[0];\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1rux0w3m.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1rux0w3m.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let rolling_max:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8kibkajw.ts(62,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp8kibkajw.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpyuxm5s3o.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyuxm5s3o.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = numbers[0];\n    let currentMaxIndex: number = 0;\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n           \
    \ currentMax = numbers[i];\n            currentMaxIndex = i;\n        }\n    }\n\
    \    result.push(currentMax);\n    result.push(currentMaxIndex);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7y9ifxfw.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7y9ifxfw.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    let index: number = numbers.length;\n    for (let i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n            index = i;\n        }\n    }\n    for (let i = index;\
    \ i >= 0; i--) {\n        result.unshift(numbers[i]);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpycb51o_a.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpycb51o_a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_element: number[] = [];\n    let current_max:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > current_max) {\n            max_element.push(numbers[i]);\n            current_max\
    \ = numbers[i];\n        }\n    }\n    return max_element;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpwgs8elwe.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwgs8elwe.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var rolling_max\
    \ = 0;\n    var rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n        }\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(rolling_max);\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmplli__b3e.js:33:12)\n   \
    \ at Object.<anonymous> (/tmp/tmplli__b3e.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = numbers[0];\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    result.push(max);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf6ac_t2n.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf6ac_t2n.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008677
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_element: number[] = [];\n    let max_index:\
    \ number[] = [];\n    let max_value: number = 0;\n    let max_index1: number =\
    \ 0;\n    let max_value1: number = 0;\n    let max_index2: number = 0;\n    let\
    \ max_value2: number = 0;\n    let max_index3: number = 0;\n    let max_value3:\
    \ number = 0;\n    let max_index4: number = 0;\n    let max_value4: number = 0;\n\
    \    let max_index5: number = 0;\n    let max_value5: number = 0;\n    let max_index6:\
    \ number = 0;\n    let max_value6: number = 0;\n    let max_index7: number = 0;\n\
    \    let max_value7: number = 0;\n    let max_index8: number = 0;\n    let max_value8:\
    \ number = 0;\n    let max_index9: number = 0;\n    let max_value9: number = 0;\n\
    \    let max_index10: number = 0;\n    let max_value10: number = 0;\n    let max_index11:\
    \ number = 0;\n    let max_value11: number = 0;\n    let max_index12: number =\
    \ 0;\n    let max_value12: number = 0;\n    let max_index13: number = 0;\n   \
    \ let max_value13: number = 0;\n    let max_index14: number = 0;\n    let max_value14:\
    \ number = 0;\n    let max_index15: number = 0;\n    let max_value15: number =\
    \ 0;\n    let max_index16: number = 0;\n    let max_value16: number = 0;\n   \
    \ let max_index17: number = 0;\n    let max_value17: number = 0;\n    let max_index18:\
    \ number = 0;\n    let max_value18: number = 0;\n    let max_index19: number =\
    \ 0;\n    let max_value19: number = 0;\n    let max_index20: number = 0;\n   \
    \ let max_value20: number = 0;\n    let max_index21: number = 0;\n    let max_value21:\
    \ number = 0;\n    let max_index22: number = 0;\n    let max_value22: number =\
    \ 0;\n    let max_index23: number = 0;\n    let max_value23: number = 0;\n   \
    \ let max_index24: number = 0;\n    let max_value24: number = 0;\n    let max_index25:\
    \ number = 0;\n    let max_value25: number = 0;\n    let max_index26: number =\
    \ 0;\n    let max_value26: number = 0;\n    let max_index27: number = 0;\n   \
    \ let max_value27: number = 0;\n    let max_index28: number = 0;\n    let max_value28:\
    \ number = 0;\n    let max_index29: number = 0;\n    let max_value29: number =\
    \ 0;\n    let max_index30: number = 0;\n    let max_value30: number = 0;\n   \
    \ let max_index31: number = 0;\n    let max_value31: number = 0;\n    let max_index32:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyqbi771y.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpyqbi771y.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_maxes: number[] = [];\n    let max_element:\
    \ number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    rolling_maxes.push(max_element);\n\
    \    for (let i = max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n        rolling_maxes.push(max_element);\n    }\n    return\
    \ rolling_maxes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpz5byy3b4.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpz5byy3b4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let currentMax = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpe5x8892o.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe5x8892o.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var currentMax\
    \ = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            currentMax = i;\n     \
    \   }\n    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmphearephh.js:19:12)\n   \
    \ at Object.<anonymous> (/tmp/tmphearephh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n        }\n    }\n\
    \    result.push(rolling_max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp96x4vjdm.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp96x4vjdm.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnmoumfrq.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpyuxm5s3o.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyuxm5s3o.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_value: number = 0;\n    var max_rolling_number_index:\
    \ number = 0;\n    var max_rolling_number_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnmoumfrq.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_number:\
    \ number = numbers[0];\n    let max_index: number = numbers.length - 1;\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n            max_index = i;\n      \
    \  }\n    }\n    rolling_max = [max_number];\n    for (let i = max_index; i >=\
    \ 0; i--) {\n        rolling_max[i] = Math.max(rolling_max[i - 1], numbers[i]);\n\
    \    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8l2bw316.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8l2bw316.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy8opn6mn.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpyuxm5s3o.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyuxm5s3o.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let index\
    \ = 0;\n    while (index < numbers.length) {\n        if (numbers[index] > max)\
    \ {\n            max = numbers[index];\n        }\n        index++;\n    }\n \
    \   for (let i = index; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpq3mhxg9f.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq3mhxg9f.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_number = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_number) {\n            max_number = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    result.push(max_number);\n  \
    \  for (var i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9q_wj2rt.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9q_wj2rt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_number = numbers[0];\n\
    \    var max_index = 0;\n    var i;\n    for (i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push(max_number);\n\
    \    for (i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpiga66j2l.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiga66j2l.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008677
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_numbers: number[] = [];\n    let\
    \ rolling_max_numbers_length: number[] = [];\n    let rolling_max_numbers_length_index:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index: number[] = [];\n    let rolling_max_numbers_length_index_max_index2:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index3: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index4: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index5: number[] = [];\n    let\
    \ rolling_max_numbers_length_index_max_index6: number[] = [];\n    let rolling_max_numbers_length_index_max_index7:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index8: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index9: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index10: number[] = [];\n    let\
    \ rolling_max_numbers_length_index_max_index11: number[] = [];\n    let rolling_max_numbers_length_index_max_index12:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index13: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index14: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index15: number[] = [];\n    let\
    \ rolling_max_numbers_length_index_max_index16: number[] = [];\n    let rolling_max_numbers_length_index_max_index17:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index18: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index19: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index20: number[] = [];\n    let\
    \ rolling_max_numbers_length_index_max_index21: number[] = [];\n    let rolling_max_numbers_length_index_max_index22:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index23: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index24: number[] = [];\n\
    \    let rolling_max_numbers_length_index_max_index25: number[] = [];\n    let\
    \ rolling_max_numbers_length_index_max_index26: number[] = [];\n    let rolling_max_numbers_length_index_max_index27:\
    \ number[] = [];\n    let rolling_max_numbers_length_index_max_index28: number[]\
    \ = [];\n    let rolling_max_numbers_length_index_max_index29: number[] = [];\n\
    \    let rolling_max_number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeej8v01h.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008680
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n        }\n    }\n\
    \    result.push(rolling_max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp96x4vjdm.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp96x4vjdm.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = numbers[0];\n\
    \    var rolling_max_index = 0;\n    var rolling_max_value = rolling_max;\n  \
    \  for(var i = 1; i < numbers.length; i++) {\n        if(numbers[i] > rolling_max)\
    \ {\n            rolling_max = numbers[i];\n            rolling_max_index = i;\n\
    \            rolling_max_value = rolling_max;\n        }\n    }\n    result.push(rolling_max);\n\
    \    result.push(rolling_max_index);\n    result.push(rolling_max_value);\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0,\n  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpnh34_fbm.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnh34_fbm.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0, undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max_value = numbers[0];\n\
    \    let max_index = -1;\n    for (let i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max_value) {\n            max_value = numbers[i];\n   \
    \         max_index = i;\n        }\n    }\n    result.push(max_value);\n    for\
    \ (let i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpmp89vqcl.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmp89vqcl.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max_number = numbers[0];\n\
    \    let max_index = 0;\n    for (let i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_number) {\n            max_number = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for (let i = max_index; i < numbers.length;\
    \ i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpt_vmzef3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt_vmzef3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sr8ls1v.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_element:\
    \ number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max_element) {\n            rolling_max[max_index]\
    \ = numbers[i];\n        }\n    }\n    return rolling_max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpyn8ned0o.js:24:12)\n    at Object.<anonymous> (/tmp/tmpyn8ned0o.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items>, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_element: number[] = [];\n    let rolling_max_element:\
    \ number[] = [];\n    let current_max_element: number = 0;\n    let current_rolling_max_element:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > current_max_element) {\n            current_max_element = numbers[i];\n  \
    \      }\n        if (numbers[i] > current_rolling_max_element) {\n          \
    \  current_rolling_max_element = numbers[i];\n        }\n    }\n    max_element.push(current_max_element);\n\
    \    rolling_max_element.push(current_rolling_max_element);\n    return max_element;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpf91laak3.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpf91laak3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = numbers[0];\n   \
    \ var rolling_max = 0;\n    for (var i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            rolling_max = max;\n            max =\
    \ numbers[i];\n        } else {\n            rolling_max = numbers[i];\n     \
    \   }\n        result.push(rolling_max);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmp8bvzi8ir.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8bvzi8ir.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let index\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            index = i;\n        }\n\
    \    }\n    result.push(max);\n    for (let i = index + 1; i < numbers.length;\
    \ i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp0doji__l.js:22:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0doji__l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var currentMax: number\
    \ = 0;\n    var currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[currentIndex];\n        }\n        currentIndex++;\n\
    \    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpxxt3p3l6.js:20:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpxxt3p3l6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = numbers[0];\n    let currentMaxIndex: number = 0;\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n           \
    \ currentMax = numbers[i];\n            currentMaxIndex = i;\n        }\n    }\n\
    \    result.push(currentMax);\n    for (let i = currentMaxIndex + 1; i < numbers.length;\
    \ i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9ol9s_d2.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ol9s_d2.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sr8ls1v.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_element: number[] = [];\n    let max_index:\
    \ number[] = [];\n    let current_index: number[] = [];\n    let current_element:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        current_element.push(numbers[i]);\n\
    \        if (current_element.length > max_element.length) {\n            max_element\
    \ = current_element;\n            max_index = current_index;\n        }\n    \
    \    current_index = [];\n        current_element = [];\n    }\n    return max_element;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwfs0rfzn.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwfs0rfzn.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sr8ls1v.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    result.push(rolling_max);\n\
    \    for (i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n        }\n    }\n\
    \    result.push(rolling_max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp96x4vjdm.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp96x4vjdm.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmprm79s9t0.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmprm79s9t0.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let currentMax\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            currentMax = i;\n     \
    \   }\n    }\n    for (let i = currentMax + 1; i < numbers.length; i++) {\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (let i = currentMax; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpq695m1ri.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq695m1ri.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let currentMax = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpe5x8892o.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe5x8892o.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let rolling_max = 0;\n    numbers.forEach((num)\
    \ => {\n        if (num > rolling_max) {\n            rolling_max = num;\n   \
    \     }\n    });\n    numbers.forEach((num) => {\n        if (num > rolling_max)\
    \ {\n            result.push(num);\n        }\n    });\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpgluyrv9a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgluyrv9a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_numbers: number[] = [];\n    let\
    \ max_rolling_numbers_length: number = 0;\n    let max_rolling_numbers_value:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (max_rolling_numbers_length\
    \ < numbers[i]) {\n            max_rolling_numbers_length = numbers[i];\n    \
    \        max_rolling_numbers_value = numbers[i];\n        }\n        if (max_rolling_numbers_length\
    \ == numbers[i]) {\n            max_rolling_numbers_value = Math.max(max_rolling_numbers_value,\
    \ numbers[i]);\n        }\n    }\n    max_rolling_numbers.push(max_rolling_numbers_value);\n\
    \    return max_rolling_numbers;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmph9nzgc77.js:22:12)\n   \
    \ at Object.<anonymous> (/tmp/tmph9nzgc77.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max: number =\
    \ 0;\n    var index: number = 0;\n    while (index < numbers.length) {\n     \
    \   if (numbers[index] > max) {\n            max = numbers[index];\n        }\n\
    \        index++;\n    }\n    for (var i = index; i < numbers.length; i++) {\n\
    \        result.push(numbers[i]);\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpn5hje9tn.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn5hje9tn.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_array: number[] = [];\n    let\
    \ max_element: number = 0;\n    let max_index: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max_element) {\n      \
    \      max_element = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for (let i = max_index; i < numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n\
    \    }\n    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbnt4yc34.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbnt4yc34.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = numbers[0];\n   \
    \ for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    result.push(max);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpcfnrguq6.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcfnrguq6.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    numbers.forEach(function(number)\
    \ {\n        if (number > max) {\n            max = number;\n        }\n    });\n\
    \    numbers.forEach(function(number) {\n        if (number > max) {\n       \
    \     result.push(max);\n            max = number;\n        }\n    });\n    result.push(max);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpw_pvbhxz.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpw_pvbhxz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008681
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sr8ls1v.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index2: number[] = [];\n    var rolling_max_value2:\
    \ number[] = [];\n    var rolling_max_index3: number[] = [];\n    var rolling_max_value3:\
    \ number[] = [];\n    var rolling_max_index4: number[] = [];\n    var rolling_max_value4:\
    \ number[] = [];\n    var rolling_max_index5: number[] = [];\n    var rolling_max_value5:\
    \ number[] = [];\n    var rolling_max_index6: number[] = [];\n    var rolling_max_value6:\
    \ number[] = [];\n    var rolling_max_index7: number[] = [];\n    var rolling_max_value7:\
    \ number[] = [];\n    var rolling_max_index8: number[] = [];\n    var rolling_max_value8:\
    \ number[] = [];\n    var rolling_max_index9: number[] = [];\n    var rolling_max_value9:\
    \ number[] = [];\n    var rolling_max_index10: number[] = [];\n    var rolling_max_value10:\
    \ number[] = [];\n    var rolling_max_index11: number[] = [];\n    var rolling_max_value11:\
    \ number[] = [];\n    var rolling_max_index12: number[] = [];\n    var rolling_max_value12:\
    \ number[] = [];\n    var rolling_max_index13: number[] = [];\n    var rolling_max_value13:\
    \ number[] = [];\n    var rolling_max_index14: number[] = [];\n    var rolling_max_value14:\
    \ number[] = [];\n    var rolling_max_index15: number[] = [];\n    var rolling_max_value15:\
    \ number[] = [];\n    var rolling_max_index16: number[] = [];\n    var rolling_max_value16:\
    \ number[] = [];\n    var rolling_max_index17: number[] = [];\n    var rolling_max_value17:\
    \ number[] = [];\n    var rolling_max_index18: number[] = [];\n    var rolling_max_value18:\
    \ number[] = [];\n    var rolling_max_index19: number[] = [];\n    var rolling_max_value19:\
    \ number[] = [];\n    var rolling_max_index20: number[] = [];\n    var rolling_max_value20:\
    \ number[] = [];\n    var rolling_max_index21: number[] = [];\n    var rolling_max_value21:\
    \ number[] = [];\n    var rolling_max_index22: number[] = [];\n    var rolling_max_value22:\
    \ number[] = [];\n    var rolling_max_index23: number[] = [];\n    var rolling_max_value23:\
    \ number[] = [];\n    var roll\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8t8cchma.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_maxes: number[] = [];\n    let rolling_max:\
    \ number;\n    for (let i = 0; i < numbers.length; i++) {\n        rolling_max\
    \ = Math.max(rolling_max, numbers[i]);\n        rolling_maxes.push(rolling_max);\n\
    \    }\n    return rolling_maxes;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmp_lpyqlc4.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_lpyqlc4.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_element = numbers[0];\n\
    \    var max_index = -1;\n    for (var i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push(max_element);\n\
    \    for (var i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpeuvqgerg.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeuvqgerg.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplijbs6_3.ts(62,9): error TS1005: '','' expected.

    ../../../../../tmp/tmplijbs6_3.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008685
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_element: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index2: number[] = [];\n    var rolling_max_value2:\
    \ number[] = [];\n    var rolling_max_index3: number[] = [];\n    var rolling_max_value3:\
    \ number[] = [];\n    var rolling_max_index4: number[] = [];\n    var rolling_max_value4:\
    \ number[] = [];\n    var rolling_max_index5: number[] = [];\n    var rolling_max_value5:\
    \ number[] = [];\n    var rolling_max_index6: number[] = [];\n    var rolling_max_value6:\
    \ number[] = [];\n    var rolling_max_index7: number[] = [];\n    var rolling_max_value7:\
    \ number[] = [];\n    var rolling_max_index8: number[] = [];\n    var rolling_max_value8:\
    \ number[] = [];\n    var rolling_max_index9: number[] = [];\n    var rolling_max_value9:\
    \ number[] = [];\n    var rolling_max_index10: number[] = [];\n    var rolling_max_value10:\
    \ number[] = [];\n    var rolling_max_index11: number[] = [];\n    var rolling_max_value11:\
    \ number[] = [];\n    var rolling_max_index12: number[] = [];\n    var rolling_max_value12:\
    \ number[] = [];\n    var rolling_max_index13: number[] = [];\n    var rolling_max_value13:\
    \ number[] = [];\n    var rolling_max_index14: number[] = [];\n    var rolling_max_value14:\
    \ number[] = [];\n    var rolling_max_index15: number[] = [];\n    var rolling_max_value15:\
    \ number[] = [];\n    var rolling_max_index16: number[] = [];\n    var rolling_max_value16:\
    \ number[] = [];\n    var rolling_max_index17: number[] = [];\n    var rolling_max_value17:\
    \ number[] = [];\n    var rolling_max_index18: number[] = [];\n    var rolling_max_value18:\
    \ number[] = [];\n    var rolling_max_index19: number[] = [];\n    var rolling_max_value19:\
    \ number[] = [];\n    var rolling_max_index20: number[] = [];\n    var rolling_max_value20:\
    \ number[] = [];\n    var rolling_max_index21: number[] = [];\n    var rolling_max_value21:\
    \ number[] = [];\n    var rolling_max_index22: number[] = [];\n    var rolling_max_value22:\
    \ number[] = [];\n    var rolling_max_index23: number[] = [];\n    var rolling_max_value23:\
    \ number[] = [];\n    var \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsw258kl6.ts(53,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpsw258kl6.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008685
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_rolling_max:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_rolling_max_value:\
    \ number[] = [];\n    let max_rolling_max_index: number[] = [];\n    let max_roll\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjabokyir.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008685
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_length: number = 0;\n    var current_rolling_numbers: number[]\
    \ = [];\n    var current_rolling_numbers_length: number = 0;\n    var current_rolling_numbers_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value: number = 0;\n    var\
    \ current_rolling_numbers_max_value_length: number = 0;\n    var current_rolling_numbers_max_value_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value: number = 0;\n\
    \    var current_rolling_numbers_max_value_max_value_length: number = 0;\n   \
    \ var current_rolling_numbers_max_value_max_value_max_index: number = 0;\n   \
    \ var current_rolling_numbers_max_value_max_value_max_value: number = 0;\n   \
    \ var current_rolling_numbers_max_value_max_value_max_value_length: number = 0;\n\
    \    var current_rolling_numbers_max_value_max_value_max_value_max_index: number\
    \ = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_length:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_length:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_length:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value_length:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_value_length:\
    \ number = 0;\n    var current_rolling_numbers_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_value_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppnc7n5d9.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpy2dvn_dm.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy2dvn_dm.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var currentMax = numbers[0];\n\
    \    var currentMaxIndex = 0;\n    var currentMaxIndexes = [];\n    var currentMaxIndexesCount\
    \ = 0;\n    var currentMaxIndexesCountMax = numbers.length;\n    var currentMaxIndexesCountMaxIndex\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexes = [];\n    var currentMaxIndexesCountMaxIndexesCount\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexesCountMax = numbers.length;\n \
    \   var currentMaxIndexesCountMaxIndexesCountMaxIndex = 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexes\
    \ = [];\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCount = 0;\n \
    \   var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMax = numbers.length;\n\
    \    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndex = 0;\n \
    \   var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexes = [];\n\
    \    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCount =\
    \ 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMax\
    \ = numbers.length;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndex\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexes\
    \ = [];\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCount\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMax\
    \ = numbers.length;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndex\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexes\
    \ = [];\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMax\
    \ = numbers.length;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndex\
    \ = 0;\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexes\
    \ = [];\n    var currentMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMaxIndexesCountMax\
    \ = numbers.length;\n    var \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5975qpjt.ts(33,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp5975qpjt.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max_element = numbers[0];\n\
    \    let current_max = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i];\n\
    \        }\n        if (numbers[i] > max_element) {\n            max_element =\
    \ numbers[i];\n        }\n    }\n    result.push(max_element);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpod71ujrf.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpod71ujrf.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_numbers: number[] = [];\n    let\
    \ max_rolling_numbers_length: number[] = [];\n    let max_rolling_numbers_sum:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length: number[] = [];\n   \
    \ let max_rolling_numbers_sum_length2: number[] = [];\n    let max_rolling_numbers_sum_length3:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length4: number[] = [];\n  \
    \  let max_rolling_numbers_sum_length5: number[] = [];\n    let max_rolling_numbers_sum_length6:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length7: number[] = [];\n  \
    \  let max_rolling_numbers_sum_length8: number[] = [];\n    let max_rolling_numbers_sum_length9:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length10: number[] = [];\n \
    \   let max_rolling_numbers_sum_length11: number[] = [];\n    let max_rolling_numbers_sum_length12:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length13: number[] = [];\n \
    \   let max_rolling_numbers_sum_length14: number[] = [];\n    let max_rolling_numbers_sum_length15:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length16: number[] = [];\n \
    \   let max_rolling_numbers_sum_length17: number[] = [];\n    let max_rolling_numbers_sum_length18:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length19: number[] = [];\n \
    \   let max_rolling_numbers_sum_length20: number[] = [];\n    let max_rolling_numbers_sum_length21:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length22: number[] = [];\n \
    \   let max_rolling_numbers_sum_length23: number[] = [];\n    let max_rolling_numbers_sum_length24:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length25: number[] = [];\n \
    \   let max_rolling_numbers_sum_length26: number[] = [];\n    let max_rolling_numbers_sum_length27:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length28: number[] = [];\n \
    \   let max_rolling_numbers_sum_length29: number[] = [];\n    let max_rolling_numbers_sum_length30:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length31: number[] = [];\n \
    \   let max_rolling_numbers_sum_length32: number[] = [];\n    let max_rolling_numbers_sum_length33:\
    \ number[] = [];\n    let max_rolling_numbers_sum_length34: number[] = [];\n \
    \   let max_rolling_numbers_sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwmcvyis4.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = numbers[0];\n    let currentMaxIndex: number = 0;\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n           \
    \ currentMax = numbers[i];\n            currentMaxIndex = i;\n        }\n    }\n\
    \    result.push(currentMax);\n    result.push(currentMaxIndex);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7y9ifxfw.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7y9ifxfw.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let currentMax\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            currentMax = max;\n   \
    \     }\n        else if (numbers[i] === max) {\n            currentMax = numbers[i];\n\
    \        }\n        result.push(currentMax);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_arr: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max_number) {\n            rolling_max_number = numbers[i];\n    \
    \    }\n    }\n    rolling_max_arr.push(rolling_max_number);\n    return rolling_max_arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpd7wmxq2d.js:17:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpd7wmxq2d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_element:\
    \ number = 0;\n    let current_element: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        current_element = numbers[i];\n        if (current_element >\
    \ max_element) {\n            rolling_max = [];\n            rolling_max.push(current_element);\n\
    \            max_element = current_element;\n        } else {\n            rolling_max.push(current_element);\n\
    \        }\n    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpmjistvt6.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmjistvt6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_max: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[] = [];\n    var rolling_max_value:\
    \ number[] = [];\n    var rolling_max_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5c7s0_kq.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwy1hqmb3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy1hqmb3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_number = numbers[0];\n\
    \    var max_index = -1;\n    for (var i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max_number) {\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    result.push(max_number);\n \
    \   for (var i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpd3xqvm5o.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd3xqvm5o.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwy1hqmb3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy1hqmb3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var rolling_max\
    \ = 0;\n    var rolling_max_index = 0;\n    var i;\n    for (i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max) {\n            rolling_max = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    result.push(rolling_max);\n\
    \    result.push(rolling_max_index);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpo7bgrnk3.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo7bgrnk3.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_element: number[] = [];\n    var max_index:\
    \ number[] = [];\n    var max_value: number;\n    var i: number;\n    var j: number;\n\
    \    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n\
    \    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n\
    \    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n\
    \    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n\
    \    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n\
    \    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n\
    \    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n\
    \    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n\
    \    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n\
    \    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n\
    \    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n\
    \    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n\
    \    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n\
    \    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n\
    \    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n\
    \    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n\
    \    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n\
    \    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n\
    \    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n\
    \    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n\
    \    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n\
    \    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n\
    \    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n\
    \    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n\
    \    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n\
    \    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n\
    \    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n\
    \    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n\
    \    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n\
    \    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n\
    \    var a: number;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjbnoylng.ts(143,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_list: number[] = [];\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_value: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_index == numbers.length - 1)\
    \ {\n            rolling_max_list.push(rolling_max_value);\n            rolling_max_index\
    \ = 0;\n            rolling_max_value = 0;\n        } else {\n            rolling_max_value\
    \ = Math.max(numbers[i], rolling_max_value);\n            rolling_max_index++;\n\
    \        }\n    }\n    return rolling_max_list;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1je3mhes.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1je3mhes.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let currentMax = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpe5x8892o.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe5x8892o.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let \n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgkowfnrj.ts(56,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpgkowfnrj.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let rolling_max:\
    \ number[] = [];\n    let current_max: number = 0;\n    let current_rolling_max:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > current_max) {\n            current_max = numbers[i];\n            current_rolling_max\
    \ = rolling_max[rolling_max.length - 1];\n        }\n        if (numbers[i] >\
    \ current_rolling_max) {\n            rolling_max.push(numbers[i]);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp3qdiztcw.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3qdiztcw.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_numbers: number[] = [];\n    let\
    \ max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ number[] = [];\n    let max_rolling_numbers_index: number[] = [];\n    let max_rolling_numbers_value:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmgwj9o59.ts(51,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpmgwj9o59.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let current_max:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > current_max) {\n            rolling_max.push(current_max);\n            current_max\
    \ = numbers[i];\n        } else {\n            current_max = Math.max(current_max,\
    \ numbers[i]);\n        }\n    }\n    rolling_max.push(current_max);\n    return\
    \ rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpo931ucrk.js:21:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpo931ucrk.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_index2: number[] = [];\n    let max_rolling_number_index3:\
    \ number[] = [];\n    let max_rolling_number_index4: number[] = [];\n    let max_rolling_number_index5:\
    \ number[] = [];\n    let max_rolling_number_index6: number[] = [];\n    let max_rolling_number_index7:\
    \ number[] = [];\n    let max_rolling_number_index8: number[] = [];\n    let max_rolling_number_index9:\
    \ number[] = [];\n    let max_rolling_number_index10: number[] = [];\n    let\
    \ max_rolling_number_index11: number[] = [];\n    let max_rolling_number_index12:\
    \ number[] = [];\n    let max_rolling_number_index13: number[] = [];\n    let\
    \ max_rolling_number_index14: number[] = [];\n    let max_rolling_number_index15:\
    \ number[] = [];\n    let max_rolling_number_index16: number[] = [];\n    let\
    \ max_rolling_number_index17: number[] = [];\n    let max_rolling_number_index18:\
    \ number[] = [];\n    let max_rolling_number_index19: number[] = [];\n    let\
    \ max_rolling_number_index20: number[] = [];\n    let max_rolling_number_index21:\
    \ number[] = [];\n    let max_rolling_number_index22: number[] = [];\n    let\
    \ max_rolling_number_index23: number[] = [];\n    let max_rolling_number_index24:\
    \ number[] = [];\n    let max_rolling_number_index25: number[] = [];\n    let\
    \ max_rolling_number_index26: number[] = [];\n    let max_rolling_number_index27:\
    \ number[] = [];\n    let max_rolling_number_index28: number[] = [];\n    let\
    \ max_rolling_number_index29: number[] = [];\n    let max_rolling_number_index30:\
    \ number[] = [];\n    let max_rolling_number_index31: number[] = [];\n    let\
    \ max_rolling_number_index32: number[] = [];\n    let max_rolling_number_index33:\
    \ number[] = [];\n    let max_rolling_number_index34: number[] = [];\n    let\
    \ max_rolling_number_index35: number[] = [];\n    let max_rolling_number_index36:\
    \ number[] = [];\n    let max_rolling_number_index37: number[] = [];\n    let\
    \ max_rolling_number_index38: number[] = [];\n    let max_rolling_number_index39:\
    \ number[] = [];\n    let max_rolling_number_index40: number[] = [];\n    let\
    \ max_rolling_number_index41: number[] = [];\n    let max_rolling_number_index42:\
    \ number[] = [];\n    let max_roll\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2va917k3.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max: number =\
    \ 0;\n    numbers.forEach(function (num) {\n        if (num > max) {\n       \
    \     max = num;\n        }\n    });\n    numbers.forEach(function (num) {\n \
    \       if (num > max) {\n            result.push(num);\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpmny0k_5v.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmny0k_5v.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let currentMax = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpa9p6r6e4.js:21:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpa9p6r6e4.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = numbers[0];\n   \
    \ var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push(max);\n    for (var i = max_index +\
    \ 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpio3es1za.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpio3es1za.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008689
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var current_max = 0;\n    var current_max_index\
    \ = 0;\n    var i;\n    for (i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max) {\n            rolling_max = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    for (i = numbers.length - 1; i >= 0; i--) {\n  \
    \      if (numbers[i] > current_max) {\n            current_max = numbers[i];\n\
    \            current_max_index = i;\n        }\n        if (current_max > rolling_max)\
    \ {\n            result.push(rolling_max);\n            rolling_max = current_max;\n\
    \            rolling_max_index = current_max_index;\n            current_max =\
    \ 0;\n            current_max_index = 0;\n        }\n    }\n    if (current_max\
    \ > rolling_max) {\n        result.push(rolling_max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpl8rf4pw2.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl8rf4pw2.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let rolling_max:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        let\
    \ max_number = numbers[i];\n        let max_index = i;\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            if (numbers[j] > max_number) {\n\
    \                max_number = numbers[j];\n                max_index = j;\n  \
    \          }\n        }\n        rolling_max.push(max_number);\n        result.push(max_number);\n\
    \        numbers[max_index] = numbers[i];\n        numbers.splice(i, 1);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp11jqkvcx.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp11jqkvcx.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_numbers: number[] = [];\n    let\
    \ max_rolling_numbers_length: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (max_rolling_numbers_length < numbers[i]) {\n           \
    \ max_rolling_numbers_length = numbers[i];\n            max_rolling_numbers =\
    \ [numbers[i]];\n        }\n        max_rolling_numbers.push(numbers[i]);\n  \
    \  }\n    return max_rolling_numbers;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpxuxdbsrp.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxuxdbsrp.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = numbers[0];\n    let currentMaxIndex: number = 0;\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n           \
    \ currentMax = numbers[i];\n            currentMaxIndex = i;\n        }\n    }\n\
    \    result.push(currentMax);\n    for (let i = currentMaxIndex + 1; i < numbers.length;\
    \ i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9ol9s_d2.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ol9s_d2.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008682
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var rolling_max:\
    \ number[] = [];\n    var current_max: number = 0;\n    var current_number: number\
    \ = 0;\n    var current_rolling_max: number = 0;\n    var current_rolling_number:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_index:\
    \ number = 0;\n    var current_rolling_max_index: number = 0;\n    var current_rolling_number_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm9iy09tc.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008690
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_element:\
    \ number = 0;\n    let current_max_element: number = 0;\n    let current_index:\
    \ number = 0;\n    let current_number: number = 0;\n    let max_index: number\
    \ = 0;\n    let max_number: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        current_number = numbers[i];\n        if (current_max_element\
    \ < current_number) {\n            rolling_max[current_index] = current_max_element;\n\
    \            current_max_element = current_number;\n            current_index++;\n\
    \        } else {\n            current_max_element = current_number;\n       \
    \ }\n    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmprlx9ntt0.js:28:12)\n    at Object.<anonymous> (/tmp/tmprlx9ntt0.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_numbers: number[] = [];\n    let\
    \ max_rolling_numbers_index = 0;\n    let max_rolling_numbers_value = numbers[0];\n\
    \    let max_rolling_numbers_index2 = 0;\n    let max_rolling_numbers_value2 =\
    \ numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_rolling_numbers_value) {\n            max_rolling_numbers_value = numbers[i];\n\
    \            max_rolling_numbers_index = i;\n        }\n        if (numbers[i]\
    \ > max_rolling_numbers_value2) {\n            max_rolling_numbers_value2 = numbers[i];\n\
    \            max_rolling_numbers_index2 = i;\n        }\n    }\n    max_rolling_numbers.push(max_rolling_numbers_value);\n\
    \    max_rolling_numbers.push(max_rolling_numbers_value2);\n    max_rolling_numbers.push(max_rolling_numbers_index);\n\
    \    max_rolling_numbers.push(max_rolling_numbers_index2);\n    return max_rolling_numbers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpnzyh7k0g.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnzyh7k0g.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, 0, 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    let rolling_max_found = false;\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_value)\
    \ {\n            rolling_max_value = numbers[i];\n            rolling_max_found\
    \ = false;\n        }\n        else if (numbers[i] == rolling_max_value) {\n \
    \           rolling_max_found = true;\n        }\n        if (rolling_max_found)\
    \ {\n            rolling_max_array[rolling_max_index] = rolling_max_value;\n \
    \           rolling_max_index++;\n        }\n    }\n    return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp80wj69dd.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp80wj69dd.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_index = 0;\n    var current_rolling_numbers_index = 0;\n\
    \    var current_rolling_numbers_value = 0;\n    var current_rolling_numbers_value_max\
    \ = 0;\n    var current_rolling_numbers_value_max_index = 0;\n    var current_rolling_numbers_value_min\
    \ = 0;\n    var current_rolling_numbers_value_min_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_rolling_numbers_value_sum_index = 0;\n    var current_rolling_numbers_value_count\
    \ = 1;\n    var current_rolling_numbers_value_count_index = 0;\n    var current_rolling_numbers_value_sum\
    \ = 0;\n    var current_roll\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfwq0vaai.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008690
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let currentMax\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            currentMax = max;\n   \
    \     }\n        if (numbers[i] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[i];\n        }\n    }\n    if (currentMax !=\
    \ max) {\n        result.push(currentMax);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpk3ddv5lt.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk3ddv5lt.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_max = [];\n    var max_rolling_max_index\
    \ = 0;\n    var rolling_max_index = 0;\n    var rolling_max_value = 0;\n    var\
    \ rolling_max_count = 0;\n    var rolling_max_sum = 0;\n    var rolling_max_max_index\
    \ = 0;\n    var rolling_max_max_value = 0;\n    var rolling_max_max_count = 0;\n\
    \    var rolling_max_max_sum = 0;\n    var rolling_max_min_index = 0;\n    var\
    \ rolling_max_min_value = 0;\n    var rolling_max_min_count = 0;\n    var rolling_max_min_sum\
    \ = 0;\n    var rolling_max_min_value_index = 0;\n    var rolling_max_min_value_index2\
    \ = 0;\n    var rolling_max_min_value_index3 = 0;\n    var rolling_max_min_value_index4\
    \ = 0;\n    var rolling_max_min_value_index5 = 0;\n    var rolling_max_min_value_index6\
    \ = 0;\n    var rolling_max_min_value_index7 = 0;\n    var rolling_max_min_value_index8\
    \ = 0;\n    var rolling_max_min_value_index9 = 0;\n    var rolling_max_min_value_index10\
    \ = 0;\n    var rolling_max_min_value_index11 = 0;\n    var rolling_max_min_value_index12\
    \ = 0;\n    var rolling_max_min_value_index13 = 0;\n    var rolling_max_min_value_index14\
    \ = 0;\n    var rolling_max_min_value_index15 = 0;\n    var rolling_max_min_value_index16\
    \ = 0;\n    var rolling_max_min_value_index17 = 0;\n    var rolling_max_min_value_index18\
    \ = 0;\n    var rolling_max_min_value_index19 = 0;\n    var rolling_max_min_value_index20\
    \ = 0;\n    var rolling_max_min_value_index21 = 0;\n    var rolling_max_min_value_index22\
    \ = 0;\n    var rolling_max_min_value_index23 = 0;\n    var rolling_max_min_value_index24\
    \ = 0;\n    var rolling_max_min_value_index25 = 0;\n    var rolling_max_min_value_index26\
    \ = 0;\n    var rolling_max_min_value_index27 = 0;\n    var rolling_max_min_value_index28\
    \ = 0;\n    var rolling_max_min_value_index29 = 0;\n    var rolling_max_min_value_index30\
    \ = 0;\n    var rolling_max_min_value_index31 = 0;\n    var rolling_max_min_value_index32\
    \ = 0;\n    var rolling_max_min_value_index33 = 0;\n    var rolling_max_min_value_index34\
    \ = 0;\n    var rolling_max_min_value_index35 = 0;\n    var rolling_max_min_value_index36\
    \ = 0;\n    var rolling_max_min_value_index37 = 0;\n    var rolling_max_min_value_index38\
    \ = 0;\n    var rolling_max_min_value_index39 = 0;\n    var rolling_max_min_value_index40\
    \ = 0;\n    var rolling_max_min_value_index41 = 0;\n    var rolling_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp630hgyxf.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwy1hqmb3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy1hqmb3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\n    var max_rolling_number_index_index:\
    \ number[] = [];\n    var max_rolling_number_index_index: number[] = [];\n   \
    \ var max_rolling_number_index_index: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sr8ls1v.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008681
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var rolling_max_value = 0;\n    numbers.forEach(function(value,\
    \ index) {\n        if (rolling_max_index != index) {\n            rolling_max_value\
    \ = value;\n            rolling_max_index = index;\n        }\n        if (value\
    \ > rolling_max_value) {\n            rolling_max_value = value;\n           \
    \ rolling_max_index = index;\n        }\n    });\n    result.push(rolling_max_value);\n\
    \    result.push(rolling_max_index);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmph3r13nlx.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmph3r13nlx.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    let rolling_max_count = 0;\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_value)\
    \ {\n            rolling_max_value = numbers[i];\n            rolling_max_index\
    \ = i;\n            rolling_max_count = 1;\n        } else {\n            rolling_max_count++;\n\
    \        }\n        if (rolling_max_count > rolling_max_count) {\n           \
    \ rolling_max = [rolling_max_value];\n            rolling_max_index = i;\n   \
    \         rolling_max_value = numbers[i];\n            rolling_max_count = 1;\n\
    \        } else {\n            rolling_max.push(rolling_max_value);\n        \
    \    rolling_max_value = numbers[i];\n            rolling_max_count = 1;\n   \
    \     }\n    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpuofos0hc.js:35:12)\n    at Object.<anonymous> (/tmp/tmpuofos0hc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_list: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (rolling_max_number\
    \ < numbers[i]) {\n            rolling_max_number = numbers[i];\n        }\n \
    \       if (rolling_max_number == numbers[i]) {\n            rolling_max_list.push(rolling_max_number);\n\
    \        }\n    }\n    return rolling_max_list;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpfloy44ms.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfloy44ms.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_max: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[] = [];\n    var rolling_max_index:\
    \ number[] = [];\n    var rolling_max_value: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw8rbjnx5.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = 0;\n    let currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            currentMax\
    \ = numbers[currentIndex];\n        }\n        currentIndex++;\n    }\n    result.push(currentMax);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp5p0bk4sx.js:19:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp5p0bk4sx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n         \
    \   result.push(max);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyrhbj4f3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyrhbj4f3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let currentMax: number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    let index\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] ===\
    \ max) {\n            result.push(max);\n            max = numbers[i];\n     \
    \       index++;\n        }\n    }\n    if (index > 0) {\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpjm5mkenu.js:26:12)\n    at Object.<anonymous> (/tmp/tmpjm5mkenu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index2:\
    \ number[] = [];\n    let rolling_max_value2: number[] = [];\n    let rolling_max_index3:\
    \ number[] = [];\n    let rolling_max_value3: number[] = [];\n    let rolling_max_index4:\
    \ number[] = [];\n    let rolling_max_value4: number[] = [];\n    let rolling_max_index5:\
    \ number[] = [];\n    let rolling_max_value5: number[] = [];\n    let rolling_max_index6:\
    \ number[] = [];\n    let rolling_max_value6: number[] = [];\n    let rolling_max_index7:\
    \ number[] = [];\n    let rolling_max_value7: number[] = [];\n    let rolling_max_index8:\
    \ number[] = [];\n    let rolling_max_value8: number[] = [];\n    let rolling_max_index9:\
    \ number[] = [];\n    let rolling_max_value9: number[] = [];\n    let rolling_max_index10:\
    \ number[] = [];\n    let rolling_max_value10: number[] = [];\n    let rolling_max_index11:\
    \ number[] = [];\n    let rolling_max_value11: number[] = [];\n    let rolling_max_index12:\
    \ number[] = [];\n    let rolling_max_value12: number[] = [];\n    let rolling_max_index13:\
    \ number[] = [];\n    let rolling_max_value13: number[] = [];\n    let rolling_max_index14:\
    \ number[] = [];\n    let rolling_max_value14: number[] = [];\n    let rolling_max_index15:\
    \ number[] = [];\n    let rolling_max_value15: number[] = [];\n    let rolling_max_index16:\
    \ number[] = [];\n    let rolling_max_value16: number[] = [];\n    let rolling_max_index17:\
    \ number[] = [];\n    let rolling_max_value17: number[] = [];\n    let rolling_max_index18:\
    \ number[] = [];\n    let rolling_max_value18: number[] = [];\n    let rolling_max_index19:\
    \ number[] = [];\n    let rolling_max_value19: number[] = [];\n    let rolling_max_index20:\
    \ number[] = [];\n    let rolling_max_value20: number[] = [];\n    let rolling_max_index21:\
    \ number[] = [];\n    let rolling_max_value21: number[] = [];\n    let rolling_max_index22:\
    \ number[] = [];\n    let rolling_max_value22: number[] = [];\n    let rolling_max_index23:\
    \ number[] = [];\n    let rolling_max_value23: number[] = [];\n    let rolling_max_index24:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphyy7j1iw.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var currentMax = numbers[0];\n\
    \    var currentMaxIndex = 0;\n    var currentMaxValue = currentMax;\n    for\
    \ (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n            currentMaxIndex = i;\n\
    \            currentMaxValue = currentMax;\n        }\n    }\n    result.push(currentMax);\n\
    \    result.push(currentMaxIndex);\n    result.push(currentMaxValue);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0,\n  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpxkcdff8z.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxkcdff8z.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0, undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_arr: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        rolling_max_arr.push(Math.max(...numbers));\n\
    \        numbers.shift();\n    }\n    return rolling_max_arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpgl55266d.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgl55266d.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008691
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (rolling_max_index.length\
    \ == 0) {\n            rolling_max_index.push(i);\n            rolling_max.push(numbers[i]);\n\
    \        } else {\n            let rolling_max_index: number[] = [];\n       \
    \     let rolling_max: number[] = [];\n            let rolling_max_index: number[]\
    \ = [];\n            let rolling_max: number[] = [];\n            let rolling_max_index:\
    \ number[] = [];\n            let rolling_max: number[] = [];\n            let\
    \ rolling_max_index: number[] = [];\n            let rolling_max: number[] = [];\n\
    \            let rolling_max_index: number[] = [];\n            let rolling_max:\
    \ number[] = [];\n            let rolling_max_index: number[] = [];\n        \
    \    let rolling_max: number[] = [];\n            let rolling_max_index: number[]\
    \ = [];\n            let rolling_max: number[] = [];\n            let rolling_max_index:\
    \ number[] = [];\n            let rolling_max: number[] = [];\n            let\
    \ rolling_max_index: number[] = [];\n            let rolling_max: number[] = [];\n\
    \            let rolling_max_index: number[] = [];\n            let rolling_max:\
    \ number[] = [];\n            let rolling_max_index: number[] = [];\n        \
    \    let rolling_max: number[] = [];\n            let rolling_max_index: number[]\
    \ = [];\n            let rolling_max: number[] = [];\n            let rolling_max_index:\
    \ number[] = [];\n            let rolling_max: number[] = [];\n            let\
    \ rolling_max_index: number[] = [];\n            let rolling_max: number[] = [];\n\
    \            let rolling_max_index: number[] = [];\n            let rolling_max:\
    \ number[] = [];\n            let rolling_max_index: number[] = [];\n        \
    \    let rolling_max: number[] = [];\n            let rolling_max_index: number[]\
    \ = [];\n            let rolling_max: number[] = [];\n            let rolling_max_index:\
    \ number[] = [];\n            let rolling_max: number[] = [];\n            let\
    \ rolling_max_index: number[] = [];\n            let rolling_max: number[] = [];\n\
    \            let rolling_max_index: number[] = [];\n            let rolling_max:\
    \ number[] = [];\n            let rolling_max_index: number[] = [];\n        \
    \    let rolling_max: number[] = [];\n            let rolling_max_index: number[]\
    \ = [];\n            let rolling_max: number[] = [];\n            let rolling_max_index:\
    \ number[] = [];\n            let rolling_max: number[] = [];\n            let\
    \ rolling_max_index: number[] = [];\n            let rolling_max: number[] = [];\n\
    \            let rolling_max_index: number[] = [];\n            let rolling_max:\
    \ number[] = [];\n            let rolling_max_index: number[] = [];\n        \
    \    let rolling_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcynao2ua.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008691
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    numbers.forEach(function(number)\
    \ {\n        if (number > rolling_max) {\n            rolling_max = number;\n\
    \        }\n    });\n    numbers.forEach(function(number) {\n        if (number\
    \ == rolling_max) {\n            result.push(number);\n        }\n    });\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7852t5c2.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7852t5c2.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008694
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let rolling_max = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max)\
    \ {\n            rolling_max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max) {\n   \
    \         result.push(rolling_max);\n            rolling_max = numbers[i];\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwp499_t6.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwp499_t6.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008695
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var rolling_max = 0;\n    var\
    \ rolling_max_index = 0;\n    var rolling_max_value = numbers[0];\n    var rolling_max_value_found\
    \ = false;\n    var i;\n    for (i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_value) {\n            rolling_max_value = numbers[i];\n\
    \            rolling_max_index = i;\n            rolling_max_value_found = true;\n\
    \        }\n    }\n    if (rolling_max_value_found) {\n        result.push(rolling_max_value);\n\
    \        result.push(rolling_max_index);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpss3u9fmf.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpss3u9fmf.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008695
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = -1;\n    for (var i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max_value) {\n            max_value = numbers[i];\n   \
    \         max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp4k2duwe3.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4k2duwe3.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008695
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_list: number[] = [];\n    let max_element:\
    \ number = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max_element) {\n            max_element = numbers[i];\n \
    \       }\n    }\n    rolling_max_list.push(max_element);\n    return rolling_max_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5o7odtq9.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5o7odtq9.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008695
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max_array[rolling_max_index]) {\n            rolling_max_array[rolling_max_index]\
    \ = numbers[i];\n            rolling_max_index++;\n        }\n    }\n    return\
    \ rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp6bmgfk81.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6bmgfk81.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008695
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_length: number = 0;\n    var current_rolling_numbers: number[]\
    \ = [];\n    var current_rolling_numbers_length: number = 0;\n    var current_rolling_numbers_length2:\
    \ number = 0;\n    var current_rolling_numbers_length3: number = 0;\n    var current_rolling_numbers_length4:\
    \ number = 0;\n    var current_rolling_numbers_length5: number = 0;\n    var current_rolling_numbers_length6:\
    \ number = 0;\n    var current_rolling_numbers_length7: number = 0;\n    var current_rolling_numbers_length8:\
    \ number = 0;\n    var current_rolling_numbers_length9: number = 0;\n    var current_rolling_numbers_length10:\
    \ number = 0;\n    var current_rolling_numbers_length11: number = 0;\n    var\
    \ current_rolling_numbers_length12: number = 0;\n    var current_rolling_numbers_length13:\
    \ number = 0;\n    var current_rolling_numbers_length14: number = 0;\n    var\
    \ current_rolling_numbers_length15: number = 0;\n    var current_rolling_numbers_length16:\
    \ number = 0;\n    var current_rolling_numbers_length17: number = 0;\n    var\
    \ current_rolling_numbers_length18: number = 0;\n    var current_rolling_numbers_length19:\
    \ number = 0;\n    var current_rolling_numbers_length20: number = 0;\n    var\
    \ current_rolling_numbers_length21: number = 0;\n    var current_rolling_numbers_length22:\
    \ number = 0;\n    var current_rolling_numbers_length23: number = 0;\n    var\
    \ current_rolling_numbers_length24: number = 0;\n    var current_rolling_numbers_length25:\
    \ number = 0;\n    var current_rolling_numbers_length26: number = 0;\n    var\
    \ current_rolling_numbers_length27: number = 0;\n    var current_rolling_numbers_length28:\
    \ number = 0;\n    var current_rolling_numbers_length29: number = 0;\n    var\
    \ current_rolling_numbers_length30: number = 0;\n    var current_rolling_numbers_length31:\
    \ number = 0;\n    var current_rolling_numbers_length32: number = 0;\n    var\
    \ current_rolling_numbers_length33: number = 0;\n    var current_rolling_numbers_length34:\
    \ number = 0;\n    var current_rolling_numbers_length35: number = 0;\n    var\
    \ current_rolling_numbers_length36: number = 0;\n    var current_rolling_numbers_length37:\
    \ number = 0;\n    var current_rolling_numbers_length38: number = 0;\n    var\
    \ current_rolling_numbers_length39: number = 0;\n    var current_rolling_numbers_length40:\
    \ number = 0;\n    var current_rolling_numbers_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_kmbx4q.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008695
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpy2dvn_dm.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy2dvn_dm.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwy1hqmb3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy1hqmb3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_result = [];\n    let rolling_max_number\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max_number) {\n            rolling_max_number = numbers[i];\n    \
    \    }\n    }\n    rolling_max_result.push(rolling_max_number);\n    return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9sfb2bvz.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9sfb2bvz.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max: number =\
    \ 0;\n    var index: number = 0;\n    var current: number = 0;\n    while (index\
    \ < numbers.length) {\n        current = numbers[index];\n        if (current\
    \ > max) {\n            max = current;\n        }\n        result.push(max);\n\
    \        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_value = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpyuxm5s3o.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyuxm5s3o.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwy1hqmb3.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy1hqmb3.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max.push(rolling_max_value);\n\
    \    rolling_max.push(rolling_max_index);\n    return rolling_max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpz5z55_qj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz5z55_qj.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var i;\n\
    \    var j;\n    for (i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        for (j\
    \ = i + 1; j < numbers.length; j++) {\n            if (numbers[j] > max) {\n \
    \               max = numbers[j];\n            }\n        }\n    }\n    for (i\
    \ = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n         \
    \   result.push(numbers[i]);\n        }\n    }\n    return result;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpe_mbt_3o.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe_mbt_3o.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_length: number = 0;\n    var max_rolling_numbers_value:\
    \ number = 0;\n    var current_rolling_numbers: number[] = [];\n    var current_rolling_numbers_length:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n    var current_rolling_numbers_value: number = 0;\n    var current_rolling_numbers_index:\
    \ number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx2au1dqp.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let max_value = numbers[0];\n\
    \    let max_index = -1;\n    for (let i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max_value) {\n            max_value = numbers[i];\n   \
    \         max_index = i;\n        }\n    }\n    rolling_max.push(max_value);\n\
    \    for (let i = max_index + 1; i < numbers.length; i++) {\n        rolling_max.push(numbers[i]);\n\
    \    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpw5f73r0x.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw5f73r0x.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max_list: number[] = [];\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_value: number = 0;\n    let rolling_max_found\
    \ = false;\n    for (let i = 0; i < numbers.length; i++) {\n        if (rolling_max_found)\
    \ {\n            if (rolling_max_index == numbers.length - 1) {\n            \
    \    rolling_max_list.push(rolling_max_value);\n                rolling_max_found\
    \ = false;\n            } else {\n                rolling_max_value = rolling_max_list[rolling_max_index];\n\
    \                rolling_max_index++;\n            }\n        } else {\n     \
    \       if (numbers[i] >= rolling_max_value) {\n                rolling_max_found\
    \ = true;\n                rolling_max_value = numbers[i];\n                rolling_max_index\
    \ = 0;\n            }\n        }\n    }\n    return rolling_max_list;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpf_zzfxqy.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf_zzfxqy.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_element: number[] = [];\n    let current_max:\
    \ number = 0;\n    let current_index: number = 0;\n    let current_number: number\
    \ = 0;\n    let current_maxIndex: number = 0;\n    \n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        current_number = numbers[i];\n        current_max = current_number;\n\
    \        current_index = i;\n        \n        while (current_index > 0) {\n \
    \           current_maxIndex = current_index - 1;\n            current_max = Math.max(current_max,\
    \ numbers[current_maxIndex]);\n            current_index--;\n        }\n     \
    \   \n        max_element.push(current_max);\n    }\n    \n    return max_element;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008696
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_result: number[] = [];\n    let\
    \ rolling_max_number: number = 0;\n    let rolling_max_index: number = 0;\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_number)\
    \ {\n            rolling_max_number = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_result.push(rolling_max_number);\n \
    \   for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_number) {\n            rolling_max_number = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n        rolling_max_result.push(rolling_max_number);\n\
    \    }\n    return rolling_max_result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpscku01uu.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpscku01uu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_element:\
    \ number = 0;\n    let current_max: number = 0;\n    let current_index: number\
    \ = 0;\n    let current_number: number = 0;\n    let max_index: number = 0;\n\
    \    let max_number: number = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n            max_number = numbers[i];\n        }\n\
    \    }\n    for (let i = numbers.length - 1; i >= 0; i--) {\n        current_number\
    \ = numbers[i];\n        if (current_number > max_number) {\n            rolling_max.push(max_number);\n\
    \            max_number = current_number;\n            max_index = i;\n      \
    \      max_element = numbers[i];\n        }\n    }\n    rolling_max.push(max_number);\n\
    \    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpr8ginc_h.js:33:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpr8ginc_h.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnc2j3iqd.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnc2j3iqd.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmptdfop3tj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptdfop3tj.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var current_rolling_number: number[] = [];\n    var current_rolling_number_index:\
    \ number[] = [];\n    var current_rolling_number_value: number[] = [];\n    var\
    \ current_rolling_number_value_max: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_number_value_max_index: number[] = [];\n\
    \    var current_rolling_number_value_max_index: number[] = [];\n    var current_rolling_number_value_max_index:\
    \ number[] = [];\n    var current_rolling_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxddy_c_.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max: number =\
    \ 0;\n    var i: number;\n    for (i = 0; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n \
    \   for (i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            result.push(max);\n            max = numbers[i];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpdq1s1lx2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdq1s1lx2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max[rolling_max_index]\
    \ = rolling_max_value;\n            rolling_max_value = numbers[i];\n        \
    \    rolling_max_index = i;\n        } else {\n            rolling_max_value =\
    \ numbers[i];\n        }\n    }\n    rolling_max[rolling_max_index] = rolling_max_value;\n\
    \    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpcbutycdz.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcbutycdz.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_rolling_numbers: number[] = [];\n    var\
    \ max_rolling_numbers_index = 0;\n    var max_rolling_numbers_value = 0;\n   \
    \ var max_rolling_numbers_index2 = 0;\n    var max_rolling_numbers_value2 = 0;\n\
    \    var max_rolling_numbers_index3 = 0;\n    var max_rolling_numbers_value3 =\
    \ 0;\n    var max_rolling_numbers_index4 = 0;\n    var max_rolling_numbers_value4\
    \ = 0;\n    var max_rolling_numbers_index5 = 0;\n    var max_rolling_numbers_value5\
    \ = 0;\n    var max_rolling_numbers_index6 = 0;\n    var max_rolling_numbers_value6\
    \ = 0;\n    var max_rolling_numbers_index7 = 0;\n    var max_rolling_numbers_value7\
    \ = 0;\n    var max_rolling_numbers_index8 = 0;\n    var max_rolling_numbers_value8\
    \ = 0;\n    var max_rolling_numbers_index9 = 0;\n    var max_rolling_numbers_value9\
    \ = 0;\n    var max_rolling_numbers_index10 = 0;\n    var max_rolling_numbers_value10\
    \ = 0;\n    var max_rolling_numbers_index11 = 0;\n    var max_rolling_numbers_value11\
    \ = 0;\n    var max_rolling_numbers_index12 = 0;\n    var max_rolling_numbers_value12\
    \ = 0;\n    var max_rolling_numbers_index13 = 0;\n    var max_rolling_numbers_value13\
    \ = 0;\n    var max_rolling_numbers_index14 = 0;\n    var max_rolling_numbers_value14\
    \ = 0;\n    var max_rolling_numbers_index15 = 0;\n    var max_rolling_numbers_value15\
    \ = 0;\n    var max_rolling_numbers_index16 = 0;\n    var max_rolling_numbers_value16\
    \ = 0;\n    var max_rolling_numbers_index17 = 0;\n    var max_rolling_numbers_value17\
    \ = 0;\n    var max_rolling_numbers_index18 = 0;\n    var max_rolling_numbers_value18\
    \ = 0;\n    var max_rolling_numbers_index19 = 0;\n    var max_rolling_numbers_value19\
    \ = 0;\n    var max_rolling_numbers_index20 = 0;\n    var max_rolling_numbers_value20\
    \ = 0;\n    var max_rolling_numbers_index21 = 0;\n    var max_rolling_numbers_value21\
    \ = 0;\n    var max_rolling_numbers_index22 = 0;\n    var max_rolling_numbers_value22\
    \ = 0;\n    var max_rolling_numbers_index23 = 0;\n    var max_rolling_numbers_value23\
    \ = 0;\n    var max_rolling_numbers_index24 = 0;\n    var max_rolling_numbers_value24\
    \ = 0;\n    var max_rolling_numbers_index25 = 0;\n    var max_rolling_numbers_value25\
    \ = 0;\n    var max_rolling_numbers_index26 = 0;\n    var max_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgx_csaud.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008696
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnc2j3iqd.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnc2j3iqd.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnc2j3iqd.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnc2j3iqd.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_number: number[] = [];\n    let max_number_index:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (max_number.length\
    \ === 0) {\n            max_number.push(numbers[i]);\n            max_number_index.push(i);\n\
    \        } else {\n            if (numbers[i] > max_number[max_number.length -\
    \ 1]) {\n                max_number[max_number.length - 1] = numbers[i];\n   \
    \             max_number_index[max_number.length - 1] = i;\n            }\n  \
    \      }\n    }\n    return max_number;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp4k1ez5gw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4k1ez5gw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxk7r3kl.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008671
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var currentMax = numbers[0];\n\
    \    var currentMaxIndex = 0;\n    var currentMaxValue = currentMax;\n    var\
    \ currentMaxIndexes = [];\n    var currentMaxIndexesValues = [];\n    var currentMaxIndexesValueIndex\
    \ = 0;\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMaxIndexesValueIndexes = [];\n    var currentMaxIndexesValueIndexes\
    \ = [];\n    var currentMax\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbr8r33mg.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008696
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_number = numbers[0];\n\
    \    var max_index = -1;\n    var current_index = 0;\n    var current_number =\
    \ numbers[0];\n    var current_max_number = numbers[0];\n    var current_max_index\
    \ = -1;\n    var current_current_number = numbers[0];\n    var current_current_index\
    \ = -1;\n    var current_current_max_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_current_max_index\
    \ = -1;\n    var current_current_current_number = numbers[0];\n    var current_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8m_1nwyt.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008697
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max_number = numbers[0];\n\
    \    var max_index = 0;\n    for (var i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_number) {\n            max_number = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    result.push(max_number);\n  \
    \  for (var i = max_index + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9q_wj2rt.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9q_wj2rt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let max_number:\
    \ number = numbers[0];\n    let max_index: number = numbers.length - 1;\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n            max_index = i;\n      \
    \  }\n    }\n    rolling_max = [max_number];\n    for (let i = max_index; i >=\
    \ 0; i--) {\n        rolling_max.push(numbers[i]);\n    }\n    return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptqr_614c.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmptqr_614c.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008697
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let max = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7r1x4dqx.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7r1x4dqx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let max_value = numbers[0];\n\
    \    let max_index = 0;\n    for (let i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    rolling_max.push(max_value);\n\
    \    rolling_max.push(max_index);\n    return rolling_max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpul7fk2s8.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpul7fk2s8.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008697
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_array: number[] = [];\n    let\
    \ rolling_max_value: number = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (rolling_max_value < numbers[i]) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_array.push(rolling_max_value);\n    \
    \    }\n    }\n    return rolling_max_array;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpb0_pc3zj.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb0_pc3zj.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008697
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpsw1d3l3a.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsw1d3l3a.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    let rolling_max_index2 =\
    \ 0;\n    let rolling_max_value2 = numbers[0];\n    let rolling_max_index3 = 0;\n\
    \    let rolling_max_value3 = numbers[0];\n    let rolling_max_index4 = 0;\n \
    \   let rolling_max_value4 = numbers[0];\n    let rolling_max_index5 = 0;\n  \
    \  let rolling_max_value5 = numbers[0];\n    let rolling_max_index6 = 0;\n   \
    \ let rolling_max_value6 = numbers[0];\n    let rolling_max_index7 = 0;\n    let\
    \ rolling_max_value7 = numbers[0];\n    let rolling_max_index8 = 0;\n    let rolling_max_value8\
    \ = numbers[0];\n    let rolling_max_index9 = 0;\n    let rolling_max_value9 =\
    \ numbers[0];\n    let rolling_max_index10 = 0;\n    let rolling_max_value10 =\
    \ numbers[0];\n    let rolling_max_index11 = 0;\n    let rolling_max_value11 =\
    \ numbers[0];\n    let rolling_max_index12 = 0;\n    let rolling_max_value12 =\
    \ numbers[0];\n    let rolling_max_index13 = 0;\n    let rolling_max_value13 =\
    \ numbers[0];\n    let rolling_max_index14 = 0;\n    let rolling_max_value14 =\
    \ numbers[0];\n    let rolling_max_index15 = 0;\n    let rolling_max_value15 =\
    \ numbers[0];\n    let rolling_max_index16 = 0;\n    let rolling_max_value16 =\
    \ numbers[0];\n    let rolling_max_index17 = 0;\n    let rolling_max_value17 =\
    \ numbers[0];\n    let rolling_max_index18 = 0;\n    let rolling_max_value18 =\
    \ numbers[0];\n    let rolling_max_index19 = 0;\n    let rolling_max_value19 =\
    \ numbers[0];\n    let rolling_max_index20 = 0;\n    let rolling_max_value20 =\
    \ numbers[0];\n    let rolling_max_index21 = 0;\n    let rolling_max_value21 =\
    \ numbers[0];\n    let rolling_max_index22 = 0;\n    let rolling_max_value22 =\
    \ numbers[0];\n    let rolling_max_index23 = 0;\n    let rolling_max_value23 =\
    \ numbers[0];\n    let rolling_max_index24 = 0;\n    let rolling_max_value24 =\
    \ numbers[0];\n    let rolling_max_index25 = 0;\n    let rolling_max_value25 =\
    \ numbers[0];\n    let rolling_max_index26 = 0;\n    let rolling_max_value26 =\
    \ numbers[0];\n    let rolling_max_index27 = 0;\n    let rolling_max_value27 =\
    \ numbers[0];\n    let rolling_max_index28 = 0;\n    let rolling_max_value28 =\
    \ numbers[0];\n    let rolling_max_index29 = 0;\n    let rolling_max_value29 =\
    \ numbers[0];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpddpuzof7.ts(64,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpddpuzof7.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660008697
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    numbers.forEach(function\
    \ (num) {\n        if (num > max) {\n            max = num;\n        }\n    });\n\
    \    numbers.forEach(function (num) {\n        if (num > max) {\n            result.push(num);\n\
    \        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpha_lc37u.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpha_lc37u.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660008698
