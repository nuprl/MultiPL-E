language: ts
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp24026g39.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp24026g39.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index\
    \ = 0;\n    while (index < s.length) {\n        let char = s.charAt(index);\n\
    \        if (char === ' ') {\n            words.push(s.substring(index + 1, s.length));\n\
    \            index += 1;\n        } else {\n            if (char === ',' || char\
    \ === '.' || char === '?' || char === '!' || char === '(' || char === ')' || char\
    \ === '{' || char === '}' || char === '[' || char === ']' || char === '<' || char\
    \ === '>' || char === '|' || char === '/' || char === '\\\\' || char === '$' ||\
    \ char === '%' || char === '&' || char === '*' || char === '^' || char === '-'\
    \ || char === '+' || char === '=' || char === '{' || char === '}' || char ===\
    \ '[' || char === ']' || char === '<' || char === '>' || char === '|' || char\
    \ === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' ||\
    \ char === '*' || char === '^' || char === '-' || char === '+' || char === '='\
    \ || char === '{' || char === '}' || char === '[' || char === ']' || char ===\
    \ '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char\
    \ === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char\
    \ === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char\
    \ === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char\
    \ === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' ||\
    \ char === '*' || char === '^' || char === '-' || char === '+' || char === '='\
    \ || char === '{' || char === '}' || char === '[' || char === ']' || char ===\
    \ '<' || char === '>' || char === '|' || char === '/' || char === '\\\\' || char\
    \ === '$' || char === '%' || char === '&' || char === '*' || char === '^' || char\
    \ === '-' || char === '+' || char === '=' || char === '{' || char === '}' || char\
    \ === '[' || char === ']' || char === '<' || char === '>' || char === '|' || char\
    \ === '/' || char === '\\\\' || char === '$' || char === '%' || char === '&' ||\
    \ char === '*' || char === '^' || char === '-' || char === '+' || char === '='\
    \ || char === '{' || char === '}' || char === '[' || char === ']' || char ===\
    \ '<' || char === '>' || char === '|\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpibjj4ygl.ts(19,1858): error TS1002: Unterminated
    string literal.

    ../../../../../tmp/tmpibjj4ygl.ts(20,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpibjj4ygl.ts(35,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    for (let i = 0; i < s.length; i += 1) {\n        if\
    \ (vowels.indexOf(s[i]) > -1) {\n            result.push(s[i]);\n        }\n \
    \       for (let j = 0; j < consonants.length; j += 1) {\n            if (s[i]\
    \ === consonants[j]) {\n                result.push(s[i]);\n            }\n  \
    \      }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n\
    \  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n\
    \  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpp0lh5v33.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp0lh5v33.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'r', 'y', 'h', 'a',\n    'd', 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n\
    \    'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n\
    \        if (s[index] === \" \") {\n            words.push(s.substr(index, index\
    \ + 1));\n            index++;\n            count++;\n        }\n        else\
    \ {\n            index++;\n        }\n    }\n    return words;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had ',\n\
    \  ' a little',\n  ' little lam',\n  ' lamb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpj0ukjp0d.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj0ukjp0d.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had ',\
    \ ' a little', ' little lam', ' lamb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        const word = s.substring(index,\
    \ index + 1);\n        if (word.length >= n && word.match(/[aeiou]/)) {\n    \
    \        words.push(word);\n        }\n        index += word.length;\n    }\n\
    \    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpaofgei1l.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpaofgei1l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let result = [];\n    let index = 0;\n\
    \    while (index < s.length && n > 0) {\n        let char = s[index];\n     \
    \   if (char === ' ') {\n            result.push(s.substr(index, 1));\n      \
    \      index++;\n        }\n        else if (char === 'a' || char === 'e' || char\
    \ === 'i' || char === 'o' || char === 'u') {\n            n--;\n        }\n  \
    \      index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzdchwabg.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzdchwabg.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    let char = s.charAt(index);\n\t\tif (char === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s.charAt(index) ===\
    \ char) {\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\tif (count === n) {\n\t\t\
    \tresult.push(s.slice(index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfk07dltr.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpfk07dltr.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let char = s[index];\n        if (char === \" \") {\n            result.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === \"a\" || char ===\
    \ \"e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\"\
    ) {\n            result.push(s.substr(index, 1));\n            index++;\n    \
    \    }\n        else {\n            result.push(s.substr(index, 1));\n       \
    \     index++;\n        }\n    }\n    return result;\n}\nselect_words(\"a man\
    \ a plan a canal panama\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' had a little lamb',\n  'h',\n  'a',\n  'd',\n  ' a little\
    \ lamb',\n  'a',\n  ' little lamb',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n\
    \  'e',\n  ' lamb',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpe3gpnz4j.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3gpnz4j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \                  'a',\n    'r',                  'y',\n    ' had a little lamb',\
    \ 'h',\n    'a',                  'd',\n    ' a little lamb',     'a',\n    '\
    \ little lamb',       'l',\n    'i',                  't',\n    't',         \
    \         'l',\n    'e',                  ' lamb',\n    'l',                 \
    \ 'a',\n    'm',                  'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = word.match(/[b-df-hj-np-tv-z]/g);\n\
    \        if (consonants.length === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"\
    abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\"\
    , 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\n\
    select_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"\
    abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\"\
    , 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\n\
    select_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"\
    abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\"\
    , 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\n\
    select_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"\
    abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\"\
    , 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\n\
    select_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"\
    abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\"\
    , 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\n\
    select_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"\
    abracadabra\", 38);\nselect_words(\"abracadab\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcdqw2i29.ts(59,24): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpcdqw2i29.ts(60,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcdqw2i29.ts(60,9): error TS1005: '','' expected.

    '
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let index = 0;\n    let chars = Array.from(s);\n    let charsCount\
    \ = chars.length;\n    while (index < charsCount) {\n        let char = chars[index];\n\
    \        if (char === ' ') {\n            charsCount--;\n        }\n        if\
    \ (charsCount === n) {\n            result.push(chars.slice(index, index + 1));\n\
    \        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7v2uvwe.ts(13,23): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = [];\n    for (let i = 0; i\
    \ < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            words.push(s.substr(0,\
    \ i));\n        }\n    }\n    for (let i = 0; i < words.length; i++) {\n     \
    \   let word: string = words[i];\n        let cons: boolean = true;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (s.charAt(j) != word.charAt(j))\
    \ {\n                cons = false;\n                break;\n            }\n  \
    \      }\n        if (cons) {\n            result.push(word);\n        }\n   \
    \ }\n    return result;\n}\nselect_words('abc def ghi', 2);\nselect_words('abc\
    \ def ghi', 3);\nselect_words('abc def ghi', 4);\nselect_words('abc def ghi',\
    \ 5);\nselect_words('abc def ghi', 6);\nselect_words('abc def ghi', 7);\nselect_words('abc\
    \ def ghi', 8);\nselect_words('abc def ghi', 9);\nselect_words('abc def ghi',\
    \ 10);\nselect_words('abc def ghi', 11);\nselect_words('abc def ghi', 12);\nselect_words('abc\
    \ def ghi', 13);\nselect_words('abc def ghi', 14);\nselect_words('abc def ghi',\
    \ 15);\nselect_words('abc def ghi', 16);\nselect_words('abc def ghi', 17);\nselect_words('abc\
    \ def ghi', 18);\nselect_words('abc def ghi', 19);\nselect_words('abc def ghi',\
    \ 20);\nselect_words('abc def ghi', 21);\nselect_words('abc def ghi', 22);\nselect_words('abc\
    \ def ghi', 23);\nselect_words('abc def ghi', 24);\nselect_words('abc def ghi',\
    \ 25);\nselect_words('abc def ghi', 26);\nselect_words('abc def ghi', 27);\nselect_words('abc\
    \ def ghi', 28);\nselect_words('abc def ghi', 29);\nselect_words('abc def ghi',\
    \ 30);\nselect_words('abc def ghi', 31);\nselect_words('abc def ghi', 32);\nselect_words('abc\
    \ def ghi', 33);\nselect_words('abc def ghi', 34);\nselect_words('abc def ghi',\
    \ 35);\nselect_words('abc def ghi', 36);\nselect_words('abc def gh\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7k8315f3.ts(65,25): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7k8315f3.ts(66,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7k8315f3.ts(66,9): error TS1005: '','' expected.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substr(index, n -\
    \ 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\
    \treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ha',\n\
    \  ' a ',\n  ' la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpyox1i2z2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpyox1i2z2.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ha', '\
    \ a ', ' la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substring(index, index\
    \ + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'a') {\n\t\t\t\
    result.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\
    \t\telse if (char === 'e') {\n\t\t\tresult.push(s.substring(index, index + 1));\n\
    \t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'i') {\n\t\t\tresult.push(s.substring(index,\
    \ index + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse if (char === 'o') {\n\
    \t\t\tresult.push(s.substring(index, index + 1));\n\t\t\tindex = index + 1;\n\t\
    \t}\n\t\telse if (char === 'u') {\n\t\t\tresult.push(s.substring(index, index\
    \ + 1));\n\t\t\tindex = index + 1;\n\t\t}\n\t\telse {\n\t\t\tindex = index + 1;\n\
    \t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  '\
    \ ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp32zi3_2.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp32zi3_2.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ ' ', 'a', ' ',\n    'a', ' ', 'i', 'e',\n    ' ', 'a'\n  ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n      \
    \  if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char)\
    \ == -1) {\n                result.push(s[i]);\n            }\n        }\n   \
    \ }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  '\
    \ ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp6cskn703.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6cskn703.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', ' ',\
    \ ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s.charAt(index) === 'a') {\n            result.push(s.substring(index,\
    \ index + 1));\n            index++;\n            n--;\n        }\n        index++;\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp825cwqel.js:23:12)\n    at Object.<anonymous> (/tmp/tmp825cwqel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement this function\n    \n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcy2xtlom.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpcy2xtlom.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        const char = s[index];\n\
    \        if (char === ' ') {\n            words.push(s.substr(index));\n     \
    \       index++;\n        }\n        else if (char === 'n') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'a') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'e') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'i') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'o') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'u') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'l') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 's') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 't') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'r') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'c') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'h') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'e') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'd') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'a') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'p') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 't') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'e') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 's') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'a') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'n') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'g') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'h') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'u') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'r') {\n            word\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78o21mst.ts(132,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    if (s.length === 0) {\n        return words;\n  \
    \  }\n    let word = '';\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u')\
    \ {\n            word += s[i];\n        }\n    }\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] ===\
    \ 'o' || s[i] === 'u') {\n            if (word.length >= n) {\n              \
    \  words.push(word);\n                word = '';\n            }\n        }\n \
    \   }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'aaaiea'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9fawt3bt.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9fawt3bt.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'aaaiea'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && index\
    \ < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] ===\
    \ \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            result.push(s[index]);\n\
    \            index++;\n        }\n    }\n    return result;\n}\nselect_words(\"\
    aeiou\", 2); // [\"a\"]\nselect_words(\"aeiou\", 3); // [\"aeiou\"]\nselect_words(\"\
    aeiou\", 4); // []\nselect_words(\"aeiou\", 5); // []\nselect_words(\"aeiou\"\
    , 6); // []\nselect_words(\"aeiou\", 7); // []\nselect_words(\"aeiou\", 8); //\
    \ []\nselect_words(\"aeiou\", 9); // []\nselect_words(\"aeiou\", 10); // []\n\
    select_words(\"aeiou\", 11); // []\nselect_words(\"aeiou\", 12); // []\nselect_words(\"\
    aeiou\", 13); // []\nselect_words(\"aeiou\", 14); // []\nselect_words(\"aeiou\"\
    , 15); // []\nselect_words(\"aeiou\", 16); // []\nselect_words(\"aeiou\", 17);\
    \ // []\nselect_words(\"aeiou\", 18); // []\nselect_words(\"aeiou\", 19); // []\n\
    select_words(\"aeiou\", 20); // []\nselect_words(\"aeiou\", 21); // []\nselect_words(\"\
    aeiou\", 22); // []\nselect_words(\"aeiou\", 23); // []\nselect_words(\"aeiou\"\
    , 24); // []\nselect_words(\"aeiou\", 25); // []\nselect_words(\"aeiou\", 26);\
    \ // []\nselect_words(\"aeiou\", 27); // []\nselect_words(\"aeiou\", 28); // []\n\
    select_words(\"aeiou\", 29); // []\nselect_words(\"aeiou\", 30); // []\nselect_words(\"\
    aeiou\", 31); // []\nselect_words(\"aeiou\", 32); // []\nselect_words(\"aeiou\"\
    , 33); // []\nselect_words(\"aeiou\", 34); // []\nselect_words(\"aeiou\", 35);\
    \ // []\nselect_words(\"aeiou\", 36); // []\nselect_words(\"aeiou\", 37); // []\n\
    select_words(\"aeiou\", 38); // []\nselect_words(\"aeiou\", 39); // []\nselect_words(\"\
    aeiou\", 40); // []\nselect_words(\"aeiou\", 41); // []\nselect_words(\"aeiou\"\
    , 42); // []\nselect_words(\"aeiou\", 43); // []\nselect_words(\"aeiou\", 44);\
    \ // []\nselect_words(\"aeiou\", 45); // []\nselect_words(\"aeiou\", 46); // \n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substr(index, n -\
    \ 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse if (char === 'a' || char === 'e'\
    \ || char === 'i' || char === 'o' || char === 'u') {\n\t\t\tresult.push(s.substr(index,\
    \ n - 1));\n\t\t\tindex += n - 1;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t\
    }\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary',\n\
    \  ' ha',\n  ' a ',\n  'itt',\n  'e l',\n  'amb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmprauh5oom.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprauh5oom.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ary', '\
    \ ha', ' a ', 'itt', 'e l', 'amb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let word = \"\";\n    let index = 0;\n    while (index\
    \ < s.length) {\n        if (s[index] === \" \") {\n            words.push(word);\n\
    \            word = \"\";\n            index++;\n        } else {\n          \
    \  word += s[index];\n            index++;\n        }\n    }\n    words.push(word);\n\
    \    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had',\n  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmptmsc7yw9.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptmsc7yw9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had', 'a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement this function\n    \n \
    \   return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpplvu52ga.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpplvu52ga.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char\
    \ === ' ') {\n            words.push(s.substr(0, i));\n        }\n    }\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n     \
    \   let word = words[i];\n        if (word.length >= n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpmfdp7bi_.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmfdp7bi_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index+n);\n        if (word.length == n)\
    \ {\n            words.push(word);\n            index += n;\n        }\n     \
    \   else {\n            index += word.length;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpd8uxlsww.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd8uxlsww.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let vowel_count = 0;\n    let consonant_count = 0;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) >\
    \ -1) {\n            vowel_count++;\n        }\n        if (consonants.indexOf(s[i])\
    \ > -1) {\n            consonant_count++;\n        }\n    }\n    if (vowel_count\
    \ === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i])\
    \ > -1) {\n                result.push(s[i]);\n            }\n        }\n    }\n\
    \    if (consonant_count === n) {\n        for (let i = 0; i < s.length; i++)\
    \ {\n            if (consonants.indexOf(s[i]) > -1) {\n                result.push(s[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\"\
    , 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6xanyn85.js:44:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp6xanyn85.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s.charAt(index) == ' ') {\n            index = index + 1\n\
    \        }\n        if (s.charAt(index) == 'a') {\n            index = index +\
    \ 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'I') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'O') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'U') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'Y') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'a') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'I') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'O') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'U') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'Y') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'a') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'e') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'i') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'o') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'u') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'y') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'A') {\n            index = index\
    \ + 1\n        }\n        if (s.charAt(index) == 'E') {\n            index = index\
    \ + 1\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxfvynn8.ts(126,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n\
    \    }\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n\
    \        \n        if (char === ' ') {\n            words.push(s.substring(i));\n\
    \        }\n        \n        if (char === 'a' || char === 'e' || char === 'i'\
    \ || char === 'o' || char === 'u') {\n            words.push(s.substring(i));\n\
    \        }\n        \n        if (char === 'y') {\n            words.push(s.substring(i));\n\
    \        }\n        \n        if (char === 'a' || char === 'e' || char === 'i'\
    \ || char === 'o' || char === 'u' || char === 'y') {\n            words.push(s.substring(i));\n\
    \        }\n        \n        if (char === 'o' || char === 'u') {\n          \
    \  words.push(s.substring(i));\n        }\n        \n        if (char === 'a'\
    \ || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char ===\
    \ 'y' || char === 'o' || char === 'u') {\n            words.push(s.substring(i));\n\
    \        }\n        \n        if (char === 'a' || char === 'e' || char === 'i'\
    \ || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char ===\
    \ 'u' || char === 'y') {\n            words.push(s.substring(i));\n        }\n\
    \        \n        if (char === 'a' || char === 'e' || char === 'i' || char ===\
    \ 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char\
    \ === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u' || char === 'y' || char === 'o' || char === 'u' || char === 'y') {\n\
    \            words.push(s.substring(i));\n        }\n        \n        if (char\
    \ === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char\
    \ === 'y' || char === 'o' || char === 'u' || char === 'y' || char === 'a' || char\
    \ === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char\
    \ === 'o' || char === 'u' || char === 'y' || char === 'a' || char === 'e' || char\
    \ === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'o' || char\
    \ === 'u' || char === 'y' || char === 'a' || char === 'e' || char === 'i' || char\
    \ === 'o' || char === 'u' || char === 'y' || char === 'o' || char === 'u' || char\
    \ === 'y' || char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u' || char === 'y\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkn7inc7s.ts(49,680): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpkn7inc7s.ts(50,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpkn7inc7s.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; ++i) {\n        let char = s[i];\n\
    \        \n        if (vowels.indexOf(char) != -1) {\n            for (let j =\
    \ 0; j < n; ++j) {\n                if (consonants.indexOf(char) == -1) {\n  \
    \                  result.push(char);\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpvqutf02w.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvqutf02w.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let counts: number[] = [];\n    \n    for (let i = 0; i < s.length;\
    \ i++) {\n        let char = s[i];\n        let index = counts[char];\n      \
    \  counts[char] = index == undefined ? 1 : index + 1;\n    }\n    \n    for (let\
    \ i = 0; i < s.length; i++) {\n        let char = s[i];\n        let index = counts[char];\n\
    \        if (index == n) {\n            result.push(s);\n        }\n    }\n  \
    \  \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little\
    \ lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpakals2e0.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpakals2e0.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a\
    \ little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n\
    \  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let index = 0;\n    \n    while (index < s.length && index <\
    \ n) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' ||\
    \ s[index] === 'o' || s[index] === 'u') {\n            result.push(s[index]);\n\
    \        }\n        index++;\n    }\n    \n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzq15a3_x.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzq15a3_x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i += 1) {\n        if (vowels.indexOf(s[i])\
    \ >= 0) {\n            result.push(s[i]);\n        }\n        if (consonants.indexOf(s[i])\
    \ >= 0) {\n            let j = i;\n            while (j < s.length && consonants.indexOf(s[j++])\
    \ >= 0) {\n                result.push(s[j]);\n            }\n        }\n    }\n\
    \    if (result.length >= n) {\n        return result;\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'y',\n\
    \  ' ',\n  ' ',\n  'a',\n  'a',\n  ' ',\n  'a',\n  'i',\n  'i',\n  't',\n  'l',\n\
    \  'e',\n  'l',\n  'e',\n  'e',\n  'e',\n  'a',\n  'a',\n  'b',\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp74ydn_un.js:33:12)\n    at Object.<anonymous> (/tmp/tmp74ydn_un.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \       'y', ' ',\n    ' ',       'a', 'a',\n    ' ',       'a', 'i',\n    'i',\
    \       't', 'l',\n    'e',       'l', 'e',\n    'e',       'e', 'a',\n    'a',\
    \       'b', undefined,\n    undefined\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n\
    \    \n    let index = 0;\n    \n    while (index < s.length) {\n        let char\
    \ = s[index];\n        \n        if (char === ' ') {\n            result.push(s.slice(index\
    \ + 1, s.length));\n            index++;\n        }\n        else if (char ===\
    \ 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n   \
    \         result.push(s.slice(index + 1, index + 1));\n            index++;\n\
    \        }\n        else if (char === 'y') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'n') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'd') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'h') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'r') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 's') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 't') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'p') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'f') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'v') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'b') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'm') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'k') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'j') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'x') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'q') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'z') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'x') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (char === 'z') {\n            result.push(s.slice(index\
    \ + 1, index + 1));\n            index++;\n        }\n        else if (char ===\
    \ 'y') {\n            result.push(s.slice(index + 1, index + 1));\n          \
    \  index++;\n        }\n        else if (\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72099:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // Fill\
    \ in the code here\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvnkxvj6m.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n\
    \    \n    let word = '';\n    let index = 0;\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n\
    \    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word\
    \ += s[index];\n        index++;\n    }\n    \n    while (index < s.length &&\
    \ s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n\
    \    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word\
    \ += s[index];\n        index++;\n    }\n    \n    while (index < s.length &&\
    \ s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n\
    \    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word\
    \ += s[index];\n        index++;\n    }\n    \n    while (index < s.length &&\
    \ s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] !== '\\0') {\n        word += s[index];\n        index++;\n    }\n\
    \    \n    while (index < s.length && s[index] === '\\0') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] === ' ') {\n        index++;\n\
    \    }\n    \n    while (index < s.length && s[index] !== '\\0') {\n        word\
    \ += s[index];\n        index++;\n    }\n    \n    while (index < s.length &&\
    \ s[index] === '\\0') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index] === ' ') {\n        index++;\n    }\n    \n    while (index < s.length\
    \ && s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjeji_04u.ts(130,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpjeji_04u.ts(145,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let consonants = select_consonants(s);\n    \n    for (let i\
    \ = 0; i < consonants.length; i++) {\n        let word = s.substring(0,consonants[i]);\n\
    \        if (word.length == n) {\n            result.push(word);\n        }\n\
    \    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp0tr6b9t.ts(14,22): error TS2304: Cannot find name
    ''select_consonants''.

    '
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n     \
    \   if (word.length === n) {\n            words.push(word);\n        }\n    }\n\
    \    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp8yn_2t36.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8yn_2t36.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyd413dlk.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpyd413dlk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    \n    if (s === \"\") {\n        return result;\n    }\n \
    \   \n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n   \
    \     if (s.charAt(i) === \" \") {\n            count++;\n        }\n        \n\
    \        if (count === n) {\n            result.push(s.substr(0, i));\n      \
    \      count = 0;\n        }\n    }\n    \n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9q8v1emi.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9q8v1emi.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n\
    \        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp4fdasrfo.js:21:12)\n    at Object.<anonymous> (/tmp/tmp4fdasrfo.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for (let i = 0; i < s.length; i +=\
    \ 1) {\n    let char = s[i];\n    \n    if (vowels.indexOf(char) !== -1) {\n \
    \     continue;\n    }\n    \n    let count = 0;\n    \n    for (let j = 0; j\
    \ < s.length; j += 1) {\n      if (s[j] === char) {\n        count += 1;\n   \
    \   }\n    }\n    \n    if (count === n) {\n      result.push(s);\n    }\n  }\n\
    \  \n  return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpn0sdg4ql.js:34:12)\n    at Object.<anonymous> (/tmp/tmpn0sdg4ql.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        const word = s.substring(index,\
    \ index + 1);\n        if (word.length >= n) {\n            words.push(word);\n\
    \            index += word.length;\n        }\n        else {\n            index\
    \ += 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpt3sscczd.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpt3sscczd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\t\n\tlet words: string[] = s.split(\" \");\n\t\n\tfor (let\
    \ word of words) {\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\t\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn7pz3mfu.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn7pz3mfu.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\t\n\tlet consonants = \n\t\t[\n\t\t\t'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\
    \t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z',\n\t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B',\
    \ 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\tlet vowels = \n\t\t[\n\t\t\t'a', 'e', 'i',\
    \ 'o', 'u', 'y'\n\t\t];\n\t\n\tlet vowels_consonants = \n\t\t[\n\t\t\t'a', 'e',\
    \ 'i', 'o', 'u', 'y', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G',\
    \ 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',\n\
    \t\t\t'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K',\
    \ 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\
    \tlet vowels_consonants_vowels = \n\t\t[\n\t\t\t'a', 'e', 'i', 'o', 'u', 'y',\
    \ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',\n\t\t\t'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z',\n\t\t\t'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n\t\t];\n\t\n\tlet vowels_consonants_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp9bfxwkt.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbk33jhrg.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpbk33jhrg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let vowel_counter = 0;\n    let consonant_counter = 0;\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) >= 0) {\n      \
    \      vowel_counter++;\n        }\n        if (consonants.indexOf(s[i]) >= 0)\
    \ {\n            consonant_counter++;\n        }\n    }\n    if (vowel_counter\
    \ === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i])\
    \ >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n\
    \    if (consonant_counter === n) {\n        for (let i = 0; i < s.length; i++)\
    \ {\n            if (consonants.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\n\
    select_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"\
    abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\"\
    , 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\n\
    select_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"\
    abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\"\
    , 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\n\
    select_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"\
    abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\"\
    , 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\n\
    select_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"\
    abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\"\
    , 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracad\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbk1fcoxf.ts(70,22): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpbk1fcoxf.ts(71,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpbk1fcoxf.ts(71,9): error TS1005: '','' expected.

    '
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    let letters = s.split(\"\");\n\
    \    while(index < letters.length){\n        let letter = letters[index];\n  \
    \      if(letters.indexOf(letter, index) == index){\n            words.push(letter);\n\
    \            index++;\n        }\n        if(index == n){\n            break;\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmppi7blvz_.js:26:12)\n    at Object.<anonymous> (/tmp/tmppi7blvz_.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n\
    \    \n    for (let i = 1; i < s.length - 1; i++) {\n        if (s[i] !== firstLetter\
    \ && s[i] !== lastLetter) {\n            result.push(s[i]);\n        }\n    }\n\
    \    \n    return result;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n\
    \  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n  'i',\n\
    \  't',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a',\n  'm'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsocfk120.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsocfk120.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'r', 'y', ' ', 'h',\n    'a', 'd', ' ', 'a', ' ',\n    'l', 'i', 't', 't', 'l',\n\
    \    'e', ' ', 'l', 'a', 'm'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let index = 0;\n    let currentChar = s[0];\n    let currentCount\
    \ = 0;\n    \n    while (index < s.length && currentCount < n) {\n        if (s[index]\
    \ == currentChar) {\n            currentCount++;\n        }\n        else {\n\
    \            if (currentCount > 0) {\n                result.push(currentChar);\n\
    \            }\n            currentChar = s[index];\n            currentCount\
    \ = 1;\n        }\n        index++;\n    }\n    \n    if (currentCount > 0) {\n\
    \        result.push(currentChar);\n    }\n    \n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n\
    \  'i',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptoqkrlj0.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmptoqkrlj0.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y', ' ',\n    'h', 'a', 'd', ' ', 'a',\n    ' ', 'l', 'i', 't', 'l',\n\
    \    'e', ' ', 'l', 'a', 'm',\n    'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004120
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let lastLetter = s[0];\n    let lastCount = 0;\n    let currentCount\
    \ = 0;\n    \n    for (let i = 1; i < s.length; i++) {\n        if (s[i] !== lastLetter)\
    \ {\n            if (currentCount === n) {\n                result.push(s.substring(lastLetter,\
    \ i));\n            }\n            currentCount = 0;\n        }\n        currentCount++;\n\
    \        lastLetter = s[i];\n    }\n    \n    if (currentCount === n) {\n    \
    \    result.push(s.substring(lastLetter, i));\n    }\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoq80s1q8.ts(21,41): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpoq80s1q8.ts(30,33): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpoq80s1q8.ts(30,45): error TS2304: Cannot find name ''i''.

    '
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement this function\n    \n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcy2xtlom.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpcy2xtlom.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char = s[i];\n\
    \        if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n\
    \        \n        let count = 0;\n        for (let j = 0; j < consonants.length;\
    \ j += 1) {\n            if (consonants[j] === char) {\n                count\
    \ += 1;\n            }\n        }\n        \n        if (count === n) {\n    \
    \        result.push(s);\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"\
    abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0uzaj5hk.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp0uzaj5hk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004120
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n\
    \    \n    for (let i = 0; i < s.length - 1; i++) {\n        if (s[i] == firstLetter\
    \ && s[i + 1] == lastLetter) {\n            result.push(s.substring(i + 1, i +\
    \ 2));\n        }\n    }\n    \n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\n\
    select_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"\
    abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\"\
    , 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\n\
    select_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"\
    abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\"\
    , 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\n\
    select_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"\
    abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\"\
    , 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\n\
    select_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"\
    abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\"\
    , 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\n\
    select_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"\
    abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\"\
    , 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"abracadabra\", 39\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8hirtpj_.ts(63,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp8hirtpj_.ts(63,9): error TS1005: '','' expected.

    '
  timestamp: 1660004120
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char\
    \ === ' ') {\n            continue;\n        }\n        const consonants = count_consonants(char);\n\
    \        if (consonants === n) {\n            words.push(char);\n        }\n \
    \   }\n    return words;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpegk9w7fc.ts(17,28): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n  \
    \  while (index < s.length && currentWord.length < n) {\n        if (s[index]\
    \ === \" \") {\n            result.push(currentWord);\n            currentWord\
    \ = \"\";\n            index++;\n        } else {\n            currentWord +=\
    \ s[index];\n            index++;\n        }\n    }\n    if (currentWord.length\
    \ > 0) {\n        result.push(currentWord);\n    }\n    return result;\n}\nselect_words(\"\
    abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpl0ziryl5.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl0ziryl5.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s === \"\") {\n        return result;\n    }\n\
    \    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels = \"aeiou\";\n\
    \    let vowel_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (consonants.indexOf(s[i]) >= 0) {\n            vowel_count++;\n        }\n \
    \   }\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])\
    \ >= 0) {\n            if (vowel_count === n) {\n                result.push(s[i]);\n\
    \            }\n            vowel_count--;\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7cyhh2f9.js:34:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp7cyhh2f9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    if (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index].match(/[aeiou]/i))\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(s[index]);\n\t\t\
    n--;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'M',\n\
    \  'M',\n  'M'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpk8q7c1p5.js:27:12)\n    at Object.<anonymous> (/tmp/tmpk8q7c1p5.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'M',\
    \ 'M', 'M' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnxxfaxv3.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpnxxfaxv3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n  \
    \      if (consonants.indexOf(char) == -1) {\n            result.push(s[i]);\n\
    \        }\n    }\n    \n    let resultArray = result.filter(function(item){\n\
    \        return item.length == n;\n    });\n    \n    return resultArray;\n}\n\
    \nselect_words('abracadabra', 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9qkw_0hg.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp9qkw_0hg.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptaxn97ng.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmptaxn97ng.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ lastLetter: number = 0;\n    let currentLetter: number = 0;\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (s[i] === 'a') {\n            currentLetter++;\n\
    \        } else {\n            currentLetter = 0;\n        }\n        if (currentLetter\
    \ === n) {\n            words.push(s.substring(lastLetter, i));\n            lastLetter\
    \ = i + 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9uj4vyw6.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp9uj4vyw6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char === ' ') {\n            result.push(s);\n   \
    \         s = '';\n        } else {\n            for (let j = 0; j < n; j++) {\n\
    \                if (char === s[j]) {\n                    result.push(s);\n \
    \                   s = '';\n                    break;\n                }\n \
    \           }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp8ofw5upi.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8ofw5upi.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\t\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet char = s[i];\n\
    \t\tlet count = 0;\n\t\t\n\t\tfor (let j = 0; j < char.length; j++) {\n\t\t\t\
    if (char[j] === 'a' || char[j] === 'e' || char[j] === 'i' || char[j] === 'o' ||\
    \ char[j] === 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (count ===\
    \ n) {\n\t\t\tresult.push(s);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nselect_words(\"\
    abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5sz9qtjo.js:27:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp5sz9qtjo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: Your code here\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqw99lnnc.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpqw99lnnc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length;\n\t\t}\n\t}\n\
    \treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmply_wlmpz.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmply_wlmpz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return\
    \ result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjlzuqpje.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpjlzuqpje.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    \n    for (let i = 0; i < s.length;\
    \ ++i) {\n        let char = s[i];\n        \n        if (vowels.indexOf(char)\
    \ == -1) {\n            result.push(char);\n        }\n    }\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  'y',\n  ' ',\n  'h',\n  'd',\n  ' ',\n  ' ',\n  'l',\n  't',\n  't',\n  'l',\n\
    \  ' ',\n  'l',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpw0le1pe7.js:24:12)\n    at Object.<anonymous> (/tmp/tmpw0le1pe7.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'r', 'y', ' ',\n    'h', 'd', ' ', ' ',\n    'l', 't', 't', 'l',\n    ' ', 'l',\
    \ 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf_fkhuew.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpf_fkhuew.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        let char = s[index];\n \
    \       if (char === ' ') {\n            words.push(s.substr(0, index));\n   \
    \         index = index + 1;\n        }\n        else if (char === 'a' || char\
    \ === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            index\
    \ = index + 1;\n        }\n        else if (char === 'n') {\n            index\
    \ = index + 1;\n        }\n        else {\n            index = index + 1;\n  \
    \      }\n    }\n    return words;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpzwxzx_nq.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwxzx_nq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  let\
    \ count = 1;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' ||\
    \ s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n\
    \    }\n  }\n  \n  if(count === n) {\n    for(let i = 0; i < s.length; i++) {\n\
    \      if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i]\
    \ === 'u') {\n        result.push(s[i]);\n      }\n    }\n  }\n  \n  return result;\n\
    }\n\nselect_words('abracadabra', 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7shwa2pu.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp7shwa2pu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let lastLetter = s[0];\n    let currentLetter = lastLetter;\n    let\
    \ currentWord = \"\";\n    for (let i = 1; i < s.length; i++) {\n        if (s[i]\
    \ !== currentLetter) {\n            result.push(currentWord);\n            currentWord\
    \ = currentLetter + s[i];\n            currentLetter = s[i];\n        } else {\n\
    \            currentLetter = s[i];\n        }\n    }\n    result.push(currentWord);\n\
    \    return result;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'Ma',\n\
    \  'ar',\n  'ry',\n  'y ',\n  ' h',\n  'ha',\n  'ad',\n  'd ',\n  ' a',\n  'a\
    \ ',\n  ' l',\n  'li',\n  'it',\n  'tl',\n  'le',\n  'e ',\n  ' l',\n  'la',\n\
    \  'am',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp58a8_j37.js:32:12)\n    at Object.<anonymous> (/tmp/tmp58a8_j37.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \   'Ma', 'ar', 'ry',\n    'y ', ' h', 'ha', 'ad',\n    'd ', ' a', 'a ', ' l',\n\
    \    'li', 'it', 'tl', 'le',\n    'e ', ' l', 'la', 'am',\n    'mb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\t\n\tlet index = 0;\n\tlet current = 0;\n\tlet currentChar\
    \ = s[0];\n\t\n\twhile (current < s.length && current < n) {\n\t\tif (currentChar\
    \ === s[current]) {\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tresult.push(s.substring(index,\
    \ current));\n\t\t\tindex = current;\n\t\t\tcurrent++;\n\t\t\tcurrentChar = s[current];\n\
    \t\t}\n\t}\n\t\n\tresult.push(s.substring(index, current));\n\t\n\treturn result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'ar',\n\
    \  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpogy4_sgk.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpogy4_sgk.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'ar',\
    \ 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3i8z3w1t.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp3i8z3w1t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s[index] === ' ') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '.') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '?') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '!') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '(') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === ')') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '-') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '/') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === ':') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '[') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === ']') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '{') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '}') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '<') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '>') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '=') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '|') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] === '\\\\') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === ',') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '\"') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '\\'') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '`') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '~') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '*') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '?') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '!') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '(') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === ')') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '-') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '/') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === ':') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '[') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === ']') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '{') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '}') {\n            index = index + 1;\n\
    \        }\n        if (s[index] === '<') {\n            index = index + 1;\n\
    \        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcz6i944s.ts(135,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004124
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp24026g39.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp24026g39.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (word.charAt(j) === 'a' || word.charAt(j)\
    \ === 'e' || word.charAt(j) === 'i' || word.charAt(j) === 'o' || word.charAt(j)\
    \ === 'u') {\n                count++;\n            }\n        }\n        if (count\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpopc3vsi9.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpopc3vsi9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        let count = 0;\n        for (let j = 0; j < char.length;\
    \ j++) {\n            if (char[j] === 'a' || char[j] === 'e' || char[j] === 'i'\
    \ || char[j] === 'o' || char[j] === 'u') {\n                count++;\n       \
    \     }\n        }\n        if (count === n) {\n            result.push(char);\n\
    \        }\n    }\n    return result;\n}\nselect_words('abracadabra', 2);\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5__34rvi.js:27:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp5__34rvi.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n \
    \   for (let i = 1; i < s.length - 1; i++) {\n        if (s[i] !== firstLetter)\
    \ {\n            result.push(s.substring(i - 1, i));\n        }\n        if (s[i]\
    \ === firstLetter && s[i + 1] === lastLetter) {\n            result.push(s.substring(i\
    \ - 1, i + 2));\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\"\
    , 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n\
    \  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1mitw29l.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp1mitw29l.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y', ' ',\n    'h', 'a', 'd', ' ', 'a',\n    ' ', 'l', 'i', 't', 't',\n\
    \    'l', 'e', ' ', 'l', 'a'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s.charAt(i) == ' ') {\n            result.push(s.substr(0, i));\n        }\n\
    \    }\n    return result;\n}\nselect_words('abc def ghi', 2); // ['abc def',\
    \ 'ghi']\nselect_words('abc def ghi', 3); // ['abc def']\nselect_words('abc def\
    \ ghi', 4); // []\nselect_words('abc def ghi', 5); // []\nselect_words('abc def\
    \ ghi', 6); // []\nselect_words('abc def ghi', 7); // []\nselect_words('abc def\
    \ ghi', 8); // []\nselect_words('abc def ghi', 9); // []\nselect_words('abc def\
    \ ghi', 10); // []\nselect_words('abc def ghi', 11); // []\nselect_words('abc\
    \ def ghi', 12); // []\nselect_words('abc def ghi', 13); // []\nselect_words('abc\
    \ def ghi', 14); // []\nselect_words('abc def ghi', 15); // []\nselect_words('abc\
    \ def ghi', 16); // []\nselect_words('abc def ghi', 17); // []\nselect_words('abc\
    \ def ghi', 18); // []\nselect_words('abc def ghi', 19); // []\nselect_words('abc\
    \ def ghi', 20); // []\nselect_words('abc def ghi', 21); // []\nselect_words('abc\
    \ def ghi', 22); // []\nselect_words('abc def ghi', 23); // []\nselect_words('abc\
    \ def ghi', 24); // []\nselect_words('abc def ghi', 25); // []\nselect_words('abc\
    \ def ghi', 26); // []\nselect_words('abc def ghi', 27); // []\nselect_words('abc\
    \ def ghi', 28); // []\nselect_words('abc def ghi', 29); // []\nselect_words('abc\
    \ def ghi', 30); // []\nselect_words('abc def ghi', 31); // []\nselect_words('abc\
    \ def ghi', 32); // []\nselect_words('abc def ghi', 33); // []\nselect_words('abc\
    \ def ghi', 34); // []\nselect_words('abc def ghi', 35); // []\nselect_words('abc\
    \ def ghi', 36); // []\nselect_words('abc def ghi', 37); // \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpco0_tcoh.js:55:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpco0_tcoh.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index\
    \ = 0;\n    let currentChar = s[0];\n    while (index < s.length && currentChar\
    \ === s[index]) {\n        currentChar = s[index];\n        index++;\n    }\n\
    \    if (currentChar === s[index]) {\n        words.push(s.substr(0, index));\n\
    \    }\n    while (index < s.length && currentChar !== s[index]) {\n        index++;\n\
    \    }\n    if (index < s.length) {\n        words.push(s.substr(index));\n  \
    \  }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpu9b97z1m.js:33:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpu9b97z1m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf_fkhuew.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpf_fkhuew.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s[index] === \" \") {\n            index = index + 1;\n\
    \        } else if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"\
    i\" || s[index] === \"o\" || s[index] === \"u\") {\n            index = index\
    \ + 1;\n        } else if (s[index] === \"y\") {\n            index = index +\
    \ 1;\n        } else {\n            result.push(s[index]);\n            index\
    \ = index + 1;\n        }\n        n--;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpskvejoik.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpskvejoik.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let firstLetter = s[0];\n    let lastLetter = s[s.length - 1];\n\
    \    \n    for (let i = 1; i <= n; i++) {\n        let letter = s[(i - 1) * s.length\
    \ + i];\n        \n        if (letter === firstLetter) {\n            result.push(s.slice(0,\
    \ i));\n        }\n        \n        if (letter === lastLetter) {\n          \
    \  result.push(s.slice(i * s.length, s.length));\n        }\n    }\n    \n   \
    \ return result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpe54ko8up.js:29:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpe54ko8up.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  let\
    \ last: number = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \  last = i;\n    }\n  }\n  \n  let start = 0;\n  \n  while (last != -1) {\n \
    \   let end = s.indexOf(' ', last);\n    \n    if (end == -1) {\n      end = s.length;\n\
    \    }\n    \n    if (end - start == n) {\n      result.push(s.substring(start,\
    \ end + 1));\n      start = end + 1;\n    }\n    \n    last = s.indexOf(' ', last);\n\
    \  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpt6w0i8u1.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpt6w0i8u1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let word\
    \ of words) {\n        let consonants: number[] = word.split('').filter(c => c\
    \ === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u');\n        \n  \
    \      if (consonants.length === n) {\n            result.push(word);\n      \
    \  }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmptc1smih3.ts(17,13): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    \n    for (let i = 0; i < s.length; i +=\
    \ 1) {\n        let char = s[i];\n        if (vowels.indexOf(char) !== -1) {\n\
    \            result.push(char);\n        }\n        else if (consonants.indexOf(char)\
    \ !== -1) {\n            result.push(char);\n        }\n    }\n    \n    if (result.length\
    \ === n) {\n        return result;\n    }\n    \n    return [];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpryatqirb.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpryatqirb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length - 1) {\n\t\tlet\
    \ letter = s[index];\n\t\tif (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpdj5zswwx.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdj5zswwx.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s\
    \ == \"\") {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ index = 0;\n    let chars = s.split(\"\");\n    for (let i = 0; i < chars.length;\
    \ i++) {\n        if (chars[i].match(/[aeiou]/)) {\n            if (chars[i].match(/[aeiou]/).length\
    \ == n) {\n                words.push(chars[i]);\n            }\n        }\n \
    \   }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphdbs6934.js:26:12)\n  \
    \  at Object.<anonymous> (/tmp/tmphdbs6934.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tlet isMatch = word.match(/[bcdfghjklmnpqrstvwxyz]{n}/);\n\
    \t\tif (isMatch) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\t\
    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps0cydmut.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmps0cydmut.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let\
    \ i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char)\
    \ !== -1) {\n            continue;\n        }\n        \n        let count = 0;\n\
    \        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char)\
    \ {\n                count++;\n            }\n        }\n        \n        if\
    \ (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpmz9ksvuq.js:33:12)\n    at Object.<anonymous> (/tmp/tmpmz9ksvuq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i'\
    \ || s[index] === 'o' || s[index] === 'u') {\n            n -= 1;\n        }\n\
    \        index += 1;\n    }\n    if (n === 0) {\n        return result;\n    }\n\
    \    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index]\
    \ === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index]\
    \ === 'u') {\n            n -= 1;\n            result.push(s[index]);\n      \
    \      index += 1;\n        }\n        index += 1;\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbrhxn2dc.ts(9,9): error TS2451: Cannot redeclare
    block-scoped variable ''index''.

    ../../../../../tmp/tmpbrhxn2dc.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''index''.

    '
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char\
    \ === ' ') {\n            continue;\n        }\n        let count = 0;\n     \
    \   for (let j = 0; j < char.length; j++) {\n            if (char[j] === 'a' ||\
    \ char[j] === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n\
    \                count++;\n            }\n        }\n        if (count === n)\
    \ {\n            words.push(s);\n        }\n    }\n    return words;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8ii3wnok.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp8ii3wnok.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char === ' ') {\n            result.push(s[i]);\n\
    \        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char\
    \ === 'o' || char === 'u') {\n            result.push(s[i]);\n        }\n    \
    \    else if (char === 'y') {\n            result.push(s[i]);\n        }\n   \
    \     else if (char === 'n') {\n            result.push(s[i]);\n        }\n  \
    \      else if (char === 'd') {\n            result.push(s[i]);\n        }\n \
    \       else if (char === 'g') {\n            result.push(s[i]);\n        }\n\
    \        else if (char === 'b' || char === 'c' || char === 'm' || char === 'p'\
    \ || char === 'f' || char === 'v' || char === 'w' || char === 'k' || char ===\
    \ 'x') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'q') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'x') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'y') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\n            result.push(s[i]);\n        }\n        else if (char ===\
    \ 'z') {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fmcjbnk.ts(138,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004129
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let i =\
    \ 0; i < words.length; i++) {\n        let word: string = words[i];\n        let\
    \ consonants: string[] = word.split('');\n        \n        for (let j = 0; j\
    \ < consonants.length; j++) {\n            if (consonants[j].match(/[b-df-hj-np-tv-z]/))\
    \ {\n                result.push(word);\n                break;\n            }\n\
    \        }\n    }\n    \n    return result;\n}\n\nselect_words('abracadabra',\
    \ 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpleykkqr3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpleykkqr3.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = s.split(\" \");\n    \n    for (let i\
    \ = 0; i < words.length; i++) {\n        let word = words[i];\n        let consonants:\
    \ string[] = word.split(\"\");\n        \n        for (let j = 0; j < consonants.length;\
    \ j++) {\n            if (consonants[j] == n) {\n                result.push(word);\n\
    \                break;\n            }\n        }\n    }\n    \n    return result;\n\
    }\n\nselect_words(\"abc def ghi jkl mno pqr\", 3);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9zouee41.ts(21,17): error TS2367: This condition
    will always return ''false'' since the types ''string'' and ''number'' have no
    overlap.

    '
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  for\
    \ (let i = 0; i < s.length; i++) {\n    let word = s.substr(i, n);\n    if (word.length\
    \ == n) {\n      result.push(word);\n    }\n  }\n  \n  return result;\n}\n\nselect_words(\"\
    abracadabra\", 5);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmplcw_1bvo.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplcw_1bvo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let\
    \ consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let vowel_count = 0;\n    let\
    \ consonant_count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])\
    \ >= 0) {\n            vowel_count++;\n        }\n        if (consonants.indexOf(s[i])\
    \ >= 0) {\n            consonant_count++;\n        }\n    }\n    if (vowel_count\
    \ === n) {\n        for (let i = 0; i < s.length; i++) {\n            if (vowels.indexOf(s[i])\
    \ >= 0) {\n                result.push(s[i]);\n            }\n        }\n    }\n\
    \    if (consonant_count === n) {\n        for (let i = 0; i < s.length; i++)\
    \ {\n            if (consonants.indexOf(s[i]) >= 0) {\n                result.push(s[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2); // => [\"abra\", \"abracadabra\"]\nselect_words(\"abracadabra\", 3); //\
    \ => []\nselect_words(\"abracadabra\", 4); // => []\nselect_words(\"abracadabra\"\
    , 5); // => []\nselect_words(\"abracadabra\", 6); // => []\nselect_words(\"abracadabra\"\
    , 7); // => []\nselect_words(\"abracadabra\", 8); // => []\nselect_words(\"abracadabra\"\
    , 9); // => []\nselect_words(\"abracadabra\", 10); // => []\nselect_words(\"abracadabra\"\
    , 11); // => []\nselect_words(\"abracadabra\", 12); // => []\nselect_words(\"\
    abracadabra\", 13); // => []\nselect_words(\"abracadabra\", 14); // => []\nselect_words(\"\
    abracadabra\", 15); // => []\nselect_words(\"abracadabra\", 16); // => []\nselect_words(\"\
    abracadabra\", 17); // => []\nselect_words(\"abracadabra\", 18); // => []\nselect_words(\"\
    abracadabra\", 19); // => []\nselect_words(\"abracadabra\", 20); // => []\nselect_words(\"\
    abracadabra\", 21); // => []\nselect_words(\"abracadabra\", 22); // => []\nselect_words(\"\
    abracadabra\", 23); // => []\nselect_words(\"abracadabra\", 24); // => []\nselect_words(\"\
    abracadabra\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbhsa4ugn.ts(60,26): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpbhsa4ugn.ts(61,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpbhsa4ugn.ts(61,9): error TS1005: '','' expected.

    '
  timestamp: 1660004129
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length && index\
    \ < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] ===\
    \ \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            words.push(s[index]);\n\
    \            index++;\n        }\n    }\n    return words;\n}\nselect_words(\"\
    abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004145
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let char = s[index];\n        if (char === \" \") {\n            result.push(s[index\
    \ + 1]);\n            index += 2;\n        } else if (char === \"a\" || char ===\
    \ \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n           \
    \ result.push(s[index + 1]);\n            index += 2;\n        } else if (char\
    \ === \"n\") {\n            result.push(s[index + 1]);\n            index += 2;\n\
    \        } else if (char === \"t\" || char === \"h\" || char === \"r\" || char\
    \ === \"l\" || char === \"d\" || char === \"s\" || char === \"z\" || char ===\
    \ \"x\") {\n            result.push(s[index + 1]);\n            index += 2;\n\
    \        } else if (char === \"c\" || char === \"k\" || char === \"m\" || char\
    \ === \"p\" || char === \"v\" || char === \"b\" || char === \"j\" || char ===\
    \ \"q\" || char === \"x\") {\n            result.push(s[index + 1]);\n       \
    \     index += 2;\n        } else if (char === \"m\" || char === \"n\" || char\
    \ === \"g\" || char === \"k\" || char === \"p\" || char === \"v\" || char ===\
    \ \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n           \
    \ result.push(s[index + 1]);\n            index += 2;\n        } else if (char\
    \ === \"p\" || char === \"t\" || char === \"h\" || char === \"r\" || char ===\
    \ \"l\" || char === \"d\" || char === \"s\" || char === \"z\" || char === \"x\"\
    ) {\n            result.push(s[index + 1]);\n            index += 2;\n       \
    \ } else if (char === \"c\" || char === \"k\" || char === \"m\" || char === \"\
    p\" || char === \"v\" || char === \"b\" || char === \"j\" || char === \"q\" ||\
    \ char === \"x\") {\n            result.push(s[index + 1]);\n            index\
    \ += 2;\n        } else if (char === \"m\" || char === \"n\" || char === \"g\"\
    \ || char === \"k\" || char === \"p\" || char === \"v\" || char === \"b\" || char\
    \ === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index\
    \ + 1]);\n            index += 2;\n        } else if (char === \"p\" || char ===\
    \ \"t\" || char === \"h\" || char === \"r\" || char === \"l\" || char === \"d\"\
    \ || char === \"s\" || char === \"z\" || char === \"x\") {\n            result.push(s[index\
    \ + 1]);\n            index += 2;\n        } else if (char === \"c\" || char ===\
    \ \"k\" || char === \"m\" || char === \"p\" || char === \"v\" || char === \"b\"\
    \ || char === \"j\" || char === \"q\" || char === \"x\") {\n            result.push(s[index\
    \ + 1]);\n            index += 2;\n        } else if (char === \"m\" || char ===\
    \ \"n\" || char === \"g\" || char === \"k\" || char === \"p\" || char === \"v\"\
    \ || char === \"b\" || char === \"j\" || char === \"q\" || char === \"x\") {\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0nxtox4.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ word = s.substring(i, i + n);\n        if (word.length == n) {\n           \
    \ result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmprrkq4h5e.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprrkq4h5e.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === ' ') {\n\t\t\twords.push(s.substr(index));\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\tfor (let i = 0;\
    \ i < n; i++) {\n\t\t\tif (char === s[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\
    \t\tif (count === n) {\n\t\t\twords.push(s.substr(index));\n\t\t\tindex++;\n\t\
    \t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004145
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let start = 0;\n    let end = s.length - 1;\n    \n    while\
    \ (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        let\
    \ char = s[mid];\n        \n        if (char == ' ') {\n            end = mid\
    \ - 1;\n        } else {\n            if (char == 'a' || char == 'e' || char ==\
    \ 'i' || char == 'o' || char == 'u') {\n                start = mid + 1;\n   \
    \         } else {\n                result.push(s.substring(start, mid + 1));\n\
    \                start = mid + 1;\n            }\n        }\n    }\n    \n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxoz7wthl.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxoz7wthl.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index\
    \ = 0;\n    let charCount = 0;\n    while (index < s.length) {\n        let char\
    \ = s[index];\n        if (char.match(/[aeiou]/)) {\n            charCount++;\n\
    \        }\n        if (charCount === n) {\n            words.push(s[index]);\n\
    \        }\n        index++;\n        charCount = 0;\n    }\n    return words;\n\
    }\nselect_words(\"abracadabra\", 2); // [\"abra\", \"cad\"]\nselect_words(\"abracadabra\"\
    , 3); // [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // [\"\
    abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\", 5); // [\"\
    abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 6);\
    \ // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"\
    abracadabra\", 7); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"\
    , \"abra\"]\nselect_words(\"abracadabra\", 8); // [\"abra\", \"cad\", \"abra\"\
    , \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\"\
    , 9); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"\
    cad\", \"abra\"]\nselect_words(\"abracadabra\", 10); // [\"abra\", \"cad\", \"\
    abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"\
    abracadabra\", 11); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"\
    , \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\"\
    , 12); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\",\
    \ \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\nselect_words(\"abracadabra\"\
    , 13); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\",\
    \ \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\"\
    , 14); // [\"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\",\
    \ \"cad\", \"abra\", \"cad\", \"abra\", \"cad\", \"abra\", \"cad\"]\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp__xmfp1a.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp__xmfp1a.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // code\
    \ goes here\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9kidlhzu.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpdk2pbs9h.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdk2pbs9h.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i,\
    \ n);\n        if (word.length == n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpf19ira7q.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf19ira7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let i = 0;\n    while (i < s.length) {\n       \
    \ let word = s.substr(i, n);\n        if (word.length >= n) {\n            result.push(word);\n\
    \        }\n        i += n;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp61ozkuqr.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp61ozkuqr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement a solution\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyd413dlk.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpyd413dlk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp24026g39.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp24026g39.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; ++i) {\n        let char = s[i];\n\
    \        if (vowels.indexOf(char) !== -1) {\n            result.push(char);\n\
    \        }\n        else if (consonants.indexOf(char) !== -1) {\n            if\
    \ (result.length == n) {\n                break;\n            }\n            else\
    \ {\n                result.push(char);\n            }\n        }\n    }\n   \
    \ \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n\
    \  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n\
    \  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmp2y8aa5h4.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2y8aa5h4.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'r', 'y', 'h', 'a',\n    'd', 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n\
    \    'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let\
    \ i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (vowels.indexOf(char)\
    \ !== -1) {\n            continue;\n        }\n        \n        let count = 0;\n\
    \        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char)\
    \ {\n                count++;\n            }\n        }\n        \n        if\
    \ (count === n) {\n            result.push(s);\n        }\n    }\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpmz9ksvuq.js:33:12)\n    at Object.<anonymous> (/tmp/tmpmz9ksvuq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index+n);\n        if (word.length == n)\
    \ {\n            words.push(word);\n            index += n;\n        }\n     \
    \   else {\n            index += word.length;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpd8uxlsww.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd8uxlsww.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index\
    \ < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\twords.push(s.substring(index\
    \ + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n\t\t\twords.push(s.substring(index\
    \ + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'y') {\n\t\t\t\
    words.push(s.substring(index + 1, s.length));\n\t\t\tindex++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (let i = 0; i < words.length; i++) {\n\t\
    \tlet word = words[i];\n\t\tlet count = 0;\n\t\tfor (let j = 0; j < word.length;\
    \ j++) {\n\t\t\tif (word[j] === char) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\
    if (count === n) {\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivxsjnr6.ts(33,20): error TS2304: Cannot find name
    ''char''.

    '
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let chars = s.split('');\n    \n    for (let i = 0; i < chars.length;\
    \ i++) {\n        let char = chars[i];\n        \n        if (char.match(/[aeiou]/))\
    \ {\n            if (char.match(/[aeiou]/).length == n) {\n                result.push(char);\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"\
    abracadabra\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfa9e48if.js:27:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpfa9e48if.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length;\n\t\t}\n\t}\n\
    \treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp5gjz4vmb.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5gjz4vmb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length && index\
    \ < n) {\n        if (s[index] === ' ') {\n            words.push(s.substr(index,\
    \ s.length));\n            index++;\n        }\n        index++;\n    }\n    return\
    \ words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpypx4m7wg.js:22:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpypx4m7wg.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkw408uu.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = [];\n    \n    for (let i = 0; i < s.length;\
    \ i++) {\n        let char = s[i];\n        \n        if (char === ' ') {\n  \
    \          words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 'a' || char === 'e' || char === 'i'\
    \ || char === 'o' || char === 'u') {\n            words.push(...words);\n    \
    \        words = [];\n            continue;\n        }\n        \n        if (char\
    \ === 'y') {\n            words.push(...words);\n            words = [];\n   \
    \         continue;\n        }\n        \n        if (char === 'n') {\n      \
    \      words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 't') {\n            words.push(...words);\n\
    \            words = [];\n            continue;\n        }\n        \n       \
    \ if (char === 'h') {\n            words.push(...words);\n            words =\
    \ [];\n            continue;\n        }\n        \n        if (char === 'r') {\n\
    \            words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 'l') {\n            words.push(...words);\n\
    \            words = [];\n            continue;\n        }\n        \n       \
    \ if (char === 'd') {\n            words.push(...words);\n            words =\
    \ [];\n            continue;\n        }\n        \n        if (char === 'c') {\n\
    \            words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 'm') {\n            words.push(...words);\n\
    \            words = [];\n            continue;\n        }\n        \n       \
    \ if (char === 'k') {\n            words.push(...words);\n            words =\
    \ [];\n            continue;\n        }\n        \n        if (char === 'p') {\n\
    \            words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 'f') {\n            words.push(...words);\n\
    \            words = [];\n            continue;\n        }\n        \n       \
    \ if (char === 'v') {\n            words.push(...words);\n            words =\
    \ [];\n            continue;\n        }\n        \n        if (char === 'b') {\n\
    \            words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (char === 'q') {\n            words.push(...words);\n\
    \            words = [];\n            continue;\n        }\n        \n       \
    \ if (char === 'j') {\n            words.push(...words);\n            words =\
    \ [];\n            continue;\n        }\n        \n        if (char === 'q') {\n\
    \            words.push(...words);\n            words = [];\n            continue;\n\
    \        }\n        \n        if (\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n      \
    \  if (vowels.indexOf(char) != -1) {\n            for (let j = 0; j < n; j++)\
    \ {\n                let index = consonants.indexOf(char);\n                if\
    \ (index != -1) {\n                    result.push(s.substring(i, i + index));\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nselect_words(\"\
    abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpie41p3zd.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpie41p3zd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const words: string[] = [];\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    const consonants = ['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'];\n    const vowel_count = vowels.filter(v => s.indexOf(v) !== -1).length;\n\
    \    const consonant_count = consonants.filter(c => s.indexOf(c) !== -1).length;\n\
    \    if (vowel_count === n) {\n        words.push(s);\n    }\n    if (consonant_count\
    \ === n) {\n        words.push(s);\n    }\n    return words;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm0lhfdx1.js:27:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpm0lhfdx1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004134
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = [];\n    if (s.length === 0) {\n        return words;\n    }\n    let\
    \ vowels = \"aeiou\";\n    for (let i = 0; i < s.length; i++) {\n        let char\
    \ = s[i];\n        if (vowels.indexOf(char) !== -1) {\n            continue;\n\
    \        }\n        let count = 0;\n        for (let j = 0; j < s.length; j++)\
    \ {\n            if (s[j] === char) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            words.push(char);\n      \
    \  }\n    }\n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpnlf9sofe.js:34:12)\n    at Object.<anonymous> (/tmp/tmpnlf9sofe.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004134
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // code\
    \ goes here\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4btqq5y.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004134
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index\
    \ < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"\
    e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n   \
    \         words.push(s[index]);\n            count++;\n        }\n        index++;\n\
    \    }\n    return words;\n}\nselect_words(\"abracadabra\", 2);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpomlrqa4t.js:24:12)\n    at Object.<anonymous> (/tmp/tmpomlrqa4t.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // Fill\
    \ in the code here\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpko__wfx2.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004134
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let char =\
    \ s[i];\n        \n        if (char === ' ') {\n            continue;\n      \
    \  }\n        \n        let count = 0;\n        \n        for (let j = 0; j <\
    \ char.length; j += 1) {\n            if (char[j] === char[i]) {\n           \
    \     count += 1;\n            }\n        }\n        \n        if (count === n)\
    \ {\n            result.push(s);\n        }\n    }\n    \n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgae3xiwf.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpgae3xiwf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && index < n) {\n\
    \t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index]\
    \ === 'u') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\
    \t}\n\t\tif (s[index] === 'y') {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'n') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'd') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'g') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'c') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'p') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'f') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'v') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'z') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'k') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'j') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'q') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 't') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'x') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'z') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'm') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'b') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'k') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'j') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === 'q') {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvbcx28zz.ts(134,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n      \
    \  if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char)\
    \ == -1) {\n                result.push(s[i]);\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  '\
    \ ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpnhfcet4_.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnhfcet4_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', ' ',\
    \ ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    if (s.length === 0) {\n        return words;\n  \
    \  }\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substring(i,\
    \ i + n);\n        if (word.length === n) {\n            words.push(word);\n \
    \           i += n;\n        }\n        else {\n            i += word.length;\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpj76798s_.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj76798s_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length && s.length\
    \ >= n) {\n        let char = s.charAt(index);\n        if (char === \" \") {\n\
    \            words.push(s.substr(index));\n            index++;\n        }\n \
    \       else if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            index++;\n        }\n        else {\n\
    \            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little\
    \ lamb',\n  ' a little lamb',\n  ' little lamb',\n  ' lamb'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpx3q19eif.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpx3q19eif.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ little lamb', ' a little lamb', ' little lamb', ' lamb' ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = s.split(' ');\n    \n    for (let i =\
    \ 0; i < words.length; i++) {\n        let word = words[i];\n        let count\
    \ = 0;\n        \n        for (let j = 0; j < word.length; j++) {\n          \
    \  if (word.charAt(j) === 'a' || word.charAt(j) === 'e' || word.charAt(j) ===\
    \ 'i' || word.charAt(j) === 'o' || word.charAt(j) === 'u') {\n               \
    \ count++;\n            }\n        }\n        \n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    \n    return result;\n}\n\
    \nselect_words(\"a man a plan a canal panama\", 3);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp98_6uja.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpp98_6uja.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let index = 0;\n    let chars = Array.from(s);\n    \n    while\
    \ (index < chars.length) {\n        let char = chars[index];\n        if (char.match(/[aeiou]/))\
    \ {\n            if (chars.slice(index).filter(c => c.match(/[aeiou]/)).length\
    \ == n) {\n                result.push(char);\n            }\n            index++;\n\
    \        }\n        index++;\n    }\n    \n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe4zjmado.ts(15,23): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnxxfaxv3.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpnxxfaxv3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004120
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tlet isMatch = word.match(/[bcdfghjklmnpqrstvwxyz]{n}/);\n\
    \t\tif (isMatch) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\t\
    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps0cydmut.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmps0cydmut.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004126
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet j = i;\n\t\t\
    while (j < s.length && s[j] === ' ') {\n\t\t\tj++;\n\t\t}\n\t\tlet k = j;\n\t\t\
    while (k < s.length && s[k] === ' ') {\n\t\t\tk++;\n\t\t}\n\t\tif (j - i === n)\
    \ {\n\t\t\tresult.push(s.substring(i, j));\n\t\t\ti = j + 1;\n\t\t}\n\t\telse\
    \ if (k - j === n) {\n\t\t\tresult.push(s.substring(j, k));\n\t\t\ti = k + 1;\n\
    \t\t}\n\t\telse {\n\t\t\ti = j + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf6h6oroe.js:36:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpf6h6oroe.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let consonants: string[] = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n   \
    \ \n    for (let i = 0; i < s.length; i++) {\n        let letter = s[i];\n   \
    \     \n        for (let j = 0; j < consonants.length; j++) {\n            if\
    \ (letter == consonants[j]) {\n                result.push(letter);\n        \
    \        break;\n            }\n        }\n    }\n    \n    return result;\n}\n\
    \nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n\
    \  'h',\n  'd',\n  'l',\n  't',\n  't',\n  'l',\n  'l',\n  'm',\n  'b'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm79nbrjj.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm79nbrjj.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'r',\
    \ 'y', 'h', 'd',\n    'l', 't', 't', 'l',\n    'l', 'm', 'b'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = [];\n    \n    if (s.length == 0) {\n        return words;\n    }\n\
    \    \n    let i = 0;\n    while (i < s.length && n > 0) {\n        if (s.charAt(i)\
    \ == ' ') {\n            i++;\n            continue;\n        }\n        \n  \
    \      if (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n   \
    \         continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toUpperCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toUpperCase()) {\n            i++;\n           \
    \ continue;\n        }\n        \n        if (s.charAt(i) == s.charAt(i).toLowerCase())\
    \ {\n            i++;\n            continue;\n        }\n        \n        if\
    \ (s.charAt(i) == s.charAt(i).toLowerCase()) {\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqicx2od.ts(138,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if\
    \ (s[index] == ' ') {\n            index = index + 1;\n        }\n        if (s[index]\
    \ == ' ' || s[index] == '.' || s[index] == '!' || s[index] == '?') {\n       \
    \     index = index + 1;\n        }\n        if (s[index] == 'a' || s[index] ==\
    \ 'e' || s[index] == 'i' || s[index] == 'o' || s[index] == 'u') {\n          \
    \  index = index + 1;\n        }\n        if (s[index] == 'y') {\n           \
    \ index = index + 1;\n        }\n        if (s[index] == 's' || s[index] == 't'\
    \ || s[index] == 'd' || s[index] == 'g' || s[index] == 'b' || s[index] == 'c')\
    \ {\n            index = index + 1;\n        }\n        if (s[index] == 'p') {\n\
    \            index = index + 1;\n        }\n        if (s[index] == 'f' || s[index]\
    \ == 'v' || s[index] == 'm' || s[index] == 'n' || s[index] == 'k' || s[index]\
    \ == 'x') {\n            index = index + 1;\n        }\n        if (s[index] ==\
    \ 'q') {\n            index = index + 1;\n        }\n        if (s[index] == 'z')\
    \ {\n            index = index + 1;\n        }\n        if (s[index] == 'j') {\n\
    \            index = index + 1;\n        }\n        if (s[index] == 'q') {\n \
    \           index = index + 1;\n        }\n        if (s[index] == 'z') {\n  \
    \          index = index + 1;\n        }\n        if (s[index] == 'k') {\n   \
    \         index = index + 1;\n        }\n        if (s[index] == 'x') {\n    \
    \        index = index + 1;\n        }\n        if (s[index] == 'k') {\n     \
    \       index = index + 1;\n        }\n        if (s[index] == 'x') {\n      \
    \      index = index + 1;\n        }\n        if (s[index] == 'k') {\n       \
    \     index = index + 1;\n        }\n        if (s[index] == 'x') {\n        \
    \    index = index + 1;\n        }\n        if (s[index] == 'k') {\n         \
    \   index = index + 1;\n        }\n        if (s[index] == 'x') {\n          \
    \  index = index + 1;\n        }\n        if (s[index] == 'k') {\n           \
    \ index = index + 1;\n        }\n        if (s[index] == 'x') {\n            index\
    \ = index + 1;\n        }\n        if (s[index] == 'k') {\n            index =\
    \ index + 1;\n        }\n        if (s[index] == 'x') {\n            index = index\
    \ + 1;\n        }\n        if (s[index] == 'k') {\n            index = index +\
    \ 1;\n        }\n        if (s[index] == 'x') {\n            index = index + 1;\n\
    \        }\n        if (s[index] == 'k') {\n            index = index + 1;\n \
    \       }\n        if (s[index] == 'x') {\n            index = index + 1;\n  \
    \      }\n        if (s[index] == 'k') {\n            index = index + 1;\n   \
    \     }\n        if (s[index] == 'x') {\n            index = index + 1;\n    \
    \    }\n        if (s[index] == 'k') {\n            index = index + 1;\n     \
    \   }\n        if (s[index] == 'x') {\n            index = index + 1;\n      \
    \  }\n        if (s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn_fdii3w.ts(111,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpn_fdii3w.ts(126,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let words: string[] = s.split(\" \");\n    \n    for (let i\
    \ = 0; i < words.length; i++) {\n        let word: string = words[i];\n      \
    \  \n        if (word.length == n) {\n            result.push(word);\n       \
    \ }\n    }\n    \n    return result;\n}\n\nselect_words(\"abc def ghi jkl mno\
    \ pqr\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcjaoi0yr.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcjaoi0yr.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    if (s.length === 0) {\n        return words;\n  \
    \  }\n    let consonants = /[b-df-hj-np-tv-z]/g;\n    let vowels = /[aeiouy]/g;\n\
    \    let consonants_count = s.match(consonants).length;\n    let vowels_count\
    \ = s.match(vowels).length;\n    let consonant_count = 0;\n    let vowel_count\
    \ = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) ===\
    \ consonants.charAt(consonant_count)) {\n            consonant_count++;\n    \
    \        if (consonant_count === n) {\n                words.push(s.substr(0,\
    \ i));\n            }\n        }\n        if (s.charAt(i) === vowels.charAt(vowel_count))\
    \ {\n            vowel_count++;\n            if (vowel_count === n) {\n      \
    \          words.push(s.substr(0, i));\n            }\n        }\n    }\n    return\
    \ words;\n}\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphz0yjjyl.ts(19,40): error TS2339: Property ''charAt''
    does not exist on type ''RegExp''.

    ../../../../../tmp/tmphz0yjjyl.ts(25,36): error TS2339: Property ''charAt'' does
    not exist on type ''RegExp''.

    '
  timestamp: 1660004135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let lastLetter = s[0];\n    let lastCount: number = 0;\n    for (let\
    \ i = 1; i < s.length; i++) {\n        if (s[i] !== lastLetter) {\n          \
    \  if (lastCount === n) {\n                result.push(s.slice(lastLetter, i));\n\
    \            }\n            lastCount = 1;\n            lastLetter = s[i];\n \
    \       } else {\n            lastCount++;\n        }\n    }\n    if (lastCount\
    \ === n) {\n        result.push(s.slice(lastLetter));\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppkya5vhy.ts(17,37): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmppkya5vhy.ts(26,29): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        let word = s.substring(index,\
    \ index + 1);\n        if (word.length >= n && word.match(/[aeiou]/)) {\n    \
    \        words.push(word);\n        }\n        index++;\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsvncntmv.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsvncntmv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === ' ') {\n\t\t\tresult.push(s.substring(index, index\
    \ + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'a' || char === 'e' ||\
    \ char === 'i' || char === 'o' || char === 'u') {\n\t\t\tresult.push(s.substring(index,\
    \ index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'y') {\n\t\t\tresult.push(s.substring(index,\
    \ index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === 'n') {\n\t\t\tresult.push(s.substring(index,\
    \ index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\
    \treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'y',\n\
    \  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprvmti774.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmprvmti774.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'y', ' ', 'a',\n    ' ', 'a', ' ', 'i',\n    'e', ' ', 'a'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n\
    \    for (let i = 0; i < chars.length; i++) {\n        if (chars[i].match(/[aeiou]/i))\
    \ {\n            if (chars[i].match(/[aeiou]/i).length == n) {\n             \
    \   result.push(chars[i]);\n            }\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abracadabra\", 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"\
    abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\"\
    , 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\n\
    select_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"\
    abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\"\
    , 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\n\
    select_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"\
    abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\"\
    , 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\n\
    select_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"\
    abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\"\
    , 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\n\
    select_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"\
    abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\"\
    , 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\n\
    select_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"\
    abracadabra\", 39);\nselect_words(\"abracadabra\", 40\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpge0rfqd7.ts(59,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpge0rfqd7.ts(59,9): error TS1005: '','' expected.

    '
  timestamp: 1660004138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index\
    \ = 0;\n    while (index < s.length) {\n        let char = s[index];\n       \
    \ if (char === ' ') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char\
    \ === 'o' || char === 'u') {\n            words.push(s.substr(index));\n     \
    \       index++;\n        }\n        else if (char === 'y') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'n') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 't') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'h') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'r') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'l') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'd') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'c') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'm') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'p') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'f') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'v') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'b') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 's') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'x') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'q') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'k') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'j') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'q') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'p') {\n         \
    \   words.push(s.substr(index));\n            index++;\n        }\n        else\
    \ if (char === 'f') {\n            words.push(s.substr(index));\n            index++;\n\
    \        }\n        else if (char === 'v') {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else if (char === 'b') {\n         \
    \   words.push(s.substr(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp53t4_f7c.ts(113,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp53t4_f7c.ts(128,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    if (s.length == 0) {\n        return words;\n\
    \    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    for (let\
    \ i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if\
    \ (consonants.indexOf(char) == -1) {\n            words.push(char);\n        }\n\
    \    }\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 3);\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  'i',\n  'e',\n  ' ',\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnby_665y.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnby_665y.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', ' ', 'a',\n    ' ', 'a', ' ', 'i',\n    'e', ' ', 'a'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n\
    \    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels\
    \ = \"aeiou\";\n    \n    for (let i = 0; i < s.length; i += 1) {\n        let\
    \ char = s[i];\n        \n        if (vowels.indexOf(char) !== -1) {\n       \
    \     continue;\n        }\n        \n        if (consonants.indexOf(char) !==\
    \ -1) {\n            let word = \"\";\n            \n            for (let j =\
    \ 0; j < n; j += 1) {\n                word += char;\n            }\n        \
    \    \n            words.push(word);\n        }\n    }\n    \n    return words;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'rrrr',\n\
    \  'yyyy',\n  'hhhh',\n  'dddd',\n  'llll',\n  'tttt',\n  'tttt',\n  'llll',\n\
    \  'llll',\n  'mmmm',\n  'bbbb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmptrlhwwu9.js:33:12)\n    at Object.<anonymous> (/tmp/tmptrlhwwu9.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'rrrr',\
    \ 'yyyy',\n    'hhhh', 'dddd',\n    'llll', 'tttt',\n    'tttt', 'llll',\n   \
    \ 'llll', 'mmmm',\n    'bbbb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index + 1);\n        if (word.length ==\
    \ n) {\n            result.push(word);\n            index += n;\n        }\n \
    \       else {\n            index += word.length;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphqz74sva.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmphqz74sva.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3i8z3w1t.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp3i8z3w1t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004125
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index+n);\n        if (word.length == n)\
    \ {\n            result.push(word);\n            index += n;\n        }\n    \
    \    else {\n            index += word.length;\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmprdo_mo65.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprdo_mo65.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    // Your code here\n    \n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv25i_are.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpv25i_are.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s === '') {\n        return result;\n    }\n\
    \    let chars = s.split('');\n    for (let i = 0; i < chars.length; i++) {\n\
    \        let char = chars[i];\n        if (char.match(/[aeiou]/)) {\n        \
    \    result.push(char);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpt4ioiub6.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt4ioiub6.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length && s.length\
    \ >= n) {\n        let word = s.substring(index, index + 1);\n        if (word.length\
    \ >= n && word.match(/[^aeiou]/)) {\n            words.push(word);\n        }\n\
    \        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm109tqy4.js:22:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpm109tqy4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let lastChar = s[0];\n    let count = 0;\n    \n    for (let\
    \ i = 1; i < s.length; i++) {\n        if (s[i] !== lastChar) {\n            count++;\n\
    \        }\n        else {\n            count--;\n        }\n        \n      \
    \  if (count === n) {\n            result.push(s);\n        }\n        lastChar\
    \ = s[i];\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpj1hqso_f.js:31:12)\n    at Object.<anonymous> (/tmp/tmpj1hqso_f.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmps6b49g8g.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps6b49g8g.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let consonants = consonants(s);\n    \n    for (let i = 0; i\
    \ < consonants.length; i++) {\n        let word = s.split(consonants[i]);\n  \
    \      if (word.length == n) {\n            result.push(word.join(consonants[i]));\n\
    \        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbdw0xqlf.ts(14,22): error TS2448: Block-scoped variable
    ''consonants'' used before its declaration.

    '
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf_fkhuew.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpf_fkhuew.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004121
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: your code here\n    \n    return\
    \ result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp2myx4l8.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpp2myx4l8.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index\
    \ = 0;\n    while (index < s.length && s[index] == ' ') {\n        index++;\n\
    \    }\n    let word = '';\n    while (index < s.length && s[index] != ' ') {\n\
    \        if (s[index] == ' ') {\n            words.push(word);\n            word\
    \ = '';\n            index++;\n        } else {\n            word += s[index];\n\
    \            index++;\n        }\n    }\n    words.push(word);\n    return words;\n\
    }\nselect_words(\"abc def ghi jkl mno pqr stu vwx yz\", 3);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbumekwz_.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbumekwz_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s === '') {\n        return result;\n    }\n\
    \    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if\
    \ (char === ' ') {\n            continue;\n        }\n        let count = 0;\n\
    \        for (let j = 0; j < n; j++) {\n            if (char === s[j]) {\n   \
    \             count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(s);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp72dny52w.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp72dny52w.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let chars = s.split('');\n    let count = 0;\n    for (let i = 0;\
    \ i < chars.length; i++) {\n        if (chars[i].match(/[aeiou]/i)) {\n      \
    \      count++;\n        }\n    }\n    if (count === n) {\n        result.push(s);\n\
    \    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\nselect_words(\"\
    abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\nselect_words(\"abracadabra\"\
    , 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"abracadabra\", 7);\n\
    select_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\", 9);\nselect_words(\"\
    abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\nselect_words(\"abracadabra\"\
    , 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"abracadabra\", 14);\n\
    select_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\", 16);\nselect_words(\"\
    abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\nselect_words(\"abracadabra\"\
    , 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"abracadabra\", 21);\n\
    select_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\", 23);\nselect_words(\"\
    abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\nselect_words(\"abracadabra\"\
    , 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"abracadabra\", 28);\n\
    select_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\", 30);\nselect_words(\"\
    abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\nselect_words(\"abracadabra\"\
    , 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"abracadabra\", 35);\n\
    select_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\", 37);\nselect_words(\"\
    abracadabra\", 38);\nselect_words(\"abracadabra\", 39);\nselect_words(\"abracadabra\"\
    , \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkhwu8_wd.ts(63,9): error TS1005: '','' expected.

    '
  timestamp: 1660004139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  const stack:\
    \ number[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n\
    \    if (char === ' ') {\n      while (stack.length > 0 && stack[stack.length\
    \ - 1] > 0) {\n        words.push(s.substring(stack[stack.length - 1] + 1, i));\n\
    \        stack.pop();\n      }\n      stack.push(i);\n    }\n  }\n  while (stack.length\
    \ > 0) {\n    words.push(s.substring(stack[stack.length - 1] + 1, s.length));\n\
    \    stack.pop();\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'had',\n\
    \  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmppv__nbpi.js:32:12)\n    at Object.<anonymous> (/tmp/tmppv__nbpi.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'had', 'a',\
    \ 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let index = 0;\n    while (index < s.length && index < n) {\n     \
    \   if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] ===\
    \ 'o' || s[index] === 'u') {\n            result.push(s[index]);\n        }\n\
    \        index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcmoc8ks2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcmoc8ks2.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length){\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n){\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpjmo6gsoy.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjmo6gsoy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n\
    \        if (vowels.indexOf(char) != -1) {\n            for (let j = 0; j < n;\
    \ j++) {\n                if (consonants.indexOf(char) == j) {\n             \
    \       result.push(s[i]);\n                }\n            }\n        }\n    }\n\
    \    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprcuv30b2.js:29:12)\n  \
    \  at Object.<anonymous> (/tmp/tmprcuv30b2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004140
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    \n    // Your code here\n    \n    return result;\n}\n\nselect_words(\"\
    abracadabra\", 2); // [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); //\
    \ [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // [\"abra\"\
    , \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 5); // []\nselect_words(\"\
    abracadabra\", 6); // []\nselect_words(\"abracadabra\", 7); // []\nselect_words(\"\
    abracadabra\", 8); // []\nselect_words(\"abracadabra\", 9); // []\nselect_words(\"\
    abracadabra\", 10); // []\nselect_words(\"abracadabra\", 11); // []\nselect_words(\"\
    abracadabra\", 12); // []\nselect_words(\"abracadabra\", 13); // []\nselect_words(\"\
    abracadabra\", 14); // []\nselect_words(\"abracadabra\", 15); // []\nselect_words(\"\
    abracadabra\", 16); // []\nselect_words(\"abracadabra\", 17); // []\nselect_words(\"\
    abracadabra\", 18); // []\nselect_words(\"abracadabra\", 19); // []\nselect_words(\"\
    abracadabra\", 20); // []\nselect_words(\"abracadabra\", 21); // []\nselect_words(\"\
    abracadabra\", 22); // []\nselect_words(\"abracadabra\", 23); // []\nselect_words(\"\
    abracadabra\", 24); // []\nselect_words(\"abracadabra\", 25); // []\nselect_words(\"\
    abracadabra\", 26); // []\nselect_words(\"abracadabra\", 27); // []\nselect_words(\"\
    abracadabra\", 28); // []\nselect_words(\"abracadabra\", 29); // []\nselect_words(\"\
    abracadabra\", 30); // []\nselect_words(\"abracadabra\", 31); // []\nselect_words(\"\
    abracadabra\", 32); // []\nselect_words(\"abracadabra\", 33); // []\nselect_words(\"\
    abracadabra\", 34); // []\nselect_words(\"abracadabra\", 35); // []\nselect_words(\"\
    abracadabra\", 36); // []\nselect_words(\"abracadabra\", 37); // []\nselect_words(\"\
    abracad\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd91ypym6.ts(51,22): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpd91ypym6.ts(52,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpd91ypym6.ts(52,9): error TS1005: '','' expected.

    '
  timestamp: 1660004140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp3hgker1b.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3hgker1b.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    // TODO: implement this function\n    \n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcy2xtlom.js:15:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpcy2xtlom.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (word[j] === 'c') {\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmporjhzpaz.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmporjhzpaz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n\
    \    \n    for(let i = 0; i < chars.length; i++) {\n        if(chars[i].match(/[aeiou]/))\
    \ {\n            chars.splice(i, 1);\n            i--;\n        }\n    }\n   \
    \ \n    for(let i = 0; i < chars.length; i++) {\n        if(chars[i].match(/[aeiou]/))\
    \ {\n            if(chars[i].match(/[aeiou]/).length == n) {\n               \
    \ result.push(chars[i]);\n            }\n        }\n    }\n    \n    return result;\n\
    }\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmujmjvgh.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmujmjvgh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s == \"\") {\n        return result;\n\
    \    }\n    \n    let char_count: number = 0;\n    \n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (s[i] == \" \") {\n            char_count++;\n        }\n\
    \    }\n    \n    if (char_count < n) {\n        return result;\n    }\n    \n\
    \    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n    \
    \        char_count++;\n        }\n        else if (s[i] == \"a\" || s[i] == \"\
    e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\") {\n            result.push(s.substr(0,\
    \ i));\n        }\n    }\n    \n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary\
    \ h',\n  'Mary had ',\n  'Mary had a l',\n  'Mary had a littl',\n  'Mary had a\
    \ little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpe443tvyg.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe443tvyg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mary h',\n    'Mary had ',\n    'Mary had a l',\n    'Mary had a littl',\n\
    \    'Mary had a little l'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let index = 0;\n    let index2 = 0;\n    \n    while (index\
    \ < s.length && index2 < n) {\n        if (s[index] == s[index2]) {\n        \
    \    index++;\n            index2++;\n        }\n        else {\n            result.push(s[index]);\n\
    \            index++;\n            index2 = 0;\n        }\n    }\n    \n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8tw889uk.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp8tw889uk.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    // TODO\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgjd6pw_n.ts(7,46): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660004111
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index+n);\n        if (word.length == n)\
    \ {\n            result.push(word);\n            index += n;\n        }\n    \
    \    else {\n            index += word.length;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpp54x14f1.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp54x14f1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    const result: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        let char = s[index];\n \
    \       if (char === ' ') {\n            result.push(s.substr(index, n - 1));\n\
    \            index += n - 1;\n        } else if (char === 'a') {\n           \
    \ result.push(s.substr(index, n - 1));\n            index += n - 1;\n        }\
    \ else if (char === 'e') {\n            result.push(s.substr(index, n - 1));\n\
    \            index += n - 1;\n        } else if (char === 'i') {\n           \
    \ result.push(s.substr(index, n - 1));\n            index += n - 1;\n        }\
    \ else if (char === 'o') {\n            result.push(s.substr(index, n - 1));\n\
    \            index += n - 1;\n        } else if (char === 'u') {\n           \
    \ result.push(s.substr(index, n - 1));\n            index += n - 1;\n        }\
    \ else if (char === 'y') {\n            result.push(s.substr(index, n - 1));\n\
    \            index += n - 1;\n        } else {\n            result.push(s.substr(index,\
    \ n - 1));\n            index += n - 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mar',\n\
    \  'y h',\n  'ad ',\n  'a l',\n  'itt',\n  'le ',\n  'lam',\n  'b'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoiv_nd7t.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoiv_nd7t.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mar',\
    \ 'y h',\n    'ad ', 'a l',\n    'itt', 'le ',\n    'lam', 'b'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let index = 0;\n    while (index < s.length && n\
    \ > 0) {\n        if (s[index] === \" \") {\n            index = index + 1;\n\
    \        } else {\n            result.push(s[index]);\n            index = index\
    \ + 1;\n        }\n        n--;\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpx0yspdkp.js:25:12)\n    at Object.<anonymous> (/tmp/tmpx0yspdkp.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    if (s.length == 0) {\n        return words;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n\
    \        \n        if (vowels.indexOf(char) == -1) {\n            if (consonants.indexOf(char)\
    \ == -1) {\n                words.push(s);\n            }\n        }\n    }\n\
    \    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmxvgoh21.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmxvgoh21.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let\
    \ index = 0;\n    while (index < s.length) {\n        let word = s.substring(index,\
    \ index + 1);\n        if (word.length >= n) {\n            words.push(word);\n\
    \            index += word.length;\n        }\n        else {\n            index\
    \ += 1;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphsz_r7t4.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmphsz_r7t4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n\
    \    if (word.length === n) {\n      words.push(word);\n    }\n    index += 1;\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptf__x3pz.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmptf__x3pz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    \n    if (s.length === 0) {\n        return words;\n\
    \    }\n    \n    let word = \"\";\n    let count = 0;\n    \n    for (let i =\
    \ 0; i < s.length; i++) {\n        if (s[i] === \"a\" || s[i] === \"e\" || s[i]\
    \ === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n            count++;\n   \
    \         if (count === n) {\n                words.push(word);\n            \
    \    word = \"\";\n                count = 0;\n            }\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    \n    return words;\n}\n\nconsole.log(select_words(\"\
    aeiou\", 3));\nconsole.log(select_words(\"aeiou\", 4));\nconsole.log(select_words(\"\
    aeiou\", 5));\nconsole.log(select_words(\"aeiou\", 6));\nconsole.log(select_words(\"\
    aeiou\", 7));\nconsole.log(select_words(\"aeiou\", 8));\nconsole.log(select_words(\"\
    aeiou\", 9));\nconsole.log(select_words(\"aeiou\", 10));\nconsole.log(select_words(\"\
    aeiou\", 11));\nconsole.log(select_words(\"aeiou\", 12));\nconsole.log(select_words(\"\
    aeiou\", 13));\nconsole.log(select_words(\"aeiou\", 14));\nconsole.log(select_words(\"\
    aeiou\", 15));\nconsole.log(select_words(\"aeiou\", 16));\nconsole.log(select_words(\"\
    aeiou\", 17));\nconsole.log(select_words(\"aeiou\", 18));\nconsole.log(select_words(\"\
    aeiou\", 19));\nconsole.log(select_words(\"aeiou\", 20));\nconsole.log(select_words(\"\
    aeiou\", 21));\nconsole.log(select_words(\"aeiou\", 22));\nconsole.log(select_words(\"\
    aeiou\", 23));\nconsole.log(select_words(\"aeiou\", 24));\nconsole.log(select_words(\"\
    aeiou\", 25));\nconsole.log(select_words(\"aeiou\", 26));\nconsole.log(select_words(\"\
    aeiou\", 27));\nconsole.log(select_words(\"aeiou\", 28));\nconsole.log(select_words(\"\
    aeiou\", 29));\nconsole.log(select_words(\"aeiou\", 30));\nconsole.log(select_words(\"\
    aeiou\", 31));\nconsole.log(select_words(\"aeiou\", 32));\nconsole.log(select_words(\"\
    aeiou\", 33));\nconsole.log(select_words(\"aeiou\", 34));\nconsole.log(select_words(\"\
    aeiou\", 35));\nconsole.log(select_words(\"aeiou\", 36));\nconsole.log(select_words(\"\
    aeiou\", 37));\nconsole.log(select_words(\"aeiou\", 38));\nconsole.log(select_words(\"\
    aeiou\", 39));\nconsole.log(select_words(\"aeiou\", 40));\nconsole.log(select_words(\"\
    aeiou\", 41));\nconsole.log(select_words(\"aeiou\", 42));\nconsole.log(select_words(\"\
    aeiou\", 43));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr6j7dyht.ts(75,9): error TS1005: '','' expected.

    '
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpliycoyu0.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpliycoyu0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length - 1)\
    \ {\n        let word = s.substring(index, index + n);\n        if (word.length\
    \ == n) {\n            words.push(word);\n        }\n        index += n;\n   \
    \ }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpdzwp0n69.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdzwp0n69.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let words: string[] = s.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (word[j] === 'c') {\n       \
    \         count++;\n            }\n        }\n        if (count === n) {\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nselect_words('abracadabra',\
    \ 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpskweij8n.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpskweij8n.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char === ' ') {\n            result.push(s[i]);\n\
    \        }\n        else if (char === 'a' || char === 'e' || char === 'i' || char\
    \ === 'o' || char === 'u') {\n            result.push(s[i]);\n        }\n    \
    \    else if (char === 'y') {\n            result.push(s[i]);\n        }\n   \
    \     else if (char === 'o' || char === 'u' || char === 'i' || char === 'e' ||\
    \ char === 'a') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'n') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'd') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 't') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'h') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'r') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'l') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'c') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'm') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'p') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 's') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'f') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'v') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'b') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'k') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'j') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'q') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'x') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'q') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'x') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'y') {\n            result.push(s[i]);\n        }\n        else if\
    \ (char === 'z') {\n            result.push(s[i]);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph01yo3_c.ts(142,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s.charAt(i) == ' ') {\n            result.push(s.substr(0, i));\n        }\n\
    \    }\n    return result;\n}\nselect_words(\"The quick brown fox jumps over the\
    \ lazy dog\", 2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmprfs5cx_r.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprfs5cx_r.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004145
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n      \
    \  if (vowels.indexOf(char) !== -1) {\n            continue;\n        }\n    \
    \    if (consonants.indexOf(char) !== -1) {\n            result.push(s);\n   \
    \     }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 3);\nselect_words(\"\
    abracadabra\", 4);\nselect_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\"\
    , 6);\nselect_words(\"abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\n\
    select_words(\"abracadabra\", 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"\
    abracadabra\", 11);\nselect_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\"\
    , 13);\nselect_words(\"abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\n\
    select_words(\"abracadabra\", 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"\
    abracadabra\", 18);\nselect_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\"\
    , 20);\nselect_words(\"abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\n\
    select_words(\"abracadabra\", 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"\
    abracadabra\", 25);\nselect_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\"\
    , 27);\nselect_words(\"abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\n\
    select_words(\"abracadabra\", 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"\
    abracadabra\", 32);\nselect_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\"\
    , 34);\nselect_words(\"abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\n\
    select_words(\"abracadabra\", 37);\nselect_words(\"abracadabra\", 38);\nselect_words(\"\
    abracadabra\", 39);\nselect_word\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm03bvee0.ts(62,1): error TS2552: Cannot find name
    ''select_word''. Did you mean ''select_words''?

    '
  timestamp: 1660004144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ char = s[i];\n        if (char === \" \") {\n            result.push(\"\");\n\
    \        } else {\n            for (let j = 0; j < n; j++) {\n               \
    \ if (char === s[j]) {\n                    result.push(s);\n                \
    \    break;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abc def ghi jkl mno\", 3);\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n\
    \  'Mary had a little lamb',\n  '',\n  'Mary had a little lamb',\n  '',\n  'Mary\
    \ had a little lamb',\n  '',\n  '',\n  'Mary had a little lamb'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsnr4tzv8.js:29:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsnr4tzv8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n\
    \    'Mary had a little lamb',\n    '',\n    'Mary had a little lamb',\n    '',\n\
    \    'Mary had a little lamb',\n    '',\n    '',\n    'Mary had a little lamb'\n\
    \  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004145
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length === 0) {\n        return result;\n\
    \    }\n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])\
    \ > -1) {\n            for (let j = 0; j < n; j++) {\n                if (consonants.indexOf(s[i])\
    \ > -1) {\n                    result.push(s[i]);\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2);\nselect_words(\"abracadabra\", 3);\nselect_words(\"abracadabra\", 4);\n\
    select_words(\"abracadabra\", 5);\nselect_words(\"abracadabra\", 6);\nselect_words(\"\
    abracadabra\", 7);\nselect_words(\"abracadabra\", 8);\nselect_words(\"abracadabra\"\
    , 9);\nselect_words(\"abracadabra\", 10);\nselect_words(\"abracadabra\", 11);\n\
    select_words(\"abracadabra\", 12);\nselect_words(\"abracadabra\", 13);\nselect_words(\"\
    abracadabra\", 14);\nselect_words(\"abracadabra\", 15);\nselect_words(\"abracadabra\"\
    , 16);\nselect_words(\"abracadabra\", 17);\nselect_words(\"abracadabra\", 18);\n\
    select_words(\"abracadabra\", 19);\nselect_words(\"abracadabra\", 20);\nselect_words(\"\
    abracadabra\", 21);\nselect_words(\"abracadabra\", 22);\nselect_words(\"abracadabra\"\
    , 23);\nselect_words(\"abracadabra\", 24);\nselect_words(\"abracadabra\", 25);\n\
    select_words(\"abracadabra\", 26);\nselect_words(\"abracadabra\", 27);\nselect_words(\"\
    abracadabra\", 28);\nselect_words(\"abracadabra\", 29);\nselect_words(\"abracadabra\"\
    , 30);\nselect_words(\"abracadabra\", 31);\nselect_words(\"abracadabra\", 32);\n\
    select_words(\"abracadabra\", 33);\nselect_words(\"abracadabra\", 34);\nselect_words(\"\
    abracadabra\", 35);\nselect_words(\"abracadabra\", 36);\nselect_words(\"abracadabra\"\
    , 37);\nselect_words(\"abracadabra\", 38);\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqptf_xkm.js:65:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpqptf_xkm.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004145
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n\
    \    }\n    \n    let consonants = select_consonants(s);\n    \n    for (let i\
    \ = 0; i < consonants.length; i++) {\n        let word = s.split(consonants[i])[0];\n\
    \        if (word.length == n) {\n            result.push(word);\n        }\n\
    \    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiv5ij7sl.ts(14,22): error TS2304: Cannot find name
    ''select_consonants''.

    '
  timestamp: 1660004145
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n\
    \        if (vowels.includes(char)) {\n            result.push(s[i]);\n      \
    \  }\n        else if (consonants.includes(char)) {\n            if (result.length\
    \ >= n) {\n                break;\n            }\n            result.push(s[i]);\n\
    \        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqa0e6cat.ts(19,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpqa0e6cat.ts(22,29): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    if (s.length == 0) {\n        return result;\n \
    \   }\n    let words: string[] = s.split(\" \");\n    for (let word of words)\
    \ {\n        if (word.length == n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\nselect_words(\"abc def ghi jkl\", 3);\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8he9kfgc.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8he9kfgc.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nselect_words(\"abracadabra\", 2);\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp6j5wis7k.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6j5wis7k.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  // Your code here\n  \n  return result;\n}\n\nselect_words(\"\
    abracadabra\", 3);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpntoeocbx.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpntoeocbx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n\
    \    \n    let count = 0;\n    \n    for (let i = 0; i < s.length; i++) {\n  \
    \      if (s.charAt(i) == ' ') {\n            count++;\n        }\n    }\n   \
    \ \n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ')\
    \ {\n            count--;\n        }\n        if (count == n) {\n            result.push(s.substring(i,\
    \ i + 1));\n        }\n    }\n    \n    return result;\n}\n\nselect_words(\"abc\
    \ def ghi jkl mno pqr stu vwx yz\", 3);\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmppe2wa6na.js:32:12)\n    at Object.<anonymous> (/tmp/tmppe2wa6na.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\t\n\tlet words: string[] = s.split(\" \");\n\t\n\tfor (let\
    \ i = 0; i < words.length; i++) {\n\t\tlet word: string = words[i];\n\t\t\n\t\t\
    let consonants: string[] = word.split(\"\");\n\t\t\n\t\tlet consonantsCount: number\
    \ = 0;\n\t\t\n\t\tfor (let j = 0; j < consonants.length; j++) {\n\t\t\tlet consonant:\
    \ string = consonants[j];\n\t\t\t\n\t\t\tif (consonant == \"c\" || consonant ==\
    \ \"k\" || consonant == \"g\" || consonant == \"p\" || consonant == \"b\" || consonant\
    \ == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant == \"z\" ||\
    \ consonant == \"x\" || consonant == \"r\" || consonant == \"m\" || consonant\
    \ == \"n\" || consonant == \"h\" || consonant == \"w\" || consonant == \"y\" ||\
    \ consonant == \"j\" || consonant == \"q\" || consonant == \"t\" || consonant\
    \ == \"v\" || consonant == \"s\" || consonant == \"r\" || consonant == \"w\" ||\
    \ consonant == \"p\" || consonant == \"b\" || consonant == \"d\" || consonant\
    \ == \"f\" || consonant == \"v\" || consonant == \"z\" || consonant == \"x\" ||\
    \ consonant == \"r\" || consonant == \"m\" || consonant == \"n\" || consonant\
    \ == \"h\" || consonant == \"w\" || consonant == \"y\" || consonant == \"j\" ||\
    \ consonant == \"q\" || consonant == \"t\" || consonant == \"v\" || consonant\
    \ == \"s\" || consonant == \"r\" || consonant == \"w\" || consonant == \"p\" ||\
    \ consonant == \"b\" || consonant == \"d\" || consonant == \"f\" || consonant\
    \ == \"v\" || consonant == \"z\" || consonant == \"x\" || consonant == \"r\" ||\
    \ consonant == \"m\" || consonant == \"n\" || consonant == \"h\" || consonant\
    \ == \"w\" || consonant == \"y\" || consonant == \"j\" || consonant == \"q\" ||\
    \ consonant == \"t\" || consonant == \"v\" || consonant == \"s\" || consonant\
    \ == \"r\" || consonant == \"w\" || consonant == \"p\" || consonant == \"b\" ||\
    \ consonant == \"d\" || consonant == \"f\" || consonant == \"v\" || consonant\
    \ == \"z\" || consonant == \"x\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpptoqhl5y.ts(22,1403): error TS1002: Unterminated
    string literal.

    ../../../../../tmp/tmpptoqhl5y.ts(23,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpptoqhl5y.ts(38,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n\
    \    }\n    \n    let consonants: string[] = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    \n    for (let i = 0; i < s.length;\
    \ i++) {\n        let letter = s[i];\n        if (consonants.indexOf(letter) !==\
    \ -1) {\n            result.push(letter);\n        }\n    }\n    \n    return\
    \ result;\n}\n\nselect_words(\"abracadabra\", 2);\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n\
    \  'h',\n  'd',\n  'l',\n  't',\n  't',\n  'l',\n  'l',\n  'm',\n  'b'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps2uddoz8.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmps2uddoz8.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'r',\
    \ 'y', 'h', 'd',\n    'l', 't', 't', 'l',\n    'l', 'm', 'b'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n\
    \        let word = s.substring(index, index+n);\n        if (word.length == n)\
    \ {\n            words.push(word);\n            index += n;\n        }\n     \
    \   else {\n            index += word.length;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpd8uxlsww.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd8uxlsww.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004116
