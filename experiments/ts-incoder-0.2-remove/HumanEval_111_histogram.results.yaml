language: ts
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: { [key: string]: number } = {};\n    for (let i = 0; i < test.length;\
    \ i++) {\n        const letter = test[i];\n        if (histogram[letter] == null)\
    \ {\n            histogram[letter] = 0;\n        }\n        histogram[letter]++;\n\
    \    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpzgn4pg5n.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzgn4pg5n.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \    histogram[letter] = count;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"\
    abracadabra\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpdpfmok7v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpdpfmok7v.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '{ a: 5, b: 2, r: 2, c: 1, d: 1 }

    '
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpxtzbile1.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxtzbile1.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        if (histogram[letter]) {\n            histogram[letter]++;\n    \
    \    } else {\n            histogram[letter] = 1;\n        }\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpsvs1avzu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpsvs1avzu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: { [key: string]: number } = {};\n    const letters = test.split('\
    \ ');\n    letters.forEach(letter => {\n        if (histogram[letter] == null)\
    \ {\n            histogram[letter] = 0;\n        }\n        histogram[letter]++;\n\
    \    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpvexwff7_.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvexwff7_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    if (histogram.hasOwnProperty(char)) {\n      histogram[char]\
    \ = histogram[char] + 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmptneg6n97.js:21:12)\n    at Object.<anonymous> (/tmp/tmptneg6n97.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    let max = 0;\n    for (let i = 0; i < test.length;\
    \ i++) {\n        const char = test.charAt(i);\n        if (histogram[char]) {\n\
    \            histogram[char]++;\n        } else {\n            histogram[char]\
    \ = 1;\n        }\n        if (histogram[char] > max) {\n            max = histogram[char];\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpidr1t346.js:25:12)\n    at Object.<anonymous> (/tmp/tmpidr1t346.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split('');\n    testArray.forEach((letter)\
    \ => {\n        histogram[letter] = histogram[letter] ? histogram[letter] + 1\
    \ : 1;\n    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpes88bxgb.js:16:12)\n    at Object.<anonymous> (/tmp/tmpes88bxgb.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split('');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpb0mczov4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpb0mczov4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp02q0byky.js:16:12)\n    at Object.<anonymous> (/tmp/tmp02q0byky.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpun02umgo.ts(13,966): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpun02umgo.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpun02umgo.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test.charAt(i);\n    if (histogram.hasOwnProperty(char)) {\n      histogram[char]\
    \ = histogram[char] + 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpvpbkk0co.js:21:12)\n    at Object.<anonymous> (/tmp/tmpvpbkk0co.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbgyial3z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbgyial3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpn3qqx5ck.js:16:12)\n    at Object.<anonymous> (/tmp/tmpn3qqx5ck.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpdm6qxsfn.js:16:12)\n    at Object.<anonymous> (/tmp/tmpdm6qxsfn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbgyial3z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbgyial3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp9_gqeif9.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9_gqeif9.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i].toLowerCase();\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmphmegk1gq.js:23:12)\n    at Object.<anonymous> (/tmp/tmphmegk1gq.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnlaut_ze.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnlaut_ze.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const char = test.charAt(i);\n    if (histogram[char]) {\n     \
    \ histogram[char] += 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpp3fp_hxg.js:21:12)\n    at Object.<anonymous> (/tmp/tmpp3fp_hxg.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    console.log(histogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpni5cuei7.ts(18,940): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpni5cuei7.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpni5cuei7.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmptxtfqmhu.js:16:12)\n    at Object.<anonymous> (/tmp/tmptxtfqmhu.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram.hasOwnProperty(letter) ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxwe7unae.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxwe7unae.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnlaut_ze.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnlaut_ze.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpn3qqx5ck.js:16:12)\n    at Object.<anonymous> (/tmp/tmpn3qqx5ck.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i].toLowerCase();\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmphmegk1gq.js:23:12)\n    at Object.<anonymous> (/tmp/tmphmegk1gq.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    for\
    \ (let i = 0; i < testArray.length; i++) {\n        const letter = testArray[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpsm37yrr2.js:23:12)\n    at Object.<anonymous> (/tmp/tmpsm37yrr2.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp8goozzqf.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8goozzqf.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter] == null) {\n   \
    \         histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp6p4uejob.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6p4uejob.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpoxrwqzy8.js:18:12)\n    at Object.<anonymous> (/tmp/tmpoxrwqzy8.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n    });\n\
    \    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpgtse3yex.js:16:12)\n    at Object.<anonymous> (/tmp/tmpgtse3yex.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter] == null) {\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n \
    \   }\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbi607g0t.js:21:12)\n    at Object.<anonymous> (/tmp/tmpbi607g0t.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter] == null) {\n   \
    \         histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp6p4uejob.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6p4uejob.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpi9w5567n.js:16:12)\n    at Object.<anonymous> (/tmp/tmpi9w5567n.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter) => {\n    \
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp_6v9kntr.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_6v9kntr.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpw6u2u9e0.js:17:12)\n    at Object.<anonymous> (/tmp/tmpw6u2u9e0.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp940_98gn.ts(13,960): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp940_98gn.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp940_98gn.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp4qcko1hg.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4qcko1hg.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter] === undefined) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmprfg_sant.js:21:12)\n    at Object.<anonymous> (/tmp/tmprfg_sant.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split('');\n    testArray.forEach((letter)\
    \ => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp15yy1sxq.js:21:12)\n    at Object.<anonymous> (/tmp/tmp15yy1sxq.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    let maxCount = 0;\n    let maxLetter = '';\n\
    \    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n\
    \        const count = histogram[letter];\n        if (count > maxCount) {\n \
    \           maxCount = count;\n            maxLetter = letter;\n        }\n  \
    \      histogram[letter] = count + 1;\n    }\n    return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': NaN,\n\
    \  a: NaN,\n  b: NaN\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n\
    \    at test (/tmp/tmp5i99effd.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5i99effd.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: NaN,\
    \ ' ': NaN, b: NaN },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter) => {\n    \
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp_6v9kntr.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_6v9kntr.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test.charAt(i);\n        if (histogram[letter] === undefined)\
    \ {\n            histogram[letter] = 1;\n        } else {\n            histogram[letter]\
    \ += 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpitut908z.js:21:12)\n    at Object.<anonymous> (/tmp/tmpitut908z.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        const count = histogram[letter];\n   \
    \     histogram[letter] = count ? count + 1 : 1;\n    }\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpq6p9pou1.js:17:12)\n    at Object.<anonymous> (/tmp/tmpq6p9pou1.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    histogram[char] = histogram.hasOwnProperty(char) ? histogram[char]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abracadabra\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp495pvtnl.js:17:12)\n    at Object.<anonymous> (/tmp/tmp495pvtnl.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '{ a: 5, b: 2, r: 2, c: 1, d: 1 }

    '
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpmh7c995t.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmh7c995t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\"\
    )); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a:\
    \ 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b:\
    \ 1, c: 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c:\
    \ 2, d: 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d:\
    \ 1}\nconsole.log(histogram(\"abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\nconsole.log(histogram(\"\
    abracadabra\")); // {a: 2, b: 1, c: 2, d: 1}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp2yjufami.js:44:12)\n    at Object.<anonymous> (/tmp/tmp2yjufami.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '{ a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    { a: 5, b: 2, r: 2, c: 1, d: 1 }

    '
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 0;\n        }\n        histogram[letter]++;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpaur6p5rb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpaur6p5rb.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp02q0byky.js:16:12)\n    at Object.<anonymous> (/tmp/tmp02q0byky.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpxm3qhwwx.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxm3qhwwx.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b \ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmk8bd1fq.ts(13,970): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpmk8bd1fq.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmk8bd1fq.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpvhuhzwf4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvhuhzwf4.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpgdv4noas.js:21:12)\n    at Object.<anonymous> (/tmp/tmpgdv4noas.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnlaut_ze.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnlaut_ze.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"abracadabra\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmplb2ebei6.js:22:12)\n    at Object.<anonymous> (/tmp/tmplb2ebei6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '{ a: 5, b: 2, r: 2, c: 1, d: 1 }

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split('');\n    testArray.forEach((letter)\
    \ => {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n \
    \   return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp_msew_ga.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_msew_ga.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        const count = histogram[letter] || 0;\n\
    \        histogram[letter] = count + 1;\n    }\n    return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxbhchp8l.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxbhchp8l.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwywytaiy.ts(13,968): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpwywytaiy.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwywytaiy.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter:\
    \ string) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n   \
    \ } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnoui31e_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpnoui31e_.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp02q0byky.js:16:12)\n    at Object.<anonymous> (/tmp/tmp02q0byky.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram.hasOwnProperty(letter) ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxwe7unae.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxwe7unae.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015207
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    histogram[letter] = (histogram[letter] || 0) + 1;\n \
    \ }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpq87p8rrl.js:16:12)\n    at Object.<anonymous> (/tmp/tmpq87p8rrl.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: { [key: string]: number; } = {};\n    test.split(' ').forEach((letter)\
    \ => {\n        histogram[letter] = histogram[letter] ? histogram[letter] + 1\
    \ : 1;\n    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpm2ebo879.js:16:12)\n    at Object.<anonymous> (/tmp/tmpm2ebo879.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpi9w5567n.js:16:12)\n    at Object.<anonymous> (/tmp/tmpi9w5567n.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter]) {\n            histogram[letter]++;\n\
    \        } else {\n            histogram[letter] = 1;\n        }\n    });\n  \
    \  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpvuazxy_d.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvuazxy_d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpwakgl5xg.js:16:12)\n    at Object.<anonymous> (/tmp/tmpwakgl5xg.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter) => {\n    \
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp_6v9kntr.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_6v9kntr.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpku2jx6xz.js:22:12)\n    at Object.<anonymous> (/tmp/tmpku2jx6xz.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpku2jx6xz.js:22:12)\n    at Object.<anonymous> (/tmp/tmpku2jx6xz.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"\
    abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwajgs4vj.ts(17,944): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpwajgs4vj.ts(18,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwajgs4vj.ts(18,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter:\
    \ string) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg_1wkztg.js:17:12)\n    at Object.<anonymous> (/tmp/tmpg_1wkztg.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnlaut_ze.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnlaut_ze.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg980h005.js:17:12)\n    at Object.<anonymous> (/tmp/tmpg980h005.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7_ec8s_b.ts(13,966): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu_rtu8m_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu_rtu8m_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppc3micrl.js:19:12)\n    at Object.<anonymous> (/tmp/tmppc3micrl.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp9_gqeif9.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9_gqeif9.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpnlaut_ze.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnlaut_ze.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpxm3qhwwx.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxm3qhwwx.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplhs28tq2.js:17:12)\n    at Object.<anonymous> (/tmp/tmplhs28tq2.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg980h005.js:17:12)\n    at Object.<anonymous> (/tmp/tmpg980h005.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp47fkz36t.js:17:12)\n    at Object.<anonymous> (/tmp/tmp47fkz36t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw_51kyow.ts(18,938): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpw_51kyow.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpw_51kyow.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015212
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    histogram[char] = histogram.hasOwnProperty(char) ? histogram[char]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpftyctsgs.js:16:12)\n    at Object.<anonymous> (/tmp/tmpftyctsgs.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015212
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpldaozsf2.js:16:12)\n    at Object.<anonymous> (/tmp/tmpldaozsf2.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015212
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  test.split(' ').forEach(letter =>\
    \ {\n    histogram[letter] = histogram.hasOwnProperty(letter) ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpubs7xn_o.js:16:12)\n    at Object.<anonymous> (/tmp/tmpubs7xn_o.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n\
    \      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpw509i5da.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw509i5da.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp9_gqeif9.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9_gqeif9.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  const letters = test.split(' ');\n\
    \  letters.forEach(letter => {\n    histogram[letter] = (histogram[letter] ||\
    \ 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp_www23d7.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_www23d7.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    if (histogram[char]) {\n      histogram[char]++;\n    } else\
    \ {\n      histogram[char] = 1;\n    }\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"\
    abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ ab\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphsscvhi8.ts(18,942): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmphsscvhi8.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphsscvhi8.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015212
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter] == null) {\n   \
    \         histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp6p4uejob.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6p4uejob.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const letters = test.split('');\n    letters.forEach((letter)\
    \ => {\n        if (histogram[letter]) {\n            histogram[letter]++;\n \
    \       } else {\n            histogram[letter] = 1;\n        }\n    });\n   \
    \ return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpfwgd8fo6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpfwgd8fo6.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7_ec8s_b.ts(13,966): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i].toLowerCase();\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmphmegk1gq.js:23:12)\n    at Object.<anonymous> (/tmp/tmphmegk1gq.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number; } = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const char = test[i];\n    histogram[char] = (histogram[char] ||\
    \ 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp005vwsk4.js:16:12)\n    at Object.<anonymous> (/tmp/tmp005vwsk4.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu_rtu8m_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu_rtu8m_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test.charAt(i);\n        if (histogram[letter]) {\n    \
    \        histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp5p725k4t.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5p725k4t.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    const count = histogram[letter];\n    histogram[letter] = count\
    \ ? count + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpkcq1nzki.js:17:12)\n    at Object.<anonymous> (/tmp/tmpkcq1nzki.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abracadabra\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpu4j755zk.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu4j755zk.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '{ a: 5, b: 2, r: 2, c: 1, d: 1 }

    '
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp7jm72eqg.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7jm72eqg.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab bc ab\
    \ bc \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiwhoo4d3.ts(13,732): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpiwhoo4d3.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpiwhoo4d3.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbgyial3z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbgyial3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    const count = histogram[letter] || 0;\n    histogram[letter]\
    \ = count + 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpok6u0e5u.js:17:12)\n    at Object.<anonymous> (/tmp/tmpok6u0e5u.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbgyial3z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbgyial3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  for (let i = 0;\
    \ i < testArray.length; i++) {\n    const letter = testArray[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpa9v5mkkb.js:21:12)\n    at Object.<anonymous> (/tmp/tmpa9v5mkkb.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n\nconsole.log(histogram(\"abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpovktlget.ts(14,960): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpovktlget.ts(15,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpovktlget.ts(15,9): error TS1005: '','' expected.

    '
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        if (histogram[letter] == null) {\n            histogram[letter] =\
    \ 0;\n        }\n        histogram[letter]++;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp4xnjyyw1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4xnjyyw1.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbgyial3z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbgyial3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\nconsole.log(histogram('a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b \ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmk8bd1fq.ts(13,970): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpmk8bd1fq.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmk8bd1fq.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter] == null) {\n   \
    \         histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp6p4uejob.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6p4uejob.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpu4z8y31j.js:21:12)\n    at Object.<anonymous> (/tmp/tmpu4z8y31j.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split('');\n  testArray.forEach((letter:\
    \ string) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n   \
    \ } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxqyy42ws.js:21:12)\n    at Object.<anonymous> (/tmp/tmpxqyy42ws.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach((letter: string) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu6maz8zr.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu6maz8zr.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  if (histogram[letter] === undefined) {\n            histogram[letter] = 0;\n\
    \        }\n        histogram[letter]++;\n    });\n    return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpfmdp5smp.js:19:12)\n    at Object.<anonymous> (/tmp/tmpfmdp5smp.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpi9w5567n.js:16:12)\n    at Object.<anonymous> (/tmp/tmpi9w5567n.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmppcpysv2d.js:21:12)\n    at Object.<anonymous> (/tmp/tmppcpysv2d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    console.log(histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpybbmf7xl.ts(18,940): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpybbmf7xl.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpybbmf7xl.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015213
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\nconsole.log(histogram(\"abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoqa0u52y.ts(14,964): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpoqa0u52y.ts(15,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpoqa0u52y.ts(15,9): error TS1005: '','' expected.

    '
  timestamp: 1660015214
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach((letter: string) =>\
    \ {\n        if (histogram[letter]) {\n            histogram[letter]++;\n    \
    \    } else {\n            histogram[letter] = 1;\n        }\n    });\n    return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpsvs1avzu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpsvs1avzu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp02q0byky.js:16:12)\n    at Object.<anonymous> (/tmp/tmp02q0byky.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n\
    \    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp0f5zi9s8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0f5zi9s8.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015214
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu_rtu8m_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu_rtu8m_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach(letter\
    \ => {\n        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter]++;\n        }\n    });\n\
    \    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpqy8hfts5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqy8hfts5.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015214
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        const letterCount = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n        histogram[letter] = letterCount;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpmlkknqpa.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmlkknqpa.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg980h005.js:17:12)\n    at Object.<anonymous> (/tmp/tmpg980h005.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\nconsole.log(histogram('a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7_ec8s_b.ts(13,966): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7_ec8s_b.ts(14,9): error TS1005: '','' expected.

    '
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test.charAt(i);\n        if (histogram[letter]) {\n    \
    \        histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp5p725k4t.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5p725k4t.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    histogram[char] = histogram.hasOwnProperty(char) ? histogram[char]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpftyctsgs.js:16:12)\n    at Object.<anonymous> (/tmp/tmpftyctsgs.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015212
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    }\n    return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpqsjyjlot.js:16:12)\n    at Object.<anonymous> (/tmp/tmpqsjyjlot.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    for\
    \ (let i = 0; i < testArray.length; i++) {\n        const letter = testArray[i];\n\
    \        if (histogram[letter]) {\n            histogram[letter]++;\n        }\
    \ else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpsm37yrr2.js:23:12)\n    at Object.<anonymous> (/tmp/tmpsm37yrr2.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter)\
    \ => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n \
    \   } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp9v3arzyg.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9v3arzyg.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpmh7c995t.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmh7c995t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach((letter:\
    \ string) => {\n        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter] += 1;\n        }\n   \
    \ });\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpvhuhzwf4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvhuhzwf4.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp74w9wcdv.js:16:12)\n    at Object.<anonymous> (/tmp/tmp74w9wcdv.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    const testArray = test.split(' ');\n    testArray.forEach(letter\
    \ => {\n        if (histogram[letter] == null) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter]++;\n        }\n    });\n\
    \    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpuzlwj1dt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuzlwj1dt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu_rtu8m_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu_rtu8m_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpa2yiff0p.js:21:12)\n    at Object.<anonymous> (/tmp/tmpa2yiff0p.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter] == null) {\n      histogram[letter] =\
    \ 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpu4z8y31j.js:21:12)\n    at Object.<anonymous> (/tmp/tmpu4z8y31j.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpmh7c995t.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmh7c995t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test[i];\n    if (histogram.hasOwnProperty(char)) {\n      histogram[char]\
    \ = histogram[char] + 1;\n    } else {\n      histogram[char] = 1;\n    }\n  }\n\
    \  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmptneg6n97.js:21:12)\n    at Object.<anonymous> (/tmp/tmptneg6n97.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  test.split(' ').forEach(letter =>\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp8g0rv5pa.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8g0rv5pa.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    test.split(' ').forEach(letter => {\n      \
    \  histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n    return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplyy6hz6y.js:16:12)\n    at Object.<anonymous> (/tmp/tmplyy6hz6y.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp02q0byky.js:16:12)\n    at Object.<anonymous> (/tmp/tmp02q0byky.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: Record<string, number> = {};\n  for (const letter of test.toLowerCase().split('\
    \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp47fkz36t.js:17:12)\n    at Object.<anonymous> (/tmp/tmp47fkz36t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpppvcs6wa.js:16:12)\n    at Object.<anonymous> (/tmp/tmpppvcs6wa.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter]) {\n           \
    \ histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n\
    \        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl9m2k7vu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl9m2k7vu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    }\
    \ else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw4ng_iou.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw4ng_iou.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    let max = 0;\n    for (let i = 0; i < test.length;\
    \ i++) {\n        const letter = test[i];\n        const count = histogram[letter];\n\
    \        if (count > max) {\n            max = count;\n        }\n        histogram[letter]\
    \ = count + 1;\n    }\n    return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': NaN,\n\
    \  a: NaN,\n  b: NaN\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n\
    \    at test (/tmp/tmppy3x9fzs.js:21:12)\n    at Object.<anonymous> (/tmp/tmppy3x9fzs.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: NaN,\
    \ ' ': NaN, b: NaN },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test[i];\n        if (histogram[letter] == null) {\n   \
    \         histogram[letter] = 0;\n        }\n        histogram[letter]++;\n  \
    \  }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpplh5dwt7.js:19:12)\n    at Object.<anonymous> (/tmp/tmpplh5dwt7.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpa56uxsq8.js:16:12)\n    at Object.<anonymous> (/tmp/tmpa56uxsq8.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpmh7c995t.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmh7c995t.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015208
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const char\
    \ = test.charAt(i);\n    if (histogram[char]) {\n      histogram[char] += 1;\n\
    \    } else {\n      histogram[char] = 1;\n    }\n  }\n  return histogram;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpw_ipnl_m.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw_ipnl_m.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n   \
    \ const histogram: any = {};\n    for (let i = 0; i < test.length; i++) {\n  \
    \      const letter = test.charAt(i);\n        if (histogram[letter]) {\n    \
    \        histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp5p725k4t.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5p725k4t.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015213
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpu_rtu8m_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu_rtu8m_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015210
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    if (histogram[letter] == null) {\n      histogram[letter] = 0;\n    }\n\
    \    histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp71jkjhmq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp71jkjhmq.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: { [key: string]: number } = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp5kpkfu6d.js:16:12)\n    at Object.<anonymous> (/tmp/tmp5kpkfu6d.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015215
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test: string): {[key: string]: number} {\n  const\
    \ histogram: any = {};\n  for (const letter of test.toLowerCase().split(' '))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpx93636wn.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx93636wn.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660015205
