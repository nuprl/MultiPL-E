name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    var min_val = numbers[0];\n    var max_val = numbers[0];\n    for\
    \ (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_val) {\n\
    \            min_val = numbers[i];\n        } else if (numbers[i] > max_val) {\n\
    \            max_val = numbers[i];\n        }\n    }\n    var scale_factor = (max_val\
    \ - min_val) / (numbers.length - 1);\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min_val) * scale_factor + min_val;\n\
    \    }\n    return numbers;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ numbers;\n    }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range\
    \ * 2 - 1);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map((n) => {\n        return ((n - min) / range) * 100;\n\
    \    });\n    return new_numbers;\n}\n", "    const min_val = Math.min(...numbers);\n\
    \    const max_val = Math.max(...numbers);\n    const range = max_val - min_val;\n\
    \    const scaled_numbers = numbers.map(n => n - min_val) / range;\n    return\
    \ scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min;\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n", "  \
    \  let min_val = numbers[0];\n    let max_val = numbers[0];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] < min_val) {\n       \
    \     min_val = numbers[i];\n        } else if (numbers[i] > max_val) {\n    \
    \        max_val = numbers[i];\n        }\n    }\n    let scale = (max_val - min_val)\
    \ / (numbers.length - 1);\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      numbers[i] = numbers[i] - min_val + scale;\n    }\n    return numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let scale = (max - min) / 2;\n    let rescaled = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        rescaled.push(numbers[i] + scale);\n   \
    \ }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min;\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n", "  \
    \  let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n\
    }\n", "    const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
    \    const range = max_number - min_number;\n    const new_numbers = numbers.map(n\
    \ => n - min_number) / range;\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min) / range;\n\
    \    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => (n - min) / range);\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] - min);\n    }\n    for (let i = 0; i <\
    \ rescaled.length; i++) {\n        rescaled[i] = rescaled[i] / (max - min);\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers = numbers.map(n => n / range);\n    return\
    \ new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] - min);\n    }\n    for (let i = 0; i <\
    \ rescaled.length; i++) {\n        rescaled[i] = rescaled[i] / (max - min);\n\
    \    }\n    return rescaled;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ numbers;\n    }\n    const min = Math.min(numbers[0], numbers[1]);\n    const\
    \ max = Math.max(numbers[0], numbers[1]);\n    const scale = (max - min) / (numbers.length\
    \ - 1);\n    const scaled_numbers = new Array(numbers.length);\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        scaled_numbers[i] = numbers[i] * scale;\n\
    \    }\n    return scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    var min_val = numbers[0];\n    var max_val = numbers[0];\n    for (var\
    \ i = 1; i < numbers.length; ++i) {\n        min_val = Math.min(min_val, numbers[i]);\n\
    \        max_val = Math.max(max_val, numbers[i]);\n    }\n    var range = (max_val\
    \ - min_val) / 2;\n    var new_numbers: number[] = [];\n    for (var i = 0; i\
    \ < numbers.length; ++i) {\n        new_numbers.push(numbers[i] + range * i);\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(numbers[0],\
    \ numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] + min + range *\
    \ i / (numbers.length - 1));\n    }\n    return new_numbers;\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const new_numbers: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
    \ / 2);\n    }\n    return new_numbers;\n}\n", "    let min_value = numbers[0];\n\
    \    let max_value = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n\
    \        } else if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \        }\n    }\n    let scale = (max_value - min_value) / (numbers.length -\
    \ 1);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min_value;\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n",
  "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = (range == 0) ? 0 : 1 / (range + 1);\n    return\
    \ numbers.map(n => n * scale);\n}\n", "    let min = Math.min(...numbers);\n \
    \   let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / (max - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    return numbers.map(x => x * scale);\n}\n", "    if (numbers.length < 2) {\n\
    \        return numbers;\n    }\n    const min = Math.min(numbers[0], numbers[1]);\n\
    \    const max = Math.max(numbers[0], numbers[1]);\n    const range = (max - min);\n\
    \    const scale = (range / numbers.length);\n    const new_numbers = numbers.map(n\
    \ => n * scale);\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n", " \
    \   const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const new_numbers = numbers.map(n\
    \ => n - min_value) / range;\n    return new_numbers;\n}\n", "    const min_value\
    \ = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n    const\
    \ range = max_value - min_value;\n    const scale = (range == 0) ? 0 : (max_value\
    \ - min_value) / range;\n    return numbers.map(n => n * scale);\n}\n", "    let\
    \ min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let scale\
    \ = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n}\n",
  "    const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
    \    const range = max_number - min_number;\n    const scaled_numbers = numbers.map(n\
    \ => n - min_number) / range;\n    return scaled_numbers;\n}\n", "    var min\
    \ = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n\
    \    var range = (max - min);\n    var new_numbers: number[] = [];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min\
    \ * range / 100);\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_min = min - range * 0.5;\n    var new_max = max +\
    \ range * 0.5;\n    var new_range = new_max - new_min;\n    var new_numbers: number[]\
    \ = [];\n    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + new_min);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = (max - min);\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ = (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    let new_numbers: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
    \ range * Math.random());\n    }\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range\
    \ = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] + min * range / numbers.length);\n\
    \    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n\
    \    var scale = (range == 0) ? 0 : (range / (max - min));\n    var new_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ * scale);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / 100);\n    }\n    return new_numbers;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scaled_numbers = numbers.map(n => (n - min) / range);\n\
    \    return scaled_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max -\
    \ min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let rescaled\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    var min_val = numbers[0];\n\
    \    var max_val = numbers[0];\n    for (var i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n    \
    \    }\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n    }\n    var scale = (max_val - min_val) / (numbers.length - 1);\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ numbers;\n    }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map((n) => {\n\
    \        return ((n - min) / range) * 100;\n    });\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        rescaled.push(numbers[i] - min + range / 2);\n    }\n    return\
    \ rescaled;\n}\n", "    let min_val = Math.min(...numbers);\n    let max_val =\
    \ Math.max(...numbers);\n    let rescaled_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        rescaled_numbers.push(min_val + (numbers[i]\
    \ - min_val) * (max_val - min_val) / (max_val - min_val));\n    }\n    return\
    \ rescaled_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let max =\
    \ Math.max(...numbers);\n    let range = max - min;\n    let rescaled: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range\
    \ = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n    for (let i =\
    \ 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range / new_numbers.length;\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] - min + range / 2);\n    }\n   \
    \ return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = (max - min);\n    let rescaled = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        rescaled.push(numbers[i] - min) / range;\n    }\n    return\
    \ rescaled;\n}\n", "    if (numbers.length < 2) {\n        return numbers;\n \
    \   }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
    \    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min / range);\n    }\n    return new_numbers;\n}\n", "    const min_value\
    \ = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n    const\
    \ range = max_value - min_value;\n    const scaled_numbers = numbers.map(n =>\
    \ (n - min_value) / range);\n    return scaled_numbers;\n}\n", "    const min_number\
    \ = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n    const\
    \ range = max_number - min_number;\n    const scaled_numbers = numbers.map(n =>\
    \ (n - min_number) / range);\n    return scaled_numbers;\n}\n", "    let min_val\
    \ = numbers[0];\n    let max_val = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n\
    \        } else if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n    }\n    let scale = (max_val - min_val) / (numbers.length - 1);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min_val) / scale;\n    }\n    return numbers;\n}\n", "    const min_number\
    \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        const current_number = numbers[i];\n        if (current_number\
    \ < min_number) {\n            min_number = current_number;\n        } else if\
    \ (current_number > max_number) {\n            max_number = current_number;\n\
    \        }\n    }\n    const new_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(min_number + (numbers[i]\
    \ - min_number) / (max_number - min_number) * (1 - min_number));\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = (max - min);\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    var min_val = numbers[0];\n\
    \    var max_val = numbers[0];\n    for (var i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n    \
    \    }\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n    }\n    var scale = (max_val - min_val) / (max_val + min_val);\n\
    \    var new_numbers = new Array<number>(numbers.length);\n    for (var i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers[i] = numbers[i] * scale;\n \
    \   }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n \
    \   let max = Math.max(...numbers);\n    let scale = (max - min) / (1 + max -\
    \ min);\n    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (min + max) / range;\n    return numbers.map(n =>\
    \ n * scale);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map((n) => {\n\
    \        return ((n - min) / range) * 2 - 1;\n    });\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min + range\
    \ / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min;\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n", "  \
    \  let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
    \ / 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min) / range;\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min) / (max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    var min_val = numbers[0];\n\
    \    var max_val = numbers[0];\n    for (var i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n    \
    \    }\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n    }\n    var range = (max_val - min_val);\n    var new_vals: number[]\
    \ = [];\n    for (var i = 0; i < numbers.length; i++) {\n        new_vals.push(numbers[i]\
    \ - min_val / range);\n    }\n    return new_vals;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = (numbers[1] - numbers[0]);\n    var new_min\
    \ = numbers[0] - range * new_range;\n    var new_max = numbers[1] + range * new_range;\n\
    \    return [new_min, new_max];\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    if (numbers.length < 2) {\n\
    \        return numbers;\n    }\n    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    var min_val = numbers[0];\n    var max_val = numbers[0];\n    for (var\
    \ i = 1; i < numbers.length; i++) {\n        min_val = Math.min(min_val, numbers[i]);\n\
    \        max_val = Math.max(max_val, numbers[i]);\n    }\n    var scale = (max_val\
    \ - min_val) / (max_val + min_val);\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n", "    let\
    \ min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ / max - min);\n    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] *= (range / new_numbers.length);\n    }\n   \
    \ return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers\
    \ = numbers.map(n => n / range * 2 - 1);\n    return new_numbers;\n}\n", "   \
    \ var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = max - min;\n    var new_min = min - range * 0.5;\n\
    \    var new_max = max + range * 0.5;\n    var new_range = new_max - new_min;\n\
    \    var new_numbers: number[] = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] + new_min);\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let scaled_numbers = numbers.map(n => n - min)\
    \ / range;\n    return scaled_numbers;\n}\n", "    let min_val = numbers[0];\n\
    \    let max_val = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n    \
    \    } else if (numbers[i] > max_val) {\n            max_val = numbers[i];\n \
    \       }\n    }\n    const scale = (max_val - min_val) / (numbers.length - 1);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min_val) * scale + min_val;\n    }\n    return numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] - min) / (max - min);\n    }\n    return\
    \ rescaled;\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] / max - min);\n    }\n    return rescaled;\n\
    }\n", "    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_value)\
    \ {\n            min_value = numbers[i];\n        } else if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n        }\n    }\n    const scale =\
    \ (max_value - min_value) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min_value) / scale;\n    }\n    return\
    \ numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max\
    \ = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n    var new_min\
    \ = min - range * 0.5;\n    var new_max = max + range * 0.5;\n    return [new_min,\
    \ new_max];\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] - min);\n    }\n    for (let i = 0; i <\
    \ rescaled.length; i++) {\n        rescaled[i] = rescaled[i] / (max - min);\n\
    \    }\n    return rescaled;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n\
    \    var new_numbers: number[] = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] + min * range);\n    }\n    return\
    \ new_numbers;\n}\n", "    const min_number = Math.min(...numbers);\n    const\
    \ max_number = Math.max(...numbers);\n    const range = max_number - min_number;\n\
    \    const new_numbers = numbers.map((number) => {\n        const rescaled = number\
    \ - min_number;\n        return rescaled / range;\n    });\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const rescaled = [];\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        rescaled.push(numbers[i] - min + range / 2);\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n", " \
    \   const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
    \    const range = max_number - min_number;\n    const scaled_numbers = numbers.map(n\
    \ => n - min_number) / range;\n    return scaled_numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min) / range;\n    }\n    return new_numbers;\n\
    }\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    if (range == 0) return numbers;\n\
    \    var scale = (numbers[0] - min) / range;\n    var rescaled = [];\n    for\
    \ (var i = 0; i < numbers.length; i++)\n        rescaled.push(numbers[i] * scale\
    \ + min);\n    return rescaled;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n\
    \    var scale = (range == 0) ? 0 : (range / (max - min));\n    var new_numbers\
    \ = new Array<number>(numbers.length);\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled_numbers = numbers.map(n => (n\
    \ - min) / range);\n    return scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] += range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = max - min;\n    const new_numbers =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min_value\
    \ = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n    const\
    \ range = max_value - min_value;\n    const scaled_numbers = numbers.map(n =>\
    \ n - min_value) / range;\n    return scaled_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_numbers: number[] = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] + min + range * Math.random());\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / (max - min);\n    }\n    return rescaled;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range\
    \ = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] - min + range / 2);\n    }\n   \
    \ return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let max\
    \ = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / 100);\n    }\n    return new_numbers;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
    \    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] += range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    var min_val = numbers[0];\n    var max_val = numbers[0];\n\
    \    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_val)\
    \ min_val = numbers[i];\n        if (numbers[i] > max_val) max_val = numbers[i];\n\
    \    }\n    var scale_factor = max_val - min_val;\n    var new_numbers = new Array<number>(numbers.length);\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
    \ - min_val * scale_factor;\n    }\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let scale\
    \ = (max - min) / (max - min);\n    let rescaled = [];\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n    }\n\
    \    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n    let max\
    \ = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max - min);\n\
    \    }\n    return rescaled;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ numbers;\n    }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range / numbers.length);\n \
    \   const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
    }\n", "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const new_numbers = numbers.map((number)\
    \ => {\n        const new_number = (number - min_value) / range;\n        return\
    \ new_number;\n    });\n    return new_numbers;\n}\n", "    const min_value =\
    \ Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n    const\
    \ range = max_value - min_value;\n    const scale = range / numbers.length;\n\
    \    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => n - min) / range;\n    return new_numbers;\n\
    }\n", "    let min_val = Math.min(...numbers);\n    let max_val = Math.max(...numbers);\n\
    \    let scale = (max_val - min_val) / (numbers.length - 1);\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min_val) /\
    \ scale;\n    }\n    return numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    let new_numbers: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ = (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", " \
    \   var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = max - min;\n    var new_numbers: number[] = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min + range * Math.random());\n    }\n    return new_numbers;\n}\n", "   \
    \ const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n \
    \   const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min\
    \ * range / numbers.length);\n    }\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range\
    \ = max - min;\n    let rescaled = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        rescaled.push(numbers[i] - min) / range;\n    }\n    return\
    \ rescaled;\n}\n", "    let min_value = Math.min(...numbers);\n    let max_value\
    \ = Math.max(...numbers);\n    let scale = (max_value - min_value) / (numbers.length\
    \ - 1);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min_value) / scale;\n    }\n    return numbers;\n}\n", "    let\
    \ min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let scale\
    \ = (max - min) / (1 - min);\n    return numbers.map(n => n * scale);\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = (max - min);\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ = (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n       \
    \ rescaled.push(numbers[i] / max - min);\n    }\n    return rescaled;\n}\n", " \
    \   const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const scaled_numbers = numbers.map(n\
    \ => (n - min_value) / range);\n    return scaled_numbers;\n}\n", "    const min_number\
    \ = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n    const\
    \ range = max_number - min_number;\n    const new_numbers: number[] = [];\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min_number);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n\
    \        new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] / max - min);\n    }\n    return rescaled;\n\
    }\n", "    if (numbers.length <= 1) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const scaled_numbers = numbers.map((n) => min + (n -\
    \ min) / range * range);\n    return scaled_numbers;\n}\n", "    let min_val =\
    \ numbers[0];\n    let max_val = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n\
    \        }\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n    }\n    let scale = (max_val - min_val) / (numbers.length - 1);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min_val) * scale + min_val;\n    }\n    return numbers;\n}\n", "    var min_val\
    \ = numbers[0];\n    var max_val = numbers[0];\n    for (var i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min_val) min_val = numbers[i];\n        if\
    \ (numbers[i] > max_val) max_val = numbers[i];\n    }\n    var range = max_val\
    \ - min_val;\n    var new_numbers = new Array<number>(numbers.length);\n    for\
    \ (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = ((numbers[i]\
    \ - min_val) / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", "    let\
    \ min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let scale\
    \ = (max - min) / (1 + Math.abs(min));\n    let rescaled = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n\
    \    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n \
    \   const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min) / range;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let scale = (max - min) / (1 - min);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        scaled_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < scaled_numbers.length; i++) {\n    \
    \    scaled_numbers[i] = (scaled_numbers[i] - min) / range;\n    }\n    return\
    \ scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i]\
    \ = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let scale\
    \ = (max - min) / (max - min);\n    let rescaled = [];\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n    }\n\
    \    return rescaled;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = max - min;\n\
    \    var scale = (range == 0) ? 0 : 1 / (range + 1);\n    var new_numbers = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ * scale);\n    }\n    return new_numbers;\n}\n", "    const min_number = Math.min(...numbers);\n\
    \    const max_number = Math.max(...numbers);\n    const range = max_number -\
    \ min_number;\n    const new_numbers = numbers.map(n => n - min_number) / range;\n\
    \    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n  \
    \  let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n", "  \
    \  const min_val = Math.min(...numbers);\n    const max_val = Math.max(...numbers);\n\
    \    const range = max_val - min_val;\n    const scale = range / 2;\n    const\
    \ offset = min_val - scale;\n    return numbers.map(n => n * scale + offset);\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] - min);\n    }\n    for (let i = 0; i <\
    \ rescaled.length; i++) {\n        rescaled[i] = rescaled[i] / (max - min);\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    let rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let scale = (max - min) / (1 - min);\n    return numbers.map(n => n * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let scaled_numbers\
    \ = numbers.map(n => n / range);\n    return scaled_numbers;\n}\n", "    var min\
    \ = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n\
    \    var range = max - min;\n    var scale = (range == 0) ? 0 : 1 / (range + 1);\n\
    \    var new_numbers = new Array(numbers.length);\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
    }\n", "    if (numbers.length <= 1) return numbers;\n    const min_number = numbers[0];\n\
    \    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        } else if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    const scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min_number) * scale + min_number;\n    }\n    return numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min\
    \ + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min;\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n", "  \
    \  if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = range / numbers.length;\n    const new_numbers\
    \ = numbers.map(n => n * scale);\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ / max - min);\n    }\n    return rescaled;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_numbers: number[] = [];\n    for (var i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] + min * range);\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min_value\
    \ = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n    const\
    \ range = max_value - min_value;\n    const new_numbers = numbers.map(n => n -\
    \ min_value) / range;\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => n - min) / range;\n    return new_numbers;\n\
    }\n", "    var min_value = numbers[0];\n    var max_value = numbers[0];\n    for\
    \ (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_value)\
    \ {\n            min_value = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_value) {\n            max_value = numbers[i];\n        }\n    }\n    var\
    \ range = (max_value - min_value);\n    var new_numbers: number[] = [];\n    for\
    \ (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min_value);\n    }\n    return new_numbers;\n}\n", "    let min_val = numbers[0];\n\
    \    let max_val = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n    \
    \    } else if (numbers[i] > max_val) {\n            max_val = numbers[i];\n \
    \       }\n    }\n    const scale = (max_val - min_val) / (numbers.length - 1);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ - min_val + scale * i;\n    }\n    return numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / 2;\n    let\
    \ rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n \
    \       rescaled.push(numbers[i] * scale + min);\n    }\n    return rescaled;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    rescaled.push(numbers[i] / max - min);\n    }\n    return rescaled;\n}\n",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const new_numbers = numbers.map(n\
    \ => (n - min_value) / range);\n    return new_numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min) / range;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min\
    \ / range);\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_numbers: number[] = [];\n    for (var i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min / range);\n    }\n    return new_numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scaled_numbers = numbers.map((num) => {\n        const scaled_num = num - min;\n\
    \        return scaled_num / range;\n    });\n    return scaled_numbers;\n}\n",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n \
    \       rescaled.push(numbers[i] - min);\n    }\n    for (let i = 0; i < rescaled.length;\
    \ i++) {\n        rescaled[i] = rescaled[i] / (max - min);\n    }\n    return\
    \ rescaled;\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map((n) => n /\
    \ range);\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i]\
    \ / scale;\n    }\n    return numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let scaled_numbers\
    \ = numbers.map(n => n - min) / range;\n    return scaled_numbers;\n}\n", "  \
    \  var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 :\
    \ (numbers[1] - numbers[0]) / range;\n    var new_numbers = new Array<number>(numbers.length);\n\
    \    new_numbers[0] = numbers[0] - min * scale;\n    new_numbers[1] = numbers[1]\
    \ + min * scale;\n    for (var i = 2; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = numbers[i] - new_numbers[i - 1] * scale;\n    }\n    return\
    \ new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let scaled_numbers = numbers.map(n => n - min)\
    \ / range;\n    return scaled_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = (range / 2);\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    var new_numbers = [];\n    for (var i\
    \ = 0; i < numbers.length; ++i) {\n        new_numbers.push(Math.round((numbers[i]\
    \ - new_min) / new_range) * new_range + new_min);\n    }\n    return new_numbers;\n\
    }\n", "    let min_value = Math.min(...numbers);\n    let max_value = Math.max(...numbers);\n\
    \    let scale = (max_value - min_value) / 2;\n    let scaled_numbers = numbers.map(x\
    \ => x * scale);\n    return scaled_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] / max\
    \ - min);\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min) / range;\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_numbers: number[] = [];\n    for (var i = 0; i <\
    \ numbers.length; ++i) {\n        new_numbers.push(numbers[i] + min * range);\n\
    \    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scaled_numbers = numbers.map(n => n - min) / range;\n    return scaled_numbers;\n\
    }\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    var new_range = (numbers[1]\
    \ - numbers[0]);\n    var new_min = numbers[0] - range * new_range;\n    var new_max\
    \ = numbers[1] + range * new_range;\n    return [new_min, new_max];\n}\n", " \
    \   var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = max - min;\n    var new_numbers: number[] = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min + range * Math.random());\n    }\n    return new_numbers;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
