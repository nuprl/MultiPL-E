name: HumanEval_69_search
language: ts
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\nfunction search(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5,\
  \ 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3,\
  \ 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2,\
  \ 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6,\
  \ 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2,\
  \ 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n\
  \  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n\
  \  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10,\
  \ 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4,\
  \ 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10,\
  \ 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6,\
  \ 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6,\
  \ 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n", "    let max = 0;\n\
    \    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n        }\n \
    \       if (lst[i] > 0 && lst[i] === lst[max] && maxFreq >= lst[i]) {\n      \
    \      max = i;\n            maxFreq = lst[i];\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a tags=algorithm,arrays,javascript\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq++;\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n    let freq\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 &&\
    \ lst[i] >= max) {\n            max = lst[i];\n            freq = lst[i];\n  \
    \      }\n    }\n    return freq > 0 ? max : -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=javascript,algorithm,arrays |>\n<code>", "    let max: number = -1;\n\
    \    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxCount++;\n  \
    \      }\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        }\n    }\n    return max;\n}\n", "    if (lst.length\
    \ < 1) return -1;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}", "    let max = 0;\n    let maxFreq = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n\
    \            maxFreq += lst[i];\n        }\n    }\n    return maxFreq > 0 ? max\
    \ : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    let max = 0;\n\
    \    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxCount = 1;\n   \
    \     } else if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n\
    \    return max;\n}\n", "    let max = 0;\n    let maxCount = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n            maxCount = 1;\n        } else if (lst[i] === max) {\n\
    \            maxCount++;\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq += lst[i];\n      \
    \  }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n", "    let max: number =\
    \ -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n      \
    \  }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq\
    \ += lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This solution does not work for negative numbers. Please see my answer for a solution\
    \ that works for negative numbers as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n       \
    \ }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n    \
    \        max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxFreq > lst[max] ? maxFreq : -1;\n}\n", "    let max = 0;\n    let freq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            freq = 1;\n        } else if (lst[i] ==\
    \ max) {\n            freq++;\n        }\n    }\n    return freq > lst.length\
    \ ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "   \
    \ let max: number = -1;\n    let maxFreq: number = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n     \
    \       maxFreq++;\n        }\n        if (lst[i] > 0 && lst[i] === lst[max] &&\
    \ maxFreq >= lst[i]) {\n            max = i;\n            maxFreq = lst[i];\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,javascript,arrays\
    \ |>\n<| c |>\nThis does not work. Try `search([1,2,2,3,4])`\n<|/ c |>\n<| c |>\n\
    It does work, try it out yourself. It returns `4` as expected.\n<|/ c |>\n<| c\
    \ |>\nIt does work, try it out yourself. It returns `4` as expected.\n<|/ c |>\n\
    <| c |>\nIt does work, try it out yourself. It returns `4` as expected.\n<|/ c\
    \ |>\n<| c |>\nIt does work, try it out yourself. It returns `4` as expected.\n\
    <|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>", "    let max = 0;\n\
    \    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] >= max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n", "    let max: number = -1;\n\
    \    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
    \    }\n    return max;\n}\n", "    let max: number = lst[0];\n    let maxCount:\
    \ number = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxCount = 1;\n        } else\
    \ if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max: number = -1;\n    let maxCount: number = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] == max)\
    \ {\n            maxCount++;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,javascript |>\n<code>", "    let max =\
    \ 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] === lst[max]) {\n            freq++;\n        } else {\n\
    \            max = i;\n            freq = 1;\n        }\n    }\n    return freq\
    \ > lst[max] ? -1 : max;\n}\n", "    let max = 0;\n    let freq = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[freq])\
    \ {\n            freq++;\n        } else {\n            max = lst[i];\n      \
    \      freq = 1;\n        }\n    }\n    return max;\n}\n", "    let max = 0;\n\
    \    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq++;\n        }\n   \
    \ }\n    return max;\n}\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, ", "    let max = 0;\n\
    \    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n        } else\
    \ {\n            if (maxFreq >= lst[i]) {\n                max = i;\n        \
    \        maxFreq = lst[i];\n            }\n        }\n    }\n    return max;\n\
    }", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n\
    \        } else {\n            if (maxFreq > 0) {\n                max = i;\n\
    \                maxFreq = lst[i];\n            }\n        }\n    }\n    return\
    \ maxFreq > 0 ? max : -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ there are multiple numbers with the same frequency. For example, `[1,1,2,3]`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n  \
    \  let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n       \
    \ } else if (lst[i] === max) {\n            maxFreq++;\n        }\n    }\n   \
    \ return max;\n}", "    let max = 0;\n    let maxCount = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| a tags=javascript,algorithm,arrays |>\n<code>", "    let max = 0;\n \
    \   let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n    }\n    return max;\n}", "    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq += lst[i];\n        }\n    }\n    return maxFreq\
    \ > 0 ? max : -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a\
    \ dscore=0 |>\n<code>", "  let max: number = -1;\n  let maxCount: number = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max\
    \ = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === max) {\n      maxCount++;\n\
    \    }\n  }\n  return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    if (maxCount >= max) {\n        return max;\n    }\n  \
    \  return -1;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq++;\n        }\n    }\n    return max;\n}\n", "    let max: number\
    \ = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxCount++;\n\
    \        } else {\n            if (maxCount > 0) {\n                max = i;\n\
    \                maxCount = 1;\n            } else {\n                max = -1;\n\
    \            }\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
    \    }\n    return max;\n}\n", "    let max: number = lst[0];\n    let maxCount:\
    \ number = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxCount = 1;\n        } else\
    \ if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n   \
    \         maxFreq++;\n        }\n        if (lst[i] > 0 && lst[i] === lst[max]\
    \ && maxFreq >= lst[i]) {\n            max = i;\n            maxFreq = lst[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ max;\n}\nvar result = search(lst);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with the list `[1, 1, 1]`.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try it with the list `[1, 1, 1]`.\n<|/ c |>\n<| c |>\nI added a test case to\
    \ my answer\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with the list `[1, 1,\
    \ 1]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    let max: number = -1;\n    let\
    \ maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxCount = 1;\n   \
    \     } else if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a\
    \ tags=algorithm,javascript,arrays |>\n<code>", "    let max = 0;\n    let maxFreq\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 &&\
    \ lst[i] === lst[max]) {\n            maxFreq++;\n        }\n        if (lst[i]\
    \ > 0 && lst[i] === lst[max] && maxFreq >= lst[i]) {\n            max = i;\n \
    \           maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n", "    let\
    \ max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxCount++;\n\
    \        } else {\n            if (maxCount >= lst[i]) {\n                max\
    \ = i;\n                maxCount = 1;\n            } else {\n                maxCount\
    \ = 0;\n            }\n        }\n    }\n    return max;\n}", "    let max = 0;\n\
    \    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq++;\n        }\n   \
    \ }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n            maxFreq = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq])\
    \ {\n        return max;\n    } else {\n        return -1;\n    }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with the input `[1, 1, 2,\
    \ 1]`.\n<|/ c |>\n<| c |>\nI didn't test it, but I believe it works. I tested\
    \ it on [link](https://repl.it/repls/AwesomeStraightforwardBugs)\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with the input `[1, 1, 2, 1]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it on [link](https://repl.it/repls/AwesomeStraightforwardBugs)\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with the input `[1, 1, 2, 1]`.\n<|/\
    \ c |>\n<| a tags=javascript,algorithm |>\n<code>", "    let max: number = -1;\n\
    \    let maxCount: number = 0;\n    for (let num of lst) {\n        if (num >\
    \ 0) {\n            if (num > max) {\n                max = num;\n           \
    \     maxCount = 1;\n            } else if (num === max) {\n                maxCount++;\n\
    \            }\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,5,7,9,2,3,",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n       \
    \ }\n    }\n    return max;\n}", "    let max = 0;\n    let maxCount = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] ==\
    \ max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n", " \
    \   let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            freq++;\n \
    \       }\n        if (lst[i] > 0 && lst[i] > max) {\n            max = lst[i];\n\
    \            freq = 1;\n        }\n    }\n    return freq > 0 ? max : -1;\n}\n",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] == max) {\n            maxFreq++;\n   \
    \     }\n    }\n    return max;\n}\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\n\
    console.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3])",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n\
    \        }\n        if (lst[i] > 0 && lst[i] === lst[max] && maxFreq >= lst[i])\
    \ {\n            max = i;\n            maxFreq = lst[i];\n        }\n    }\n \
    \   return max;\n}", "    if (lst.length < 2) return -1;\n    let max = 0;\n \
    \   let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxIndex = i;\n   \
    \     }\n    }\n    return maxIndex;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n       \
    \ return max;\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,javascript,sorting\
    \ |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n    let maxCount = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] ===\
    \ max) {\n            maxCount++;\n        }\n    }\n    return max;\n}", "  \
    \  let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i]\
    \ > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n       \
    \ }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i]\
    \ === lst[max]) {\n            maxFreq++;\n        } else {\n            if (maxFreq\
    \ > 0) {\n                if (lst[i] > max) {\n                    max = lst[i];\n\
    \                    maxFreq = maxFreq;\n                }\n            } else\
    \ {\n                max = lst[i];\n                maxFreq = 1;\n           \
    \ }\n        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 &&\
    \ lst[i] === lst[max]) {\n            maxFreq++;\n        } else {\n         \
    \   if (maxFreq >= lst[i]) {\n                max = i;\n                maxFreq\
    \ = lst[i];\n            }\n        }\n    }\n    return max;\n}\n</code>\n<|/\
    \ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays\
    \ |>\n<code>", "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] === max) {\n           \
    \ maxCount++;\n        }\n    }\n    return max;\n}\nvar result = search([1]);\n\
    console.log(result);\n", "    let max: number = lst[0];\n    let maxCount: number\
    \ = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 &&\
    \ lst[i] === lst[max]) {\n            maxFreq++;\n        }\n        if (lst[i]\
    \ > 0 && lst[i] === lst[max] && maxFreq >= lst[i]) {\n            max = i;\n \
    \           maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>", "    let\
    \ max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
    \ lst[i];\n        } else if (lst[i] === max) {\n            maxFreq += lst[i];\n\
    \        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThis does not work. Try `search([1,1,2,2])`\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer. Can you please give\
    \ me an example where it fails?\n<|/ c |>\n<| c |>\nIt fails because `search([1,1,2,2])`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nI see what you mean. Thank you\
    \ for pointing that out. I updated my answer.\n<|/ c |>\n<| c |>\nYour algorithm\
    \ is O(n^2) but you can do it in O(n) by using a hash table. I'll post an answer\
    \ in a minute.\n<|/ c |>\n<| a dscore=0 |>\nYou can do this in O(n) time using\
    \ a hash table. \n<code>", "    let max: number = -1;\n    let maxCount: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ === max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    let max = 0;\n    let freq\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 &&\
    \ lst[i] === lst[max]) {\n            freq++;\n        } else {\n            max\
    \ = i;\n            freq = 1;\n        }\n    }\n    if (freq > lst[max]) {\n\
    \        return -1;\n    } else {\n        return max;\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis solution does not work if you have a list with duplicates.\
    \ For example, `[1, 1, 2, 3]` returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n       \
    \ }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxCount = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\n<code>",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n      \
    \  }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq++;\n\
    \        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| a |>\n<code>", "    let max: number = -1;\n    let maxCount: number =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\n<code>",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n       \
    \ }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i]\
    \ === lst[max]) {\n            maxFreq++;\n        } else {\n            if (maxFreq\
    \ >= lst[i]) {\n                max = i;\n                maxFreq = lst[i];\n\
    \            }\n        }\n    }\n    return max;\n}\n", "    let max = 0;\n \
    \   let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq++;\n        }\n   \
    \ }\n    return max;\n}", "    let max = 0;\n    let maxFreq = -1;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i] === max)\
    \ {\n            maxFreq++;\n        }\n    }\n    return max;\n}\n", "    let\
    \ max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
    \ lst[i];\n        } else if (lst[i] === max) {\n            maxFreq++;\n    \
    \    }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = i;\n        }\n    }\n    if (maxFreq\
    \ >= lst[maxFreq]) {\n        return max;\n    }\n    return -1;\n}\n", "    let\
    \ max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,javascript\
    \ |>\n<| a tags=algorithm,javascript |>\n<code>", "    let max = 0;\n    let maxFreq\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxFreq = lst[i];\n        } else\
    \ if (lst[i] === max) {\n            maxFreq++;\n        }\n    }\n    return\
    \ maxFreq > 0 ? max : -1;\n}\n", "  let max: number = -1;\n  let freq: number\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]\
    \ === lst[freq]) {\n      freq++;\n    } else {\n      max = lst[i];\n      freq\
    \ = 1;\n    }\n  }\n  return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i]\
    \ === lst[max]) {\n            maxFreq++;\n        }\n        if (lst[i] > 0 &&\
    \ lst[i] === lst[max] && maxFreq >= lst[i]) {\n            max = i;\n        \
    \    maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>", "    let max = 0;\n    let maxCount\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ === max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  let max: number = -1;\n\
    \  let maxCount: number = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if (lst[i]\
    \ === max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n", "    let max\
    \ = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return max;\n}\n", "    let max: number = -1;\n    let\
    \ maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxCount = 1;\n   \
    \     } else if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \   let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n\
    \        } else {\n            if (maxFreq >= lst[i]) {\n                max =\
    \ i;\n                maxFreq = lst[i];\n            }\n        }\n    }\n   \
    \ return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays,sorting |>\n<code>",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq += lst[i];\n        }\n    }\n    return max;\n}", "    let max\
    \ = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq++;\n        }\n   \
    \ }\n    return maxFreq > 0 ? max : -1;\n}\n", "    let max: number = lst[0];\n\
    \    let maxCount: number = 0;\n    for (let i = 1; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
    \    }\n    return max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you\
    \ have a list like `[1, 1, 2, 2, 3, 3]`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list like `[1, 1, 2, 2, 3, 3]`.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a list like `[1, 1, 2, 2, 3, 3]`.\n<|/ c |>\n\
    <| a tags=algorithm,arrays,javascript |>\n<code>", "    let max: number = lst[0];\n\
    \    let maxCount: number = 0;\n    for (let i = 1; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
    \    }\n    return maxCount > lst.length ? -1 : max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    let max: number = lst[0];\n    let maxCount:\
    \ number = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxCount = 1;\n        } else\
    \ if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq += lst[i];\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n\
    }\n", "  let max = 0;\n  let maxFreq = -1;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      maxFreq++;\n   \
    \ } else {\n      if (maxFreq > 0) {\n        if (lst[i] > max) {\n          max\
    \ = lst[i];\n          maxFreq = 1;\n        } else {\n          maxFreq++;\n\
    \        }\n      } else {\n        max = lst[i];\n        maxFreq = 1;\n    \
    \  }\n    }\n  }\n  return max;\n}\n", "    let max: number = -1;\n    let maxCount:\
    \ number = 0;\n    for (let num of lst) {\n        if (num > 0) {\n          \
    \  let count: number = lst.filter(x => x > 0).filter(x => x == num).length;\n\
    \            if (count > maxCount) {\n                max = num;\n           \
    \     maxCount = count;\n            }\n        }\n    }\n    return max;\n}\n\
    </code>\n<|/ a tags=algorithm,arrays,javascript,sorting |>\n<| a dscore=0 |>\n\
    <code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq++;\n\
    \        }\n    }\n    return max;\n}", "    let max = 0;\n    let maxFreq = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return max;\n}\n", "    let max: number = lst[0];\n\
    \    let maxCount: number = 0;\n    for (let i = 1; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
    \    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a list like\
    \ `[1, 1, 2, 2, 3, 3]`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you have a list like `[1, 1, 2, 2, 3, 3]`\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n   \
    \         maxFreq++;\n        }\n        if (lst[i] > 0 && lst[i] > max) {\n \
    \           max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n \
    \   return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            maxFreq = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq])\
    \ {\n        return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>", "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    }\
    \ else {\n      max = lst[i];\n      freq = 1;\n    }\n  }\n  return max;\n}\n",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq += lst[i];\n\
    \        }\n    }\n    return max;\n}", "    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = i;\n        }\n    }\n    if (maxFreq\
    \ >= lst[maxFreq]) {\n        return max;\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,javascript,sorting |>\n<| a dscore=0 |>\n<code>",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm,arrays |>\n<| a dscore=0 |>\n<code>", "  let max:\
    \ number = -1;\n  let maxCount: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n\
    \    } else if (lst[i] == max) {\n      maxCount++;\n    }\n  }\n  return max;\n\
    }\n\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2,\
    \ 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1,\
    \ 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, ", "    let max = 0;\n  \
    \  let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n        }\n        if\
    \ (lst[i] > 0 && lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = maxFreq > 0 ? maxFreq : 1;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>", "    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    let max\
    \ = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] == max) {\n            maxFreq++;\n        }\n    }\n\
    \    return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n            maxFreq = i;\n        }\n    }\n    if (maxFreq >= max)\
    \ {\n        return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=javascript,algorithm,sorting |>\n<code>", "    let max: number = lst[0];\n\
    \    let maxCount: number = 1;\n    for (let i = 1; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n            maxCount =\
    \ 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
    \    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    let max:\
    \ number = -1;\n    let maxCount: number = 0;\n    for (let num of lst) {\n  \
    \      if (num > 0) {\n            if (num > max) {\n                max = num;\n\
    \                maxCount = 1;\n            } else if (num === max) {\n      \
    \          maxCount++;\n            }\n        }\n    }\n    return max;\n}\n\
    </code>\n<|/ a tags=algorithm,javascript,data-structures |>\n<| c |>\nThis solution\
    \ does not work if there are negative numbers in the list. For example, `[-1,-2,-3]`\
    \ returns `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nI updated my answer to handle\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work if there are negative numbers in the list. For example, `[-1,-2,-3]`\
    \ returns `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nI updated my answer to handle\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=algorithm,javascript,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is `[1, 1, 1]`\n<|/ c |>\n<| c |>\n\
    It does work, try it out. `[1, 1, 1]` returns `1`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the array is `[1, 1, 1]`\n<|/ c |>\n<| c |>\nIt does work, try it out.\
    \ `[1, 1, 1]` returns `1`\n<|/ c |>\n<| c |>\nIt doesn't work if the array is\
    \ `[1, 1, 1]`\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>", " \
    \   let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return max;\n}\n", "    let max: number = -1;\n\
    \    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxCount++;\n  \
    \      }\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq++;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,arrays,javascript |>\n<code>", "    let\
    \ max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
    \ i;\n        }\n    }\n    if (maxFreq >= max) {\n        return max;\n    }\
    \ else {\n        return -1;\n    }\n}\n", "    let max = 0;\n    let maxCount\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ === max) {\n            maxCount++;\n        }\n    }\n    if (maxCount >= lst.length)\
    \ return -1;\n    return max;\n}", "    let max = 0;\n    let maxCount = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ === max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n",
  "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq++;\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n",
  "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n    let freq = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max])\
    \ {\n            freq++;\n        } else {\n            if (freq > max) {\n  \
    \              max = i;\n                freq = 1;\n            } else {\n   \
    \             freq++;\n            }\n        }\n    }\n    return lst[max];\n\
    }", "    if (lst.length < 2) return -1;\n    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=algorithm,arrays,javascript,sorting |>\n<| a dscore=0\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq])\
    \ {\n        return max;\n    }\n    return -1;\n}\n", "    let max = 0;\n   \
    \ let maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxCount = 1;\n        } else\
    \ if (lst[i] === max) {\n            maxCount++;\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays\
    \ |>\n<code>", "    let max: number = -1;\n    let maxCount: number = 0;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
    \      max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] ===\
    \ max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n", " \
    \   let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n\
    \        } else {\n            if (maxFreq >= lst[i]) {\n                max =\
    \ i;\n                maxFreq = lst[i];\n            }\n        }\n    }\n   \
    \ return max;\n}\n", "  let max: number = -1;\n  let freq: number = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq])\
    \ {\n      freq++;\n    } else {\n      max = Math.max(max, lst[i]);\n    }\n\
    \  }\n  return max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            maxFreq += lst[i];\n        }\n    }\n    return maxFreq > 0\
    \ ? max : -1;\n}\n", "    let max: number = lst[0];\n    let maxCount: number\
    \ = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0 && lst[i] === lst[max]) {\n            freq++;\n     \
    \   } else {\n            if (freq > max) {\n                max = freq;\n   \
    \         }\n            freq = 1;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple integers with\
    \ the same frequency.\n<|/ c |>\n<| c |>\nYes, it does. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple integers with the same\
    \ frequency.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple integers\
    \ with the same frequency.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ integers with the same frequency.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n    }\n    return max;\n}\nvar lst\
    \ = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconsole.log(search(lst));", "    let\
    \ max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0 && lst[i] > max) {\n            max = lst[i];\n      \
    \      maxFreq = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ tags=javascript,algorithm,arrays |>\n<| c |>\nThe question states that the array\
    \ is sorted.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks for pointing it out.\
    \ I've updated the answer.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n\
    <code>", "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxFreq = i;\n        }\n    }\n    if\
    \ (maxFreq >= lst[maxFreq]) {\n        return max;\n    }\n    return -1;\n}\n\
    </code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq++;\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
    \    }\n    return -1;\n}", "    let max = 0;\n    let maxCount = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] == max)\
    \ {\n            maxCount++;\n        }\n    }\n    return max;\n}\n", "    let\
    \ max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > 0 && lst[i] >= max) {\n            max = lst[i];\n       \
    \     freq = i;\n        }\n    }\n    return freq > 0 ? max : -1;\n}\n", "  \
    \  let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}", "    let max = 0;\n    let maxFreq\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxFreq = lst[i];\n        } else\
    \ if (lst[i] === max) {\n            maxFreq += lst[i];\n        }\n    }\n  \
    \  return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  \
    \  let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0 && lst[i] === lst[freq]) {\n            freq++;\n    \
    \    } else {\n            max = lst[i];\n            freq = 1;\n        }\n \
    \   }\n    return max;\n}\n", "    let max = 0;\n    let freq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max])\
    \ {\n            freq++;\n        } else {\n            max = i;\n           \
    \ freq = 1;\n        }\n    }\n    return freq > lst[max] ? -1 : max;\n}\n", " \
    \   let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxCount\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}\n", "    let max = 0;\n    let maxFreq\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            maxFreq = lst[i];\n        } else\
    \ if (lst[i] === max) {\n            maxFreq++;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return max;\n}\n", "    let max:\
    \ number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
    \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n       \
    \ }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq++;\n        }\n    }\n    return maxFreq > 0\
    \ ? max : -1;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a |>\n<code>",
  "  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = lst[i];\n    }\
    \ else if (lst[i] === max) {\n      maxFreq += lst[i];\n    }\n  }\n  return maxFreq\
    \ > 0 ? max : -1;\n}\n", "    let max = 0;\n    let freq = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n      \
    \      freq++;\n        }\n    }\n    return freq > lst.length ? -1 : max;\n}\n",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] == max) {\n            maxFreq++;\n   \
    \     }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,arrays,javascript\
    \ |>\n<code>", "    let max: number = -1;\n    let maxFreq: number = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return max;\n\
    }", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxFreq = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq\
    \ += lst[i];\n        }\n    }\n    return max;\n}\n", "    let max: number =\
    \ -1;\n    let freq: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0 && lst[i] === lst[freq]) {\n            freq++;\n    \
    \    } else {\n            max = lst[i];\n            freq = 1;\n        }\n \
    \   }\n    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,data-structures\
    \ |>\n<| c |>\nThis is not the correct answer. Try it with `[1, 1, 1]`.\n<|/ c\
    \ |>\n<| c |>\nIt returns `1` instead of `-1`.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that returns -1 instead of 1.\n<|/ c |>\n<| c |>\nI added a solution that returns\
    \ -1 instead of 1.\n<|/ c |>\n<| c |>\nI added a solution that returns -1 instead\
    \ of 1.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if (lst.length < 1) return\
    \ -1;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            maxCount = 1;\n        } else if (lst[i] == max) {\n  \
    \          maxCount++;\n        }\n    }\n    return max;\n}", "    let max =\
    \ 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n \
    \   } else {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if (lst.length < 1) return -1;\n    let max = 0;\n    let\
    \ freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0 && lst[i] === lst[max]) {\n            freq++;\n        } else {\n       \
    \     if (freq > max) {\n                max = i;\n                freq = 1;\n\
    \            } else {\n                freq++;\n            }\n        }\n   \
    \ }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n   \
    \         maxCount++;\n        }\n        if (lst[i] > 0 && lst[i] === lst[max]\
    \ && maxCount >= lst[i]) {\n            max = i;\n            maxCount = 1;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| c |>\nThis does not work if there are two or more equal numbers in the\
    \ list\n<|/ c |>\n<| c |>\nI didn't get you. Can you please elaborate more on\
    \ this?\n<|/ c |>\n<| c |>\nI mean that your solution does not work if there are\
    \ two or more equal numbers in the list\n<|/ c |>\n<| c |>\nI updated my answer.\
    \ Now it works with multiple equal numbers in the list.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your solution works perfectly for my test cases. But I still\
    \ don't understand why my solution doesn't work. Can you please explain me why\
    \ my solution doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    let max\
    \ = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        } else if (lst[i] === max) {\n            maxFreq++;\n        }\n   \
    \ }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq += lst[i];\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a dscore=0 |>\n<code>", " \
    \   let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq++;\n  \
    \      }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    let max: number = -1;\n    let maxCount: number = 0;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
    \      max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] ==\
    \ max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n", " \
    \   let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxFreq++;\n\
    \        }\n        if (lst[i] > 0 && lst[i] === lst[max] && maxFreq >= lst[i])\
    \ {\n            max = i;\n            maxFreq = lst[i];\n        }\n    }\n \
    \   return max;\n}", "    let max = 0;\n    let maxFreq = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] == max) {\n        \
    \    maxFreq += lst[i];\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n\
    }\n", "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let\
    \ num of lst) {\n        if (num > 0) {\n            let count: number = lst.filter(x\
    \ => x > num).length;\n            if (count > maxCount) {\n                max\
    \ = num;\n                maxCount = count;\n            }\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859424)\n<|/ c |>\n<| c |>\nI added\
    \ an answer that does provide an answer. Thanks for your feedback.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859424)\n<|/ c |>\n<| c |>\nI added\
    \ an answer that does provide an answer. Thanks for your feedback.\n<|/ c |>\n\
    <| a tags=javascript,arrays,algorithm |>\n<code>", "    let max = 0;\n    let\
    \ maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n            maxFreq = lst[i];\n       \
    \ } else if (lst[i] === max) {\n            maxFreq++;\n        }\n    }\n   \
    \ return max;\n}", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return max;\n}\n</code>\n<|/\
    \ a tags=javascript,algorithm,arrays |>\n<| c |>\nThis doesn't work if the list\
    \ is empty. `max` will be set to `0`, but `maxFreq` will be set to `-1`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n    let freq = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] ===\
    \ lst[max]) {\n            freq++;\n        } else {\n            if (freq > max)\
    \ {\n                max = i;\n                freq = 1;\n            } else {\n\
    \                freq++;\n            }\n        }\n    }\n    return -1;\n}",
  "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let item = lst[i];\n        if (item > max) {\n            max =\
    \ item;\n            maxCount = 1;\n        } else if (item == max) {\n      \
    \      maxCount++;\n        }\n    }\n    return max;\n}", "    let max = 0;\n\
    \    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] >= max) {\n\
    \            max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] === max) {\n           \
    \ maxCount++;\n        }\n    }\n    return max;\n}\n", "    let max: number =\
    \ -1;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] === lst[max]) {\n            maxCount++;\n\
    \        } else {\n            if (maxCount > max) {\n                max = maxCount;\n\
    \            }\n            maxCount = 0;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    let max = 0;\n\
    \    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxFreq = i;\n    \
    \    }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxCount = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        let count = lst[i];\n   \
    \     if (count > maxCount) {\n            max = i;\n            maxCount = count;\n\
    \        }\n    }\n    return max;\n}\n", "    let max = 0;\n    let maxFreq =\
    \ -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i]\
    \ === max) {\n            maxFreq++;\n        }\n    }\n    return max;\n}\n",
  "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n</code>\n\
    <|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work. Try it with `[1,2,2,3]`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with the example I gave.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with the example I gave.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with the example I gave.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if (lst.length\
    \ === 0) {\n        return -1;\n    }\n    let max = 0;\n    let maxFreq = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n   \
    \ return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    return max;\n\
    }\n", "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n\
    \      if (freq >= lst[i]) {\n        max = i;\n        freq = lst[i];\n     \
    \ }\n    }\n  }\n  return max === -1 ? -1 : max;\n}\n\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, 3]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 1, 2, 2, ", "    let max = 0;\n\
    \    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n            maxCount = 1;\n   \
    \     } else if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c\
    \ |>\nThis doesn't work. Try `search([1, 1, 1])`\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Thanks for pointing that out. I updated my answer.\n<|/ c |>\n<| c\
    \ |>\nThis still doesn't work. Try `search([1, 1, 1])`\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. Thanks for pointing that out. I updated my answer.\n<|/ c |>\n\
    <| c |>\nThis still doesn't work. Try `search([1, 1, 1])`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = -1;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n       \
    \     maxFreq++;\n        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n",
  "    let max: number = Number.MIN_SAFE_INTEGER;\n    let maxCount: number = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxCount = 1;\n        } else if (lst[i]\
    \ == max) {\n            maxCount++;\n        }\n    }\n    return max;\n}", " \
    \   let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n", "    let max: number = -1;\n    let\
    \ maxFreq: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n            maxFreq++;\n\
    \        }\n        if (lst[i] > max && maxFreq >= lst[i]) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,javascript,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,",
  "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq])\
    \ {\n        return max;\n    } else {\n        return -1;\n    }\n}\n", "   \
    \ let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] == max) {\n            maxFreq++;\n   \
    \     }\n    }\n    return max;\n}", "    let max = 0;\n    let maxFreq = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n   \
    \ return max;\n}\n", "    let max = 0;\n    let maxFreq = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n            maxFreq = lst[i];\n        } else if (lst[i] === max) {\n\
    \            maxFreq++;\n        }\n    }\n    return max;\n}\n", "    let max:\
    \ number = -1;\n    let maxCount: number = 0;\n    for (let num of lst) {\n  \
    \      if (num > 0) {\n            if (num === max) {\n                maxCount++;\n\
    \            } else {\n                max = num;\n                maxCount =\
    \ 1;\n            }\n        } else {\n            return -1;\n        }\n   \
    \ }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
