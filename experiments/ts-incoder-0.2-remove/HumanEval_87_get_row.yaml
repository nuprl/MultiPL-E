name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested lists,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the list,\n// and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\nfunction get_row(lst: number[][], x: number): [number, number][]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const rowResult: number[] = [];\n    for\
    \ (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b)\
    \ => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    const rowResult: number[] = [];\n    for (let\
    \ j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  const result: number[][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n \
    \   if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n \
    \ }\n  result.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] <\
    \ b[1]) return -1;\n    return 0;\n  });\n  return result.sort((a, b) => {\n \
    \   if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n\
    \  });\n}\n", "  const [rows, cols] = lst.length;\n  const [row_sorted, col_sorted]\
    \ = get_sorted_rows(lst);\n  const [row_sorted_reverse, col_sorted_reverse] =\
    \ get_sorted_rows(row_sorted);\n  const [row_sorted_reverse2, col_sorted_reverse2]\
    \ = get_sorted_rows(col_sorted);\n  const [row_sorted_reverse3, col_sorted_reverse3]\
    \ = get_sorted_rows(row_sorted_reverse);\n  const [row_sorted_reverse4, col_sorted_reverse4]\
    \ = get_sorted_rows(col_sorted_reverse);\n  const [row_sorted_reverse5, col_sorted_reverse5]\
    \ = get_sorted_rows(row_sorted_reverse2);\n  const [row_sorted_reverse6, col_sorted_reverse6]\
    \ = get_sorted_rows(col_sorted_reverse2);\n  const [row_sorted_reverse7, col_sorted_reverse7]\
    \ = get_sorted_rows(row_sorted_reverse3);\n  const [row_sorted_reverse8, col_sorted_reverse8]\
    \ = get_sorted_rows(col_sorted_reverse3);\n  const [row_sorted_reverse9, col_sorted_reverse9]\
    \ = get_sorted_rows(row_sorted_reverse4);\n  const [row_sorted_reverse10, col_sorted_reverse10]\
    \ = get_sorted_rows(col_sorted_reverse4);\n  const [row_sorted_reverse11, col_sorted_reverse11]\
    \ = get_sorted_rows(row_sorted_reverse5);\n  const [row_sorted_reverse12, col_sorted_reverse12]\
    \ = get_sorted_rows(col_sorted_reverse5);\n  const [row_sorted_reverse13, col_sorted_reverse13]\
    \ = get_sorted_rows(row_sorted_reverse6);\n  const [row_sorted_reverse14, col_sorted_reverse14]\
    \ = get_sorted_rows(col_sorted_reverse6);\n  const [row_sorted_reverse15, col_sorted_reverse15]\
    \ = get_sorted_rows(row_sorted_reverse7);\n  const [row_sorted_reverse16, col_sorted_reverse16]\
    \ = get_sorted_rows(col_sorted_reverse7);\n  const [row_sorted_reverse17, col_sorted_reverse17]\
    \ = get_sorted_rows(row_sorted_reverse8);\n  const [row_sorted_reverse18, col_sorted_reverse18]\
    \ = get_sorted_rows(col_sorted_reverse8);\n  const [row_sorted_reverse19, col_sorted_reverse19]\
    \ = get_sorted_rows(row_sorted_reverse9);\n  const [row_sorted_reverse20, col_sorted_reverse20]\
    \ = get_sorted_rows(col_sorted_reverse9);\n  const [row_sorted_reverse21, col_sorted_reverse21]\
    \ = get_sorted_rows(row_sorted_reverse10);\n  const [row_sorted_reverse22, col_sorted_reverse22]\
    \ = get_sorted_rows(col_sorted_reverse10);\n  const [row_sorted_reverse23, col_sorted_reverse23]\
    \ = get_sorted_rows(row_sorted_reverse11);\n  const [row_sorted_reverse24, col_sorted_reverse24]\
    \ = get_sorted_rows(col_sorted_reverse11);\n  const [row_sorted_reverse25, col_sorted_reverse25]\
    \ = get_sorted_row", "  const [rows, columns] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ x);\n  const [row_sorted, col_sorted] = sort_by_row(row, col);\n  return row_sorted.map(([x,\
    \ y]) => [x, y]);\n}\n", "  const row = [x];\n  const result = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row1 = get_row(lst[i], x - lst[i][0]);\n\
    \    for (let j = 0; j < row1.length; j++) {\n      row.push(row1[j]);\n    }\n\
    \    result.push(row);\n  }\n  return result;\n}\n", "  const row = [...new Array(lst[0].length)].map(()\
    \ => 0);\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        row[j] += 1;\n      }\n    }\n\
    \  }\n  row.sort((a, b) => b - a);\n  row.sort((a, b) => b - a);\n  return row.map((r,\
    \ i) => [i, r]);\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i, lst[i][1]]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "  const result: [number, number][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i,\
    \ lst[i][1]]);\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  const row = [...new Array(lst[0].length)].map(()\
    \ => []);\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        row[j].push([i, j]);\n      }\n\
    \    }\n  }\n  return row.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const [rows, cols] = lst.length;\n  const row = [...Array(cols).keys()].sort((a,\
    \ b) => b - a);\n  const col = [...Array(rows).keys()].sort((a, b) => b - a);\n\
    \  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const [x, y] = row[i];\n    if (x === x) {\n      result.push([x, y]);\n\
    \    }\n  }\n  return result.sort((a, b) => b[0] - a[0])\n    .sort((a, b) =>\
    \ b[1] - a[1])\n    .map(([x, y]) => ({ x, y }));\n}\n", "  const [rows, cols]\
    \ = lst.length;\n  const [row_sorted, col_sorted] = get_row_col(lst);\n  const\
    \ [row_sorted_reverse, col_sorted_reverse] = get_row_col(row_sorted);\n  const\
    \ [row_sorted_reverse2, col_sorted_reverse2] = get_row_col(row_sorted_reverse);\n\
    \  const [row_sorted_reverse3, col_sorted_reverse3] = get_row_col(row_sorted_reverse2);\n\
    \  const [row_sorted_reverse4, col_sorted_reverse4] = get_row_col(row_sorted_reverse3);\n\
    \  const [row_sorted_reverse5, col_sorted_reverse5] = get_row_col(row_sorted_reverse4);\n\
    \  const [row_sorted_reverse6, col_sorted_reverse6] = get_row_col(row_sorted_reverse5);\n\
    \  const [row_sorted_reverse7, col_sorted_reverse7] = get_row_col(row_sorted_reverse6);\n\
    \  const [row_sorted_reverse8, col_sorted_reverse8] = get_row_col(row_sorted_reverse7);\n\
    \  const [row_sorted_reverse9, col_sorted_reverse9] = get_row_col(row_sorted_reverse8);\n\
    \  const [row_sorted_reverse10, col_sorted_reverse10] = get_row_col(row_sorted_reverse9);\n\
    \  const [row_sorted_reverse11, col_sorted_reverse11] = get_row_col(row_sorted_reverse10);\n\
    \  const [row_sorted_reverse12, col_sorted_reverse12] = get_row_col(row_sorted_reverse11);\n\
    \  const [row_sorted_reverse13, col_sorted_reverse13] = get_row_col(row_sorted_reverse12);\n\
    \  const [row_sorted_reverse14, col_sorted_reverse14] = get_row_col(row_sorted_reverse13);\n\
    \  const [row_sorted_reverse15, col_sorted_reverse15] = get_row_col(row_sorted_reverse14);\n\
    \  const [row_sorted_reverse16, col_sorted_reverse16] = get_row_col(row_sorted_reverse15);\n\
    \  const [row_sorted_reverse17, col_sorted_reverse17] = get_row_col(row_sorted_reverse16);\n\
    \  const [row_sorted_reverse18, col_sorted_reverse18] = get_row_col(row_sorted_reverse17);\n\
    \  const [row_sorted_reverse19, col_sorted_reverse19] = get_row_col(row_sorted_reverse18);\n\
    \  const [row_sorted_reverse20, col_sorted_reverse20] = get_row_col(row_sorted_reverse19);\n\
    \  const [row_sorted_reverse21, col_sorted_reverse21] = get_row_col(row_sorted_reverse20);\n\
    \  const [row_sorted_reverse22, col_sorted_reverse22] = get_row_col(row_sorted_reverse21);\n\
    \  const [row_sorted_reverse23, col_sorted_reverse23] = get_row_col(row_sorted_reverse22);\n\
    \  const [row_sorted_reverse24, col_sorted_reverse24] = get_row_col(row_sorted_reverse23);\n\
    \  const [row_sorted_reverse25, col_sorted_", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ rowResult = row.filter((_, i) => i === x);\n    if (rowResult.length > 0) {\n\
    \      result.push([rowResult[0], rowResult[1]]);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const result: [number,\
    \ number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]\
    \ === x) {\n      result.push([i, lst[i][1]]);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const row = [x];\n  const result = [row];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      row.push(x);\n      result.push(row);\n    }\n  }\n  return result.sort((a,\
    \ b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const [rows, cols]\
    \ = lst;\n  const row = [...new Array(rows)].map((_, i) => i);\n  const col =\
    \ [...new Array(cols)].map((_, i) => -i);\n  const coords = row.map((row) => col.map((col)\
    \ => [row, col]));\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a, b)\
    \ => a[1] - b[1]);\n  return coords.map((coord) => [coord[0] + x, coord[1] + x]);\n\
    }\n", "  const row: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const rowItem = lst[i];\n    if (rowItem[0] === x) {\n      row.push([rowItem[1],\
    \ rowItem[0]]);\n    }\n  }\n  row.sort((a, b) => b[0] - a[0]);\n  row.sort((a,\
    \ b) => b[1] - a[1]);\n  return row;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const column = lst[i][0];\n    if (column < row[0]) {\n      row.unshift(column);\n\
    \      result.unshift(row);\n    }\n  }\n  return result.sort((a, b) => b[0] -\
    \ a[0]);\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const rowResult: number[] = [];\n    for\
    \ (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return\
    \ 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if\
    \ (a[1] < b[1]) return -1;\n    return 0;\n  });\n  return result;\n}\n", "  const\
    \ result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0]\
    \ - a[0]);\n  return result;\n}\n", "  const row: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row1 = lst[i];\n    const row2 = row1.slice();\n\
    \    row2.sort((a, b) => b - a);\n    row2.sort((a, b) => b - a);\n    if (row2[0]\
    \ === x) {\n      row.push([i, row2[1]]);\n    }\n  }\n  return row;\n}\n", " \
    \ const [rows, cols] = lst.length;\n  const row = [x];\n  const result: number[][]\
    \ = [];\n  for (let i = 0; i < rows; i++) {\n    const rowResult = [];\n    for\
    \ (let j = 0; j < cols; j++) {\n      rowResult.push([lst[i][j], lst[i][j]]);\n\
    \    }\n    result.push(rowResult);\n  }\n  return result.sort((a, b) => a[0]\
    \ - b[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const row: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row1 = lst[i];\n    const\
    \ row2 = row1.slice();\n    row2.sort((a, b) => b - a);\n    row2.sort((a, b)\
    \ => b - a);\n    if (row2[0] === x) {\n      row.push([i, row2[1]]);\n    }\n\
    \  }\n  row.sort((a, b) => b[0] - a[0]);\n  return row;\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]\
    \ === x) {\n      result.push([i, lst[i][1]]);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  const result: number[][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n \
    \   const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n     \
    \ if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a,\
    \ b) => {\n    if (a[0] === b[0]) {\n      return a[1] - b[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  result.sort((a, b) => {\n    if (a[1] === b[1]) {\n \
    \     return a[0] - b[0];\n    }\n    return a[1] - b[1];\n  });\n  return result;\n\
    }\n", "  const [rows, cols] = lst;\n  const [row, col] = [Math.min(x, rows), Math.max(x,\
    \ cols)];\n  const coords: number[][] = [];\n  for (let i = 0; i < row; i++) {\n\
    \    coords.push([i, row]);\n  }\n  for (let i = row; i >= 0; i--) {\n    coords.push([i,\
    \ col]);\n  }\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a, b) =>\
    \ a[1] - b[1]);\n  return coords;\n}\n", "  const result: number[][] = [];\n \
    \ for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult:\
    \ number[] = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j]\
    \ === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  return result.sort((a, b) => a[0] > b[0] ? 1 : -1).sort((a, b) => b[1]\
    \ > a[1] ? 1 : -1);\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n\
    \      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) =>\
    \ {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return\
    \ 0;\n  });\n  result.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if\
    \ (a[0] > b[0]) return 1;\n    return 0;\n  });\n  return result;\n}\n", "  const\
    \ [rows, columns] = lst;\n  const [row, col] = get_row_and_col(rows, x);\n  const\
    \ coords: number[][] = [];\n  for (let i = 0; i < row; i++) {\n    coords.push([i,\
    \ col]);\n  }\n  coords.sort((a, b) => b[1] - a[1]);\n  coords.sort((a, b) =>\
    \ a[0] - b[0]);\n  return coords;\n}\n", "  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const result: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const column = row[x];\n\
    \    rows.push(row);\n    columns.push(column);\n  }\n  rows.sort((a, b) => b[0]\
    \ - a[0]);\n  columns.sort((a, b) => b[1] - a[1]);\n  for (let i = 0; i < columns.length;\
    \ i++) {\n    for (let j = 0; j < rows.length; j++) {\n      if (columns[i] ==\
    \ rows[j][1]) {\n        result.push([rows[j][0], columns[i]]);\n      }\n   \
    \ }\n  }\n  return result;\n}\n", "  const result: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult\
    \ = row.filter((_, i) => i === x);\n    if (rowResult.length > 0) {\n      result.push([rowResult[0],\
    \ rowResult.reverse()]);\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const result: number[][] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  const result: number[][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n \
    \   if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n \
    \ }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n\
    \  return result;\n}\n", "  const [rows, columns] = lst;\n  const [minRow, minCol]\
    \ = rows.reduce(([minRow, minCol], row) => {\n    const [minRow, minCol] = row;\n\
    \    return minRow < minCol ? [minRow, minCol] : [minCol, minRow];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [maxRow, maxCol] = row;\n    return maxRow > maxCol\
    \ ? [maxRow, maxCol] : [maxCol, maxRow];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, maxCol] = [minRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, minCol] = [maxRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRow, maxCol] = [minRow, maxCol];\n\
    \  const [maxRow, minCol] = [maxRow, minCol];\n  const [minRow, maxCol] = [minRow,\
    \ maxCol];\n  const [maxRow, minCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, maxCol] = [minRow, maxCol];\n  const [maxRow, minCol] = [maxRow,\
    \ minCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol]\
    \ = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRow, maxCol] = [minRow, maxCol];\n\
    \  const [maxRow, minCol] = [maxRow, minCol];\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [", "  const\
    \ result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "  const row = [x];\n  const column = [lst[0].length\
    \ - 1];\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ row = lst[i];\n    const column = row.length - 1;\n    if (row[x] === x) {\n\
    \      result.push([row, column]);\n    }\n  }\n  return result.sort((a, b) =>\
    \ b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  const [rows, cols] = lst;\n\
    \  const [row_max, col_max] = Math.max(rows, cols);\n  const [row_min, col_min]\
    \ = Math.min(rows, cols);\n  const rows: number[] = [];\n  const cols: number[]\
    \ = [];\n  for (let row = 0; row < row_max; row++) {\n    rows.push(row);\n  }\n\
    \  for (let col = 0; col < col_max; col++) {\n    cols.push(col);\n  }\n  const\
    \ result: number[][] = [];\n  for (let row = 0; row < row_max; row++) {\n    for\
    \ (let col = 0; col < col_max; col++) {\n      if (rows[row] === x && cols[col]\
    \ === x) {\n        result.push([row, col]);\n      }\n    }\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]);\n}\n", "  const [rows, columns] = lst;\n  const [row, col]\
    \ = get_row_col(x, rows);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0,\
    \ row), col),\n    ...get_row(rows.slice(row), col),\n  ];\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++)\
    \ {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row = [x];\n  const result = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row_x = row[0];\n\
    \    if (row_x === x) {\n      return result;\n    }\n    const row_y = row[1];\n\
    \    if (row_y > x) {\n      row.push(x);\n      result.push(row);\n    }\n  }\n\
    \  return result;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i, lst[i][1]]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0]\
    \ - a[0]);\n  return result;\n}\n", "  const rows = lst.map(row => row.map(col\
    \ => col[x]));\n  const sorted = rows.sort((a, b) => b[0] - a[0]);\n  const reversed\
    \ = sorted.reverse();\n  return reversed.map(row => row.map(col => col[1]));\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const [rows, columns] = lst.length;\n  const [row_sorted, column_sorted]\
    \ = get_sorted_coordinates(lst, rows);\n  const [row_sorted_reversed, column_sorted_reversed]\
    \ = get_sorted_coordinates(row_sorted, rows);\n  const [row_sorted_reversed_reversed,\
    \ column_sorted_reversed_reversed] = get_sorted_coordinates(row_sorted_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed, column_sorted_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed, rows);\n  const [row_sorted_reversed_reversed_reversed_reversed,\
    \ column_sorted_reversed_reversed_reversed_reversed] = get_sorted_coordinates(row_sorted_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed, column_sorted_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed, rows);\n\
    \  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed, column_sorted_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ column_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ column_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ column_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ column_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ = get_sorted_coordinates(row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ rows);\n  const [row_sorted_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    rows.push([lst[i][0],\
    \ lst[i][1]]);\n  }\n  rows.sort((a, b) => a[0] - b[0]);\n  rows.sort((a, b) =>\
    \ b[1] - a[1]);\n  const result: number[][] = [];\n  for (let i = 0; i < rows.length;\
    \ i++) {\n    const row = rows[i];\n    if (row[0] === x) {\n      result.push([row[0],\
    \ row[1]]);\n    }\n  }\n  return result;\n}\n", "  const result: number[][] =\
    \ [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n   \
    \ if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n\
    \  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n\
    \  return result;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([lst[i][1],\
    \ lst[i][2]]);\n    }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  const row = [[0, 0]];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const [row, col] = lst[i];\n    if (row\
    \ === x) {\n      return [row, col];\n    }\n    if (col > x) {\n      row.push([row,\
    \ col]);\n    }\n  }\n  return row;\n}\n", "  const row = [x];\n  const result\
    \ = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n\
    \    if (curr[0] === row[0]) {\n      row.push(curr[1]);\n    } else {\n     \
    \ result.push(row);\n      row = [curr[0]];\n    }\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const [rows, cols]\
    \ = lst;\n  const [row_min, row_max] = rows.map(row => Math.min(row, x));\n  const\
    \ [col_min, col_max] = cols.map(col => Math.max(col, x));\n  const rows: number[]\
    \ = [];\n  const cols: number[] = [];\n  for (let row = row_min; row <= row_max;\
    \ row++) {\n    for (let col = col_min; col <= col_max; col++) {\n      if (row\
    \ === row_min && col === col_min) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_max && col === col_max) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_min && col === col_max)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_max && col === col_min) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_min && col === col_min) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_max && col === col_max)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_min && col === col_min) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_max && col === col_max) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_min && col === col_max)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_max && col === col_min) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_min && col === col_max) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_max && col === col_min)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_min && col === col_max) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_max && col === col_min) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_min && col === col_max)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_max && col === col_min) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_min && col === col_max) {\n        rows.push(row);\n\
    \        cols.push(col);\n      } else if (row === row_max && col === col_min)\
    \ {\n        rows.push(row);\n        cols.push(col);\n      } else if (row ===\
    \ row_min && col === col_max) {\n        rows.push(row);\n        cols.push(col);\n\
    \      } else if (row === row_max && col === col_min", "  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows;\
    \ i++) {\n    const row = lst[i];\n    const row_x = row[x];\n    const row_y\
    \ = row[cols - 1 - x];\n    result.push([row_x, row_y]);\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]);\n}\n", "  const rows = lst.map(row => row.filter(col =>\
    \ col === x));\n  const sortedRows = rows.sort((a, b) => b[1] - a[1]);\n  const\
    \ sortedRowsReversed = sortedRows.reverse();\n  return sortedRowsReversed.map(row\
    \ => [row[0], row[1]]);\n}\n", "  const [rows, columns] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    if (row[0] < minRow)\
    \ {\n      return [row, minRow];\n    }\n    if (row[0] === minRow) {\n      return\
    \ [minRow, row[1]];\n    }\n    return row;\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    if (row[0]\
    \ > maxRow) {\n      return [row, maxRow];\n    }\n    if (row[0] === maxRow)\
    \ {\n      return [maxRow, row[1]];\n    }\n    return row;\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const rowIndex = Math.max(Math.min(maxRow, rows\
    \ - 1), 0);\n  const colIndex = Math.max(Math.min(maxCol, columns - 1), 0);\n\
    \  const row = rows[rowIndex];\n  const col = columns[colIndex];\n  const [x,\
    \ y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n  const [minX, minY] = col;\n  const [maxX, maxY] = col;\n  const\
    \ [x, y] = row;\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const result:\
    \ number[][] = [];\n  for (let row = 0; row < rows; row++) {\n    const rowResult\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      if (lst[row][col] ===\
    \ x) {\n        rowResult.push([row, col]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n\
    \  return result;\n}\n", "  const [rows, columns] = lst;\n  const [row, col] =\
    \ get_row_col(x, rows);\n  const coords = [row, col];\n  coords.sort((a, b) =>\
    \ a - b);\n  coords.sort((a, b) => b - a);\n  return coords.map((i) => [i, lst[i]]);\n\
    }\n", "  const row: number[] = [];\n  const column: number[] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      row.push(i);\n\
    \      column.push(lst[i][1]);\n    }\n  }\n  row.sort((a, b) => a - b);\n  column.sort((a,\
    \ b) => b - a);\n  return [row, column];\n}\n", "  const [rows, cols] = lst.length;\n\
    \  const [row_sorted, col_sorted] = get_row_and_col_sorted(lst, x);\n  return\
    \ get_coordinates(row_sorted, col_sorted);\n}\n", "  const [rows, cols] = lst.length;\n\
    \  const [row_min, row_max] = get_row_range(lst);\n  const [col_min, col_max]\
    \ = get_col_range(lst);\n  const [row_start, row_end] = get_row_range(lst, row_min);\n\
    \  const [col_start, col_end] = get_col_range(lst, col_min);\n  const [row_mid,\
    \ col_mid] = get_row_range(lst, row_mid);\n  const [row_end, col_end] = get_col_range(lst,\
    \ col_mid);\n  const [row_mid, col_mid] = get_row_range(lst, row_mid, col_mid);\n\
    \  const [row_start, col_start] = get_col_range(lst, col_min);\n  const [row_start,\
    \ col_start] = get_col_range(lst, col_mid);\n  const [row_start, col_start] =\
    \ get_col_range(lst, row_mid);\n  const [row_start, col_start] = get_col_range(lst,\
    \ row_max);\n  const [row_start, col_start] = get_col_range(lst, col_max);\n \
    \ const [row_start, col_start] = get_col_range(lst, row_end, col_end);\n  const\
    \ [row_start, col_start] = get_col_range(lst, row_start, col_start);\n  const\
    \ [row_start, col_start] = get_col_range(lst, row_start, col_mid);\n  const [row_start,\
    \ col_start] = get_col_range(lst, row_start, col_max);\n  const [row_start, col_start]\
    \ = get_col_range(lst, row_mid, col_max);\n  const [row_start, col_start] = get_col_range(lst,\
    \ row_mid, col_mid);\n  const [row_start, col_start] = get_col_range(lst, row_mid,\
    \ col_start);\n  const [row_start, col_start] = get_col_range(lst, row_mid, col_end);\n\
    \  const [row_start, col_start] = get_col_range(lst, row_max, col_end);\n  const\
    \ [row_start, col_start] = get_col_range(lst, row_max, col_mid);\n  const [row_start,\
    \ col_start] = get_col_range(lst, row_max, col_start);\n  const [row_start, col_start]\
    \ = get_col_range(lst, row_max, col_end);\n  const [row_start, col_start] = get_col_range(lst,\
    \ row_mid, col_mid);\n  const [row_start, col_start] = get_col_range(lst, row_mid,\
    \ col_max);\n  const [row_start, col_start] = get_col_range(lst, row_mid, col_mid);\n\
    \  const [row_start, col_start] = get_col_range(lst, row_mid, col_start);\n  const\
    \ [row_start, col_start] = get_col_range(lst, row_mid, col_end", "  const [rows,\
    \ columns] = lst;\n  const row = [...Array(rows).keys()].sort((a, b) => a - b);\n\
    \  const column = [...Array(columns).keys()].sort((a, b) => b - a);\n  const result\
    \ = [];\n  for (let i = 0; i < rows.length; ++i) {\n    const row = row[i];\n\
    \    const column = column[i];\n    if (row === x) {\n      result.push([row,\
    \ column]);\n    }\n  }\n  return result.sort((a, b) => b[0] - a[0]);\n}\n", " \
    \ const [rows, cols] = lst.length;\n  const row = [...Array(cols)].map(() => 0);\n\
    \  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const [row, col] = row;\n    if (row === x) {\n      result.push([row, col]);\n\
    \    }\n  }\n  return result.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] -\
    \ a[0]);\n}\n", "  const [rows, columns] = lst;\n  const row = [...new Array(columns)].map(()\
    \ => 0);\n  const result = [...new Array(rows)].map(() => []);\n  for (let i =\
    \ 0; i < rows; i++) {\n    const row = lst[i];\n    const [row_x, row_y] = row;\n\
    \    if (row_x === x) {\n      result[i].push([row_x, row_y]);\n    }\n  }\n \
    \ result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row = [x];\n  const result = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push(row);\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0]\
    \ > b[0]) {\n      return -1;\n    }\n    if (a[0] < b[0]) {\n      return 1;\n\
    \    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return -1;\n    }\n    if (a[1] < b[1]) {\n      return 1;\n    }\n\
    \    return 0;\n  });\n  return result;\n}\n", "  const row = [...new Array(lst[0].length)].map(()\
    \ => []);\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      row[j].push([lst[i][j], i]);\n    }\n  }\n  row.sort((a, b) =>\
    \ a[0] - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row.map(a => [a[1],\
    \ a[0]]);\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i][0] === x) {\n      result.push([lst[i][1], lst[i][2]]);\n\
    \    }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\n", "  const row: number[] = [];\n  const column:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]\
    \ === x) {\n      row.push(i);\n      column.push(lst[i][1]);\n    }\n  }\n  row.sort((a,\
    \ b) => a - b);\n  column.sort((a, b) => b - a);\n  return [row, column];\n}\n",
  "  const row: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ rowElement = lst[i];\n    if (rowElement.includes(x)) {\n      row.push([i,\
    \ rowElement.indexOf(x)]);\n    }\n  }\n  row.sort((a, b) => b[1] - a[1]);\n \
    \ row.sort((a, b) => b[0] - a[0]);\n  return row;\n}\n", "  const [rows, cols]\
    \ = lst.length;\n  const [row_cols, row_row_col] = [rows, cols].map(\n    (row)\
    \ => [row, lst[row].length].sort((a, b) => b - a)\n  );\n  const [row_row_col,\
    \ row_row_row_col] = [row_cols, row_row_col].map(\n    (row) => [row, lst[row].length].sort((a,\
    \ b) => b - a)\n  );\n  const [row_row_row_col, row_row_row_row_col] = [row_row_cols,\
    \ row_row_row_col].map(\n    (row) => [row, lst[row].length].sort((a, b) => b\
    \ - a)\n  );\n  const [row_row_row_row_col, row_row_row_row_row_col] = [\n   \
    \ row_row_row_col,\n    row_row_row_row_col\n  ].map((row) => [row, lst[row].length].sort((a,\
    \ b) => b - a));\n  const [row_row_row_row_row_col, row_row_row_row_row_row_col]\
    \ = [\n    row_row_row_row_col,\n    row_row_row_row_row_col\n  ].map((row) =>\
    \ [row, lst[row].length].sort((a, b) => b - a));\n  const [row_row_row_row_row_row_col,\
    \ row_row_row_row_row_row_row_col] = [\n    row_row_row_row_row_col,\n    row_row_row_row_row_row_col\n\
    \  ].map((row) => [row, lst[row].length].sort((a, b) => b - a));\n  const [row_row_row_row_row_row_row_col,\
    \ row_row_row_row_row_row_row_row_col] = [\n    row_row_row_row_row_row_col,\n\
    \    row_row_row_row_row_row_row_col\n  ].map((row) => [row, lst[row].length].sort((a,\
    \ b) => b - a));\n  const [row_row_row_row_row_row_row_col, row_row_row_row_row_row_row_row_col]\
    \ = [\n    row_row_row_row_row_row_col,\n    row_row_row_row_row_row_row_col\n\
    \  ].map((row) => [row, lst[row].length].sort((a, b) => b - a));\n  const [row_row_row_row_row_row_row_row_col,\
    \ row_row_row_row_row_row_row_row_row_col] = [\n    row_row_row_row_row_row_row_col,\n\
    \    row_row_row_row_row_row_row_col\n  ].map((row) => [row, lst[row].length].sort((a,\
    \ b) => b - a));\n  const [row_row_row_row_row_row_row_row_col, row_row_row_row_row_row_row_row_row_col]\
    \ = [\n    row_row_row_row_row_row_row_col,\n    row_row_row_row_row_row_row_col\n\
    \  ].map((row) => [row, lst[row", "  const rows = lst.map(row => row.map(i =>\
    \ i));\n  const row_sorted = rows.sort((a, b) => a[0] - b[0]);\n  const row_sorted_reversed\
    \ = row_sorted.sort((a, b) => b[0] - a[0]);\n  const row_sorted_reversed_row =\
    \ row_sorted_reversed.map(row => row[0]);\n  const row_sorted_reversed_row_sorted\
    \ = row_sorted_reversed_row.sort((a, b) => b - a);\n  const row_sorted_reversed_row_sorted_reversed\
    \ = row_sorted_reversed_row_sorted.map(row => row);\n  const row_sorted_reversed_row_sorted_reversed_row\
    \ = row_sorted_reversed_row_sorted_reversed.map(row => row[0]);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted\
    \ = row_sorted_reversed_row_sorted_reversed_row.sort((a, b) => b - a);\n  const\
    \ row_sorted_reversed_row_sorted_reversed_row_sorted_reversed = row_sorted_reversed_row_sorted_reversed_row_sorted.map(row\
    \ => row);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed.map(row => row[0]);\n\
    \  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row.sort((a, b)\
    \ => b - a);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted.map(row\
    \ => row);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed.map(row\
    \ => row[0]);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row.sort((a,\
    \ b) => b - a);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted.map(row\
    \ => row);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row\
    \ = row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed.map(row\
    \ => row[0]);\n  const row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted_reversed_row_sorted\
    \ = row_sorted_reversed_row_sorted_reversed_", "  const row = [x];\n  const result\
    \ = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i];\n\
    \    for (let j = 0; j < lstRow.length; j++) {\n      if (lstRow[j] === x) {\n\
    \        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b)\
    \ => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const result: number[][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n \
    \   const rowLength = row.length;\n    for (let j = 0; j < rowLength; j++) {\n\
    \      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\
    \  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row = [x];\n  const coords = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const [x, y] = row;\n\
    \    if (x === row[0]) {\n      row.push(x);\n      coords.push(row);\n    }\n\
    \  }\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a, b) => b[1] - a[1]);\n\
    \  return coords;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n\
    \    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n     \
    \   rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n\
    \  return result.sort((a, b) => b[0] - a[0]);\n}\n", "  const [rows, cols] = lst;\n\
    \  const [row_max, col_max] = Math.max(rows, cols);\n  const rows: number[] =\
    \ [];\n  const cols: number[] = [];\n  for (let i = 0; i < row_max; i++) {\n \
    \   rows.push(i);\n  }\n  for (let i = 0; i < col_max; i++) {\n    cols.push(i);\n\
    \  }\n  const result: number[][] = [];\n  for (let i = 0; i < rows.length; i++)\
    \ {\n    const row = rows[i];\n    const col = cols[i];\n    const row_coord =\
    \ [row, col];\n    const col_coord = [col, row];\n    const [row_i, col_i] = get_coord(row_coord,\
    \ col_coord, x);\n    if (row_i === -1) {\n      continue;\n    }\n    const [row_j,\
    \ col_j] = get_coord(row_coord, col_coord, x);\n    if (row_j === -1) {\n    \
    \  continue;\n    }\n    const [row_k, col_k] = get_coord(row_coord, col_coord,\
    \ x);\n    if (row_k === -1) {\n      continue;\n    }\n    const [row_l, col_l]\
    \ = get_coord(row_coord, col_coord, x);\n    if (row_l === -1) {\n      continue;\n\
    \    }\n    const [row_m, col_m] = get_coord(row_coord, col_coord, x);\n    if\
    \ (row_m === -1) {\n      continue;\n    }\n    const [row_n, col_n] = get_coord(row_coord,\
    \ col_coord, x);\n    if (row_n === -1) {\n      continue;\n    }\n    const [row_o,\
    \ col_o] = get_coord(row_coord, col_coord, x);\n    if (row_o === -1) {\n    \
    \  continue;\n    }\n    const [row_p, col_p] = get_coord(row_coord, col_coord,\
    \ x);\n    if (row_p === -1) {\n      continue;\n    }\n    const [row_q, col_p]\
    \ = get_coord(row_coord, col_coord, x);\n    if (row_q === -1) {\n      continue;\n\
    \    }\n    const [row_r, col_r] = get_coord(row_coord, col_coord, x);\n    if\
    \ (row_r === -1) {\n      continue;\n    }\n    const [row_s, col_s] = get_coord(row_coord,\
    \ col_coord, x);\n    if (row_s === -1) {\n      continue;\n    }\n    const [row_t,\
    \ col_t] = get_coord(row_coord, col_coord, x);\n    if (row_t === -1) {\n    \
    \  continue;\n    }\n    const [row_u, col_u] = get_coord(row_coord, col_coord,\
    \ x);\n    if (row_u === -1) {\n      continue;\n    }\n    const [row_v, col_v]\
    \ = get_coord(row_coord, col_coord, x);\n    if (row_v === -1) {\n      continue;\n\
    \    }\n    const [row_w, col_w] = get_coord(row_coord, col_coord, x);\n    if\
    \ (row_w === -1) {\n      continue;\n    }\n    const [row_x, col_x] = get_coord(",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  return result.sort((a, b) => b[1] - a[1]);\n}\n", "  const row\
    \ = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const row = lst[i];\n    if (row.includes(x)) {\n      result.push(row);\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return -1;\n    if\
    \ (a[0] < b[0]) return 1;\n    return 0;\n  });\n  result.sort((a, b) => {\n \
    \   if (a[1] > b[1]) return -1;\n    if (a[1] < b[1]) return 1;\n    return 0;\n\
    \  });\n  return result;\n}\n", "  const [rows, columns] = lst;\n  const row =\
    \ [...Array(rows).keys()].sort((a, b) => b - a);\n  const column = [...Array(columns).keys()].sort((a,\
    \ b) => b - a);\n  const coordinates = row.map((r) => column.map((c) => [r, c]));\n\
    \  return coordinates.filter((c) => c[0] === x).sort((a, b) => b[0] - a[0]);\n\
    }\n", "  const row = [...new Array(x)]\n  const coords = lst.map(row => row.map((_,\
    \ i) => i))\n  const sorted = coords.sort((a, b) => a - b)\n  const reversed =\
    \ sorted.reverse()\n  const [row, col] = reversed.map((_, i) => sorted[i])\n \
    \ return row.map((_, i) => [i, col])\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ row_x = row[x];\n    const row_y = row[x - 1];\n    result.push([row_x, row_y]);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i, lst[i][1]]);\n\
    \    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\n", "  const [rows, cols] = lst;\n  const [row,\
    \ col] = get_row_col(x, rows);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0,\
    \ row), col - 1),\n    ...get_row(rows.slice(row), col),\n  ];\n}\n", "  const\
    \ [rows, cols] = lst.length;\n  const result: number[][] = [];\n  for (let row\
    \ = 0; row < rows; row++) {\n    const rowResult: number[] = [];\n    for (let\
    \ col = 0; col < cols; col++) {\n      if (lst[row][col] === x) {\n        rowResult.push([row,\
    \ col]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]).sort((a, b) => a[0] - b[0]);\n}\n", "  const [rows, cols]\
    \ = lst.length;\n  const [row_max, col_max] = lst[0].length;\n  const rows: number[]\
    \ = [];\n  const cols: number[] = [];\n  for (let i = 0; i < rows; i++) {\n  \
    \  rows.push(i);\n  }\n  for (let j = 0; j < cols; j++) {\n    cols.push(j);\n\
    \  }\n  const result: number[][] = [];\n  for (let i = 0; i < rows; i++) {\n \
    \   const row = lst[i];\n    const row_sorted = row.sort((a, b) => b - a);\n \
    \   for (let j = 0; j < row_sorted.length; j++) {\n      const col = row_sorted[j];\n\
    \      if (col === x) {\n        result.push([i, col]);\n      }\n    }\n  }\n\
    \  result.sort((a, b) => b[0] - a[0]);\n  return result;\n}\n", "  const [rows,\
    \ cols] = lst.length;\n  const [row_idx, col_idx] = get_row_col(lst);\n  const\
    \ [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx,\
    \ col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n\
    \  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx, col_idx] =\
    \ get_row_col(lst);\n  const [row_idx, col_idx] = get_row_col(lst);\n", "    const\
    \ rows = lst.length;\n    const cols = lst[0].length;\n    const coords: number[][]\
    \ = [];\n    for (let row = 0; row < rows; row++) {\n        const row_coords:\
    \ number[] = [];\n        for (let col = 0; col < cols; col++) {\n           \
    \ if (lst[row][col] === x) {\n                row_coords.push({ row: row, col:\
    \ col });\n            }\n        }\n        coords.push(row_coords);\n    }\n\
    \    coords.sort((a, b) => a.row - b.row);\n    coords.sort((a, b) => b.col -\
    \ a.col);\n    return coords;\n}\n", "  const row: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      row.push([x,\
    \ lst[i][1]]);\n    }\n  }\n  row.sort((a, b) => b[1] - a[1]);\n  row.sort((a,\
    \ b) => a[0] - b[0]);\n  return row;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([lst[i][1],\
    \ lst[i][2]]);\n    }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  const rows = lst.length;\n \
    \ const cols = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows;\
    \ i++) {\n    const row = lst[i];\n    const row_x = row[x];\n    const row_y\
    \ = row[cols - 1 - x];\n    result.push([row_x, row_y]);\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]);\n}\n", "  const [rows, columns] = lst;\n  const [row, column]\
    \ = get_row_and_column(lst, x);\n  const coordinates: number[][] = [];\n  for\
    \ (let i = 0; i < rows.length; i++) {\n    coordinates.push([]);\n    for (let\
    \ j = 0; j < rows[i].length; j++) {\n      coordinates[i].push([i, j, rows[i][j]]);\n\
    \    }\n  }\n  coordinates.sort((a, b) => a[0] - b[0]);\n  coordinates.sort((a,\
    \ b) => b[1] - a[1]);\n  return coordinates.map(coord => [coord[0], coord[1],\
    \ lst[coord[0]][coord[1]]]);\n}\n", "  const result: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[1] > b[1]) {\n      return -1;\n    }\n    if (a[1] < b[1])\
    \ {\n      return 1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return -1;\n    }\n    if (a[0] < b[0]) {\n   \
    \   return 1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  const [rows,\
    \ columns] = lst;\n  const [row, col] = get_row_and_col(rows, x);\n  const coords:\
    \ number[][] = [];\n  for (let i = 0; i < rows.length; i++) {\n    coords.push([i,\
    \ rows[i]]);\n  }\n  coords.sort((a, b) => b[1] - a[1]);\n  coords.sort((a, b)\
    \ => a[0] - b[0]);\n  const result: number[][] = [];\n  for (let i = 0; i < coords.length;\
    \ i++) {\n    result.push([coords[i][0], coords[i][1]]);\n  }\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n\
    }\n", "  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push(row);\n\
    \    }\n  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] -\
    \ a[1]);\n}\n", "  const result: [number, number][] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i, lst[i][1]]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n\
    \    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        result.push([i,\
    \ j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0])\
    \ {\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  });\n  result.sort((a,\
    \ b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0];\n    }\n    return\
    \ a[1] - b[1];\n  });\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0])\
    \ {\n      return 1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n\
    \    if (a[1] < b[1]) {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n   \
    \   return 1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    const rowResult = row.filter((item) => item === x);\n    if (rowResult.length\
    \ > 0) {\n      result.push([i, rowResult.sort()[0]]);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const row: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const rowItem = lst[i];\n    if (rowItem[0] ===\
    \ x) {\n      row.push([rowItem[1], rowItem[0]]);\n    }\n  }\n  row.sort((a,\
    \ b) => b[0] - a[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row;\n}\n",
  "  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push(row);\n\
    \    }\n  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] -\
    \ a[1]);\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const rowResult = row.filter((_, i) =>\
    \ i === x);\n    if (rowResult.length > 0) {\n      result.push(rowResult);\n\
    \    }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\n", "    const row: number[] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        const column: number[] = [];\n      \
    \  for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                row.push(i);\n                column.push(j);\n         \
    \   }\n        }\n        row.sort((a, b) => a - b);\n        column.sort((a,\
    \ b) => b - a);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) =>\
    \ a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) => a -\
    \ b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n\
    \        row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n    \
    \    row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a,\
    \ b) => b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) =>\
    \ b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) => b -\
    \ a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n\
    \        row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n    \
    \    row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a,\
    \ b) => a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) =>\
    \ a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) => a -\
    \ b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n\
    \        row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n    \
    \    row.sort((a, b) => b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a,\
    \ b) => b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) =>\
    \ b - a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) => b -\
    \ a);\n        row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n\
    \        row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n    \
    \    row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a,\
    \ b) => a - b);\n        row.sort((a, b) => b - a);\n        row.sort((a, b) =>\
    \ a - b);\n        row.sort((a, b) => b", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ rowLength = row.length;\n    if (rowLength > 0) {\n      const rowIndex = row.indexOf(x);\n\
    \      if (rowIndex > -1) {\n        result.push([i, rowIndex]);\n      }\n  \
    \  }\n  }\n  return result.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n\
    }\n", "  const [rows, cols] = lst;\n  const [row_idx, col_idx] = get_row_col_idx(x,\
    \ rows, cols);\n  return get_row_col(row_idx, col_idx, rows, cols);\n}\n", " \
    \   const row = [x];\n    const result = [row];\n    const rows = [row];\n   \
    \ const columns = [row];\n    let row_index = 0;\n    let column_index = 0;\n\
    \    while (row_index < rows.length && column_index < columns.length) {\n    \
    \    const row_value = rows[row_index][column_index];\n        const column_value\
    \ = columns[column_index][row_index];\n        if (row_value < x) {\n        \
    \    row_index += 1;\n        } else if (row_value > x) {\n            column_index\
    \ += 1;\n        } else {\n            result.push([rows[row_index], columns[column_index]]);\n\
    \            row_index += 1;\n            column_index += 1;\n        }\n    }\n\
    \    return result;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const row = lst[i];\n    const index = row.indexOf(x);\n\
    \    if (index >= 0) {\n      result.push([i, index]);\n    }\n  }\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    const rowResult: number[] = [];\n    for (let\
    \ j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const row: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const rowItem = lst[i];\n    if (rowItem[0] ===\
    \ x) {\n      row.push([rowItem[1], rowItem[2]]);\n    }\n  }\n  row.sort((a,\
    \ b) => b[0] - a[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row;\n}\n",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0]\
    \ - a[0]);\n  return result;\n}\n", "  const row = [...new Array(x)]\n  const\
    \ coords = lst.map((row) => row.map(() => 0))\n  coords.forEach((row, i) => {\n\
    \    row.forEach((col, j) => {\n      coords[i][j] = coords[i][j] + 1\n    })\n\
    \  })\n  coords.sort((a, b) => b[0] - a[0])\n  coords.sort((a, b) => b[1] - a[1])\n\
    \  return coords.map((coord) => [coord[0], coord[1]])\n}\n", "  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  const result = [];\n  for (let row = 0; row\
    \ < rows; row++) {\n    const columns = [];\n    for (let col = 0; col < cols;\
    \ col++) {\n      if (lst[row][col] === x) {\n        columns.push([row, col]);\n\
    \      }\n    }\n    result.push(columns);\n  }\n  return result.sort((a, b) =>\
    \ b[1] - a[1]);\n}\n", "  const row = [x];\n  const result = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push(row);\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0]\
    \ < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n \
    \ result.sort((a, b) => {\n    if (a[1] > b[1]) return -1;\n    if (a[1] < b[1])\
    \ return 1;\n    return 0;\n  });\n  return result;\n}\n", "  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  const coords: number[][] = [];\n  for (let i\
    \ = 0; i < rows; i++) {\n    const row = lst[i];\n    const row_coords = coords[i];\n\
    \    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        row_coords.push(j);\n\
    \      }\n    }\n  }\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a,\
    \ b) => b[1] - a[1]);\n  return coords;\n}\n", "  const row: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      row.push([i,\
    \ lst[i][1]]);\n    }\n  }\n  row.sort((a, b) => b[1] - a[1]);\n  row.sort((a,\
    \ b) => b[0] - a[0]);\n  return row;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ rowResult = get_row(row, x);\n    for (let j = 0; j < rowResult.length; j++)\
    \ {\n      result.push([i, rowResult[j]]);\n    }\n  }\n  return result.sort((a,\
    \ b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  const result: number[][] = [];\n  for (let i\
    \ = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowResult = [];\n\
    \    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const [rows, cols] = lst.length;\n  const [minRow,\
    \ minCol] = lst.map(row => Math.min(...row));\n  const [maxRow, maxCol] = lst.map(row\
    \ => Math.max(...row));\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol, maxCol].map(col\
    \ => col - minCol);\n  const [minRowIndex, maxRowIndex] = [minRow, maxRow].map(row\
    \ => row - minRow);\n  const [minColIndex, maxColIndex] = [minCol", "  const row\
    \ = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i][0] === row[0]) {\n      row.push(lst[i][1]);\n      result.push(row);\n\
    \      row = [lst[i][1]];\n    } else {\n      row.push(lst[i][1]);\n    }\n \
    \ }\n  return result;\n}\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result = [];\n  for (let row = 0; row < rows; row++) {\n    const columns\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      if (lst[row][col] ===\
    \ x) {\n        columns.push([row, col]);\n      }\n    }\n    result.push(columns);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row = [x];\n  const result = [row];\n  const\
    \ sortedRow = row.sort((a, b) => a - b);\n  const sortedColumns = sortedRow.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\
    \    const sortedRow = row.sort((a, b) => a - b);\n    const sortedColumns = sortedRow.sort((a,\
    \ b) => b - a);\n    if (sortedColumns[0] === sortedRow[0]) {\n      result.push(sortedRow);\n\
    \    }\n  }\n  return result;\n}\n", "  const [rows, columns] = lst;\n  const\
    \ row = [...new Array(columns)].map(() => 0);\n  const result = [...new Array(rows)].map(()\
    \ => []);\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const\
    \ [x, y] = row;\n    if (x === x) {\n      result[i].push([x, y]);\n    }\n  }\n\
    \  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n\nconsole.log(get_row([\n  [1, 2],\n  [3, 4],\n  [5, 6],\n\
    \  [7, 8],\n  [9, 10],\n  [11, 12],\n  [13, 14],\n  [15, 16],\n  [17, 18],\n \
    \ [19, 20],\n], 3));", "  const rows: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n\
    \    if (rowLen === x) {\n      rows.push([i, row[x]]);\n    }\n  }\n  rows.sort((a,\
    \ b) => a[0] - b[0]);\n  rows.sort((a, b) => b[1] - a[1]);\n  return rows;\n}\n",
  "  const [rows, columns] = lst;\n  const [row, col] = get_row_col(x, rows);\n  const\
    \ coords = sort_coords(row, columns);\n  return coords.map(coord => [coord[0]\
    \ + row, coord[1] + col]);\n}\n", "  const result: [number, number][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i,\
    \ lst[i][1]]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const result\
    \ = [];\n  for (let row = 0; row < rows; row++) {\n    const rowResult = [];\n\
    \    for (let col = 0; col < cols; col++) {\n      if (lst[row][col] === x) {\n\
    \        rowResult.push([row, col]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  return result.sort((a, b) => b[1] - a[1]);\n}\n", "  const row = [...new\
    \ Array(lst.map(row => row.length))].map(() => 0);\n  const result = [...new Array(lst.map(row\
    \ => row.length))].map(() => []);\n  for (let i = 0; i < lst.length; i++) {\n\
    \    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n\
    \        row[j]++;\n      }\n    }\n  }\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < row.length; j++) {\n      result[i][j] = [i, row[j]];\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "    const row = [x];\n    const result =\
    \ [row];\n    for (let i = 0; i < lst.length; i++) {\n        const row = lst[i];\n\
    \        const [x, y] = row;\n        if (x === row[0]) {\n            result.push([x,\
    \ y]);\n        }\n    }\n    result.sort((a, b) => {\n        const [aRow, aCol]\
    \ = a;\n        const [bRow, aCol] = b;\n        return aRow - bRow;\n    });\n\
    \    result.sort((a, b) => {\n        const [aRow, aCol] = a;\n        const [bRow,\
    \ aCol] = b;\n        return aCol - bCol;\n    });\n    return result;\n}\n",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0]\
    \ - a[0]);\n  return result;\n}\n", "  const [rows, columns] = lst;\n  const [row,\
    \ col] = get_row_and_col(rows, x);\n  return [[row, col]].concat(\n    row.map(([x,\
    \ y]) => [x, y - 1]),\n    row.map(([x, y]) => [x, y + 1]),\n  );\n}\n", "  const\
    \ [rows, cols] = lst.length;\n  const [row_idx, col_idx] = get_row_col(x, rows);\n\
    \  const [row_idx_sorted, col_idx_sorted] = sort_row_col(row_idx, col_idx, rows);\n\
    \  const [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted,\
    \ col_idx_sorted, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, col_idx_sorted_reverse] = sort_row_col(row_idx_sorted_reverse,\
    \ col_idx_sorted_reverse, rows);\n  const [row_idx_sorted_reverse, col_idx_sorted_reverse]\
    \ = sort_row_col(row_idx_sorted_reverse, col_idx_sorted_reverse, rows);\n  const\
    \ [row_idx_sorted_reverse, ", "  const result: number[][] = [];\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([lst[i][1],\
    \ lst[i][2]]);\n    }\n  }\n  return result.sort((a, b) => b[0] - a[0]);\n}\n",
  "  const row = [...new Array(lst[0].length)].map(() => []);\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if\
    \ (lst[i][j] === x) {\n        row[j].push([i, j]);\n      }\n    }\n  }\n  row.sort((a,\
    \ b) => a[0] - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row;\n}\n",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    const rowResult: number[] = [];\n    for (let j =\
    \ 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result.sort((a,\
    \ b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  const [rows, cols]\
    \ = lst.length;\n  const [row_idx, col_idx] = get_row_col(lst);\n  const [row_idx_sorted,\
    \ col_idx_sorted] = sort_row_col(lst);\n  const [row_idx_sorted_reversed, col_idx_sorted_reversed]\
    \ =\n      sort_row_col(lst.reverse());\n  const [row_idx_sorted_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed] =\n      sort_row_col(lst.reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed, col_idx_sorted_reversed_reversed_reversed]\
    \ =\n      sort_row_col(lst.reverse().reverse().reverse());\n  const [row_idx_sorted_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed] =\n      sort_row_col(lst.reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed, col_idx_sorted_reversed_reversed_reversed_reversed_reversed]\
    \ =\n      sort_row_col(lst.reverse().reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed] =\n  \
    \    sort_row_col(lst.reverse().reverse().reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ =\n      sort_row_col(lst.reverse().reverse().reverse().reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ =\n      sort_row_col(lst.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed]\
    \ =\n      sort_row_col(lst.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse());\n\
    \  const [row_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ col_idx_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  const [rows, columns] = lst.length;\n  const [x, y] = get_coordinate(lst, x);\n\
    \  const row = [x, y];\n  const result: number[][] = [];\n  for (let i = 0; i\
    \ < rows; i++) {\n    const rowResult = get_row(lst[i], y);\n    result.push(row.concat(rowResult));\n\
    \  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    const row_x = row[x];\n    const row_y = row[x\
    \ - 1];\n    if (row_y === undefined) {\n      result.push([row_x, row_y]);\n\
    \    } else {\n      result.push([row_x, row_y]);\n    }\n  }\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n\
    }\n", "  const row: number[][] = [];\n  const col: number[] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    row.forEach((col,\
    \ j) => {\n      if (col === x) {\n        row.splice(i, 1);\n        row.unshift(j);\n\
    \      }\n    });\n    row.sort((a, b) => a - b);\n    row.sort((a, b) => b -\
    \ a);\n    row.forEach((col, j) => {\n      col.sort((a, b) => b - a);\n    });\n\
    \    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n        row.push(j);\n\
    \      });\n    });\n    row.forEach((col, j) => {\n      col.forEach((col, i)\
    \ => {\n        col.push(j);\n      });\n    });\n    row.forEach((col, j) =>\
    \ {\n      col.forEach((col, i) => {\n        col.unshift(i);\n      });\n   \
    \ });\n    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n      \
    \  col.push(j);\n      });\n    });\n    row.forEach((col, j) => {\n      col.forEach((col,\
    \ i) => {\n        col.unshift(i);\n      });\n    });\n    row.forEach((col,\
    \ j) => {\n      col.forEach((col, i) => {\n        col.push(j);\n      });\n\
    \    });\n    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n   \
    \     col.unshift(i);\n      });\n    });\n    row.forEach((col, j) => {\n   \
    \   col.forEach((col, i) => {\n        col.push(j);\n      });\n    });\n    row.forEach((col,\
    \ j) => {\n      col.forEach((col, i) => {\n        col.unshift(i);\n      });\n\
    \    });\n    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n   \
    \     col.push(j);\n      });\n    });\n    row.forEach((col, j) => {\n      col.forEach((col,\
    \ i) => {\n        col.unshift(i);\n      });\n    });\n    row.forEach((col,\
    \ j) => {\n      col.forEach((col, i) => {\n        col.push(j);\n      });\n\
    \    });\n    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n   \
    \     col.unshift(i);\n      });\n    });\n    row.forEach((col, j) => {\n   \
    \   col.forEach((col, i) => {\n        col.push(j);\n      });\n    });\n    row.forEach((col,\
    \ j) => {\n      col.forEach((col, i) => {\n        col.unshift(i);\n      });\n\
    \    });\n    row.forEach((col, j) => {\n      col.forEach((col, i) => {\n   \
    \     col.push(j);\n      });\n    });\n    row.forEach((col, j) => {\n      ",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row_x = row[x];\n\
    \    const row_y = row[x - 1];\n    result.push([row_x, row_y]);\n  }\n  return\
    \ result.sort((a, b) => b[0] - a[0]);\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i,\
    \ lst[i][1]]);\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  const [rows, columns] = lst;\n\
    \  const [row, column] = get_row_and_column(rows, x, columns);\n  return [\n \
    \   [row, row - 1],\n    [row - 1, column],\n    [row, column + 1],\n    [row\
    \ + 1, column],\n  ];\n}\n", "  const row = [x];\n  const result = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === row[0]) {\n      result.push([lst[i][0],\
    \ lst[i][1]]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  return result;\n}\n", "  const [rows, cols] = lst;\n\
    \  const [row, col] = get_row_col(x, rows, cols);\n  return [\n    [row, col],\n\
    \    ...get_row(rows.slice(0, row), x),\n    ...get_row(rows.slice(row), x),\n\
    \  ];\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const row = [...new Array(lst[0].length)].map(()\
    \ => 0);\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        row[j] += 1;\n      }\n    }\n\
    \  }\n  return row.sort((a, b) => b - a);\n}\n", "  const [rows, cols] = lst.length;\n\
    \  const [row_sorted, col_sorted] = get_row_and_col_sorted(lst, x);\n  const result\
    \ = [];\n  for (let i = 0; i < rows; i++) {\n    const row = row_sorted[i];\n\
    \    const row_coord = [i, 0];\n    for (let j = 0; j < cols; j++) {\n      const\
    \ col = col_sorted[j];\n      const coord = [row, col];\n      result.push(coord);\n\
    \    }\n  }\n  return result;\n}\n", "  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const row: number[] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i][0] === x) {\n      row.push(lst[i][0]);\n\
    \      columns.push(-lst[i][1]);\n    } else {\n      rows.push(row);\n      columns.push(columns);\n\
    \      row = [];\n      columns = [];\n      row.push(lst[i][0]);\n      columns.push(-lst[i][1]);\n\
    \    }\n  }\n  rows.push(row);\n  columns.push(columns);\n  rows.sort(function\
    \ (a, b) {\n    return a[0] - b[0];\n  });\n  columns.sort(function (a, b) {\n\
    \    return a[1] - b[1];\n  });\n  return rows.map(function (r) {\n    return\
    \ r.map(function (c) {\n      return [c, 0];\n    });\n  });\n}\n", "  const rows\
    \ = lst.map(row => row.map(n => n[x]));\n  const sorted = rows.sort((a, b) =>\
    \ b[0] - a[0]);\n  const reversed = sorted.reverse();\n  return reversed.map(row\
    \ => row.map(n => n));\n}\n", "  const result: number[][] = [];\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] > b[0]) return -1;\n    if (a[0] < b[0]) return 1;\n    return\
    \ 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1]) return -1;\n    if\
    \ (a[1] < b[1]) return 1;\n    return 0;\n  });\n  return result;\n}\n", "  const\
    \ rows = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for\
    \ (let row = 0; row < rows; row++) {\n    const row_coord = { row: row, cols:\
    \ cols };\n    const row_data = lst[row];\n    for (let col = 0; col < cols; col++)\
    \ {\n      const col_coord = { row: row, col: col };\n      if (row_data[col]\
    \ === x) {\n        result.push([row_coord, col_coord]);\n      }\n    }\n  }\n\
    \  result.sort((a, b) => a.row - b.row);\n  result.sort((a, b) => b.cols - a.cols);\n\
    \  return result;\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n\
    \    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        result.push([i,\
    \ j]); // Add coordinate\n      }\n    }\n  }\n  result.sort((a, b) => b[0] -\
    \ a[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}\n", "  const\
    \ [rows, columns] = lst;\n  const [row, col] = get_row_col(rows, x);\n  const\
    \ coords = [row, col];\n  coords.sort((a, b) => b[0] - a[0]);\n  coords.sort((a,\
    \ b) => b[1] - a[1]);\n  return coords.map(coord => [coord[0], coord[1]]);\n}\n",
  "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const row = lst[i];\n    const rowResult = row.filter((item) => item === x);\n\
    \    if (rowResult.length > 0) {\n      result.push([i, rowResult.sort()[rowResult.length\
    \ - 1]]);\n    }\n  }\n  return result.sort((a, b) => b[1] - a[1]);\n}\n", " \
    \ const row = [...new Array(lst[0].length)].map(() => 0);\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if\
    \ (lst[i][j] === x) {\n        row[j] = [i, j];\n      }\n    }\n  }\n  return\
    \ row.sort((a, b) => b[1] - a[1]).sort((a, b) => a[0] - b[0]);\n}\n", "  const\
    \ rows = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for\
    \ (let row = 0; row < rows; row++) {\n    const columns = [];\n    for (let col\
    \ = 0; col < cols; col++) {\n      if (lst[row][col] === x) {\n        columns.push([row,\
    \ col]);\n      }\n    }\n    result.push(columns);\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return\
    \ 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if\
    \ (a[1] < b[1]) return -1;\n    return 0;\n  });\n  return result;\n}\n", "  const\
    \ result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i][0] === x) {\n      result.push([lst[i][0], lst[i][1]]);\n    }\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row = [\n    [0, 0],\n    [0, 0],\n  ];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const [row, col] = lst[i];\n    if (row\
    \ === x) {\n      return [row];\n    }\n    if (col === x) {\n      row.push([row,\
    \ 0]);\n      return [row];\n    }\n  }\n  return [];\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    const rowLength = row.length;\n    if (rowLength > 0) {\n     \
    \ const rowIndex = row.indexOf(x);\n      if (rowIndex >= 0) {\n        const\
    \ columnIndex = row.length - rowIndex - 1;\n        result.push([i, columnIndex]);\n\
    \      }\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ rowResult: number[] = [];\n    for (let j = 0; j < row.length; j++) {\n    \
    \  if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const row = [...new Array(lst[0].length)].map(() => 0);\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        row[j] += 1;\n      }\n    }\n  }\n  row.sort((a,\
    \ b) => b - a);\n  row.sort((a, b) => b - a);\n  return row.map((r, i) => [i,\
    \ r]);\n}\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const\
    \ result = [];\n  for (let row = 0; row < rows; row++) {\n    const rowResult\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      if (lst[row][col] ===\
    \ x) {\n        rowResult.push([row, col]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  return result.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n\
    }\n", "  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      row.push(x);\n\
    \      result.push(row);\n    }\n  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  const row = [...lst]\n    .map((row, i) => [...row].sort((a,\
    \ b) => b - a))\n    .sort((a, b) => b[1] - a[1]);\n  const col = [...row]\n \
    \   .map((col, i) => [...col].sort((a, b) => b - a))\n    .sort((a, b) => b[1]\
    \ - a[1]);\n  const result = [];\n  for (let i = 0; i < row.length; i++) {\n \
    \   for (let j = 0; j < col.length; j++) {\n      if (row[i][0] === col[j][0])\
    \ {\n        result.push([row[i][0], col[j][0]]);\n      }\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(get_row([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n\
    ], 3));", "  const row = [...new Array(lst[0].length)].map(() => 0);\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        row[j] += 1;\n      }\n    }\n  }\n  row.sort((a,\
    \ b) => b - a);\n  row.sort((a, b) => b - a);\n  return row.map((x, i) => [i,\
    \ x]);\n}\n", "  const row: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const col: number[] = [];\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        col.push([i, j]);\n      }\n \
    \   }\n    row.push(col);\n  }\n  row.sort((a, b) => a[0] - b[0]);\n  row.sort((a,\
    \ b) => b[1] - a[1]);\n  return row;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ row_x = row[x];\n    const row_y = row[x - 1];\n    result.push([row_x, row_y]);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const [rows, cols] = lst.length;\n  const result =\
    \ [];\n  for (let row = 0; row < rows; row++) {\n    const row_coord = lst[row];\n\
    \    const row_sorted = row_coord.sort((a, b) => b - a);\n    const row_reversed\
    \ = row_sorted.reverse();\n    const row_reversed_sorted = row_reversed.sort((a,\
    \ b) => b - a);\n    for (let col = 0; col < cols; col++) {\n      if (row_reversed_sorted[col]\
    \ === x) {\n        result.push([row, col]);\n      }\n    }\n  }\n  return result;\n\
    }\n", "  const row = [...new Array(lst[0].length)].map(() => 0);\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        row[j] = [i, j];\n      }\n    }\n  }\n\
    \  row.sort((a, b) => a[0] - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return\
    \ row;\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const rowResult = get_row(row, x);\n  \
    \  for (let j = 0; j < rowResult.length; j++) {\n      result.push([i, j, rowResult[j]]);\n\
    \    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\n", "  const result: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult:\
    \ number[] = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j]\
    \ === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j\
    \ < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]); // Add coordinate\n      }\n    }\n    result.push(rowResult);\n  }\n \
    \ result.sort((a, b) => b[1] - a[1]); // Sort coordinates by rows in descending\
    \ order\n  result.sort((a, b) => b[0][1] - a[0][1]); // Sort coordinates by columns\
    \ in descending order\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ row_x = row[x];\n    const row_y = row[x - 1];\n    result.push([row_x, row_y]);\n\
    \  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const row: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const column: number[] = [];\n    for (let j = 0; j\
    \ < lst[i].length; j++) {\n      column.push(lst[i][j]);\n    }\n    row.push(column);\n\
    \  }\n  row.sort((a, b) => a[0] - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n\
    \  return row.slice(0, x);\n}\n", "  const row = [x];\n  const result = [row];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push(row);\n    }\n  }\n  return result.sort((a, b) => b[0]\
    \ - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const [rows, cols] = lst.length;\n\
    \  const result = [];\n  for (let row = 0; row < rows; row++) {\n    const [x,\
    \ y] = lst[row][cols - 1 - x];\n    result.push([row, y]);\n  }\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j\
    \ < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b)\
    \ => b[0] - a[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const\
    \ rowResult: number[] = [];\n    for (let j = 0; j < row.length; j++) {\n    \
    \  if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0]\
    \ < b[0]) return -1;\n    return 0;\n  });\n  result.sort((a, b) => {\n    if\
    \ (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n    return 0;\n  });\n\
    \  return result;\n}\n", "  const [rows, cols] = lst.length;\n  const [row_sorted,\
    \ col_sorted] = get_row_col(lst);\n  const [row_sorted_reverse, col_sorted_reverse]\
    \ = get_row_col(row_sorted);\n  const [row_sorted_reverse2, col_sorted_reverse2]\
    \ = get_row_col(col_sorted);\n  const [row_sorted_reverse3, col_sorted_reverse3]\
    \ = get_row_col(col_sorted_reverse);\n  const [row_sorted_reverse4, col_sorted_reverse4]\
    \ = get_row_col(col_sorted_reverse2);\n  const [row_sorted_reverse5, col_sorted_reverse5]\
    \ = get_row_col(col_sorted_reverse3);\n  const [row_sorted_reverse6, col_sorted_reverse6]\
    \ = get_row_col(col_sorted_reverse4);\n  const [row_sorted_reverse7, col_sorted_reverse7]\
    \ = get_row_col(col_sorted_reverse5);\n  const [row_sorted_reverse8, col_sorted_reverse8]\
    \ = get_row_col(col_sorted_reverse6);\n  const [row_sorted_reverse9, col_sorted_reverse9]\
    \ = get_row_col(col_sorted_reverse7);\n  const [row_sorted_reverse10, col_sorted_reverse10]\
    \ = get_row_col(col_sorted_reverse8);\n  const [row_sorted_reverse11, col_sorted_reverse11]\
    \ = get_row_col(col_sorted_reverse9);\n  const [row_sorted_reverse12, col_sorted_reverse12]\
    \ = get_row_col(col_sorted_reverse10);\n  const [row_sorted_reverse13, col_sorted_reverse13]\
    \ = get_row_col(col_sorted_reverse11);\n  const [row_sorted_reverse14, col_sorted_reverse14]\
    \ = get_row_col(col_sorted_reverse12);\n  const [row_sorted_reverse15, col_sorted_reverse15]\
    \ = get_row_col(col_sorted_reverse13);\n  const [row_sorted_reverse16, col_sorted_reverse16]\
    \ = get_row_col(col_sorted_reverse14);\n  const [row_sorted_reverse17, col_sorted_reverse17]\
    \ = get_row_col(col_sorted_reverse15);\n  const [row_sorted_reverse18, col_sorted_reverse18]\
    \ = get_row_col(col_sorted_reverse16);\n  const [row_sorted_reverse19, col_sorted_reverse19]\
    \ = get_row_col(col_sorted_reverse17);\n  const [row_sorted_reverse20, col_sorted_reverse20]\
    \ = get_row_col(col_sorted_reverse18);\n  const [row_sorted_reverse21, col_sorted_reverse21]\
    \ = get_row_col(col_sorted_reverse19);\n  const [row_sorted_reverse22, col_sorted_reverse22]\
    \ = get_row_col(col_sorted_reverse20);\n  const [row_sorted_reverse23, col_sorted_reverse23]\
    \ = get_row_col(col_sorted_reverse21);\n  const [row_sorted_reverse24, col_sorted_reverse24]\
    \ = get_row_col(col_sorted_reverse22);\n  const [row_sorted_reverse25, col_sorted_reverse25",
  "  const row: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ rowItem = lst[i];\n    if (rowItem[0] === x) {\n      row.push([rowItem[1],\
    \ rowItem[0]]);\n    }\n  }\n  row.sort((a, b) => b[0] - a[0]);\n  row.sort((a,\
    \ b) => b[1] - a[1]);\n  return row;\n}\n", "  const row = [x];\n  const result\
    \ = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\
    \    if (row.includes(x)) {\n      result.push(row);\n    }\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  const coords: number[][] = [];\n  for (let row\
    \ = 0; row < rows; row++) {\n    const rowCoords: number[] = [];\n    for (let\
    \ col = 0; col < cols; col++) {\n      rowCoords.push(lst[row][col]);\n    }\n\
    \    coords.push(rowCoords);\n  }\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a,\
    \ b) => b[1] - a[1]);\n  const result: number[][] = [];\n  for (let row = 0; row\
    \ < rows; row++) {\n    const rowCoords: number[] = [];\n    for (let col = 0;\
    \ col < cols; col++) {\n      if (coords[row].includes(col)) {\n        rowCoords.push(col);\n\
    \      }\n    }\n    result.push(rowCoords);\n  }\n  return result;\n}\n", " \
    \ const row: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b\
    \ - a);\n      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n\
    \      row.sort((a, b) => b - a);\n      row.sort((a, b) => b - a);\n      row.sort((a,\
    \ b) => b - a);\n      row.sort((a, b) => ", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] === x) {\n      result.push([i,\
    \ lst[i][1]]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const [rows, cols] = lst.length;\n  const [row_max, col_max] = lst[0].length;\n\
    \  const rows: number[] = [];\n  const cols: number[] = [];\n  for (let row =\
    \ 0; row < rows; row++) {\n    rows.push(row);\n    cols.push(0);\n  }\n  for\
    \ (let col = 0; col < cols; col++) {\n    cols.push(col);\n  }\n  const result:\
    \ number[][] = [];\n  for (let row = 0; row < rows; row++) {\n    const row_coords:\
    \ number[] = [];\n    for (let col = 0; col < cols; col++) {\n      const coord\
    \ = [row, col];\n      if (lst[row][col] === x) {\n        row_coords.push(coord);\n\
    \      }\n    }\n    result.push(row_coords);\n  }\n  result.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n    \
    \  return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if\
    \ (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  const [rows, cols]\
    \ = lst;\n  const [row, col] = get_row_col(x, rows);\n  return [[row, col]].concat(\n\
    \    row.map((r) => [r, cols.indexOf(r)])\n  );\n}\n", "  const [rows, cols] =\
    \ lst.length;\n  const [row_max, col_max] = lst[0].length;\n  const result = [];\n\
    \  for (let row = 0; row < rows; row++) {\n    const row_coord = [row, 0];\n \
    \   for (let col = 0; col < cols; col++) {\n      if (lst[row][col] === x) {\n\
    \        row_coord.push(col);\n      }\n    }\n    result.push(row_coord);\n \
    \ }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  const [rows, cols] = lst.length;\n  const row = [...Array(cols)].map(()\
    \ => 0);\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const\
    \ row = lst[i];\n    const [row, col] = row;\n    if (row === x) {\n      result.push([row,\
    \ col]);\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a, b)\
    \ => b[1] - a[1]);\n}\n", "  const rows = lst.map(row => row.map(x => [x]));\n\
    \  const rows = rows.map(row => row.sort((a, b) => b[0] - a[0]));\n  const rows\
    \ = rows.map(row => row.sort((a, b) => b[1] - a[1]));\n  const rows = rows.map(row\
    \ => row.map(x => [x[0], x[1]]));\n  return rows.filter(row => row[0] === x);\n\
    }\n", "  const [rows, columns] = lst;\n  const [row, col] = get_row_and_col(x,\
    \ rows);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0, row), col),\n\
    \    ...get_row(rows.slice(row), col + 1),\n  ];\n}\n", "  const row = [x];\n\
    \  const result = [row];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]\
    \ === row[0]) {\n      row.push(lst[i][1]);\n      result.push(row);\n      row\
    \ = [lst[i][1]];\n    }\n  }\n  return result;\n}\n", "  const result: [number,\
    \ number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]\
    \ === x) {\n      result.push([i, lst[i][1]]);\n    }\n  }\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  result.sort((a, b) => a[0] - b[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const result\
    \ = [];\n  for (let row = 0; row < rows; row++) {\n    const cols_sorted = cols.sort((a,\
    \ b) => b - a);\n    const row_sorted = lst[row].sort((a, b) => b - a);\n    for\
    \ (let col = 0; col < cols_sorted; col++) {\n      if (row_sorted[col] === x)\
    \ {\n        result.push([row, col]);\n      }\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => b[0] - a[0]);\n  return result;\n}\n", "  const [rows, columns] = lst;\n\
    \  const [row_max, col_max] = Math.max(rows, columns);\n  const [row_min, col_min]\
    \ = Math.min(rows, columns);\n  const rows: number[] = [];\n  const columns: number[]\
    \ = [];\n  for (let row = 0; row < row_max; row++) {\n    const row_coord = [row,\
    \ 0];\n    for (let col = 0; col < col_max; col++) {\n      if (lst[row][col]\
    \ === x) {\n        row_coord.push(col);\n      }\n    }\n    rows.push(row_coord);\n\
    \  }\n  for (let col = 0; col < col_max; col++) {\n    const col_coord = [0, col];\n\
    \    for (let row = 0; row < row_max; row++) {\n      if (lst[row][col] === x)\
    \ {\n        col_coord.push(row);\n      }\n    }\n    columns.push(col_coord);\n\
    \  }\n  rows.sort((a, b) => a[0] - b[0]);\n  columns.sort((a, b) => a[1] - b[1]);\n\
    \  return [rows, columns];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
