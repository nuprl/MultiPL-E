name: HumanEval_92_any_int
language: ts
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y:\
  \ number, z: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
  \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
  \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
  \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
  \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
  \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
completions: ["    return ((x === y && x === z) || (x !== y && x !== z && x !== 0\
    \ && y !== 0 && z !== 0));\n}\n", "    return ((x === y && x === z) || (x !==\
    \ y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "    return ((x + y\
    \ + z) === (x + y + z));\n}\n", "    return ((x === y || x === z) && x % 1 ===\
    \ 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y && x === z) ||\
    \ (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "    return ((x\
    \ === y || x === z) && (y === z || y === x));\n}\n", "    return ((x === y ||\
    \ x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x\
    \ === y) && (x === z) && (y === z));\n}\n", "    return ((x === y && x === z)\
    \ || (x === z && x === y)) && x % 1 === 0;\n}\n</cell>\n<cell>", "    return ((x\
    \ === y && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "    return\
    \ ((x === y && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "  return\
    \ any_int_impl(x, y, z);\n}\n", "    return ((x === y && x === z) || (x === z\
    \ && x === y)) && x % 1 === 0;\n}\n", "    return ((x === y || x === z) && x %\
    \ 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y && x ===\
    \ z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "  return\
    \ ((x + y + z) === (x + y + z));\n}\n", "    return ((x === y) && (x === z) &&\
    \ (y === z));\n}\n", "    return ((x === y && x === z) || (x !== y && x !== z\
    \ && x !== 0)) || (x !== x && x !== y && x !== z);\n}\n", "    return ((x ===\
    \ y) && (x === z)) || ((x !== y) && (x !== z) && (y !== z));\n}\n", "  return\
    \ any_int_helper(x, y, z);\n}\n", "  return any_int_helper(x, y, z);\n}\n", " \
    \   return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0\
    \ && z !== 0));\n}\n</cell>\n<cell>", "  return x === y || x === z || y === z;\n\
    }\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1\
    \ === 0);\n}\n", "    return ((x + y + z) === (x + y + z));\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "\treturn (x === y || x === z || y === z) && x % 1 === 0 && y %\
    \ 1 === 0 && z % 1 === 0;\n}\n", "    return ((x === y && x === z) || (x !== y\
    \ && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "    return ((x === y\
    \ || x === z) && (y === z || x === z));\n}\n", "    return ((x === y && x ===\
    \ z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n*/", "   \
    \ return ((x === y && x === z) || (x !== y && x !== z && x !== 0));\n}", "   \
    \ return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 &&\
    \ z !== 0));\n}", "    return x === y || x === z || y === z;\n}\n*/", "    return\
    \ ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n",
  "    return ((x === y || x === z) && (y === z || x === z));\n}\n</cell>\n<cell>\n\
    any_int(1, 2, 3);\n</cell>\n<cell>\nany_int(1, 2, 4);\n</cell>\n<cell>\nany_int(1,\
    \ 2, 5);\n</cell>\n<cell>\nany_int(1, 2, 6);\n</cell>\n<cell>\nany_int(1, 2, 7);\n\
    </cell>\n<cell>\nany_int(1, 2, 8);\n</cell>\n<cell>\nany_int(1, 2, 9);\n</cell>\n\
    <cell>\nany_int(1, 2, 10);\n</cell>\n<cell>\nany_int(1, 2, 11);\n</cell>\n<cell>\n\
    any_int(1, 2, 12);\n</cell>\n<cell>\nany_int(1, 2, 13);\n</cell>\n<cell>\nany_int(1,\
    \ 2, 14);\n</cell>\n<cell>\nany_int(1, 2, 15);\n</cell>\n<cell>\nany_int(1, 2,\
    \ 16);\n</cell>\n<cell>\nany_int(1, 2, 17);\n</cell>\n<cell>\nany_int(1, 2, 18);\n\
    </cell>\n<cell>\nany_int(1, 2, 19);\n</cell>\n<cell>\nany_int(1, 2, 20);\n</cell>\n\
    <cell>\nany_int(1, 2, 21);\n</cell>\n<cell>\nany_int(1, 2, 22);\n</cell>\n<cell>\n\
    any_int(1, 2, 23);\n</cell>\n<cell>\nany_int(1, 2, 24);\n</cell>\n<cell>\nany_int(1,\
    \ 2, 25);\n</cell>\n<cell>\nany_int(1, 2, 26);\n</cell>\n<cell>\nany_int(1, 2,\
    \ 27);\n</cell>\n<cell>\nany_int(1, 2, 28);\n</cell>\n<cell>\nany_int(1, 2, 29);\n\
    </cell>\n<cell>\nany_int(1, 2, 30);\n</cell>\n<cell>\nany_int(1, 2, 31);\n</cell>\n\
    <cell>\nany_int(1, 2, 32);\n</cell>\n<cell>\nany_int(1, 2, 33);\n</cell>\n<cell>\n\
    any_int(1, 2, 34);\n</cell>\n<cell>\nany_int(1, 2, 35);\n</cell>\n<cell>\nany_int(1,\
    \ 2, 36);\n</cell>\n<cell>\nany_int(1, 2, 37);\n</cell>\n<cell>\nany_int(1, 2,\
    \ 38);\n</cell>\n", "    return ((x === y && x === z) || (x === z && y === z)\
    \ || (x === y && z === z));\n}", "    return ((x === y && x === z) || (x === z\
    \ && x === y)) && x % 1 === 0;\n}\n", "    return ((x === y && x === z) || (x\
    \ !== y && x !== z && y !== z));\n}\n", "  return any_int_impl(x, y, z);\n}\n",
  "    return ((x === y || x === z) && (y === z || y === x));\n}\n", "    return ((x\
    \ === y || x === z) && (y === z || x === z));\n}\n", "    return ((x === y &&\
    \ x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n```\n*/\ndeclare function\
    \ any_int(x: number, y: number, z: number): boolean;\ndeclare function any_int(x:\
    \ number, y: number, z: number, l: number): boolean;\ndeclare function any_int(x:\
    \ number, y: number, z: number, l: number, m: number): boolean;\ndeclare function\
    \ any_int(x: number, y: number, z: number, l: number, m: number, n: number): boolean;\n\
    declare function any_int(x: number, y: number, z: number, l: number, m: number,\
    \ n: number, o: number): boolean;\ndeclare function any_int(x: number, y: number,\
    \ z: number, l: number, m: number, n: number, o: number, p: number): boolean;\n\
    declare function any_int(x: number, y: number, z: number, l: number, m: number,\
    \ n: number, o: number, p: number, q: number): boolean;\n", "    return ((x ===\
    \ y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n",
  "    return ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n\
    }\n", "    return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y\
    \ !== 0 && z !== 0));\n}\n", "    return ((x === y || x === z) && x % 1 === 0\
    \ && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y || x === z) &&\
    \ (y === z || y === x));\n}\n", "    return x === y || x === z || y === z;\n}\n",
  "    return ((x === y) && (x === z)) || ((x !== y) && (x !== z) && (y !== z));\n\
    }\n", "    return ((x === y || x === z) && (y === z || x === z));\n}\n", "   \
    \ return ((x === y || x === z) && (y === z || x === z));\n}\n", "    return ((x\
    \ | 0) + (y | 0) + (z | 0) === (x | 0) + (y | 0) + (z | 0));\n}\n*/\n", "    return\
    \ ((x === y && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "    return\
    \ ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n",
  "    return x === y || x === z || y === z;\n}\n*/", "    return ((x === y && x ===\
    \ z) || (x === z && x === y)) && x % 1 === 0;\n}\n```\n*/\ndeclare function any_int(x:\
    \ number, y: number, z: number): boolean;\ndeclare function any_int(x: any, y:\
    \ any, z: any): boolean;\ndeclare namespace any_int {\n    var VERSION: string;\n\
    }\ndeclare function any_int(x: number, y: number, z: number): boolean;\ndeclare\
    \ function any_int(x: any, y: any, z: any): boolean;\n\ndeclare function any_int(x:\
    \ number, y: number, z: number): boolean;\ndeclare function any_int(x: any, y:\
    \ any, z: any): boolean;\n", "    return ((x === y && x === z) || (x === z &&\
    \ y === z) || (x === z && y === x) || (x === y && z === x) || (x === y && z ===\
    \ y))\n}\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x\
    \ === y || x === z) && (x === 0 || x === Infinity || x === -Infinity)) || ((y\
    \ === x || y === z) && (y === 0 || y === Infinity || y === -Infinity)) || ((z\
    \ === x || z === y) && (z === 0 || z === Infinity || z === -Infinity));\n}\n</cell>\n\
    <cell>", "    return ((x === y && x === z) || (x === z && y === z) || (x === y\
    \ && z === z));\n}\n", "\treturn (x === y || x === z || y === z) && x % 1 ===\
    \ 0 && y % 1 === 0 && z % 1 === 0;\n}\n", "    return ((x === y && x === z) ||\
    \ (x === z && x === y)) && x % 1 === 0;\n}\n", "    return ((x === y && x ===\
    \ z) || (x === z && x === y));\n}\n", "    return ((x === y || x === z) && x %\
    \ 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nThis doesn't work if you pass it a negative number, or an odd number\
    \ of arguments. For example, `any_int(1, 2)` returns `true`, but `any_int(1, 2,\
    \ 3)` returns `false`.\n<|/ c |>\n<| c |>\nI agree with you, that's why I wrote\
    \ \"all numbers are integers\". Anyway, I added a version that works with negative\
    \ numbers and odd number of arguments.\n<|/ c |>\n<| a tags=javascript,typescript\
    \ |>\nI wrote this simple function which works fine for me:\n<code>", "    return\
    \ ((x === y || x === z) && (y === z || y === x));\n}\n", "    return ((x === y\
    \ && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n",
  '    return ((x === y && x === z) || (x !== y && x !== z && x % 1 === 0 && x % 1
    === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 ===
    0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 &&
    x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x % 1 === 0 && x %
    1 === 0 && x % 1 === ', "    return ((x === y || x === z) && x % 1 === 0 && y\
    \ % 1 === 0 && z % 1 === 0);\n}\n", "    return x === y || x === z || y === z;\n\
    }\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x === y\
    \ && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "    return ((x\
    \ === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n\
    }\n", "    return ((x === y || x === z) && (x === z || y === z));\n}\n", "   \
    \ return ((x === y) || x === z) || (y === z);\n}\n", "  return ((x === y && x\
    \ === z) || (x === z && y === z) || (x === y && z === z));\n}\n", "    return\
    \ ((x === y && x === z) || (x === z && y === z) || (x === y && z === z));\n}\n",
  "    return ((x + y + z) === (x + y + z));\n}\n*/", "    return x === y || x ===\
    \ z || y === z;\n}\n", "    return ((x === y || x === z) && (y === z || x ===\
    \ z));\n}\n", "    return x === y || x === z || y === z;\n}\n</cell>\n<cell>",
  "    return ((x === y && x === z) || (x !== y && x !== z && x % 1 === 0 && y % 1\
    \ === 0 && z % 1 === 0));\n}\n", "    return ((x === y && x === z) || (x === z\
    \ && y === z) || (x === y && z === z));\n}\n", "    return ((x === y) && (x ===\
    \ z)) || ((x !== y) && (x !== z) && (y !== z));\n}\n", "    return ((x === y &&\
    \ x === z) || (x !== y && x !== z && x !== 0));\n}\n", "    return ((x === y &&\
    \ x === z) || (x !== y && x !== z && x !== 0));\n}\n", "    return ((x === y &&\
    \ x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", " \
    \   return ((x === y || x === z) && (y === z || y === x));\n}\n", "    return\
    \ ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n",
  "    return ((x | y | z) === (x + y + z));\n}\n", "    return ((x === y || x ===\
    \ z) && (y === z || x === z));\n}\n", "    return ((x | y | z) === (x + y + z));\n\
    }\n", "\treturn (x + y + z) === (x + y + z);\n}\n", "  return any_int_impl(x,\
    \ y, z);\n}\n", "    return ((x === y && x === z) || (x === z && x === y));\n\
    }\n", "    return ((x + y + z) === (x + y + z));\n}\n</cell>\n<text>\nExercise\n\
    Write a function that takes 3 numbers and returns true if at least one of the\
    \ numbers is equal to the sum of the other two.\n\n\n</text>\n<cell>", "    return\
    \ x === y || x === z || y === z;\n}\n", "    return ((x === y || x === z) && x\
    \ % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y && x\
    \ === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "    return ((x === y\
    \ && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n",
  "  return ((x === y || x === z) && (y === z || x === z));\n}\n", "    return ((x\
    \ === y || x === z) && (y === z || y === x));\n}\n", "    return ((x === y ||\
    \ x === z) && (y === z || y === x));\n}\n", "    return ((x === y && x === z)\
    \ || (x !== y && x !== z && x % 1 === 0 && x % 1 !== 0 && y % 1 === 0 && y % 1\
    \ !== 0 && z % 1 === 0 && z % 1 !== 0));\n}\n", "    return ((x === y && x ===\
    \ z) || (x === z && x === y)) && x % 1 === 0;\n}\n```\n*/\ndeclare function any_int(x:\
    \ number, y: number, z: number): boolean;", "    return ((x === y && x === z)\
    \ || (x === z && x === y)) && x % 1 === 0;\n}\n*/", "    return ((x === y && x\
    \ === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", " \
    \   return x === y || x === z || y === z;\n}\n", "  return any_int_impl(x, y,\
    \ z);\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 &&\
    \ z % 1 === 0);\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y %\
    \ 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y && x === z) || (x ===\
    \ z && x === y)) && x % 1 === 0;\n}\n", "    return ((x === y && x === z) || (x\
    \ !== y && x !== z && y !== z));\n}\n", "    return ((x === y && x === z) || (x\
    \ !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "    return x ===\
    \ y || x === z || y === z;\n}\n", "    return ((x === y && x === z) || (x !==\
    \ y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n</cell>\n<text>\nExercise\n\
    Write a function that takes 3 numbers and returns true if at least one of them\
    \ is equal to the sum of the other two.\n\nHint: Use any_int().\n\n\n</text>\n\
    <cell>", "    return ((x === y || x === z) && (x === 0 || x === Infinity || x\
    \ === -Infinity)) || ((y === x || y === z) && (y === 0 || y === Infinity || y\
    \ === -Infinity)) || ((z === x || z === y) && (z === 0 || z === Infinity || z\
    \ === -Infinity));\n}\n</cell>\n<text>\n4.3 Logical Operators\nLogical operators\
    \ are used to combine conditional statements. Logical operators are also known\
    \ as \"short-circuit operators\" because they stop evaluating conditional statements\
    \ as soon as they know the answer is \"true\".\n\nThe && and || operators perform\
    \ a logical-AND or logical-OR operation. Logical operators are evaluated from\
    \ left to right. Logical operators are often used to test whether a value is \"\
    true\" in a boolean context. Logical operators are also used to perform logical\
    \ negation by using the ! operator.\n\nLogical operators are also used to perform\
    \ logical comparisons. Logical comparisons are often used to test whether a value\
    \ is \"true\" in a boolean context. Logical comparisons are also used to perform\
    \ logical negation by using the ! operator.\n\nLogical operators are also used\
    \ to perform logical comparisons. Logical comparisons are often used to test whether\
    \ a value is \"true\" in a boolean context. Logical comparisons are also used\
    \ to perform logical negation by using the ! operator.\n\nLogical operators are\
    \ also used to perform logical comparisons. Logical comparisons are often used\
    \ to test whether a value is \"true\" in a boolean context. Logical comparisons\
    \ are also used to perform logical negation by using the ! operator.\n\nLogical\
    \ operators are also used to perform logical comparisons. Logical comparisons\
    \ are often used to test whether a value is \"true\" in a boolean context. Logical\
    \ comparisons are also used to perform logical negation by using the ! operator.\n\
    \nLogical operators are also used to perform logical comparisons. Logical comparisons\
    \ are often used to test whether a value is \"true\" in a boolean context. Logical\
    \ comparisons are also used to perform logical negation by using the ! operator.\n\
    \nLogical operators are also used to perform logical comparisons. Logical comparisons\
    \ are often used to test whether a value is \"true\" in a boolean context. Logical\
    \ comparisons are also used to perform logical negation by using the ! operator.\n\
    \nLogical operators are also used to perform logical comparisons. Logical comparisons\
    \ are often used to test whether a value is \"true\" in a boolean context. Logical\
    \ comparisons are also used to perform logical negation by using the ! operator.\n\
    \nLogical operators are also used to perform logical comparisons. Logical comparisons\
    \ are often used to test whether a value is \"true\" in a boolean context. Logical\
    \ comparisons are also used to perform ", "    return ((x === y && x === z) ||\
    \ (x !== y && x !== z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0));\n}\n", " \
    \   return ((x === y || x === z) && (y === z || x === z));\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1 === 0\
    \ && z % 1 === 0);\n}\n```\n*/\ndeclare function any_int(x: number, y: number,\
    \ z: number): boolean;\ndeclare function any_int(x: number, y: number, z: number,\
    \ l: number): boolean;\ndeclare function any_int(x: number, y: number, z: number,\
    \ l: number, m: number): boolean;\ndeclare function any_int(x: number, y: number,\
    \ z: number, l: number, m: number, n: number): boolean;\ndeclare function any_int(x:\
    \ number, y: number, z: number, l: number, m: number, n: number, o: number): boolean;\n\
    declare function any_int(x: number, y: number, z: number, l: number, m: number,\
    \ n: number, o: number, p: number): boolean;\ndeclare function any_int(x: number,\
    \ y: number, z: number, l: number, m: number, n: number, o: number, p: number,\
    \ q: number): boolean;\ndeclare function any_int(x: number, y: number, z: number,\
    \ l: number, m: number, n: number, o: number, p: number, q: number, r: number):\
    \ boolean;\ndeclare function any_int(x: number, y: number, z: number, l: number,\
    \ m: number, n: number, o: number, p: number, q: number, r: number, s: number):\
    \ boolean;\ndeclare function any_int(x: number, y: number, z: number, l: number,\
    \ m: number, n: number, o: number, p: number, q: number, r: number, s: number,\
    \ t: number): boolean;\ndeclare function any_int(x: number, y: number, z: number,\
    \ l: number, m: number, n: number, o: number, p: number, q: number, r: number,\
    \ s: number, t: number, u: number): boolean;\ndeclare function any_int(x: number,\
    \ y: number, z: number, l: number, m: number, n: number, o: number, p: number,\
    \ q: number, r: number, s: number, t: number, u: number, v: number): boolean;\n\
    declare function any_int(x: number, y: number, z: number, l: number, m: number,\
    \ n: number, o: number, p: number, q: number, r: number, s: number, t: number,\
    \ u: number, v: number, w: number): boolean;\ndeclare function any_int(x: number,\
    \ y: number, z: number, l: number, m: number, n: number, o: number, p: number,\
    \ q: number, r: number, s: number, t: number, u: number, v: number, w: number,\
    \ x: number): boolean;\ndeclare function any_int(x: number, y: number, z: number,\
    \ l: number, m: number, n: number, o: number, p: number, q: number, r: number,\
    \ s: number, t: number, u: number, v: number, w: number, x: number, y: number):\
    \ boolean;\ndeclare function any_", "    return ((x === y || x === z) && (x ===\
    \ 0 || x === Infinity || x === -Infinity)) || ((y === x || y === z) && (y ===\
    \ 0 || y === Infinity || y === -Infinity)) || ((z === x || z === y) && (z ===\
    \ 0 || z === Infinity || z === -Infinity));\n}\n", "    return ((x === y && x\
    \ === z) || (x === z && y === z) || (x === y && z === z));\n}\n", "    return\
    \ ((x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n",
  "    return ((x === y) && (x === z) && (y === z));\n}\n", "    return ((x === y\
    \ && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "    return ((x\
    \ === y && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n</cell>\n<cell>",
  "    return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 &&\
    \ z !== 0));\n}\n", "  return ((x === y || x === z) && x % 1 === 0 && y % 1 ===\
    \ 0 && z % 1 === 0);\n}\n", "    return ((x | y | z) === (x + y + z));\n}\n",
  "    return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 &&\
    \ z !== 0));\n}\n", "    return ((x === y && x === z) || (x !== y && x !== z &&\
    \ y !== z));\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1\
    \ === 0 && z % 1 === 0);\n}\n", "\treturn (x === y || x === z) && x % 1 === 0\
    \ && y % 1 === 0 && z % 1 === 0;\n}\n", "    return ((x === y || x === z) && x\
    \ % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return ((x === y && x\
    \ === z) || (x !== y && x !== z && x !== 0)) || (x !== x && y !== y && z !== z);\n\
    }\n", "    return ((x + y + z) === (x + y + z));\n}\n", "    return ((x === y)\
    \ || x === z) || (y === z);\n}\n", "    return ((x === y && x === z) || (x ===\
    \ z && x === y)) && x % 1 === 0;\n}\n", "    return ((x + y + z) === (x + y +\
    \ z));\n}\n", "    return ((x === y || x === z) && (x === 0 || x === Infinity\
    \ || x === -Infinity)) || ((y === x || y === z) && (y === 0 || y === Infinity\
    \ || y === -Infinity)) || ((z === x || z === y) && (z === 0 || z === Infinity\
    \ || z === -Infinity));\n}\n", "    return ((x === y && x === z) || (x === z &&\
    \ x === y)) && x % 1 === 0;\n}\n", "\treturn (x + y + z) === (x + y + z);\n}\n",
  "    return ((x === y && x === z) || (x !== y && x !== z && x !== 0)) || (x !==\
    \ y && x !== z && x !== 0);\n}\n", "    return ((x === y || x === z) && (y ===\
    \ z || x === z));\n}\n", "    return ((x === y && x === z) || (x !== y && x !==\
    \ z && x !== 0 && y !== 0 && z !== 0));\n}\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes 3 numbers and returns true if any of them is equal to the\
    \ sum of the other two, and all numbers are integers.\n\n\n</text>\n<cell>", "\t\
    return (x === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n",
  "    return ((x === y && x === z) || (x !== y && x !== z && y !== z));\n}\n", " \
    \   return ((x === y || x === z) && (x === 0 || x === Infinity || x === -Infinity))\
    \ || ((y === x || y === z) && (y === 0 || y === Infinity || y === -Infinity))\
    \ || ((z === x || z === y) && (z === 0 || z === Infinity || z === -Infinity));\n\
    }\n", "    return ((x === y && x === z) || (x === z && x === y)) && x % 1 ===\
    \ 0;\n}\n", "    return ((x === y && x === z) || (x === z && y === z) || (x ===\
    \ y && z === z));\n}\n", "\treturn (x === y || x === z || y === z) && x % 1 ===\
    \ 0 && y % 1 === 0 && z % 1 === 0;\n}\n", "    return ((x === y) && (x === z))\
    \ || ((x !== y) && (x !== z) && (y !== z));\n}\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes 3 numbers and returns true if at least one of them is\
    \ equal to the sum of the other two, and all numbers are integers.\n\nHint: Use\
    \ any_int().\n\n\n</text>\n<cell>", "    return ((x === y && x === z) || (x ===\
    \ z && y === z) || (x === y && z === z));\n}\n", "    return ((x === y && x ===\
    \ z) || (x === z && x === y)) && x % 1 === 0;\n}\n", "\treturn (x === y || x ===\
    \ z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n", "    return ((x ===\
    \ y && x === z) || (x === z && y === z) || (x === y && z === z));\n}\n", "   \
    \ return ((x === y && x === z) || (x === z && x === y)) && x % 1 === 0;\n}\n*/",
  "    return ((x === y && x === z) || (x === z && y === z) || (x === y && z === z));\n\
    }\n", "    return ((x === y || x === z) && (y === z || x === z));\n}\n", "   \
    \ return ((x === y) && (x === z)) || ((x !== y) && (x !== z) && (y !== z));\n\
    }\n", "    return ((x === y && x === z) || (x === z && x === y)) && x % 1 ===\
    \ 0;\n}\n", "    return ((x === y && x === z) || (x !== y && x !== z && x !==\
    \ 0 && y !== 0 && z !== 0));\n}\n", "    return ((x + y + z) === (x + y + z));\n\
    }\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x === y\
    \ || x === z) && (y === z || y === x));\n}\n", "    return ((x === y && x ===\
    \ z) || (x === z && x === y));\n}\n", "    return ((x === y && x === z) || (x\
    \ === z && y === z) || (x === y && z === z));\n}\n", "  return any_int_impl(x,\
    \ y, z);\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1 ===\
    \ 0 && z % 1 === 0);\n}\n", "    return ((x === y && x === z) || (x !== y && x\
    \ !== z && x !== 0)) || (x !== x && x !== y && x !== z);\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nThis doesn't seem to work. `any_int` returns `true` for numbers\
    \ `[1,2,3]` and `[1,2,4]`\n<|/ c |>\n<| c |>\nI fixed the bug. Now it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. `any_int` returns `true` for numbers `[1,2,3]`\
    \ and `[1,2,4]`\n<|/ c |>\n<| c |>\nI fixed the bug. Now it works.\n<|/ c |>\n\
    <| a tags=javascript,typescript |>\n<code>", "    return ((x | y | z) === (x +\
    \ y + z));\n}\n```\n*/\nexport type _any_int<T extends _numbers_or_booleans_or_strings_or_arrays_or_maps_or_sets_or_mixed_types<T>>\
    \ = T extends _numbers_or_booleans_or_strings_or_arrays_or_maps_or_sets_or_mixed_types<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _arrays_or_maps_or_sets<T>\n   \
    \ ? _boolean_or_number<T>\n    : T extends _maps_or_sets<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _mixed_types<T>\n    ? _boolean_or_number<T>\n    : T extends\
    \ _null<T>\n    ? _boolean_or_number<T>\n    : T extends _undefined_<T>\n    ?\
    \ _boolean_or_number<T>\n    : T extends _symbol<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _any_int<T>\n    ? _boolean_or_number<T>\n    : T extends _null<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _undefined_<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _symbol<T>\n    ? _boolean_or_number<T>\n    : T extends _boolean<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _number<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _object<T>\n    ? _boolean_or_number<T>\n    : T extends _array<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _map<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _set<T>\n    ? _boolean_or_number<T>\n    : T extends _object<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _array<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _map<T>\n    ? _boolean_or_number<T>\n    : T extends _set<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _object<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _array<T>\n    ? _boolean_or_number<T>\n    : T extends _map<T>\n\
    \    ? _boolean_or_number<T>\n    : T extends _set<T>\n    ? _boolean_or_number<T>\n\
    \    : T extends _object<T>\n    ? _boolean_or_number<T>\n    : T extends _array<T>\n\
    \    ? _boolean_or_number<T>\n    : ", "    return x === y || x === z || y ===\
    \ z;\n}\n", "    return ((x === y && x === z) || (x === z && x === y)) && x %\
    \ 1 === 0;\n}\n", "    return ((x === y || x === z) && x % 1 === 0 && y % 1 ===\
    \ 0 && z % 1 === 0);\n}\n", "    return ((x + y + z) === (x + y + z));\n}\n*/",
  "    return ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 &&\
    \ z !== 0));\n}\n", "    return ((x === y && x === z) || (x !== y && x !== z &&\
    \ x !== 0)) || (x !== x && y !== y && z !== z);\n}\n", "    return ((x === y &&\
    \ x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", " \
    \   return ((x === y && x === z) || (x !== y && x !== z && x !== 0)) || (x !==\
    \ x && y !== y && z !== z);\n}\n", "    return ((x === y && x === z) || (x !==\
    \ y && x !== z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0));\n}\n", "    return\
    \ ((x | 0) + (y | 0) + (z | 0) === (x | 0) + (y | 0) + (z | 0));\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "    return ((x === y || x === z) && (y === z || x === z));\n}\n",
  "    return ((x === y) && (x === z) && (y === z));\n}\n", "    return ((x | 0) +\
    \ (y | 0) + (z | 0) === (x | 0) + (y | 0) + (z | 0));\n}\n*/", "    return ((x\
    \ === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n\
    }\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x === y\
    \ || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x\
    \ | 0) + (y | 0) + (z | 0) === (x | 0) + (y | 0) + (z | 0));\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "    return x === y || x === z || y === z;\n}\n", "    return ((x\
    \ === y || x === z) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n", "  \
    \  return ((x + y + z) === (x + y + z));\n}\n", "    return ((x === y && x ===\
    \ z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !== 0));\n}\n", "    return\
    \ ((x === y && x === z) || (x !== y && x !== z && x !== 0 && y !== 0 && z !==\
    \ 0));\n}\n", "    return ((x === y && x === z) || (x !== y && x !== z && x !==\
    \ 0 && y !== 0 && z !== 0));\n}\n*/", "    return ((x === y && x === z) || (x\
    \ !== y && x !== z && y !== z));\n}\n", "    return ((x === y || x === z) && (y\
    \ === z || y === x));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
