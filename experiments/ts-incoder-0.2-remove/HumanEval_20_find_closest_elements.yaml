name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\nfunction find_closest_elements(numbers: number[]): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let\
    \ i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\t\
    smallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    if (numbers.length < 2)\
    \ {\n        return [numbers[0], numbers[0]];\n    }\n    const [smallest, largest]\
    \ = numbers;\n    const [smallest_2, largest_2] = find_closest_elements(numbers.slice(1,\
    \ numbers.length));\n    const [smallest_3, largest_3] = find_closest_elements(numbers.slice(2,\
    \ numbers.length));\n    const [smallest_4, largest_4] = find_closest_elements(numbers.slice(3,\
    \ numbers.length));\n    return [\n        smallest_2 > smallest ? smallest_2\
    \ : smallest,\n        largest_2 > largest ? largest_2 : largest,\n        smallest_3\
    \ > smallest ? smallest_3 : smallest,\n        largest_3 > largest ? largest_3\
    \ : largest,\n        smallest_4 > smallest ? smallest_4 : smallest,\n       \
    \ largest_4 > largest ? largest_4 : largest,\n    ];\n}\n", "\tlet smallest =\
    \ Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\tlet result:\
    \ [number, number] = [smallest, largest];\n\tfor (let i = 0; i < numbers.length;\
    \ i++) {\n\t\tlet candidate = numbers[i];\n\t\tif (candidate < smallest || candidate\
    \ > largest) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet difference = Math.abs(candidate\
    \ - smallest);\n\t\tif (difference < result[smallest]) {\n\t\t\tresult[smallest]\
    \ = difference;\n\t\t}\n\t\tlet difference = Math.abs(candidate - largest);\n\t\
    \tif (difference < result[largest]) {\n\t\t\tresult[largest] = difference;\n\t\
    \t}\n\t}\n\treturn result;\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    if (numbers.length < 2) {\n        return\
    \ [numbers[0], numbers[0]];\n    }\n\n    let smallest = numbers[0];\n    let\
    \ largest = numbers[0];\n\n    for (let i = 1; i < numbers.length; i++) {\n  \
    \      if (numbers[i] < smallest) {\n            smallest = numbers[i];\n    \
    \    }\n        if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n\n    return [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        }\n        if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest: number\
    \ = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = Math.min(...numbers);\n\t\
    let largest = Math.max(...numbers);\n\tlet result: [number, number] = [smallest,\
    \ largest];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tlet candidate =\
    \ Math.abs(numbers[i] - smallest);\n\t\tif (candidate < Math.abs(numbers[i] -\
    \ largest)) {\n\t\t\tresult = [numbers[i], numbers[i]];\n\t\t} else {\n\t\t\t\
    result = [numbers[i], largest];\n\t\t}\n\t}\n\treturn result;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return [numbers[0], numbers[0]];\n    }\n    const [smallest,\
    \ largest] = numbers;\n    const [smallest_2, largest_2] = find_closest_elements(numbers.slice(1));\n\
    \    const [smallest_3, largest_3] = find_closest_elements(numbers.slice(2));\n\
    \    const [smallest_4, largest_4] = find_closest_elements(numbers.slice(3));\n\
    \    const [smallest_5, largest_5] = find_closest_elements(numbers.slice(4));\n\
    \    const [smallest_6, largest_6] = find_closest_elements(numbers.slice(5));\n\
    \    const [smallest_7, largest_7] = find_closest_elements(numbers.slice(6));\n\
    \    const [smallest_8, largest_8] = find_closest_elements(numbers.slice(7));\n\
    \    const [smallest_9, largest_9] = find_closest_elements(numbers.slice(8));\n\
    \    const [smallest_10, largest_10] = find_closest_elements(numbers.slice(9));\n\
    \    const [smallest_11, largest_11] = find_closest_elements(numbers.slice(10));\n\
    \    const [smallest_12, largest_12] = find_closest_elements(numbers.slice(11));\n\
    \    const [smallest_13, largest_13] = find_closest_elements(numbers.slice(12));\n\
    \    const [smallest_14, largest_14] = find_closest_elements(numbers.slice(13));\n\
    \    const [smallest_15, largest_15] = find_closest_elements(numbers.slice(14));\n\
    \    const [smallest_16, largest_16] = find_closest_elements(numbers.slice(15));\n\
    \    const [smallest_17, largest_17] = find_closest_elements(numbers.slice(16));\n\
    \    const [smallest_18, largest_18] = find_closest_elements(numbers.slice(17));\n\
    \    const [smallest_19, largest_19] = find_closest_elements(numbers.slice(18));\n\
    \    const [smallest_20, largest_20] = find_closest_elements(numbers.slice(19));\n\
    \    const [smallest_21, largest_21] = find_closest_elements(numbers.slice(20));\n\
    \    const [smallest_22, largest_22] = find_closest_elements(numbers.slice(21));\n\
    \    const [smallest_23, largest_23] = find_closest_elements(numbers.slice(22));\n\
    \    const [smallest_24, largest_24] = find_closest_elements(numbers.slice(23));\n\
    \    const [smallest_25, largest_25] = find_closest_elements(numbers.slice(24));\n\
    \    const [smallest_26, largest_26] = find_closest_elements(numbers.slice(25));\n\
    \    const [smallest_27, largest_27] = find_closest_elements(numbers.slice(26));\n\
    \    const [smallest_28, largest_28] = find_closest_elements(numbers.slice(27));\n\
    \    const [smallest_29, ", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\
    \tlet result: [number, number] = [smallest, largest];\n\tfor (let i = 0; i < numbers.length;\
    \ i++) {\n\t\tlet difference = Math.abs(numbers[i] - largest);\n\t\tif (difference\
    \ < result[1]) {\n\t\t\tresult = [numbers[i], numbers[i]];\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest_number = numbers[0];\n\tlet largest_number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest_number)\
    \ {\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest_number)\
    \ {\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,\
    \ largest_number];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = numbers[0];\n\
    \    let largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n  \
    \      } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest: number\
    \ = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "    let\
    \ smallest = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n           \
    \ smallest = numbers[i];\n        }\n        if (numbers[i] > largest) {\n   \
    \         largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "    if (numbers.length < 2) {\n        return [numbers[0],\
    \ numbers[0]];\n    }\n    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet\
    \ largest: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if\
    \ (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest_number = numbers[0];\n\tlet\
    \ biggest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < smallest_number) {\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t} else if (numbers[i] > biggest_number) {\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min_dist = Number.MAX_VALUE;\n\tlet min_idx = -1;\n\tfor (let i =\
    \ 0; i < numbers.length; i++) {\n\t\tlet dist = numbers[i] - numbers[min_idx];\n\
    \t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t\tmin_idx = i;\n\t\t}\n\
    \t}\n\treturn [numbers[min_idx], numbers[min_idx + 1]];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    if (numbers.length < 2) {\n        return\
    \ [numbers[0], numbers[0]];\n    }\n    const [smallest, largest] = numbers.sort((a,\
    \ b) => a - b);\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
    \t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t\
    }\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = Math.min(...numbers);\n\
    \tlet largest = Math.max(...numbers);\n\tlet result: [number, number] = [smallest,\
    \ largest];\n\tlet i = 1;\n\twhile (i < numbers.length) {\n\t\tlet j = i;\n\t\t\
    while (j < numbers.length && numbers[j] < smallest) {\n\t\t\tj++;\n\t\t}\n\t\t\
    if (j - i > 1) {\n\t\t\tlet d = (smallest - numbers[i]) / (numbers[j] - numbers[i]);\n\
    \t\t\tresult = [numbers[i] + d * j, numbers[j] - d * j];\n\t\t}\n\t\ti = j;\n\t\
    }\n\treturn result;\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < smallest) {\n            smallest = numbers[i];\n        } else if (numbers[i]\
    \ > largest) {\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "    if (numbers.length\
    \ < 2) return numbers;\n    let min1 = numbers[0];\n    let min2 = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min1)\
    \ {\n            min1 = numbers[i];\n        } else if (numbers[i] > min2) {\n\
    \            min2 = numbers[i];\n        }\n    }\n    return [min1, min2];\n\
    }\n", "\tlet smallest_number = numbers[0];\n\tlet largest_number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest_number)\
    \ {\n\t\t\tsmallest_number = numbers[i];\n\t\t} else if (numbers[i] > largest_number)\
    \ {\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,\
    \ largest_number];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = numbers[0];\n\
    \    let largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n  \
    \      }\n        if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = Math.min(...numbers);\n\
    \tlet largest = Math.max(...numbers);\n\tlet result = [smallest, largest];\n\t\
    let index = 0;\n\twhile (index < numbers.length - 1) {\n\t\tlet next = Math.min(...numbers.slice(index\
    \ + 1));\n\t\tif (next === largest || next === smallest) {\n\t\t\tbreak;\n\t\t\
    }\n\t\tresult = [next, largest];\n\t\tindex++;\n\t}\n\treturn result;\n}\n", " \
    \   if (numbers.length < 2) {\n        return [numbers[0], numbers[0]];\n    }\n\
    \    let min_diff = Number.MAX_VALUE;\n    let min_diff_index = 0;\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        let diff = numbers[i] - numbers[i\
    \ - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n      \
    \      min_diff_index = i;\n        }\n    }\n    return [numbers[min_diff_index],\
    \ numbers[min_diff_index + 1]];\n}\n", "    let smallest = numbers[0];\n    let\
    \ largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] < smallest) {\n            smallest = numbers[i];\n      \
    \  } else if (numbers[i] > largest) {\n            largest = numbers[i];\n   \
    \     }\n    }\n    return [smallest, largest];\n}\n", "    if (numbers.length\
    \ < 2) {\n        return [numbers[0], numbers[0]];\n    }\n    const [smallest,\
    \ largest] = numbers.sort((a, b) => a - b);\n    return [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = Math.min(...numbers);\n\
    \tlet largest = Math.max(...numbers);\n\tlet result = [smallest, largest];\n\t\
    for (let i = 0; i < numbers.length - 1; i++) {\n\t\tlet next = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n\t\tif (next < result[result.length - 1]) {\n\t\t\tresult\
    \ = [numbers[i], numbers[i + 1]];\n\t\t}\n\t}\n\treturn result;\n}\n", "    if\
    \ (numbers.length < 2) return [numbers[0], numbers[0]];\n    let min_diff = Number.MAX_VALUE;\n\
    \    let min_diff_index = 0;\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        let diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n\
    \    }\n    return [numbers[min_diff_index], numbers[min_diff_index + 1]];\n}\n",
  "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\
    \t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest_number = numbers[0];\n\tlet largest_number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest_number)\
    \ {\n\t\t\tsmallest_number = numbers[i];\n\t\t} else if (numbers[i] > largest_number)\
    \ {\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,\
    \ largest_number];\n}\n", "    if (numbers.length < 2) return [numbers[0], numbers[0]];\n\
    \    let smallest = numbers[0];\n    let largest = numbers[0];\n    for (let i\
    \ = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n    \
    \        smallest = numbers[i];\n        } else if (numbers[i] > largest) {\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    if (numbers.length < 2)\
    \ {\n        return [numbers[0], numbers[0]];\n    }\n    let min1 = numbers[0];\n\
    \    let min2 = numbers[0];\n    let max1 = numbers[0];\n    let max2 = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min1)\
    \ {\n            min1 = numbers[i];\n        } else if (numbers[i] > max1) {\n\
    \            max1 = numbers[i];\n        }\n        if (numbers[i] > max2) {\n\
    \            max2 = numbers[i];\n        } else if (numbers[i] < min2) {\n   \
    \         min2 = numbers[i];\n        }\n    }\n    return [min1, max1, min2,\
    \ max2];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\t\
    for (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\tlet result\
    \ = [smallest, largest];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif\
    \ (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t} else if (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t}\n\tresult.push(smallest);\n\
    \tresult.push(largest);\n\treturn result;\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = numbers[0];\n\
    \    let largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n  \
    \      } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest: number = numbers[0];\n\
    \tlet largest: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++)\
    \ {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\
    \tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    if (numbers.length\
    \ < 2) {\n        return [numbers[0], numbers[0]];\n    }\n    let smallest =\
    \ numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet min: number =\
    \ numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest:\
    \ number;\n\tlet largest: number;\n\tfor (let i = 0; i < numbers.length; i++)\
    \ {\n\t\tsmallest = numbers[i];\n\t\tlargest = numbers[i];\n\t\tfor (let j = i\
    \ + 1; j < numbers.length; j++) {\n\t\t\tif (numbers[j] < smallest) {\n\t\t\t\t\
    smallest = numbers[j];\n\t\t\t}\n\t\t\tif (numbers[j] > largest) {\n\t\t\t\tlargest\
    \ = numbers[j];\n\t\t\t}\n\t\t}\n\t\tnumbers.splice(i, 1);\n\t\tnumbers.splice(j,\
    \ 0, smallest);\n\t\tnumbers.splice(j, 0, largest);\n\t}\n\treturn [smallest,\
    \ largest];\n}\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "    let smallest: number\
    \ = numbers[0];\n    let largest: number = numbers[0];\n    for (let i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n           \
    \ smallest = numbers[i];\n        } else if (numbers[i] > largest) {\n       \
    \     largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = numbers[0];\n\
    \    let largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n  \
    \      } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "    let smallest =\
    \ numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    if (numbers.length\
    \ < 2) {\n        return [numbers[0], numbers[0]];\n    }\n    const [smallest,\
    \ largest] = numbers;\n    const [smallest2, largest2] = find_closest_elements(numbers.slice(1));\n\
    \    const [smallest3, largest3] = find_closest_elements(numbers.slice(2));\n\
    \    const [smallest4, largest4] = find_closest_elements(numbers.slice(3));\n\
    \    return [\n        smallest,\n        smallest2,\n        smallest3,\n   \
    \     smallest4,\n        largest,\n        largest2,\n        largest3,\n   \
    \     largest4,\n    ];\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < smallest) {\n            smallest = numbers[i];\n        } else if (numbers[i]\
    \ > largest) {\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < smallest) {\n            smallest = numbers[i];\n        } else if (numbers[i]\
    \ > largest) {\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min_dist = Number.MAX_VALUE;\n\tlet min_number = numbers[0];\n\t\
    let max_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\
    \tlet dist = numbers[i] - min_number;\n\t\tif (dist < min_dist) {\n\t\t\tmin_number\
    \ = numbers[i];\n\t\t\tmin_dist = dist;\n\t\t} else if (dist > max_dist) {\n\t\
    \t\tmax_number = numbers[i];\n\t\t\tmax_dist = dist;\n\t\t}\n\t}\n\treturn [min_number,\
    \ max_number];\n}\n", "\tlet smallest_number = numbers[0];\n\tlet largest_number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest_number) {\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest_number) {\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, largest_number];\n}\n", "\tlet smallest = numbers[0];\n\t\
    let largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest_number = numbers[0];\n    let biggest_number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest_number)\
    \ {\n            smallest_number = numbers[i];\n        } else if (numbers[i]\
    \ > biggest_number) {\n            biggest_number = numbers[i];\n        }\n \
    \   }\n    return [smallest_number, biggest_number];\n}\n", "    let smallest\
    \ = numbers[0];\n    let largest = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n\
    \        } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    if (numbers.length < 2) {\n        return [numbers[0], numbers[0]];\n\
    \    }\n\n    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n\n    return [smallest,\
    \ largest];\n}\n", "    if (numbers.length < 2) {\n        return [numbers[0],\
    \ numbers[0]];\n    }\n    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < smallest) {\n            smallest = numbers[i];\n        } else if (numbers[i]\
    \ > largest) {\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min_dist\
    \ = Number.MAX_VALUE;\n\tlet min_dist_index = 0;\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tlet dist = numbers[i] - numbers[i - 1];\n\t\tif (dist < min_dist)\
    \ {\n\t\t\tmin_dist = dist;\n\t\t\tmin_dist_index = i;\n\t\t}\n\t}\n\treturn [numbers[min_dist_index],\
    \ numbers[min_dist_index + 1]];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", " \
    \   if (numbers.length < 2) {\n        return [numbers[0], numbers[0]];\n    }\n\
    \    const [smallest, largest] = numbers;\n    const [smallest_2, largest_2] =\
    \ find_closest_elements(numbers.slice(1));\n    if (smallest === smallest_2 &&\
    \ largest === largest_2) {\n        return [smallest, largest];\n    }\n    if\
    \ (smallest > smallest_2) {\n        return [smallest, largest];\n    }\n    if\
    \ (largest < largest_2) {\n        return [smallest, largest];\n    }\n    return\
    \ [smallest_2, largest_2];\n}\n", "\tlet min_diff = Number.MAX_VALUE;\n\tlet min_diff_index\
    \ = 0;\n\tlet max_diff = Number.MAX_VALUE;\n\tlet max_diff_index = 0;\n\tfor (let\
    \ i = 0; i < numbers.length - 1; i++) {\n\t\tlet diff = numbers[i] - numbers[i\
    \ + 1];\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t\tmin_diff_index\
    \ = i;\n\t\t}\n\t\tif (diff > max_diff) {\n\t\t\tmax_diff = diff;\n\t\t\tmax_diff_index\
    \ = i;\n\t\t}\n\t}\n\treturn [numbers[min_diff_index], numbers[max_diff_index]];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    if (numbers.length < 2) {\n        return\
    \ [numbers[0], numbers[0]];\n    }\n    const [smallest, largest] = numbers;\n\
    \    const [smallest_2, largest_2] = find_closest_elements(numbers.slice(1));\n\
    \    if (smallest > largest) {\n        return [smallest, largest];\n    }\n \
    \   if (smallest < smallest_2) {\n        return [smallest_2, largest];\n    }\n\
    \    if (largest > largest_2) {\n        return [smallest_2, largest_2];\n   \
    \ }\n    return [smallest_2, largest_2];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest_number = numbers[0];\n    let largest_number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest_number)\
    \ {\n            smallest_number = numbers[i];\n        } else if (numbers[i]\
    \ > largest_number) {\n            largest_number = numbers[i];\n        }\n \
    \   }\n    return [smallest_number, largest_number];\n}\n", "\tlet smallest_number\
    \ = numbers[0];\n\tlet largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest_number) {\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t} else if (numbers[i] > largest_number) {\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = Math.min(...numbers);\n\
    \    let largest = Math.max(...numbers);\n    let result = [smallest, largest];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        let element = numbers[i];\n\
    \        if (element < smallest) {\n            smallest = element;\n        }\n\
    \        if (element > largest) {\n            largest = element;\n        }\n\
    \    }\n    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tlet max1 = numbers[0];\n\
    \tlet max2 = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet\
    \ cur1 = numbers[i];\n\t\tlet cur2 = numbers[i];\n\t\tif (cur1 < min1) {\n\t\t\
    \tmin1 = cur1;\n\t\t} else if (cur1 > max1) {\n\t\t\tmax1 = cur1;\n\t\t}\n\t\t\
    if (cur2 < min2) {\n\t\t\tmin2 = cur2;\n\t\t} else if (cur2 > max2) {\n\t\t\t\
    max2 = cur2;\n\t\t}\n\t}\n\treturn [min1, max1, min2, max2];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \tlet min_element = numbers[0];\n\tlet max_element = numbers[1];\n\tfor (let i\
    \ = 2; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i] - numbers[i\
    \ - 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t\tmin_element\
    \ = numbers[i];\n\t\t} else if (diff > min_diff) {\n\t\t\tmax_element = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min_element, max_element];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        } else if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest_number = numbers[0];\n\tlet\
    \ largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < smallest_number) {\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest_number) {\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    } else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < smallest) {\n            smallest = numbers[i];\n        } else if (numbers[i]\
    \ > largest) {\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "\tlet smallest: number;\n\tlet largest: number;\n\
    \tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\tsmallest = numbers[i];\n\
    \t\tlargest = numbers[i + 1];\n\t\tif (smallest > largest) {\n\t\t\tlet temp =\
    \ smallest;\n\t\t\tsmallest = largest;\n\t\t\tlargest = temp;\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    let smallest = numbers[0];\n\
    \    let largest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n  \
    \      } else if (numbers[i] > largest) {\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "    let smallest_number\
    \ = numbers[0];\n    let largest_number = numbers[0];\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] < smallest_number) {\n      \
    \      smallest_number = numbers[i];\n        } else if (numbers[i] > largest_number)\
    \ {\n            largest_number = numbers[i];\n        }\n    }\n    return [smallest_number,\
    \ largest_number];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    if (numbers.length < 2) {\n        return [numbers[0], numbers[0]];\n\
    \    }\n    let min1 = numbers[0];\n    let min2 = numbers[0];\n    let max1 =\
    \ numbers[0];\n    let max2 = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min1) {\n            min1 = numbers[i];\n \
    \       } else if (numbers[i] > max1) {\n            max1 = numbers[i];\n    \
    \    }\n        if (numbers[i] > max2) {\n            max2 = numbers[i];\n   \
    \     } else if (numbers[i] < min2) {\n            min2 = numbers[i];\n      \
    \  }\n    }\n    return [min1, max2];\n}\n", "\tlet min_dist = Number.MAX_VALUE;\n\
    \tlet min_idx = 0;\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet dist\
    \ = numbers[i] - numbers[i - 1];\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist =\
    \ dist;\n\t\t\tmin_idx = i;\n\t\t}\n\t}\n\treturn [numbers[min_idx], numbers[min_idx\
    \ + 1]];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number =\
    \ numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    let smallest = numbers[0];\n    let largest = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n\
    \            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        }\n    }\n    return [smallest,\
    \ largest];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
