name: HumanEval_49_modp
language: ts
prompt: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number, p:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n\
    \  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n}\n",
  "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = p; i > 0; i--)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  const q = n / p;\n  const\
    \ r = n % p;\n  return r === 0 ? q : q + p;\n}\n", "\treturn ((n % p) + p) % p;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res % p + p)\
    \ % p;\n  }\n  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn\
    \ ((n % p) + p) % p;\n}\n", "  const q = n / p;\n  const r = n % p;\n  return\
    \ r === 0 ? q : q + p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  return ((n\
    \ % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = p; i >= 1; i--) {\n  \
    \  res = (res * n) % p;\n  }\n  return res;\n}\n", "  let result = 1;\n  for (let\
    \ i = 0; i < p; i++) {\n    if (n % i == 0) {\n      result *= i;\n      result\
    \ %= p;\n    }\n  }\n  return result;\n}\n", "\treturn ((n % p) + p) % p;\n}\n",
  "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
    \  return res;\n}\n", "  let result = 1;\n  for (let i = 0; i < n; i++) {\n  \
    \  result *= p;\n  }\n  return result % p;\n}\n", "\treturn ((n % p) + p) % p;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) +\
    \ n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++)\
    \ {\n    res = (res % p + p) % p;\n  }\n  return res;\n}\n", "  let res = 1;\n\
    \  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n\
    }\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n",
  "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res % p + p) % p;\n\
    \  }\n  return res;\n}\n", "  let result = 1;\n  for (let i = 0; i < n; i++) {\n\
    \    result *= p;\n  }\n  return result % p;\n}\n", "  let result = 1;\n  for\
    \ (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return result;\n}\n", " \
    \ let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
    \  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res\
    \ = (res % p + p) % p;\n  }\n  return res;\n}\n", "    return ((n % p) + p) %\
    \ p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res %\
    \ n) + n;\n  }\n  return res;\n}\n", "  return ((n % p) + p) % p;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < n; i++) {\n    res *= p;\n  }\n  return res;\n\
    }\n", "  const m = (p + 1) >> 1; // Q - p\n  return ((n & 1) === 0) ? (m ^ -1)\
    \ : (m ^ p + 1);\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p)\
    \ + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res =\
    \ (res % n) + n;\n  }\n  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n",
  "    const m = (p + 1) >> 1;\n    const result = ((n % m) + m) % m;\n    return\
    \ result * result;\n}\n", "  const m = (p + 1) >> 1;\n  const result = ((n % m)\
    \ + m) % m;\n  return result * 2 - m;\n}\n", "    return ((n % p) + p) % p;\n\
    }\n", "  return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i\
    \ < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "\treturn ((n\
    \ % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n   \
    \ res = (res % n) + n;\n  }\n  return res;\n}\n", "  return ((n % p) + p) % p;\n\
    }\n", "\treturn ((n % p) + p) % p;\n}\n", "    return ((n % p) + p) % p;\n}\n",
  "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n\
    \  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "  let res = 1;\n  for (let i = p; i >= 1; i--) {\n    res =\
    \ (res % n) + n;\n  }\n  return res;\n}\n", "    return ((n % p) + p) % p;\n}\n",
  "  return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n}\n",
  "  const q = p % n;\n  const r = n % p;\n  if (r === 0) {\n    return q;\n  }\n\
    \  return p + (q - p) % p;\n}\n", "    let res = 1;\n    for (let i = 0; i < p;\
    \ i++) {\n        res *= n;\n    }\n    return res;\n}\n", "  let res = 1;\n \
    \ for (let i = 0; i < n; i++) {\n    res = (res % p) + p;\n  }\n  return res;\n\
    }\n", "    return ((n % p) + p) % p;\n}\n", "  return ((n % p) + p) % p;\n}\n",
  "  return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n",
  "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < p; i++) {\n    res = (res * n) % p;\n  }\n  return res;\n}\n",
  "    let res = 1;\n    for (let i = 0; i < n; i++) {\n        res = (res * p) %\
    \ p;\n    }\n    return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n \
    \ return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res\
    \ *= n;\n  }\n  return res;\n}\n", "  return ((n % p) + p) % p;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < n; i++) {\n    res *= p;\n  }\n  return res;\n\
    }\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i\
    \ < n; i++) {\n    res *= p;\n  }\n  return res;\n}\n", "  return ((n % p) + p)\
    \ % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res\
    \ * p) % p;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i <\
    \ n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return\
    \ res;\n}\n", "    const m = BigInt(p);\n    const a = BigInt(n);\n    const r\
    \ = BigInt(1);\n    for (let i = 0; i < n; i++) {\n        r = r * m % p;\n  \
    \  }\n    return r;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n %\
    \ p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res\
    \ = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i =\
    \ p; i >= 1; i--) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "   \
    \ const m = (p + 1) >> 1;\n    const result = ((n % m) + m) % m;\n    return result\
    \ * 2 - m;\n}\n", "    let res = 1;\n    for (let i = 0; i < p; i++) {\n     \
    \   res *= n;\n    }\n    return res;\n}\n", "  let res = 1;\n  for (let i = 0;\
    \ i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  const\
    \ q: number = (p - 1) % p;\n  const r: number = (p - q) % p;\n  return ((n * r)\
    \ % p) + q;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p) + p)\
    \ % p;\n}\n", "    return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let\
    \ i = 0; i < n; i++) {\n    res *= p;\n  }\n  return res;\n}\n", "  return ((n\
    \ % p) + p) % p;\n}\n", "  const m = (p + 1) >> 1; // Q: what is the type of p?\n\
    \  const q = (p >> 1) + 1; // Q: what is the type of p?\n  const r = p & m - 1;\
    \ // Q: what is the type of p?\n  return ((n & m) ^ r) + q; // Q: what is the\
    \ type of n?\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res\
    \ = (res % n) + n;\n  }\n  return res;\n}\n", "    return ((n % p) + p) % p;\n\
    }\n", "\treturn ((n % p) + p) % p;\n}\n", "    return ((n % p) + p) % p;\n}\n",
  "  return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let result = 1;\n\
    \  for (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return result % p;\n\
    }\n", "    return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0;\
    \ i < n; i++) {\n    res *= p;\n  }\n  return res;\n}\n", "  return ((n % p) +\
    \ p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res\
    \ * p) % p;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i <\
    \ p; i++) {\n    res *= n;\n  }\n  return res;\n}\n", "\treturn ((n % p) + p)\
    \ % p;\n}\n", "  return ((n % p) + p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n\
    }\n", "\treturn ((n % p) + p) % p;\n}\n", "  let result = 1;\n  for (let i = p;\
    \ i > 0; i--) {\n    if (n & 1) {\n      result *= i;\n    }\n    n >>= 1;\n \
    \ }\n  return result;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n\
    \    res *= p;\n  }\n  return res;\n}\n", "  const m = (p + 1) >> 1; // ceil(p)\n\
    \  return ((n % m) + m) % m;\n}\n", "  let res = 1;\n  for (let i = 0; i < p;\
    \ i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  return ((n %\
    \ p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res\
    \ *= n;\n  }\n  return res;\n}\n", "    const m = (p + 1) >> 1; // p + 1 >> 1\n\
    \    return ((n % m) + m) % m;\n}\n", "    let res = 1;\n    for (let i = 0; i\
    \ < p; i++) {\n        res *= n;\n    }\n    return res;\n}\n", "  let result\
    \ = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= p;\n    result %= p;\n\
    \  }\n  return result;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return\
    \ res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res\
    \ % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i <\
    \ n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n}\n", "  let q: number\
    \ = p;\n  let m: number = n;\n  while (true) {\n    if (m & 1) m = p - ((q >>\
    \ 1) + 1);\n    q >>= 1;\n    if (q == 0) break;\n  }\n  return m;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * n) % p;\n  }\n \
    \ return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res\
    \ % n) + n;\n  }\n  return res;\n}\n", "  let result = 1;\n  for (let i = 0; i\
    \ < n; i++) {\n    result *= p;\n  }\n  return result;\n}\n", "  let res = 1;\n\
    \  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n}\n", " \
    \ let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
    \  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "    const m = (p +\
    \ 1) >> 1;\n    const result = ((n % m) + m) % m;\n    return result * 2 - m;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * p) %\
    \ p;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++)\
    \ {\n    res = (res * p) % p;\n  }\n  return res;\n}\n", "    const m = (p + 1)\
    \ >> 1;\n    const result = ((n % m) + m) % m;\n    return result * result;\n\
    }\n", "    return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0;\
    \ i < n; i++) {\n    res *= p;\n  }\n  return res;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    res = (res % p + p) % p;\n  }\n  return res;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n \
    \ return res;\n}\n", "    let result = 1;\n    for (let i = 0; i < p; i++) {\n\
    \        result *= n;\n    }\n    return result;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n}\n", "  let res\
    \ = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return\
    \ res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res\
    \ % n) + n;\n  }\n  return res;\n}\n", "  const m = (p + 1) >> 1; // Q: why is\
    \ this +1 ?\n  const z = (m * 0x100000000) | 0; // Q: why is this & 0x100000000\
    \ ?\n  return (n & z) ? ((n / m) | 0) % p : ((n / p) | 0) % m\n}\n", "  let res\
    \ = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return\
    \ res;\n}\n", "    return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let\
    \ i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n}\n",
  "  return ((n % p) + p) % p;\n}\n", "  let result = 1;\n  for (let i = 0; i < p;\
    \ i++) {\n    if (n % i == 0) {\n      result *= i;\n      result %= p;\n    }\n\
    \  }\n  return result;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < n; i++) {\n    res = (res % p + p) % p;\n  }\n  return\
    \ res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n\
    \  }\n  return res;\n}\n", "    return ((n % p) + p) % p;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n  return\
    \ res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let\
    \ i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", " \
    \ let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
    \  return res;\n}\n", "  const m = (p + 1) >> 1; // Q - p\n  return ((n & 1) ===\
    \ 0) ? (m ^ -1) : (m ^ (n & m)); // Q - p\n}\n", "  let res = 1;\n  for (let i\
    \ = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  \
    \  let res = 1;\n    while (n > 1) {\n        if (n % p === 0) {\n           \
    \ res *= p;\n            n /= p;\n        }\n        else {\n            res *=\
    \ n % p;\n            n /= p;\n        }\n    }\n    return res;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n \
    \ return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res\
    \ = (res * p) % p;\n  }\n  return res;\n}\n", "  const m = (p + 1) >> 1; // Q:\
    \ why shift instead of multiply?\n  const Z = p >> 1;\n  const r = n >> 1;\n \
    \ const t = ((n - r) % (p + m)) + (m << 1) + 1;\n  return ((t << m) | (t >> (32\
    \ - m))) >>> 0;\n}\n", "  const q = p % n;\n  const r = n % q;\n  return q + (r\
    \ == 0 ? q : r);\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n   \
    \ res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let\
    \ i = 0; i < n; i++) {\n    res *= p;\n  }\n  return res;\n}\n", "  let result\
    \ = 1;\n  for (let i = 0; i < p; i++) {\n    if (n & (1 << i)) {\n      result\
    \ *= p;\n    }\n  }\n  return result;\n}\n", "    let res = 1;\n    for (let i\
    \ = 0; i < p; i++) {\n        res *= n;\n    }\n    return res;\n}\n", "  let\
    \ res = 1;\n  for (let i = 0; i < n; i++) {\n    res *= p;\n  }\n  return res;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res *= p;\n  }\n \
    \ return res;\n}\n", "  return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n}\n",
  "    let result = 1;\n    for (let i = 0; i < n; i++) {\n        result *= p;\n\
    \    }\n    return result;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res * n) % p;\n  }\n  return res;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let\
    \ i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "\t\
    return ((n % p) + p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++)\
    \ {\n    res = (res * p) % p;\n  }\n  return res;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    result\
    \ *= n;\n  }\n  return result % p;\n}\n", "    return ((n % p) + p) % p;\n}\n",
  "  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = (res * i) % p;\n  }\n\
    \  return res;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\treturn ((n % p) +\
    \ p) % p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res\
    \ % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i <\
    \ p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "\treturn ((n\
    \ % p) + p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  let q: number =\
    \ p;\n  let m: number = n;\n  while (true) {\n    if (m & 1) q = (q + p) % p;\n\
    \    m >>= 1;\n    if (m) p = (p + q) % p;\n    else break;\n  }\n  return q;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) +\
    \ n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for\
    \ (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return res;\n}\n",
  "  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res % p + p) % p;\n\
    \  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < n; i++) {\n\
    \    res = (res * p) % p;\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
