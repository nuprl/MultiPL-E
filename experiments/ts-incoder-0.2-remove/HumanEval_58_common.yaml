name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two lists.\nfunction common(l1:\
  \ number[], l2: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    var i: number;\n    var j: number;\n    var result: number[] =\
    \ [];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are duplicates\
    \ in the lists.\n<|/ c |>\n<| c |>\nYes, it does. I added a note to the answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicates in the lists.\n<|/\
    \ c |>\n<| c |>\nYes, it does. I added a note to the answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are duplicates in the lists.\n<|/ c |>\n<| a tags=arrays,javascript,sorting\
    \ |>\n<code>", "  let result: number[] = [];\n  let lLen = l1.length;\n  let rLen\
    \ = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < rLen;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        let found = false;\n        for (let j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        let found = false;\n        for (let j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  let result: number[] = [];\n \
    \ for (let i = 0; i < l1.length; i++) {\n    let found = false;\n    for (let\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        found =\
    \ true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let l: number[] = [];\n    for (let\
    \ i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i]) === -1) {\n    \
    \        l.push(l1[i]);\n        }\n    }\n    return l;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        let found\
    \ = false;\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                found = true;\n                break;\n      \
    \      }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript\
    \ |>\n<| a dscore=0 |>\n<code>", "  let result: number[] = [];\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n    for\
    \ (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var i: number;\n    var j: number;\n    var result: number[] = [];\n\
    \    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution.\
    \ `O(n^2)` complexity is needed here.\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ But the OP asked for \"most efficient\" solution. So, I gave him an efficient\
    \ solution. :)\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for \"most\
    \ efficient\" solution. So, I gave him an efficient solution. :)\n<|/ c |>\n<|\
    \ c |>\nI agree with you. But the OP asked for \"most efficient\" solution. So,\
    \ I gave him an efficient solution. :)\n<|/ c |>\n<| a tags=arrays,javascript,algorithm\
    \ |>\n<code>", "  let l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work if there\
    \ are duplicates in the lists.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The OP didn't specify what should happen if there are duplicates.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it with `[1, 1, 2, 3]`\
    \ and `[1, 1, 2, 3]`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a\
    \ test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>",
  "  var result: number[] = [];\n  for (var i = 0; i < l1.length; i++) {\n    for\
    \ (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    let l: number[]\
    \ = [];\n    let i: number;\n    let j: number;\n    let k: number;\n    let l1:\
    \ number;\n    let l2: number;\n    let commonCount: number;\n    let commonElement:\
    \ number;\n    let commonArray: number[] = [];\n    let commonArray1: number[]\
    \ = [];\n    let commonArray2: number[] = [];\n    let commonArray3: number[]\
    \ = [];\n    let commonArray4: number[] = [];\n    let commonArray5: number[]\
    \ = [];\n    let commonArray6: number[] = [];\n    let commonArray7: number[]\
    \ = [];\n    let commonArray8: number[] = [];\n    let commonArray9: number[]\
    \ = [];\n    let commonArray10: number[] = [];\n    let commonArray11: number[]\
    \ = [];\n    let commonArray12: number[] = [];\n    let commonArray13: number[]\
    \ = [];\n    let commonArray14: number[] = [];\n    let commonArray15: number[]\
    \ = [];\n    let commonArray16: number[] = [];\n    let commonArray17: number[]\
    \ = [];\n    let commonArray18: number[] = [];\n    let commonArray19: number[]\
    \ = [];\n    let commonArray20: number[] = [];\n    let commonArray21: number[]\
    \ = [];\n    let commonArray22: number[] = [];\n    let commonArray23: number[]\
    \ = [];\n    let commonArray24: number[] = [];\n    let commonArray25: number[]\
    \ = [];\n    let commonArray26: number[] = [];\n    let commonArray27: number[]\
    \ = [];\n    let commonArray28: number[] = [];\n    let commonArray29: number[]\
    \ = [];\n    let commonArray30: number[] = [];\n    let commonArray31: number[]\
    \ = [];\n    let commonArray32: number[] = [];\n    let commonArray33: number[]\
    \ = [];\n    let commonArray34: number[] = [];\n    let commonArray35: number[]\
    \ = [];\n    let commonArray36: number[] = [];\n    let commonArray37: number[]\
    \ = [];\n    let commonArray38: number[] = [];\n    let commonArray39: number[]\
    \ = [];\n    let commonArray40: number[] = [];\n    let commonArray41: number[]\
    \ = [];\n    let commonArray42: number[] = [];\n    let commonArray43: number[]\
    \ = [];\n    let commonArray44: number[] = [];\n    let commonArray45: number[]\
    \ = [];\n    let commonArray46: number[] = [];\n    let commonArray47: number[]\
    \ = [];\n    let commonArray48: number[] = [];\n    let commonArray49: number[]\
    \ = [];\n    let commonArray50: number[] = [];\n    let commonArray51: number[]\
    \ = [];\n    let commonArray52: number[] = [];\n    let common", "    var result:\
    \ number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    var result = [];\n    for (var i = 0;\
    \ i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n     \
    \       if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   const result: number[] = [];\n    const hashMap = new Map<number, boolean>();\n\
    \    for (let i = 0; i < l1.length; i++) {\n        const val = l1[i];\n     \
    \   if (hashMap.has(val)) {\n            continue;\n        }\n        hashMap.set(val,\
    \ true);\n        result.push(val);\n    }\n    for (let i = 0; i < l2.length;\
    \ i++) {\n        const val = l2[i];\n        if (hashMap.has(val)) {\n      \
    \      continue;\n        }\n        hashMap.set(val, true);\n        result.push(val);\n\
    \    }\n    return result;\n}", "    var result: number[] = [];\n    var i: number;\n\
    \    var j: number;\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0;\
    \ j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=arrays,javascript,sorting |>\n<code>", "    let result: number[] = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        let found = false;\n     \
    \   for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            result.push(l1[i]);\n        }\n    }\n\
    \    return result;\n}\n", "    let result = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        let found = false;\n        for (let j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                found = true;\n     \
    \           break;\n            }\n        }\n        if (!found) {\n        \
    \    result.push(l1[i]);\n        }\n    }\n    return result;\n}\n", "  let result:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    let found = false;\n\
    \    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     found = true;\n        break;\n      }\n    }\n    if (!found) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        let found = false;\n\
    \        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            result.push(l1[i]);\n        }\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    for (let\
    \ i = 0; i < l1.length; i++) {\n        let found = false;\n        for (let j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     found = true;\n                break;\n            }\n        }\n      \
    \  if (!found) {\n            result.push(l1[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    var i: number;\n    var j: number;\n    for (i = 0; i < l1.length;\
    \ i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "  let result: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        let\
    \ found = false;\n        for (let j = 0; j < l2.length; j++) {\n            if\
    \ (l1[i] === l2[j]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var result = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n   \
    \     for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    var i: number;\n    var j: number;\n    for (i = 0; i < l1.length; i++) {\n\
    \        for (j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                result.push(l1[i]);\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    let lLen = l1.length;\n    let ljLen = l2.length;\n    let i = 0;\n    let\
    \ j = 0;\n    while (i < lLen && j < ljLen) {\n        if (l1[i] === l2[j]) {\n\
    \            result.push(l1[i]);\n            i++;\n            j++;\n       \
    \ } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n          \
    \  j++;\n        }\n    }\n    return result;\n}\n", "  let result: number[] =\
    \ [];\n  for (let i = 0; i < l1.length; i++) {\n    let found = false;\n    for\
    \ (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        found\
    \ = true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n    for\
    \ (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are duplicates in either\
    \ list.\n<|/ c |>\n<| c |>\nIt does. I tested it before posting. What are you\
    \ talking about?\n<|/ c |>\n<| c |>\nI tested it before posting too. Try it yourself\
    \ with two lists containing duplicates. You'll see that it doesn't work.\n<|/\
    \ c |>\n<| c |>\nI tested it before posting too. Try it yourself with two lists\
    \ containing duplicates. You'll see that it doesn't work.\n<|/ c |>\n<| c |>\n\
    I tested it before posting too. Try it yourself with two lists containing duplicates.\
    \ You'll see that it doesn't work.\n<|/ c |>\n<| a tags=arrays,javascript |>\n\
    <code>", "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if\
    \ (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    var i: number;\n    var j: number;\n    var result: number[]\
    \ = [];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\
    \nvar arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) < 0;\n\
    });\n\nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=1\
    \ |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\n\
    var arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) < 0;\n});\n\
    \nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0\
    \ |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\n\
    var arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) < 0;\n});\n\
    \nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\n\
    var arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) < 0;\n});\n\
    \nconsole.log(arr3);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript\
    \ |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\n\
    var arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) < 0;\n});\n\
    \nconsole.log(arr3);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar\
    \ arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [2,4,6,8,10];\n\nvar arr3 = arr1.filter(function(item){\n\
    \    return arr2.indexOf(item) < 0;\n});\n\nconsole.log(arr3);\n</code>\n<|/ a\
    \ tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\n\
    var arr2 = [2,4,6,8,10];\n\nvar arr3 = arr1.filter(function(item){", "    var\
    \ result = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "  var result = [];\n  for (var i = 0; i < l1.length;\
    \ i++) {\n    for (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  var result = [];\n  for (var i = 0; i < l1.length; i++) {\n\
    \    for (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n     \
    \   for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                result.push(l1[i]);\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    const result = [];\n    const\
    \ hash1 = new Set();\n    const hash2 = new Set();\n    l1.forEach((item) => {\n\
    \        hash1.add(item);\n    });\n    l2.forEach((item) => {\n        hash2.add(item);\n\
    \    });\n    hash1.forEach((item) => {\n        if (!hash2.has(item)) {\n   \
    \         result.push(item);\n        }\n    });\n    return result;\n}\n</code>\n\
    <|/ a tags=javascript,arrays,typescript |>\n<| c |>\nThis solution does not preserve\
    \ the order of the elements in the array. For example, `[1,2,3]` and `[3,2,1]`\
    \ will both return `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, that's true. But the OP\
    \ didn't specify that he wants to preserve the order. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. He didn't specify that he wants\
    \ to preserve the order of the elements in the array. He just asked for a solution\
    \ that returns the same array as his example. ", "  let result: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "    let l: number[]\
    \ = [];\n    let j = 0;\n    for (let i = 0; i < l1.length; i++) {\n        if\
    \ (l2.indexOf(l1[i]) === -1) {\n            l[j] = l1[i];\n            j++;\n\
    \        }\n    }\n    return l;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ code is not working as expected. `common([1,2,3], [1,2,4,5])` returns `[1,2,3]`\
    \ instead of `[1,2,4,5]`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=arrays,javascript,sorting |>\n<code>", "    let\
    \ result = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n\
    }\n", "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \   var result: number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n  \
    \      for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n     \
    \   if (l2.indexOf(l1[i]) === -1) {\n            result.push(l1[i]);\n       \
    \ }\n    }\n    return result;\n}", "    const result: number[] = [];\n    const\
    \ hashMap = new Map<number, number>();\n    l1.forEach((item) => {\n        if\
    \ (hashMap.has(item)) {\n            return;\n        }\n        hashMap.set(item,\
    \ 1);\n    });\n    l2.forEach((item) => {\n        if (hashMap.has(item)) {\n\
    \            return;\n        }\n        hashMap.set(item, 1);\n    });\n    hashMap.forEach((value,\
    \ key) => {\n        if (value === 1) {\n            result.push(key);\n     \
    \   }\n    });\n    return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,javascript,sorting\
    \ |>\n<| a tags=arrays,algorithm,javascript,sorting |>\n<code>", "    const result:\
    \ number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        const found:\
    \ boolean = false;\n        for (let j = 0; j < l2.length; j++) {\n          \
    \  if (l1[i] === l2[j]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        let found = false;\n     \
    \   for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            result.push(l1[i]);\n        }\n    }\n\
    \    return result;\n}\n", "    let result: number[] = [];\n    for (let i = 0;\
    \ i < l1.length; i++) {\n        let found = false;\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            result.push(l1[i]);\n        }\n    }\n    return result;\n}\n",
  "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n   \
    \     for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. Try it with the input `[1,2,3,4,5]` and `[2,4,6,8,10]`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to include a more\
    \ efficient solution.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with\
    \ the input `[1,2,3,4,5]` and `[2,4,6,8,10]`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated my answer to include a more efficient solution.\n<|/ c |>\n\
    <| c |>\nThis still doesn't work. Try it with the input `[1,2,3,4,5]` and `[2,4,6,8,10]`.\n\
    <|/ c |>\n<| a tags=javascript,arrays |>\n<code>", "    var result: number[] =\
    \ [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j <\
    \ l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n    }\n  }\n\
    \  return result;\n}\n", "    var result = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm\
    \ |>\n<code>", "    var result = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    const result: number[]\
    \ = [];\n    const map = new Map();\n    l1.forEach((item) => {\n        if (!map.has(item))\
    \ {\n            map.set(item, true);\n            result.push(item);\n      \
    \  }\n    });\n    l2.forEach((item) => {\n        if (!map.has(item)) {\n   \
    \         map.set(item, true);\n            result.push(item);\n        }\n  \
    \  });\n    return result.sort();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859423)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ find the common elements in two arrays. I provided a solution that does exactly\
    \ that. He didn't ask for an algorithm to find the common elements. He asked for\
    \ help with his code. He provided a solution that does exactly that. He didn't\
    \ ask for an algorithm to find the common elements. He asked for help with his\
    \ code. He provided a solution that does exactly that. He didn't ask for an algorithm\
    \ to find the common elements. He asked for help with his code. He provided a\
    \ solution that does exactly that. He didn't ask for an algorithm to find the\
    \ common elements. He asked for help with his code. He provided a solution that\
    \ does exactly that. He didn't ask for an algorithm to find the common elements.\
    \ He asked for help with his code. He provided a solution that does exactly that.\
    \ He didn't ask for an algorithm to find the common elements.\n<|/ c |>\n<| c\
    \ |>\nHe asked for help with his code. He provided a solution that does exactly\
    \ that. He didn't ask for an algorithm to find the common elements. He asked for\
    \ help with his code. He provided a solution that does exactly that. He didn't\
    \ ask for an algorithm to find the common elements. He asked for help with his\
    \ code. He provided a solution that does exactly that. He didn't ask for an algorithm\
    \ to find the common elements. He asked for help with his code. He provided a\
    \ solution that does exactly that. He didn't ask for an algorithm to find the\
    \ common elements. He asked for help with his code. He provided a solution that\
    \ does exactly that. He didn't ask for an ", "  const result = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    var i: number;\n    var j: number;\n\
    \    var result: number[] = [];\n    for (i = 0; i < l1.length; i++) {\n     \
    \   for (j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n  \
    \              result.push(l1[i]);\n                break;\n            }\n  \
    \      }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n \
    \   for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let l: number[] = [];\n    let i: number;\n    let j: number;\n   \
    \ let k: number;\n    let l1: number;\n    let l2: number;\n    let max: number;\n\
    \    let min: number;\n    let temp: number;\n    let commonCount: number;\n \
    \   let commonElements: number[] = [];\n    let commonLength: number;\n    let\
    \ commonMax: number;\n    let commonMin: number;\n    let commonSum: number;\n\
    \    let commonProduct: number;\n    let commonProductMax: number;\n    let commonProductMin:\
    \ number;\n    let commonProductSum: number;\n    let commonProductSumMax: number;\n\
    \    let commonProductSumMin: number;\n    let commonProductSumSum: number;\n\
    \    let commonProductSumSumMax: number;\n    let commonProductSumSumMin: number;\n\
    \    let commonProductSumSumSum: number;\n    let commonProductSumSumSumMax: number;\n\
    \    let commonProductSumSumSumMin: number;\n    let commonProductSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumMax: number;\n    let commonProductSumSumSumSumMin:\
    \ number;\n    let commonProductSumSumSumSumSum: number;\n    let commonProductSumSumSumSumSumMax:\
    \ number;\n    let commonProductSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumMax: number;\n    let commonProductSumSumSumSumSumSumMin:\
    \ number;\n    let commonProductSumSumSumSumSumSumSum: number;\n    let commonProductSumSumSumSumSumSumSumMax:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumSumMax: number;\n    let\
    \ commonProductSumSumSumSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumSumMax: number;\n    let\
    \ commonProductSumSumSumSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumSumSumMax: number;\n    let\
    \ commonProductSumSumSumSumSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumSumSumMax: number;\n    let\
    \ commonProductSumSumSumSumSumSumSumSumSumMin: number;\n    let commonProductSumSumSumSumSumSumSumSumSumSum:\
    \ number;\n    let commonProductSumSumSumSumSumSumSumSumSumSumMax: number;\n \
    \   let commonProductSumSumSumSumSumSumSumSumSumSumMin: number;\n    let ", " \
    \ let l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
    \  for (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n\
    \      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n      }\n    }\n  }\n \
    \ return l;\n}\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3]` and `[2,3,4]`.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I've updated the answer to include a more\
    \ robust solution.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3]`\
    \ and `[2,3,4]`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer\
    \ to include a more robust solution.\n<|/ c |>\n<| c |>\nThis doesn't work. Try\
    \ it with `[1,2,3]` and `[2,3,4]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  let\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j =\
    \ 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n\
    \      }\n    }\n  }\n  return l;\n}\n", "  let result = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n  \
    \    if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n   \
    \   }\n    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n \
    \   for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=arrays,javascript,sorting |>\n<code>", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var i: number;\n    var j: number;\n    var k: number;\n    var l:\
    \ number[];\n    var m: number[];\n    var n: number[];\n    var o: number[];\n\
    \    var p: number[];\n    var q: number[];\n    var s: number[];\n    var t:\
    \ number[];\n    var u: number[];\n    var v: number[];\n    var w: number[];\n\
    \    var x: number[];\n    var y: number[];\n    var z: number[];\n    var a:\
    \ number[];\n    var b: number[];\n    var c: number[];\n    var d: number[];\n\
    \    var e: number[];\n    var f: number[];\n    var g: number[];\n    var h:\
    \ number[];\n    var i: number[];\n    var j: number[];\n    var k: number[];\n\
    \    var l: number[];\n    var m: number[];\n    var n: number[];\n    var o:\
    \ number[];\n    var p: number[];\n    var q: number[];\n    var s: number[];\n\
    \    var t: number[];\n    var u: number[];\n    var v: number[];\n    var w:\
    \ number[];\n    var x: number[];\n    var y: number[];\n    var z: number[];\n\
    \    var a: number[];\n    var b: number[];\n    var c: number[];\n    var d:\
    \ number[];\n    var e: number[];\n    var f: number[];\n    var g: number[];\n\
    \    var h: number[];\n    var i: number[];\n    var j: number[];\n    var k:\
    \ number[];\n    var l: number[];\n    var m: number[];\n    var n: number[];\n\
    \    var o: number[];\n    var p: number[];\n    var q: number[];\n    var s:\
    \ number[];\n    var t: number[];\n    var u: number[];\n    var v: number[];\n\
    \    var w: number[];\n    var x: number[];\n    var y: number[];\n    var z:\
    \ number[];\n    var a: number[];\n    var b: number[];\n    var c: number[];\n\
    \    var d: number[];\n    var e: number[];\n    var f: number[];\n    var g:\
    \ number[];\n    var h: number[];\n    var i: number[];\n    var j: number[];\n\
    \    var k: number[];\n    var l: number[];\n    var m: number[];\n    var n:\
    \ number[];\n    var o: number[];\n    var p: number[];\n    var q: number[];\n\
    \    var s: number[];\n    var t: number[];\n    var u: number[];\n    var v:\
    \ number[];\n    var w: number[];\n    var x: number[];\n    var y: number[];\n\
    \    var z: number[];\n    var a: number[];\n    var b: number[];\n    var c:\
    \ number[];\n    var d: number[];\n    var e: number[];\n    var f: number", " \
    \   var result = [];\n    for (var i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i])\
    \ != -1) {\n            result.push(l1[i]);\n        }\n    }\n    return result;\n\
    }\n", "  const result = [];\n  for (let i = 0; i < Math.min(l1.length, l2.length);\
    \ i++) {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n    }\n  }\n\
    \  return result;\n}\n", "    var result: number[] = [];\n    for (var i = 0;\
    \ i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n     \
    \       if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\n", " \
    \ const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ let result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if\
    \ (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i <\
    \ l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n   \
    \         result.push(l1[i]);\n            i++;\n        } else {\n          \
    \  result.push(l2[j]);\n            j++;\n        }\n    }\n    while (i < l1.length)\
    \ {\n        result.push(l1[i]);\n        i++;\n    }\n    while (j < l2.length)\
    \ {\n        result.push(l2[j]);\n        j++;\n    }\n    return result;\n}\n",
  "    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    var result: number[] = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n   \
    \     for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n     \
    \   for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                result.push(l1[i]);\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i]);\n    }\n  }\n\
    \  return result;\n}\n", "    let l: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        if (l2.indexOf(l1[i]) === -1) {\n            l.push(l1[i]);\n\
    \        }\n    }\n    return l;\n}\n", "    var i: number;\n    var j: number;\n\
    \    var result: number[] = [];\n    for (i = 0; i < l1.length; i++) {\n     \
    \   for (j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n  \
    \              result.push(l1[i]);\n                break;\n            }\n  \
    \      }\n    }\n    return result;\n}\n", "    var result = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n",
  "  var result: number[] = [];\n  var i: number;\n  var j: number;\n  for (i = 0;\
    \ i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n      if (l1[i]\
    \ === l2[j]) {\n        result.push(l1[i]);\n        break;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "    let result: number[] = [];\n    for (let i\
    \ = 0; i < l1.length; i++) {\n        let found = false;\n        for (let j =\
    \ 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n             \
    \   found = true;\n                break;\n            }\n        }\n        if\
    \ (!found) {\n            result.push(l1[i]);\n        }\n    }\n    return result;\n\
    }\n", "    let l: number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n\
    \        if (l2.indexOf(l1[i]) === -1) {\n            l.push(l1[i]);\n       \
    \ }\n    }\n    return l;\n}\n", "  const result = [];\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let l: number[] = [];\n    for (let\
    \ i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i]) === -1) {\n    \
    \        l.push(l1[i]);\n        }\n    }\n    return l;\n}\n", "  var result:\
    \ number[] = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0;\
    \ j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i]);\n    }\n  }\n\
    \  return result;\n}\n", "  let l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "    let result = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    var i: number;\n    var j: number;\n    for (i = 0; i < l1.length;\
    \ i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your solution is very close to mine, but I cannot\
    \ use any library functions. I edited my question to clarify this.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that does not use any library\
    \ functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very close to mine, but I cannot use any library functions. I edited\
    \ my question to clarify this.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that does not use any library functions. I hope it helps.\n<|/ c\
    \ |>\n<| a |>\nI finally found a solution that does not use any library functions.\
    \ I hope it helps someone.\n<code>", "    var result: number[] = [];\n    for\
    \ (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  var result: number[] = [];\n  for (var i = 0; i < l1.length; i++) {\n\
    \    for (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n", "  var result = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    var result:\
    \ number[] = [];\n    var i: number;\n    var j: number;\n    for (i = 0; i <\
    \ l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if\
    \ (l1[i] === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        let found = false;\n\
    \        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            result.push(l1[i]);\n        }\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    let found = false;\n    for (let j = 0; j <\
    \ l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        found = true;\n   \
    \     break;\n      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n \
    \   }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}",
  "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if\
    \ (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    var result = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "  let result: number[]\
    \ = [];\n  let lLen = l1.length;\n  let ljLen = l2.length;\n  for (let i = 0;\
    \ i < lLen; i++) {\n    for (let j = 0; j < ljLen; j++) {\n      if (l1[i] ===\
    \ l2[j]) {\n        result.push(l1[i]);\n        break;\n      }\n    }\n  }\n\
    \  return result;\n}\n", "    let result: number[] = [];\n    let lLen = l1.length;\n\
    \    let ljLen = l2.length;\n    let i = 0;\n    let j = 0;\n    while (i < lLen\
    \ && j < ljLen) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i]);\n    }\n  }\n\
    \  return result;\n}\n", "    const result = [];\n    const hash1 = new Set();\n\
    \    const hash2 = new Set();\n    l1.forEach((item) => {\n        hash1.add(item);\n\
    \    });\n    l2.forEach((item) => {\n        hash2.add(item);\n    });\n    hash1.forEach((item)\
    \ => {\n        if (hash2.has(item)) {\n            result.push(item);\n     \
    \   }\n    });\n    return result;\n}\n", "    let result: number[] = [];\n  \
    \  for (let i = 0; i < l1.length; i++) {\n        let found = false;\n       \
    \ for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            result.push(l1[i]);\n        }\n    }\n\
    \    return result;\n}\n", "    var result = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    const result\
    \ = [];\n    const hashMap = new Map();\n    l1.forEach((item) => {\n        if\
    \ (!hashMap.has(item)) {\n            hashMap.set(item, true);\n            result.push(item);\n\
    \        }\n    });\n    l2.forEach((item) => {\n        if (!hashMap.has(item))\
    \ {\n            hashMap.set(item, true);\n            result.push(item);\n  \
    \      }\n    });\n    return result;\n}", "  let result: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l1.indexOf(l2[i]) === -1) {\n   \
    \   result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "    var result:\
    \ number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    const result = [];\n    const hash1 = new\
    \ Set();\n    const hash2 = new Set();\n    l1.forEach((item) => {\n        hash1.add(item);\n\
    \    });\n    l2.forEach((item) => {\n        hash2.add(item);\n    });\n    hash1.forEach((item)\
    \ => {\n        if (!hash2.has(item)) {\n            result.push(item);\n    \
    \    }\n    });\n    return result;\n}\n", "  const result: number[] = [];\n \
    \ for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "    const result:\
    \ number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        const found:\
    \ boolean = false;\n        for (let j = 0; j < l2.length; j++) {\n          \
    \  if (l1[i] === l2[j]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting,javascript\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate numbers in both lists.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\nThis doesn't work if there are duplicate numbers\
    \ in both lists.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Do you\
    \ see a case where it fails?\n<|/ c |>\n<| c |>\nYes, I see a case where it fails.\
    \ Try it with this array: `[1, 1, 2, 2, 3, 3]`\n<|/ c |>\n<| a tags=arrays,algorithm,sorting,javascript\
    \ |>\n<code>", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  let l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    let found = false;\n    for (let j = 0; j < l2.length; j++) {\n\
    \      if (l1[i] === l2[j]) {\n        found = true;\n        break;\n      }\n\
    \    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        let found = false;\n        for (let j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        let found = false;\n     \
    \   for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            result.push(l1[i]);\n        }\n    }\n\
    \    return result;\n}\n", "    var result = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "  var result: number[]\
    \ = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    let result: number[] = [];\n\
    \    let lLen = l1.length;\n    let ljLen = l2.length;\n    let i = 0;\n    let\
    \ j = 0;\n    while (i < lLen && j < ljLen) {\n        if (l1[i] === l2[j]) {\n\
    \            result.push(l1[i]);\n            i++;\n            j++;\n       \
    \ } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n          \
    \  j++;\n        }\n    }\n    return result;\n}\n", "    var result = [];\n \
    \   for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "  let result: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  let\
    \ result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var i: number;\n    var j: number;\n    var result: number[] = [];\n\
    \    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if\
    \ (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n\
    }\n", "    var result: number[] = [];\n    var i: number;\n    var j: number;\n\
    \    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \   var result: number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n  \
    \      for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    var i: number;\n    var\
    \ j: number;\n    var k: number;\n    var l: number[];\n    var m: number[];\n\
    \    var n: number[];\n    var o: number[];\n    var p: number[];\n    var q:\
    \ number[];\n    var s: number[];\n    var t: number[];\n    var u: number[];\n\
    \    var v: number[];\n    var w: number[];\n    var x: number[];\n    var y:\
    \ number[];\n    var z: number[];\n    var a: number[];\n    var b: number[];\n\
    \    var c: number[];\n    var d: number[];\n    var e: number[];\n    var f:\
    \ number[];\n    var g: number[];\n    var h: number[];\n    var i: number[];\n\
    \    var j: number[];\n    var k: number[];\n    var l: number[];\n    var m:\
    \ number[];\n    var n: number[];\n    var o: number[];\n    var p: number[];\n\
    \    var q: number[];\n    var s: number[];\n    var t: number[];\n    var u:\
    \ number[];\n    var v: number[];\n    var w: number[];\n    var x: number[];\n\
    \    var y: number[];\n    var z: number[];\n    var a: number[];\n    var b:\
    \ number[];\n    var c: number[];\n    var d: number[];\n    var e: number[];\n\
    \    var f: number[];\n    var g: number[];\n    var h: number[];\n    var i:\
    \ number[];\n    var j: number[];\n    var k: number[];\n    var l: number[];\n\
    \    var m: number[];\n    var n: number[];\n    var o: number[];\n    var p:\
    \ number[];\n    var q: number[];\n    var s: number[];\n    var t: number[];\n\
    \    var u: number[];\n    var v: number[];\n    var w: number[];\n    var x:\
    \ number[];\n    var y: number[];\n    var z: number[];\n    var a: number[];\n\
    \    var b: number[];\n    var c: number[];\n    var d: number[];\n    var e:\
    \ number[];\n    var f: number[];\n    var g: number[];\n    var h: number[];\n\
    \    var i: number[];\n    var j: number[];\n    var k: number[];\n    var l:\
    \ number[];\n    var m: number[];\n    var n: number[];\n    var o: number[];\n\
    \    var p: number[];\n    var q: number[];\n    var s: number[];\n    var t:\
    \ number[];\n    var u: number[];\n    var v: number[];\n    var w: number[];\n\
    \    var x: number[];\n    var y: number[];\n    var z: number[];\n    var a:\
    \ number[];\n    var b: number[];\n    var c: number[];\n    var d: number[];\n\
    \    var e: number[];\n    var f: number", "    let result = [];\n    let lLen\
    \ = l1.length;\n    let ljLen = l2.length;\n    let i = 0;\n    let j = 0;\n \
    \   while (i < lLen && j < ljLen) {\n        if (l1[i] === l2[j]) {\n        \
    \    result.push(l1[i]);\n            i++;\n            j++;\n        } else if\
    \ (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[2,3,1]` and `[2,1,3]`.\n<|/ c\
    \ |>\n<| c |>\nYes, it does. Try it with `[2,3,1]` and `[2,1,3]`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `[2,3,1]` and `[2,1,3]`.\n<|/ c |>\n<| c\
    \ |>\nIt does. Try it with `[2,3,1]` and `[2,1,3]`.\n<|/ c |>\n<| c |>\nIt does.\
    \ Try it with `[2,3,1]` and `[2,1,3]`.\n<|/ c |>\n<| a |>\n<code>", "  let l:\
    \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  for\
    \ (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n     \
    \ if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n      }\n    }\n  }\n  return\
    \ l;\n}\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `[1,2,3,4,5,6,7,8,9,10]` and `[1,2,3,4,5,6,7,8,9,10,11]`\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3,4,5,6,7,8,9,10]` and `[1,2,3,4,5,6,7,8,9,10,11]`\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3,4,5,6,7,8,9,10]` and\
    \ `[1,2,3,4,5,6,7,8,9,10,11]`\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with\
    \ `[1,2,3,4,5,6,7,8,9,10]` and `[1,2,3,4,5,6,7,8,9,10,11]`\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try it with `[1,2,3,4,5,6,7,8,9,10]` and `[1,2,3,4,5,6,7,8,9,10,11]`\n\
    <|/ c |>\n<| a dscore=5 tags=arrays,javascript,algorithm |>\n<code>", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        let\
    \ found = false;\n        for (let j = 0; j < l2.length; j++) {\n            if\
    \ (l1[i] === l2[j]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  let l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  let result: number[] = [];\n  let lLen = l1.length;\n\
    \  let rLen = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j =\
    \ 0; j < rLen; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    var result:\
    \ number[] = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    var result: number[] = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    let result: number[] = [];\n    let hashMap = new Map<number, boolean>();\n\
    \    for (let i = 0; i < l1.length; i++) {\n        let val = l1[i];\n       \
    \ if (hashMap.has(val)) {\n            continue;\n        }\n        hashMap.set(val,\
    \ true);\n        result.push(val);\n    }\n    for (let i = 0; i < l2.length;\
    \ i++) {\n        let val = l2[i];\n        if (hashMap.has(val)) {\n        \
    \    continue;\n        }\n        hashMap.set(val, true);\n        result.push(val);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays\
    \ |>\n<code>", "    var i: number;\n    var j: number;\n    var result: number[]\
    \ = [];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "  var result = [];\n\
    \  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        let found = false;\n        for (let j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  let l: number[] =\
    \ [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n      }\n    }\n\
    \  }\n  return l;\n}\n", "    let result: number[] = [];\n    for (let i = 0;\
    \ i < l1.length; i++) {\n        let found = false;\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            result.push(l1[i]);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,javascript,typescript |>\n<| c |>\nThis solution does\
    \ not work for me. `common([1,2,3], [1,2,4])` returns `[1,2,3]` instead of `[2,3]`\n\
    <|/ c |>\n<| c |>\nIt works fine for me. `common([1,2,3], [1,2,4])` returns `[2,3]`\n\
    <|/ c |>\n<| c |>\nOh I see what happened. I was using your `common` function\
    \ but my array was `[1,2,3]` instead of `[1,2,3]`. Sorry about that.\n<|/ c |>\n\
    <| c |>\nNo worries, glad you figured it out!\n<|/ c |>\n<| a tags=arrays,javascript,typescript\
    \ |>\n<code>", "    var result: number[] = [];\n    for (var i = 0; i < l1.length;\
    \ i++) {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "  let result: number[]\
    \ = [];\n  let i: number;\n  let j: number;\n  for (i = 0; i < l1.length; i++)\
    \ {\n    for (j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n     \
    \   for (var j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                result.push(l1[i]);\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n", "  var result: number[] = [];\n \
    \ for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < Math.min(l1.length,\
    \ l2.length); i++) {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let l: number[] = [];\n    for (let\
    \ i = 0; i < l1.length; i++) {\n        let found = false;\n        for (let j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     found = true;\n                break;\n            }\n        }\n      \
    \  if (!found) {\n            l.push(l1[i]);\n        }\n    }\n    return l;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the lists.\n<|/ c\
    \ |>\n<| c |>\nIt does work if there are duplicates in the lists. I tested it\
    \ before posting it.\n<|/ c |>\n<| c |>\nIt doesn't work if there are duplicates\
    \ in the lists. I tested it before posting it.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are duplicates in the lists. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are duplicates in the lists. I tested\
    \ it before posting it.\n<|/ c |>\n<| a |>\n<code>", "    var result: number[]\
    \ = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "    const result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        const found: boolean = false;\n        for (let j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result.push(l1[i]);\n        }\n    }\n    return result;\n}\n", " \
    \   var result = [];\n    for (var i = 0; i < l1.length; i++) {\n        for (var\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       result.push(l1[i]);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  for (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    var result: number[] = [];\n\
    \    for (var i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var result: number[] = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,typescript\
    \ |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\n\
    var arr2 = [1,2,3,4,5,6,7,8,9,10];\n\nvar arr3 = arr1.filter(function(item){\n\
    \    return arr2.indexOf(item) == -1;\n});\n\nconsole.log(arr3);\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis solution doesn't work if `arr2` contains duplicates.\n\
    <|/ c |>\n<| c |>\nYes, it does. `indexOf` returns the index of the first occurrence\
    \ of the item in the array. `-1` means it isn't in the array. `filter` returns\
    \ all items that return `true` from the function passed to it.\n<|/ c |>\n<| c\
    \ |>\nThis solution doesn't work if `arr2` contains duplicates.\n<|/ c |>\n<|\
    \ a dscore=3 |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [1,2,3,4,5,6,7,8,9,10];\n\
    \nvar arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) == -1;\n\
    });\n\nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n\
    <| c |>\nThis solution doesn't work if `arr2` contains duplicates.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [1,2,3,4,5,6,7,8,9,10];\n\
    \nvar arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) == -1;\n\
    });\n\nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n\
    <| c |>\nThis solution doesn't work if `arr2` contains duplicates.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [1,2,3,4,5,6,7,8,9,10];\n\
    \nvar arr3 = arr1.filter(function(item){\n    return arr2.indexOf(item) == -1;\n\
    });\n\nconsole.log(arr3);\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n\
    <| a tags=arrays,javascript,type", "    var result: number[] = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}",
  "  let result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < l1.length; i++) {\n        let found\
    \ = false;\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                found = true;\n                break;\n      \
    \      }\n        }\n        if (!found) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
