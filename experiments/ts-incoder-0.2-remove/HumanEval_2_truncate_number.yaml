name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\nfunction\
  \ truncate_number(number: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["    const decimals = Math.floor(Math.log10(number));\n    const integer_part\
    \ = Math.floor(number / Math.pow(10, decimals));\n    return Math.trunc(integer_part)\
    \ * Math.pow(10, decimals);\n}\n", "\tlet decimals = 1;\n\tlet integer_part =\
    \ Math.floor(number);\n\tif (integer_part >= number) {\n\t\tdecimals = 0;\n\t\t\
    while (number >= 1) {\n\t\t\tnumber /= 10;\n\t\t\tdecimals++;\n\t\t}\n\t}\n\t\
    return { integer_part, decimals };\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\treturn decimal_part;\n}\n", "\t\
    let decimal_part = Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\
    \treturn decimal_part + integer_part;\n}\n", "\tlet decimals = 1;\n\tlet decimal_part\
    \ = number;\n\tlet integer_part = 0;\n\twhile (decimal_part > 1) {\n\t\tdecimal_part\
    \ = decimal_part / 10;\n\t\tinteger_part++;\n\t}\n\treturn integer_part * Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet whole_part\
    \ = number - decimal_part;\n\tlet decimals = Math.trunc(Math.log10(whole_part));\n\
    \treturn decimal_part + decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part\
    \ = 0;\n\t}\n\treturn decimal_part + integer_part;\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split(\".\")[1];\n    return Math.trunc(number).toString().split(\"\
    .\")[0] + \".\" + decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\treturn decimal_part;\n}\n", " \
    \   const decimals = Math.trunc(number).toString().length - 1;\n    return Math.trunc(number\
    \ * 10 ** decimals) / 10 ** decimals;\n}\n", "\tlet decimal_part = Math.floor(number\
    \ % 1);\n\tlet integer_part = Math.floor(number - decimal_part);\n\treturn integer_part\
    \ + decimal_part;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet whole_part\
    \ = number - decimal_part;\n\treturn decimal_part + Math.trunc(whole_part);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    const\
    \ integer_part = Math.floor(number);\n    return integer_part + decimals;\n}\n",
  "    let decimal_part = Math.floor(number % 1);\n    let integer_part = Math.floor(number\
    \ - decimal_part);\n    return integer_part + decimal_part;\n}\n", "  const decimals\
    \ = Math.trunc(number).toString().split(\".\")[1];\n  return decimals ? parseInt(decimals,\
    \ 10) : number;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part\
    \ = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\
    \t}\n\treturn decimal_part + integer_part;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    const integer_part = Math.floor(number);\n    return integer_part\
    \ + decimals;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.trunc(number * 10 ** decimals)/10 ** decimals;\n}\n",
  "    const decimals = Math.trunc(number).toString().length - 1;\n    return Math.trunc(number\
    \ * 10 ** decimals) / 10 ** decimals;\n}\n", "\tconst decimals = Math.trunc(number).toString().length\
    \ - 1;\n\treturn Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\twhile (decimal_part\
    \ > 1) {\n\t\tdecimal_part /= 10;\n\t\tdecimals++;\n\t}\n\treturn decimal_part;\n\
    }\n", "  const decimals = Math.trunc(number);\n  return Math.trunc(number) - decimals;\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimals\
    \ = 1;\n\tlet integer_part = 0;\n\twhile (number >= 1) {\n\t\tnumber /= 10;\n\t\
    \tinteger_part++;\n\t}\n\treturn Math.trunc(number * Math.pow(10, decimals)) /\
    \ Math.pow(10, decimals);\n}\n", "\tconst decimals = Math.floor(Math.log10(number));\n\
    \treturn Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    const integer_part\
    \ = Math.floor(number / Math.pow(10, decimals));\n    return Math.trunc(integer_part\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().length - 1;\n    return Math.floor(number *\
    \ Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number % 1);\n\tlet integer_part = Math.floor(number - decimal_part);\n\
    \treturn integer_part + decimal_part;\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part = number -\
    \ decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn\
    \ decimal_part + integer_part;\n}\n", "\tlet decimals = 1;\n\tlet decimal_part\
    \ = number;\n\tlet integer_part = 0;\n\n\twhile (decimal_part > 1) {\n\t\tdecimal_part\
    \ = decimal_part / 10;\n\t\tinteger_part++;\n\t}\n\n\treturn decimal_part * Math.pow(10,\
    \ integer_part);\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part\
    \ = number - decimal_part;\n\treturn decimal_part + integer_part;\n}\n", "\tlet\
    \ decimal_part = Math.floor(number % 1);\n\tlet integer_part = Math.floor(number\
    \ - decimal_part);\n\treturn integer_part + decimal_part;\n}\n", "    let decimals\
    \ = Math.floor(Math.log10(number));\n    let integer_part = Math.floor(number\
    \ / Math.pow(10, decimals));\n    return Math.floor(integer_part) * Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part\
    \ = number - decimal_part;\n\treturn decimal_part + integer_part;\n}\n", "\tlet\
    \ decimal_part = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\
    \tif (whole_part < 1) {\n\t\treturn 0;\n\t}\n\treturn decimal_part;\n}\n", "\t\
    let decimals = Math.floor(Math.log10(number));\n\tlet integer_part = Math.floor(number\
    \ / Math.pow(10, decimals));\n\treturn integer_part * Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n   \
    \ return number - decimals;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    const integer_part = Math.floor(number);\n    return integer_part\
    \ + decimals;\n}\n", "\tlet decimals = Math.floor(Math.log10(number));\n\tlet\
    \ integer_part = Math.floor(number / Math.pow(10, decimals));\n\tlet remainder\
    \ = number % Math.pow(10, decimals);\n\treturn integer_part + Math.pow(10, decimals\
    \ - decimals) * remainder;\n}\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\
    \tlet integer_part = 0;\n\n\tif (number < 0) {\n\t\tdecimals = -Math.floor(Math.log(Math.abs(number))\
    \ / Math.LN10);\n\t\tdecimal_part = Math.floor(Math.abs(number) * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n\t\tinteger_part = Math.floor(Math.abs(number)\
    \ * Math.pow(10, decimals - 1)) / Math.pow(10, decimals - 1);\n\t} else {\n\t\t\
    integer_part = Math.floor(number);\n\t}\n\n\treturn [integer_part, decimal_part];\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().length - 1;\n    return number - Math.floor(number);\n\
    }\n", "\tconst decimals = Math.trunc(number);\n\tconst integer_part = number -\
    \ decimals;\n\treturn integer_part;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part\
    \ = 0;\n\t}\n\treturn decimal_part + integer_part;\n}\n", "\tlet decimal_part\
    \ = Math.floor(number % 1);\n\tlet whole_part = Math.floor(number - decimal_part);\n\
    \tif (whole_part === 0) {\n\t\treturn 0;\n\t}\n\treturn decimal_part;\n}\n", "\t\
    const decimals = Math.floor(Math.log10(number));\n\tconst integer_part = Math.floor(number\
    \ / Math.pow(10, decimals));\n\treturn integer_part * Math.pow(10, decimals);\n\
    }\n", "\tlet decimals = 1;\n\tlet integer_part = 0;\n\tlet decimal_part = 0;\n\
    \twhile (number >= 1) {\n\t\tnumber = Math.floor(number / 10);\n\t\tinteger_part++;\n\
    \t}\n\twhile (number > 0) {\n\t\tnumber = Math.floor(number / 10);\n\t\tdecimal_part++;\n\
    \t}\n\treturn decimal_part * 10 + integer_part;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimal_part = Math.floor(number % 1);\n\tlet integer_part\
    \ = Math.floor(number - decimal_part);\n\tif (integer_part < 0) {\n\t\tinteger_part\
    \ = 0;\n\t}\n\treturn decimal_part + integer_part;\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().length - 1;\n    return Math.round(number *\
    \ Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split(\".\")[1];\n    return number - decimals;\n\
    }\n", "\tlet decimals = 1;\n\tlet integer_part = Math.floor(number);\n\twhile\
    \ (integer_part >= 10) {\n\t\tdecimals++;\n\t\tinteger_part = Math.floor(integer_part\
    \ / 10);\n\t}\n\treturn number - integer_part * 10 + decimals;\n}\n", "    const\
    \ decimals = Math.floor(Math.log10(number));\n    return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "    let decimal_part = Math.floor(number);\n\
    \    let integer_part = number - decimal_part;\n    return decimal_part;\n}\n",
  "    const decimals = Math.trunc(number);\n    return number - decimals;\n}\n",
  "    const decimals = Math.floor(Math.log10(number));\n    return Math.trunc(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimals =\
    \ 1;\n\tlet decimal_part = number;\n\twhile (decimal_part > 1) {\n\t\tdecimal_part\
    \ /= 10;\n\t\tdecimals++;\n\t}\n\treturn decimal_part;\n}\n", "\tlet decimals\
    \ = 1;\n\tlet decimal_part = number;\n\tlet whole_part = 0;\n\twhile (decimal_part\
    \ > 1) {\n\t\tdecimal_part /= 10;\n\t\twhole_part += 1;\n\t}\n\treturn {\n\t\t\
    whole_part,\n\t\tdecimals,\n\t};\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\treturn decimal_part + integer_part;\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split(\".\")[1];\n    return Math.trunc(number).toString().split(\"\
    .\")[0] + \".\" + decimals;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.floor(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimals = 1;\n\tlet integer_part = 0;\n\tlet decimal_part\
    \ = number;\n\twhile (decimal_part > 1) {\n\t\tdecimal_part = decimal_part / 10;\n\
    \t\tdecimals++;\n\t}\n\twhile (integer_part < decimal_part) {\n\t\tinteger_part\
    \ = integer_part * 10;\n\t}\n\treturn integer_part;\n}\n", "    const decimals\
    \ = Math.floor(Math.log10(number));\n    return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "    if (number < 0) {\n       \
    \ return -truncate_number(-number);\n    }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    if (decimals) {\n        return Math.trunc(number);\n    }\n    return integer;\n\
    }\n", "    const decimals = Math.trunc(number).toString().split(\".\")[1].length;\n\
    \    return Math.trunc(number).toString().split(\".\")[0].length - decimals;\n\
    }\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\twhile (decimal_part\
    \ > 1) {\n\t\tdecimal_part /= 10;\n\t\tdecimals++;\n\t}\n\treturn decimal_part;\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part = number -\
    \ decimal_part;\n\treturn decimal_part;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part\
    \ = 0;\n\t}\n\treturn decimal_part + integer_part;\n}\n", "    let decimals =\
    \ Math.floor(Math.log10(number));\n    let integer_part = Math.floor(number /\
    \ Math.pow(10, decimals));\n    return Math.floor(integer_part) * Math.pow(10,\
    \ decimals - decimals);\n}\n", "\tlet decimal_part = Math.floor(number % 1);\n\
    \tlet integer_part = Math.floor(number - decimal_part);\n\tif (integer_part <\
    \ 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn decimal_part + integer_part;\n}\n",
  "  const decimals = Math.trunc(number).toString().split('.')[1];\n  const decimals_length\
    \ = decimals.length;\n  return Math.trunc(number).toString().replace(\n    decimals_length\
    \ > 0 ? decimals_length : 0,\n    decimals_length\n  );\n}\n", "  const decimals\
    \ = Math.floor(Math.log10(number));\n  return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "\tconst decimals = Math.floor(Math.log10(number));\n\
    \tconst integer_part = Math.floor(number / Math.pow(10, decimals));\n\treturn\
    \ (number - integer_part * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.trunc(number\
    \ * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\treturn\
    \ decimal_part + integer_part;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return number - Math.floor(number).toFixed(decimals);\n}\n", "\tconst\
    \ decimal_part = Math.floor(number % 1);\n\tconst whole_part = Math.floor(number\
    \ - decimal_part);\n\treturn decimal_part + Math.trunc(whole_part);\n}\n", "\t\
    let decimal_part = Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\
    \tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn decimal_part +\
    \ integer_part;\n}\n", "    const [integer, decimal] = number.toFixed(1).split('.');\n\
    \    return parseInt(integer, 10) + decimal;\n}\n", "\tlet decimal_part = number\
    \ % 1;\n\tlet integer_part = Math.floor(number);\n\tif (decimal_part === 0) {\n\
    \t\treturn integer_part;\n\t}\n\treturn integer_part + decimal_part;\n}\n", "\t\
    let decimal_part = Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\
    \tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn decimal_part +\
    \ integer_part;\n}\n", "\tlet decimal_part = Math.floor(number % 1);\n\tlet integer_part\
    \ = Math.floor(number - decimal_part);\n\treturn integer_part + decimal_part;\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number % 1);\n\tlet whole_part = Math.floor(number - decimal_part);\n\
    \tif (whole_part === 0) {\n\t\treturn 0;\n\t}\n\treturn decimal_part;\n}\n", " \
    \   const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().length - 1;\n    return Math.trunc(number *\
    \ Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimals = 1;\n\
    \tlet decimal_part = number;\n\twhile (decimal_part > 1) {\n\t\tdecimals -= 1;\n\
    \t\tdecimal_part = decimal_part / 10;\n\t}\n\treturn decimal_part;\n}\n", "  \
    \  const decimals = Math.floor(Math.log10(number));\n    const integer_part =\
    \ number / Math.pow(10, decimals);\n    return integer_part * Math.pow(10, decimals\
    \ - 1);\n}\n", "    const [integer, decimals] = number.toFixed(2).split('.');\n\
    \    return parseInt(integer, 10);\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.floor(number) + decimals;\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "    const decimals = Math.trunc(number).toString().length - 1;\n    return Math.floor(number)\
    \ + decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part\
    \ = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\
    \t}\n\treturn decimal_part + integer_part;\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "  const fraction = number % 1;\n  const decimals = Math.floor(number);\n\
    \  return decimals > 0 ? decimals : fraction;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\treturn decimal_part + integer_part;\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.trunc(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\tif (whole_part\
    \ < 0) {\n\t\twhole_part += 1;\n\t}\n\treturn decimal_part;\n}\n", "    const\
    \ decimals = Math.floor(Math.log10(number));\n    return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "  const decimals = Math.floor(Math.log10(number));\n\
    \  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "  const decimals = Math.abs(number).toString().split('.')[1];\n  return\
    \ Math.trunc(number * 10 / Math.pow(10, decimals.length)) /\n      Math.pow(10,\
    \ decimals.length);\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part = number -\
    \ decimal_part;\n\treturn decimal_part + integer_part;\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return number - Math.floor(number) * Math.pow(10, decimals);\n}\n",
  "    const decimals = Math.trunc(number).toString().split(\".\")[1].length;\n  \
    \  return Math.trunc(number).toString().split(\".\")[0] + \".\" + decimals;\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "\tlet decimal_part = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\
    \tif (whole_part < 0) {\n\t\twhole_part += 1;\n\t}\n\treturn decimal_part;\n}\n",
  "\tlet decimals = 1;\n\tlet decimal_part = number;\n\tlet integer_part = 0;\n\n\t\
    while (decimal_part > 1) {\n\t\tdecimal_part = decimal_part / 10;\n\t\tinteger_part++;\n\
    \t}\n\n\treturn decimal_part;\n}\n", "\tlet decimals = 1;\n\tlet decimal_part\
    \ = number;\n\tlet integer_part = 0;\n\twhile (decimal_part > 0) {\n\t\tinteger_part++;\n\
    \t\tdecimal_part -= Math.floor(decimal_part);\n\t}\n\treturn integer_part + decimals;\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\
    \tif (whole_part >= 0.5) {\n\t\twhole_part -= 1;\n\t}\n\treturn decimal_part +\
    \ whole_part;\n}\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\twhile\
    \ (decimal_part > 1) {\n\t\tdecimal_part /= 10;\n\t\tdecimals++;\n\t}\n\treturn\
    \ decimal_part;\n}\n", "    const decimals = Math.trunc(number);\n    return number\
    \ - decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part\
    \ = number - decimal_part;\n\tif (integer_part < 0) {\n\t\tinteger_part = 0;\n\
    \t}\n\treturn decimal_part + integer_part;\n}\n", "\tlet decimals = 1;\n\tlet\
    \ integer_part = number;\n\tlet decimal_part = number % 1;\n\tif (decimal_part\
    \ < 0) {\n\t\tinteger_part = Math.floor(integer_part);\n\t\tdecimals++;\n\t}\n\
    \treturn { integer_part, decimal_part, decimals };\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "    let decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\
    \tif (whole_part >= 1) {\n\t\treturn whole_part;\n\t}\n\treturn decimal_part;\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.floor(number) + Math.trunc(number).toFixed(decimals);\n}\n", "    const\
    \ decimals = Math.floor(Math.log10(number));\n    return Math.round(number * Math.pow(10,\
    \ -decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part = Math.floor(number\
    \ % 1);\n\tlet whole_part = Math.floor(number - decimal_part);\n\treturn decimal_part\
    \ + whole_part;\n}\n", "\tconst decimals = Math.trunc(number).toString().split('.')[1];\n\
    \tconst integer = Math.trunc(number).toString().split('.')[0];\n\treturn [integer,\
    \ decimals].join('');\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet\
    \ integer_part = number - decimal_part;\n\tlet decimals = Math.trunc(Math.log10(Math.abs(number)));\n\
    \treturn decimal_part + decimals * Math.pow(10, -decimals);\n}\n", "    const\
    \ decimals = Math.trunc(number);\n    return number - decimals;\n}\n", "    const\
    \ [integer, decimal] = number.toString().split('.');\n    const [integerPart,\
    \ decimalPart] = integer.split('');\n    return parseInt(decimalPart, 10) + parseInt(decimal,\
    \ 10) / Math.pow(10, decimalPart.length);\n}\n", "    const decimals = Math.abs(number).toString().split('.')[1];\n\
    \    const decimals_length = decimals.length;\n    if (decimals_length === 0)\
    \ {\n        return 0;\n    }\n    return Math.trunc(number * Math.pow(10, decimals_length))\
    \ / Math.pow(10, decimals_length);\n}\n", "\tlet decimals = 1;\n\tlet integer_part\
    \ = 0;\n\tlet decimal_part = 0;\n\twhile (number >= 1) {\n\t\tnumber = Math.floor(number\
    \ / 10);\n\t\tdecimal_part++;\n\t}\n\twhile (number > 0) {\n\t\tnumber = Math.floor(number\
    \ / 10);\n\t\tinteger_part++;\n\t}\n\treturn {\n\t\tinteger_part,\n\t\tdecimal_part,\n\
    \t};\n}\n", "    const decimals = Math.floor(Math.log10(number));\n    return\
    \ Math.trunc(number * Math.pow(10, decimals - 1)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimals = 1;\n\tlet integer_part = number;\n\twhile (integer_part\
    \ >= 1) {\n\t\tinteger_part = Math.floor(integer_part);\n\t\tdecimals++;\n\t}\n\
    \treturn integer_part * Math.pow(10, decimals);\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n}\n", "    if (number\
    \ < 0) {\n        return -truncate_number(-number);\n    }\n    if (number < 1)\
    \ {\n        return 0;\n    }\n    if (number < 10) {\n        return number;\n\
    \    }\n    if (number < 100) {\n        return truncate_number(number / 10) +\
    \ '.' + number % 10;\n    }\n    if (number < 1000) {\n        return truncate_number(number\
    \ / 100) + '.' + number % 100;\n    }\n    if (number < 10000) {\n        return\
    \ truncate_number(number / 1000) + '.' + number % 1000;\n    }\n    if (number\
    \ < 100000) {\n        return truncate_number(number / 10000) + '.' + number %\
    \ 10000;\n    }\n    if (number < 1000000) {\n        return truncate_number(number\
    \ / 100000) + '.' + number % 100000;\n    }\n    if (number < 10000000) {\n  \
    \      return truncate_number(number / 1000000) + '.' + number % 1000000;\n  \
    \  }\n    if (number < 100000000) {\n        return truncate_number(number / 10000000)\
    \ + '.' + number % 10000000;\n    }\n    if (number < 1000000000) {\n        return\
    \ truncate_number(number / 100000000) + '.' + number % 1000000000;\n    }\n  \
    \  if (number < 10000000000) {\n        return truncate_number(number / 1000000000)\
    \ + '.' + number % 10000000000;\n    }\n    if (number < 100000000000) {\n   \
    \     return truncate_number(number / 100000000000) + '.' + number % 100000000000;\n\
    \    }\n    if (number < 1000000000000) {\n        return truncate_number(number\
    \ / 1000000000000) + '.' + number % 1000000000000;\n    }\n    if (number < 10000000000000)\
    \ {\n        return truncate_number(number / 10000000000000) + '.' + number %\
    \ 10000000000000;\n    }\n    if (number < 100000000000000) {\n        return\
    \ truncate_number(number / 100000000000000) + '.' + number % 100000000000000;\n\
    \    }\n    if (number < 1000000000000000) {\n        return truncate_number(number\
    \ / 1000000000000000) + '.' + number % 1000000000000000;\n    }\n    if (number\
    \ < 10000000000000000) {\n        return truncate_number(number / 10000000000000000)\
    \ + '.' + number % 10000000000000000;\n    }\n    if (number < 100000000000000000)\
    \ {\n        return truncate_number(number / 100000000000000000) + '.' + number\
    \ % 100000000000000000;\n    }\n    if (number < 1000000000000000000) {\n    \
    \    return truncate_number(number / 1000000000000000000) + '.' + number % 100000000000000000;\n\
    \    }\n    if (number < 10000000000000000000) {\n        return truncate_number(number\
    \ / 10000000000000000000) + '.' + number % 100000000000000000;\n    }\n    if\
    \ (number < 100000000000000000000) {\n        return truncate_number(number /\
    \ 100000000000000000000) + '.' + number % 100000000000000000;\n", "    const decimals\
    \ = Math.floor(Math.log10(number));\n    return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.floor(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "    const decimals = Math.trunc(number).toString().split(\"\
    .\")[1].length;\n    return Math.floor(number) + decimals;\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().length - 1;\n    return Math.floor(number *\
    \ Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\tif (integer_part\
    \ < 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn decimal_part + integer_part;\n\
    }\n", "\tlet decimal_part = Math.floor(number % 1);\n\tlet integer_part = Math.floor(number\
    \ - decimal_part);\n\treturn decimal_part + integer_part;\n}\n", "    const decimals\
    \ = Math.floor(Math.log10(number));\n    return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals = Math.abs(number).toString().split('.')[1];\n\
    \    const integer_part = Math.trunc(number);\n    return integer_part + (decimals\
    \ ? decimals.length : 0);\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.round(number * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimal_part = number % 1;\n\tlet integer_part = Math.floor(number);\n\
    \tif (decimal_part === 0 && integer_part === 0) {\n\t\treturn 0;\n\t}\n\treturn\
    \ integer_part;\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    const integer = Math.floor(number);\n    return integer + decimals;\n\
    }\n", "    const decimals = Math.abs(number).toString().split('.')[1];\n    return\
    \ Math.trunc(number * Math.pow(10, decimals.length - 1)) / Math.pow(10, decimals.length\
    \ - 1);\n}\n", "    let decimals = Math.floor(Math.log10(number));\n    return\
    \ Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "    if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal] =\
    \ number.toFixed(1).split('.');\n    return parseInt(decimal);\n}\n", "\tconst\
    \ decimals = Math.trunc(number).toString().length - 1;\n\treturn Math.round(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "    const decimals\
    \ = Math.abs(number).toString().split('.')[1];\n    const decimals_length = decimals.length;\n\
    \    return Math.trunc(number * Math.pow(10, decimals_length)) / Math.pow(10,\
    \ decimals_length);\n}\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\
    \tlet whole_part = 0;\n\twhile (decimal_part > 0) {\n\t\twhole_part += 1;\n\t\t\
    decimal_part = Math.floor(decimal_part / 10);\n\t}\n\treturn whole_part * Math.pow(10,\
    \ decimals - decimal_part);\n}\n", "  const decimals = Math.floor(Math.log10(number));\n\
    \  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ number - Math.floor(number);\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ number - Math.floor(number);\n}\n", "\tlet decimals = 1;\n\tlet decimal_part\
    \ = number;\n\tlet integer_part = 0;\n\twhile (decimal_part > 0) {\n\t\tdecimal_part\
    \ = Math.floor(decimal_part / 10);\n\t\tinteger_part++;\n\t}\n\treturn integer_part\
    \ * 10 + decimal_part;\n}\n", "\tconst decimals = Math.floor(Math.log10(number));\n\
    \tconst integer_part = Math.floor(number / Math.pow(10, decimals));\n\treturn\
    \ integer_part * Math.pow(10, decimals);\n}\n", "  const decimals = Math.floor(Math.log10(number));\n\
    \  return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ number - Math.floor(number);\n}\n", "\tconst decimal_part = Math.floor(number\
    \ % 1);\n\tconst whole_part = Math.floor(number - decimal_part);\n\treturn decimal_part\
    \ + Math.trunc(whole_part);\n}\n", "\tlet decimal_part = number % 1;\n\tlet integer_part\
    \ = Math.floor(number);\n\tif (decimal_part === 0) {\n\t\treturn integer_part;\n\
    \t} else {\n\t\treturn integer_part + decimal_part;\n\t}\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "    const decimals = Math.floor(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.floor(number) + decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\tlet decimals = Math.trunc(Math.log10(number));\n\
    \treturn decimal_part + decimals * Math.pow(10, -decimals);\n}\n", "\tlet decimals\
    \ = 1;\n\tlet decimal_part = number;\n\tlet integer_part = Math.floor(number);\n\
    \tif (integer_part > 0 && number - integer_part > 0.0000000001) {\n\t\tdecimals\
    \ = Math.floor(Math.log(number - integer_part) / Math.LN10);\n\t\tdecimal_part\
    \ = number - integer_part * Math.pow(10, decimals);\n\t}\n\treturn decimal_part;\n\
    }\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n   \
    \ return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "  const decimals = Math.trunc(number).toString().split(\".\")[1].length;\n  return\
    \ Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "\tlet decimals = 1;\n\tlet decimal_part = number;\n\tlet whole_part = 0;\n\twhile\
    \ (decimal_part > 0) {\n\t\twhole_part = Math.floor(decimal_part / 10);\n\t\t\
    decimal_part = decimal_part % 10;\n\t\tdecimals++;\n\t}\n\treturn whole_part *\
    \ Math.pow(10, decimals);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.trunc(number) / Math.pow(10, decimals);\n}\n", "\tlet\
    \ decimals = 1;\n\tlet whole_part = 0;\n\tlet decimal_part = 0;\n\tif (number\
    \ < 0) {\n\t\twhole_part = -number;\n\t\tdecimals = -decimals;\n\t} else {\n\t\
    \twhole_part = number;\n\t}\n\twhile (whole_part >= 1) {\n\t\tdecimal_part = whole_part\
    \ % 10;\n\t\twhole_part = Math.floor(whole_part / 10);\n\t\tif (decimal_part ===\
    \ 0 && whole_part !== 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn decimal_part *\
    \ Math.pow(10, decimals);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "    if (number < 0) {\n        return -truncate_number(-number);\n\
    \    }\n    if (number === 0) {\n        return 0;\n    }\n    if (number < 1)\
    \ {\n        return number;\n    }\n    const [integer, decimals] = Math.floor(number).toFixed(1).split('.');\n\
    \    if (decimals) {\n        return integer + '.' + decimals;\n    }\n    return\
    \ integer;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet whole_part\
    \ = number - decimal_part;\n\treturn decimal_part + Math.trunc(whole_part);\n\
    }\n", "\tlet decimal_part = Math.floor(number);\n\tlet integer_part = number -\
    \ decimal_part;\n\treturn decimal_part + integer_part;\n}\n", "\tlet decimals\
    \ = 1;\n\tlet integer_part = 0;\n\tlet decimal_part = 0;\n\twhile (number >= 1)\
    \ {\n\t\tnumber = Math.floor(number / 10);\n\t\tinteger_part++;\n\t}\n\twhile\
    \ (number > 0) {\n\t\tnumber = Math.floor(number / 10);\n\t\tdecimal_part++;\n\
    \t}\n\treturn decimal_part * Math.pow(10, decimal_part - integer_part + 1);\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimal_part\
    \ = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\treturn decimal_part\
    \ + Math.trunc(whole_part);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return number - Math.floor(number);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return number - Math.floor(number).toFixed(decimals);\n}\n", "   \
    \ const decimals = Math.trunc(number).toString().length - 1;\n    return number\
    \ - Math.floor(number);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.floor(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimals = 1;\n\tlet integer_part = number;\n\tlet\
    \ decimal_part = number % 1;\n\twhile (decimal_part > 1) {\n\t\tdecimals++;\n\t\
    \tdecimal_part = decimal_part / 10;\n\t}\n\treturn integer_part + decimal_part;\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.trunc(number) - decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet integer_part = number - decimal_part;\n\treturn decimal_part;\n}\n", "\t\
    const decimal_part = Math.floor(number);\n\tconst whole_part = number - decimal_part;\n\
    \tconst decimal_part_remainder = decimal_part % 1;\n\tconst whole_part_remainder\
    \ = whole_part % 1;\n\tconst whole_part_remainder_is_even = whole_part_remainder\
    \ === 0;\n\tconst decimal_part_is_even = decimal_part_remainder === 0;\n\tif (whole_part_remainder_is_even\
    \ || decimal_part_is_even) {\n\t\treturn whole_part_remainder ? whole_part_remainder\
    \ : decimal_part_remainder;\n\t}\n\treturn decimal_part;\n}\n", "    const decimals\
    \ = Math.floor(Math.log10(number));\n    return Math.round(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "\tconst fraction = number % 1;\n\
    \tconst whole = number - fraction;\n\treturn whole < 0 ? whole + 1 : whole;\n\
    }\n", "    const decimals = Math.floor(Math.log10(number));\n    return Math.round(number\
    \ * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n}\n", "    const [integerPart,\
    \ decimalPart] = number.toString().split('.');\n    return parseInt(integerPart);\n\
    }\n", "  const decimals = Math.trunc(number).toString().length - 1;\n  return\
    \ Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "  const decimals = Math.trunc(number).toString().length - 1;\n  const factor =\
    \ Math.pow(10, decimals);\n  return Math.round(number * factor) / factor;\n}\n",
  "    const decimals = Math.trunc(number).toString().length - 1;\n    return Math.trunc(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "\tlet decimals =\
    \ Math.floor(Math.log10(number));\n\tlet integer_part = Math.floor(number / Math.pow(10,\
    \ decimals));\n\treturn (number - integer_part * Math.pow(10, -decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimals = 1;\n\tlet decimal_part = number;\n\twhile\
    \ (decimal_part > 1) {\n\t\tdecimal_part /= 10;\n\t\tdecimals++;\n\t}\n\treturn\
    \ decimal_part;\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return number - decimals;\n}\n", "\tlet decimal_part = Math.floor(number);\n\
    \tlet whole_part = number - decimal_part;\n\treturn decimal_part + Math.trunc(whole_part);\n\
    }\n", "    const decimals = Math.trunc(number).toString().length - 1;\n    return\
    \ Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "\tlet decimal_part = Math.floor(number % 1);\n\tlet integer_part = Math.floor(number\
    \ - decimal_part);\n\treturn integer_part + decimal_part;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
