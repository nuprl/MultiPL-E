name: HumanEval_41_car_race_collision
language: humaneval_to_typescript.py
prompt: "//Imagine a road that's a perfectly straight infinitely long line.\n// n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n//\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  // each other.  All cars move in the same speed.  Two cars are said to collide\n\
  // when a car that's moving left to right hits a car that's moving right to left.\n\
  // However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n// in their trajectory as if they did not collide.\n// This function outputs\
  \ the number of such collisions.\nfunction car_race_collision(n: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n\
  \  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n\
  \  assert.deepEqual(candidate(10),100);\n}\n\ntest();"
completions: ["  // TODO: implement this function\n  return 0;\n}\n", "    //TODO\n\
    \    return 0;\n}\n", "  return n * (n - 1) / 2;\n}\n", "  // TODO: implement\
    \ this function\n  return 0;\n}\n", "  return n * (n - 1) / 2;\n}\n", "  let collisions\
    \ = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n \
    \     collisions++;\n    }\n  }\n  return collisions;\n}\n", "  let collisions\
    \ = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n \
    \     if (i < j) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n\
    }\n", "    return n * (n - 1) / 2;\n}\n", "    return n * (n - 1) / 2;\n}\n",
  "    return n * (n - 1) / 2;\n}\n", "  return n * (n - 1) / 2;\n}\n", "  return\
    \ n * (n - 1) / 2;\n}\n", "  // TODO: implement this function\n  return 0;\n}\n",
  "    return n * (n - 1) / 2;\n}\n", "  return n * (n - 1) / 2;\n}\n", "  return\
    \ n * (n - 1) / 2;\n}\n", "  if (n < 1) {\n    return 0;\n  }\n  return n - 1;\n\
    }\n", "  let collisions = 0;\n  let left = 0;\n  let right = n - 1;\n  while (left\
    \ < right) {\n    if (left === right) {\n      collisions++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return collisions;\n}\n", "  return n * (n - 1) / 2;\n}\n",
  "  return n * (n - 1) / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
