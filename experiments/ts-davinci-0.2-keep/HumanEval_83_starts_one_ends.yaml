completions:
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let dp: number[] = [1, 1];\n  for (let\
  \ i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n]\
  \ * 2;\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "    if (n === 1) {\n        return 1;\n    }\n    let count = 0;\n    for (let\
  \ i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
  \ count;\n}\n"
- "  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if\
  \ (n == 2) {\n    return 10;\n  }\n  let count = 10;\n  let i = 3;\n  while (i <=\
  \ n) {\n    count += 9 * Math.pow(10, i - 2);\n    i++;\n  }\n  return count;\n\
  }\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
  \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  return\
  \ 9 * Math.pow(10, n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return 9 * Math.pow(10, n - 1) + starts_one_ends(n\
  \ - 1);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 10;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    let count = 0;\n    for (let\
  \ i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
  \ count * 2;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  return\
  \ 9 * Math.pow(10, n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n <= 1) {\n    return 1;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
  \ - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
  \ count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count * 2;\n  }\n  return\
  \ count;\n}\n"
- "    if (n == 1) return 2;\n    if (n == 2) return 3;\n    return starts_one_ends(n\
  \ - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 9;\n  }\n  let\
  \ count = 9;\n  for (let i = 3; i <= n; i++) {\n    count = count * (11 - i);\n\
  \  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return\
  \ 10;\n    }\n    return 9 * Math.pow(10, n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n\nconsole.log(starts_one_ends(2));\nconsole.log(starts_one_ends(3));\n\
  console.log(starts_one_ends(4));\nconsole.log(starts_one_ends(5));\nconsole.log(starts_one_ends(6));\n\
  console.log(starts_one_ends(7));\nconsole.log(starts_one_ends(8));\nconsole.log(starts_one_ends(9));\n\
  console.log(starts_one_ends(10));\nconsole.log(starts_one_ends(11));\nconsole.log(starts_one_ends(12));\n\
  console.log(starts_one_ends(13));\nconsole.log(starts_one_ends(14));\nconsole.log(starts_one_ends(15));\n\
  console.log(starts_one_ends(16));\nconsole.log(starts_one_ends(17));\nconsole.log(starts_one_ends(18));\n\
  console.log(starts_one_ends(19));\nconsole.log(starts_one_ends(20));\nconsole.log(starts_one_ends(21));\n\
  console.log(starts_one_ends(22));\nconsole.log(starts_one_ends(23));\nconsole.log(starts_one_ends(24));\n\
  console.log(starts_one_ends(25));\nconsole.log(starts_one_ends(26));\nconsole.log(starts_one_ends(27));\n\
  console.log(starts_one_ends(28));\nconsole.log(starts_one_ends(29));\nconsole.log(starts_one_ends(30));\n\
  console.log(starts_one_ends(31));\nconsole.log(starts_one_ends(32));\nconsole.log(starts_one_ends(33));\n\
  console.log(starts_one_ends(34));\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 10;\n  }\n  let count = 1;\n  let d = 9;\n  for (let\
  \ i = 1; i < n; i++) {\n    count += d;\n    d *= 10;\n  }\n  return count * 2;\n\
  }\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
  \ count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count * 2;\n  }\n  return\
  \ count;\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 10;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(9, i - 1) * 9;\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  let count = 0;\n  let start = 1;\n  let\
  \ end = 1;\n  for (let i = 1; i < n; i++) {\n    start *= 10;\n    end = end * 10\
  \ + 1;\n  }\n  count += start;\n  count += end;\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return 9 * Math.pow(10, n - 1) + starts_one_ends(n\
  \ - 1);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ return 9 * Math.pow(10, n - 1);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n\
  \    }\n    return 9 * Math.pow(10, n - 1) + starts_one_ends(n - 1);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10,\
  \ i - 1);\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    return starts_one_ends(n - 1)\
  \ + 9 * Math.pow(10, n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return Math.pow(10, n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
  \ count = 3;\n  let i = 2;\n  while (i < n) {\n    count = count * 2;\n    i++;\n\
  \  }\n  return count;\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 10;\n  }\n  let count = 1;\n  let temp = 9;\n  for\
  \ (let i = 1; i < n; i++) {\n    count += temp;\n    temp *= 10 - i;\n  }\n  return\
  \ count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return\
  \ 10;\n    }\n    let count = 10;\n    let start = 10;\n    let end = 10;\n    for\
  \ (let i = 3; i <= n; i++) {\n        start = start * (9 - i + 2);\n        end\
  \ = end * (10 - i + 1);\n        count += start + end;\n    }\n    return count;\n\
  }\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return 10 * starts_one_ends(n - 1) - 9;\n\
  }\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n\nconsole.log(starts_one_ends(3));\nconsole.log(starts_one_ends(5));\n\
  console.log(starts_one_ends(7));\n"
- "    if (n == 1) return 2;\n    if (n == 2) return 4;\n    return starts_one_ends(n\
  \ - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ let count = 10;\n  let base = 9;\n  for (let i = 3; i <= n; i++) {\n    base *=\
  \ 10 - i + 1;\n    count += base;\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  let\
  \ count = 9;\n  for (let i = 1; i < n - 1; i++) {\n    count *= 10;\n  }\n  return\
  \ count * 2;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ return 9 * Math.pow(10, n - 1);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 10;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(9, i - 1);\n  }\n  return count * 2;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ return 9 * Math.pow(10, n - 1);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  let\
  \ count = 9;\n  for (let i = 2; i < n; i++) {\n    count *= 10 - i + 1;\n  }\n \
  \ return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  let start = 1;\n  let end = 1;\n  for (let i = 1; i < n; i++)\
  \ {\n    start *= 10;\n    end = end * 10 + 1;\n  }\n  count += start;\n  count\
  \ += end;\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if\
  \ (n === 3) {\n    return 5;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
  \ - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  return 9 * Math.pow(10, n - 1) + starts_one_ends(n\
  \ - 1);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "    let count = 0;\n    let start = 1;\n    let end = 1;\n    for (let i = 1; i\
  \ <= n; i++) {\n        count += start;\n        start = start * 10;\n        end\
  \ = end * 10 + 1;\n    }\n    return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 9;\n  }\n  return\
  \ 9 * Math.pow(10, n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n <= 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let\
  \ count = 1;\n  let start = 1;\n  let end = 1;\n  for (let i = 1; i < n; i++) {\n\
  \    start = start * 10;\n    end = end * 10 + 1;\n    count += start + end;\n \
  \ }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ let count = 10;\n  let base = 9;\n  for (let i = 3; i <= n; i++) {\n    count\
  \ += base * 9;\n    base *= 10;\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(2, i - 1);\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  } else {\n    return starts_one_ends(n - 1) +\
  \ 9 * Math.pow(10, n - 2);\n  }\n}\n"
- "    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return\
  \ 10;\n    }\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        count\
  \ += 9 * Math.pow(10, i - 1);\n    }\n    return count + 1;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(9, i -\
  \ 1) * 9;\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10,\
  \ i - 1);\n  }\n  return result;\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n"
- "    if (n === 1) return 2;\n    if (n === 2) return 4;\n    return starts_one_ends(n\
  \ - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n == 1) return 2;\n    if (n == 2) return 3;\n    return starts_one_ends(n\
  \ - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n == 1) return 2;\n    if (n == 2) return 4;\n    if (n == 3) return 8;\n\
  \    if (n == 4) return 16;\n    if (n == 5) return 32;\n    if (n == 6) return\
  \ 64;\n    if (n == 7) return 128;\n    if (n == 8) return 256;\n    if (n == 9)\
  \ return 512;\n    if (n == 10) return 1024;\n    if (n == 11) return 2048;\n  \
  \  if (n == 12) return 4096;\n    if (n == 13) return 8192;\n    if (n == 14) return\
  \ 16384;\n    if (n == 15) return 32768;\n    if (n == 16) return 65536;\n    if\
  \ (n == 17) return 131072;\n    if (n == 18) return 262144;\n    if (n == 19) return\
  \ 524288;\n    if (n == 20) return 1048576;\n    if (n == 21) return 2097152;\n\
  \    if (n == 22) return 4194304;\n    if (n == 23) return 8388608;\n    if (n ==\
  \ 24) return 16777216;\n    if (n == 25) return 33554432;\n    if (n == 26) return\
  \ 67108864;\n    if (n == 27) return 134217728;\n    if (n == 28) return 268435456;\n\
  \    if (n == 29) return 536870912;\n    if (n == 30) return 1073741824;\n    if\
  \ (n == 31) return 2147483648;\n    if (n == 32) return 4294967296;\n    if (n ==\
  \ 33) return 8589934592;\n    if (n == 34) return 17179869184;\n    if (n == 35)\
  \ return 34359738368;\n    if (n == 36) return 68719476736;\n    if (n == 37) return\
  \ 137438953472;\n    if (n == 38) return 274877906944;\n    if (n == 39) return\
  \ 549755813888;\n    if (n =="
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
  \ n; i++) {\n    count += Math.pow(9, i - 1);\n  }\n  return count * 2;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
  \ count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count * 2;\n  }\n  return\
  \ count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ let count = 10;\n  for (let i = 3; i <= n; i++) {\n    count += 9 * Math.pow(10,\
  \ i - 2);\n  }\n  return count;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    let sum = 0;\n    for (let i\
  \ = 1; i < n; i++) {\n        sum += Math.pow(10, i);\n    }\n    return sum * 2;\n\
  }\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 9;\n    }\n    let count = 9;\n    for (let i = 1; i < n - 1; i++) {\n       \
  \ count *= 10;\n    }\n    return count * 2;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
  \ i - 1);\n    }\n    return count;\n}\n"
- "  if (n == 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
  \ n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10,\
  \ i - 1);\n  }\n  return count;\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(9, i\
  \ - 1);\n  }\n  return count * 2;\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i == 1) {\n      count\
  \ += 1;\n    } else {\n      count += Math.pow(10, i - 1);\n    }\n  }\n  return\
  \ count;\n}\n"
- "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
  \ - 1);\n  }\n  return count;\n}\n"
- "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  return\
  \ 9 * Math.pow(10, n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
  \ return 9 * Math.pow(10, n - 2);\n}\n"
- "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return\
  \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
  \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"
- "  if (n === 1) {\n    return 2;\n  }\n  let count = 9;\n  for (let i = 1; i < n\
  \ - 1; i++) {\n    count *= 10;\n  }\n  return count * 2;\n}\n"
language: ts
name: HumanEval_83_starts_one_ends
prompt: '//Given a positive integer n, return the count of the numbers of n-digit

  // positive integers that start or end with 1.

  function starts_one_ends(n: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
