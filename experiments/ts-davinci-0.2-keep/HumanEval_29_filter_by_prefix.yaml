completions:
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(str => str.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(str => str.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(str => str.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(str => str.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '  return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(str => str.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
- '    return strings.filter(s => s.startsWith(prefix));

  }

  '
language: ts
name: HumanEval_29_filter_by_prefix
prompt: '//Filter an input list of strings only for ones that start with a given prefix.

  // >>> filter_by_prefix([], ''a'')

  // []

  // >>> filter_by_prefix([''abc'', ''bcd'', ''cde'', ''array''], ''a'')

  // [''abc'', ''array'']

  function filter_by_prefix(strings: string[], prefix: string): string[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
