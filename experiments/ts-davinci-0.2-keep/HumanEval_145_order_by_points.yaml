completions:
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n    let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n    return sumA - sumB;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    let sums = nums.map(num => {\n        let sum = 0;\n        let str = num.toString();\n\
  \        for (let i = 0; i < str.length; i++) {\n            sum += parseInt(str[i]);\n\
  \        }\n        return sum;\n    });\n    let result = [];\n    let min = Math.min(...sums);\n\
  \    while (result.length < nums.length) {\n        for (let i = 0; i < sums.length;\
  \ i++) {\n            if (sums[i] === min) {\n                result.push(nums[i]);\n\
  \                sums[i] = Infinity;\n            }\n        }\n        min = Math.min(...sums);\n\
  \    }\n    return result;\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + Number(num), 0);\n    const bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + Number(num), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = sumDigits(a);\n    const bSum\
  \ = sumDigits(b);\n    if (aSum === bSum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n\
  \    }\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        const bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum === bSum ? a - b : aSum\
  \ - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    let sum = 0;\n    let result: number[] = [];\n    let result2: number[] = [];\n\
  \    let result3: number[] = [];\n    let result4: number[] = [];\n    let result5:\
  \ number[] = [];\n    let result6: number[] = [];\n    let result7: number[] = [];\n\
  \    let result8: number[] = [];\n    let result9: number[] = [];\n    let result10:\
  \ number[] = [];\n    let result11: number[] = [];\n    let result12: number[] =\
  \ [];\n    let result13: number[] = [];\n    let result14: number[] = [];\n    let\
  \ result15: number[] = [];\n    let result16: number[] = [];\n    let result17:\
  \ number[] = [];\n    let result18: number[] = [];\n    let result19: number[] =\
  \ [];\n    let result20: number[] = [];\n    let result21: number[] = [];\n    let\
  \ result22: number[] = [];\n    let result23: number[] = [];\n    let result24:\
  \ number[] = [];\n    let result25: number[] = [];\n    let result26: number[] =\
  \ [];\n    let result27: number[] = [];\n    let result28: number[] = [];\n    let\
  \ result29: number[] = [];\n    let result30: number[] = [];\n    let result31:\
  \ number[] = [];\n    let result32: number[] = [];\n    let result33: number[] =\
  \ [];\n    let result34: number[] = [];\n    let result35: number[] = [];\n    let\
  \ result36: number[] = [];\n    let result37: number[] = [];\n    let result38:\
  \ number[] = [];\n    let result39: number[] = [];\n    let result40: number[] =\
  \ [];\n    let result41: number[] = [];\n    let result42: number[] = [];\n    let\
  \ result43: number[] = [];\n    let result44: number[] = [];\n    let result45:\
  \ number[] = [];\n    let result46: number[] = [];\n    let result47: number[] =\
  \ [];\n    let result48: number[] = [];\n    let result49: number[] = [];\n    let\
  \ result50: number[] = [];\n    let result51:"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    let sum = 0;\n    let arr = [];\n    for (let i = 0; i < nums.length; i++)\
  \ {\n        let num = nums[i];\n        while (num > 0) {\n            sum += num\
  \ % 10;\n            num = Math.floor(num / 10);\n        }\n        arr.push([sum,\
  \ i]);\n        sum = 0;\n    }\n    arr.sort(function (a, b) {\n        if (a[0]\
  \ === b[0]) {\n            return a[1] - b[1];\n        }\n        return a[0] -\
  \ b[0];\n    });\n    let result = [];\n    for (let i = 0; i < arr.length; i++)\
  \ {\n        result.push(nums[arr[i][1]]);\n    }\n    return result;\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum === bSum ? a - b : aSum\
  \ - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  let result: number[] = [];\n  let sum: number[] = [];\n  let temp: number[] =\
  \ [];\n  for (let i = 0; i < nums.length; i++) {\n    temp = nums[i].toString().split(\"\
  \");\n    let sumOfDigits = 0;\n    for (let j = 0; j < temp.length; j++) {\n  \
  \    sumOfDigits += parseInt(temp[j]);\n    }\n    sum.push(sumOfDigits);\n  }\n\
  \  for (let i = 0; i < sum.length; i++) {\n    let min = sum[i];\n    let index\
  \ = i;\n    for (let j = i + 1; j < sum.length; j++) {\n      if (sum[j] < min)\
  \ {\n        min = sum[j];\n        index = j;\n      }\n    }\n    let temp = sum[i];\n\
  \    sum[i] = sum[index];\n    sum[index] = temp;\n    temp = nums[i];\n    nums[i]\
  \ = nums[index];\n    nums[index] = temp;\n  }\n  return nums;\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "  const sum = (num: number) => {\n    let sum = 0;\n    while (num) {\n      sum\
  \ += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n\
  \  return nums.sort((a, b) => {\n    const aSum = sum(a);\n    const bSum = sum(b);\n\
  \    if (aSum === bSum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n   \
  \ }\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum,\
  \ n) => sum + +n, 0);\n    const bSum = b.toString().split('').reduce((sum, n) =>\
  \ sum + +n, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  let nums_sorted = nums.sort((a, b) => {\n    let a_sum = sum_digits(a);\n   \
  \ let b_sum = sum_digits(b);\n    if (a_sum === b_sum) {\n      return nums.indexOf(a)\
  \ - nums.indexOf(b);\n    }\n    return a_sum - b_sum;\n  });\n  return nums_sorted;\n\
  }\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    let result: number[] = [];\n    let numsMap: Map<number, number[]> = new Map();\n\
  \    for (let i = 0; i < nums.length; i++) {\n        let sum: number = 0;\n   \
  \     let num: number = nums[i];\n        while (num > 0) {\n            sum +=\
  \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (numsMap.has(sum))\
  \ {\n            numsMap.get(sum).push(nums[i]);\n        } else {\n           \
  \ numsMap.set(sum, [nums[i]]);\n        }\n    }\n    let keys: number[] = Array.from(numsMap.keys());\n\
  \    keys.sort((a, b) => a - b);\n    for (let i = 0; i < keys.length; i++) {\n\
  \        result = result.concat(numsMap.get(keys[i]));\n    }\n    return result;\n\
  }\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    let result: number[] = [];\n    let sumOfDigits: number[] = [];\n    let sum:\
  \ number = 0;\n    let index: number = 0;\n    let temp: number = 0;\n    let tempIndex:\
  \ number = 0;\n    for (let i: number = 0; i < nums.length; i++) {\n        sum\
  \ = 0;\n        temp = nums[i];\n        while (temp > 0) {\n            sum +=\
  \ temp % 10;\n            temp = Math.floor(temp / 10);\n        }\n        sumOfDigits.push(sum);\n\
  \    }\n    for (let i: number = 0; i < nums.length; i++) {\n        index = 0;\n\
  \        for (let j: number = 0; j < nums.length; j++) {\n            if (sumOfDigits[j]\
  \ < sumOfDigits[index]) {\n                index = j;\n            }\n        }\n\
  \        result.push(nums[index]);\n        sumOfDigits[index] = Number.MAX_VALUE;\n\
  \    }\n    return result;\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = sumDigits(a);\n        let\
  \ sumB = sumDigits(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a)\
  \ - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = sumDigits(a);\n        let\
  \ bSum = sumDigits(b);\n        if (aSum === bSum) {\n            return nums.indexOf(a)\
  \ - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n    const bSum = b.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n    let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum === bSum ? a - b : aSum - bSum;\n\
  \  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    let sum_of_digits = (n: number): number => {\n        let sum = 0;\n      \
  \  while (n > 0) {\n            sum += n % 10;\n            n = Math.floor(n / 10);\n\
  \        }\n        return sum;\n    };\n    let sums = nums.map(sum_of_digits);\n\
  \    let sorted_nums = nums.slice();\n    sorted_nums.sort((a, b) => {\n       \
  \ if (sums[a] < sums[b]) {\n            return -1;\n        } else if (sums[a] >\
  \ sums[b]) {\n            return 1;\n        } else {\n            return a - b;\n\
  \        }\n    });\n    return sorted_nums;\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + Number(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + Number(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    let bSum = b.toString().split('').reduce((acc, cur)\
  \ => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n\
  \        let aStr = a.toString();\n        let bStr = b.toString();\n        for\
  \ (let i = 0; i < aStr.length; i++) {\n            sumA += parseInt(aStr[i]);\n\
  \        }\n        for (let i = 0; i < bStr.length; i++) {\n            sumB +=\
  \ parseInt(bStr[i]);\n        }\n        if (sumA === sumB) {\n            return\
  \ a - b;\n        }\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a,\
  \ b) => +a + +b, 0);\n        let sumB = b.toString().split('').reduce((a, b) =>\
  \ +a + +b, 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((a,\
  \ b) => +a + +b, 0);\n    let sumB = b.toString().split('').reduce((a, b) => +a\
  \ + +b, 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum === bSum ? a - b : aSum\
  \ - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a\n      .toString()\n      .split(\"\
  \")\n      .reduce((acc, curr) => acc + parseInt(curr), 0);\n    const bSum = b\n\
  \      .toString()\n      .split(\"\")\n      .reduce((acc, curr) => acc + parseInt(curr),\
  \ 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return sumA - sumB;\n  });\n}\n"
- "    let sum_of_digits = (num: number): number => {\n        let sum = 0;\n    \
  \    while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num\
  \ / 10);\n        }\n        return sum;\n    };\n    let sums = nums.map(sum_of_digits);\n\
  \    let sorted_nums = [];\n    for (let i = 0; i < nums.length; i++) {\n      \
  \  let min_sum = Math.min(...sums);\n        let min_index = sums.indexOf(min_sum);\n\
  \        sorted_nums.push(nums[min_index]);\n        sums[min_index] = Infinity;\n\
  \    }\n    return sorted_nums;\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    let result: number[] = [];\n    let sum: number[] = [];\n    let sum_index:\
  \ number[] = [];\n    let index: number = 0;\n    let sum_num: number = 0;\n   \
  \ for (let i: number = 0; i < nums.length; i++) {\n        sum_num = 0;\n      \
  \  for (let j: number = 0; j < nums[i].toString().length; j++) {\n            sum_num\
  \ += parseInt(nums[i].toString()[j]);\n        }\n        sum.push(sum_num);\n \
  \       sum_index.push(i);\n    }\n    for (let i: number = 0; i < sum.length; i++)\
  \ {\n        for (let j: number = 0; j < sum.length; j++) {\n            if (sum[i]\
  \ < sum[j]) {\n                let temp: number = sum[i];\n                sum[i]\
  \ = sum[j];\n                sum[j] = temp;\n                let temp_index: number\
  \ = sum_index[i];\n                sum_index[i] = sum_index[j];\n              \
  \  sum_index[j] = temp_index;\n            }\n        }\n    }\n    for (let i:\
  \ number = 0; i < sum_index.length; i++) {\n        result.push(nums[sum_index[i]]);\n\
  \    }\n    return result;\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    let sum_of_digits = (n: number): number => {\n        let sum = 0;\n      \
  \  while (n > 0) {\n            sum += n % 10;\n            n = Math.floor(n / 10);\n\
  \        }\n        return sum;\n    };\n    return nums.sort((a, b) => {\n    \
  \    let a_sum = sum_of_digits(a);\n        let b_sum = sum_of_digits(b);\n    \
  \    if (a_sum === b_sum) {\n            return nums.indexOf(a) - nums.indexOf(b);\n\
  \        }\n        return a_sum - b_sum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    return sum_of_digits(a) - sum_of_digits(b);\n\
  \  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a,\
  \ b) => +a + +b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => +a\
  \ + +b, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum === bSum ? a - b : aSum - bSum;\n\
  \  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n    let sumB = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n    return sumA - sumB;\n  });\n}\n"
- "    const sumOfDigits = (num: number): number => {\n        return num.toString().split('').reduce((acc,\
  \ curr) => acc + parseInt(curr), 0);\n    };\n\n    return nums.sort((a, b) => {\n\
  \        const aSum = sumOfDigits(a);\n        const bSum = sumOfDigits(b);\n  \
  \      if (aSum === bSum) {\n            return nums.indexOf(a) - nums.indexOf(b);\n\
  \        }\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + +num, 0);\n    const bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + +num, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  if (nums.length === 0) {\n    return [];\n  }\n  const sums = nums.map(num =>\
  \ {\n    return Math.abs(num).toString().split(\"\").reduce((a, b) => {\n      return\
  \ parseInt(a) + parseInt(b);\n    });\n  });\n  const sorted = nums.sort((a, b)\
  \ => {\n    return sums[nums.indexOf(a)] - sums[nums.indexOf(b)];\n  });\n  return\
  \ sorted;\n}\n"
- "    return nums.sort((a, b) => {\n        return sum_of_digits(a) - sum_of_digits(b)\
  \ || nums.indexOf(a) - nums.indexOf(b);\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + +num, 0);\n    let bSum = b.toString().split('').reduce((sum, num)\
  \ => sum + +num, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA === sumB ? a - b : sumA\
  \ - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum === bSum ? a - b : aSum - bSum;\n\
  \  });\n}\n"
- "    return nums.map((num, index) => ({ num, index }))\n        .sort((a, b) =>\
  \ {\n            const sumA = sumDigits(a.num);\n            const sumB = sumDigits(b.num);\n\
  \            if (sumA === sumB) {\n                return a.index - b.index;\n \
  \           }\n            return sumA - sumB;\n        })\n        .map(({ num\
  \ }) => num);\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = 0;\n    let bSum = 0;\n    for (let\
  \ i = 0; i < a.toString().length; i++) {\n      aSum += parseInt(a.toString()[i]);\n\
  \    }\n    for (let i = 0; i < b.toString().length; i++) {\n      bSum += parseInt(b.toString()[i]);\n\
  \    }\n    if (aSum === bSum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n\
  \    } else {\n      return aSum - bSum;\n    }\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum === bSum ? a - b : aSum - bSum;\n\
  \  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    const result = nums.map((num, index) => ({ num, index }));\n    result.sort((a,\
  \ b) => {\n        const aSum = sumOfDigits(a.num);\n        const bSum = sumOfDigits(b.num);\n\
  \        if (aSum === bSum) {\n            return a.index - b.index;\n        }\n\
  \        return aSum - bSum;\n    });\n    return result.map(({ num }) => num);\n\
  }\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n    let bSum = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  const sums = nums.map(num => {\n    return {\n      num,\n      sum: num\n  \
  \      .toString()\n        .split(\"\")\n        .reduce((acc, curr) => acc + parseInt(curr),\
  \ 0)\n    };\n  });\n  return sums\n    .sort((a, b) => {\n      if (a.sum === b.sum)\
  \ {\n        return nums.indexOf(a.num) - nums.indexOf(b.num);\n      }\n      return\
  \ a.sum - b.sum;\n    })\n    .map(sum => sum.num);\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    let bSum = b.toString().split('').reduce((acc, cur)\
  \ => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = sumDigits(a);\n    const bSum\
  \ = sumDigits(b);\n    if (aSum === bSum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n\
  \    }\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let sumB = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        let sumB = b.toString().split('').reduce((a,\
  \ b) => parseInt(a) + parseInt(b), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ num) => acc + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ num) => acc + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum || nums.indexOf(a) - nums.indexOf(b);\n\
  \  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    let result: number[] = [];\n    let sum: number[] = [];\n    let index: number[]\
  \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        let sumOfDigits: number\
  \ = 0;\n        let num: number = nums[i];\n        while (num != 0) {\n       \
  \     sumOfDigits += num % 10;\n            num = Math.floor(num / 10);\n      \
  \  }\n        sum.push(sumOfDigits);\n        index.push(i);\n    }\n    for (let\
  \ i = 0; i < nums.length; i++) {\n        let min: number = Math.min(...sum);\n\
  \        let minIndex: number = sum.indexOf(min);\n        result.push(nums[index[minIndex]]);\n\
  \        sum.splice(minIndex, 1);\n        index.splice(minIndex, 1);\n    }\n \
  \   return result;\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + Number(cur), 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
  \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return aSum - bSum;\n  });\n}\n"
- "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        const bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
  \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n"
- "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    const sumB = b.toString().split('').reduce((acc,\
  \ cur) => acc + +cur, 0);\n    return sumA - sumB;\n  });\n}\n"
language: ts
name: HumanEval_145_order_by_points
prompt: '//Write a function which sorts the given list of integers

  // in ascending order according to the sum of their digits.

  // Note: if there are several items with similar sum of their digits,

  // order them based on their index in original list.

  // For example:

  // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]

  // >>> order_by_points([]) == []

  function order_by_points(nums: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
