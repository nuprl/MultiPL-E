name: HumanEval_68_pluck
language: humaneval_to_typescript.py
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let minEven = Number.MAX_SAFE_INTEGER;\n    let minEvenIndex =\
    \ -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ===\
    \ 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    let minEven = Number.MAX_SAFE_INTEGER;\n\
    \    let minEvenIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n            minEven = arr[i];\n\
    \            minEvenIndex = i;\n        }\n    }\n    return minEvenIndex ===\
    \ -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    let minEven = Infinity;\n    let minEvenIndex = -1;\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < minEven) {\n\
    \            minEven = arr[i];\n            minEvenIndex = i;\n        }\n   \
    \ }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let smallestEven = Infinity;\n    let smallestEvenIndex\
    \ = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ===\
    \ 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n        \
    \    smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex ===\
    \ -1 ? [] : [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(pluck([4, 2,\
    \ 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let minEven = Number.MAX_SAFE_INTEGER;\n    let minEvenIndex\
    \ = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ===\
    \ 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n\
    }\n", "    let minEven = Infinity;\n    let minEvenIndex = -1;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n\
    \    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n}\n\n\
    console.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    let minEven = Number.MAX_SAFE_INTEGER;\n\
    \    let minEvenIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n            minEven = arr[i];\n\
    \            minEvenIndex = i;\n        }\n    }\n    return minEvenIndex ===\
    \ -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    let evens: number[] = [];\n    let evensIndex: number[] = [];\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0) {\n            evens.push(arr[i]);\n            evensIndex.push(i);\n\
    \        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min: number = Math.min(...evens);\n    let minIndex: number = evensIndex[evens.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let minEven = Number.MAX_SAFE_INTEGER;\n    let minEvenIndex\
    \ = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ===\
    \ 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    let minEven = Infinity;\n    let\
    \ minEvenIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0 && arr[i] < minEven) {\n            minEven = arr[i];\n          \
    \  minEvenIndex = i;\n        }\n    }\n    return minEvenIndex === -1 ? [] :\
    \ [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    let evens: number[] = [];\n    let evenIndexes: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n           \
    \ evens.push(arr[i]);\n            evenIndexes.push(i);\n        }\n    }\n  \
    \  if (evens.length === 0) {\n        return [];\n    }\n    let smallestEven\
    \ = Math.min(...evens);\n    let smallestEvenIndex = evenIndexes[evens.indexOf(smallestEven)];\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(pluck([4, 2,\
    \ 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  let smallestEven = Infinity;\n  let smallestEvenIndex\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 &&\
    \ arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex\
    \ = i;\n    }\n  }\n  return smallestEvenIndex === -1 ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([4, 2, 3])); // [2, 1]\nconsole.log(pluck([1, 2, 3]));\
    \ // [2, 1]\nconsole.log(pluck([])); // []\nconsole.log(pluck([5, 0, 3, 0, 4,\
    \ 2])); // [0, 1]", "    let minEven: number = Number.MAX_SAFE_INTEGER;\n    let\
    \ minEvenIndex: number = -1;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] % 2 === 0 && arr[i] < minEven) {\n            minEven = arr[i];\n\
    \            minEvenIndex = i;\n        }\n    }\n    return minEvenIndex ===\
    \ -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = -1;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ minIndex === -1 ? [] : [min, minIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    if (arr.length === 0) {\n        return [];\n    }\n\
    \    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = -1;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    if (minIndex === -1) {\n        return [];\n    }\n    return [min, minIndex];\n\
    }\n", "    let minEven = Number.MAX_SAFE_INTEGER;\n    let minEvenIndex = -1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i]\
    \ < minEven) {\n            minEven = arr[i];\n            minEvenIndex = i;\n\
    \        }\n    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n\
    }\n", "    let minEven = Infinity;\n    let minEvenIndex = -1;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n\
    \    }\n    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n}\n\n\
    console.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    const evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    const min = Math.min(...evens);\n\
    \    const index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let\
    \ minEven = Infinity;\n    let minEvenIndex = -1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] % 2 === 0 && arr[i] < minEven) {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    return minEvenIndex\
    \ === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
