name: HumanEval_85_add
language: humaneval_to_typescript.py
prompt: "//Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
  \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
  \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0\
    \ && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2\
    \ == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n", "  return lst.filter((num, index) => num % 2 === 0 && index\
    \ % 2 !== 0).reduce((a, b) => a + b);\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  return lst.filter((x, i) => x % 2 === 0 && i % 2 !== 0).reduce((a, b) => a +\
    \ b, 0);\n}\n", "  return lst.filter((x, i) => x % 2 === 0 && i % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  return lst.filter((x, i) => x % 2\
    \ === 0 && i % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
