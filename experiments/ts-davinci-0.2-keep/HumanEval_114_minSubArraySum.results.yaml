language: ts
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5fdaciek.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5fdaciek.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '2

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj7s6kb5o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7s6kb5o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let currentSum = 0;\n \
    \ for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxtliwp_s.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738909
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfqf679hp.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqf679hp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '2

    -3

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphcl44seo.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphcl44seo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '2

    -3

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj7s6kb5o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7s6kb5o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmppzclre_9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppzclre_9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    Infinity

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum < 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_9i6z87h.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9i6z87h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmppzclre_9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppzclre_9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    Infinity

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum > 0) currSum = 0;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum > 0) currSum = 0;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum > 0) currSum = 0;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while (sum >=\
    \ 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n   \
    \   start++;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpua0h8rg4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpua0h8rg4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum < 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_9i6z87h.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9i6z87h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currSum);\n    if (currSum > 0) currSum = 0;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while (sum >=\
    \ minSum) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmp79twpbop.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79twpbop.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum,\
    \ currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptwdd7en1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwdd7en1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj7s6kb5o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7s6kb5o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj7s6kb5o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7s6kb5o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n    while (sum\
    \ >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj7s6kb5o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7s6kb5o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp36mqab6d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp36mqab6d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738910
