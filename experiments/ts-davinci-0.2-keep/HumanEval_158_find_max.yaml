name: HumanEval_158_find_max
language: humaneval_to_typescript.py
prompt: "//Write a function that accepts a list of strings.\n// The list contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"\
  string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
  \n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction find_max(words:\
  \ string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size >\
    \ max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i\
    \ = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "    let max_word\
    \ = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let\
    \ unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size > max_count)\
    \ {\n            max_count = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "    let max = 0;\n    let maxWord\
    \ = \"\";\n    for (let word of words) {\n        let unique = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) ===\
    \ word.lastIndexOf(word[i])) {\n                unique++;\n            }\n   \
    \     }\n        if (unique > max) {\n            max = unique;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\n", "    let max = 0;\n  \
    \  let maxWord = '';\n    for (let i = 0; i < words.length; i++) {\n        let\
    \ word = words[i];\n        let unique = 0;\n        for (let j = 0; j < word.length;\
    \ j++) {\n            let char = word[j];\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                unique++;\n            }\n  \
    \      }\n        if (unique > max) {\n            max = unique;\n           \
    \ maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", "    let max_word:\
    \ string = \"\";\n    let max_count: number = 0;\n    for (let word of words)\
    \ {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n", "    let max = 0;\n    let maxWord = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let uniqueChars = 0;\n       \
    \ for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n \
    \           if (word.indexOf(char) === word.lastIndexOf(char)) {\n           \
    \     uniqueChars++;\n            }\n        }\n        if (uniqueChars > max)\
    \ {\n            max = uniqueChars;\n            maxWord = word;\n        }\n\
    \    }\n    return maxWord;\n}\n", "    let max = 0;\n    let maxWord = \"\";\n\
    \    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let uniqueChars = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                uniqueChars++;\n            }\n        }\n        if (uniqueChars\
    \ > max) {\n            max = uniqueChars;\n            maxWord = word;\n    \
    \    }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"name\", \"of\"\
    , \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]));", "    let max_word: string = \"\";\n    let max_count:\
    \ number = 0;\n    for (let word of words) {\n        let count: number = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "    let max: string = \"\";\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word.indexOf(word[i]) === i) {\n                count++;\n       \
    \     }\n        }\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}\n", "  \
    \  let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n    \
    \    let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n          \
    \      unique++;\n            }\n        }\n        if (unique > max) {\n    \
    \        max = unique;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\n", "    let max_word: string = \"\";\n    let max_count: number\
    \ = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word: string\
    \ = words[i];\n        let count: number = 0;\n        for (let j = 0; j < word.length;\
    \ j++) {\n            let char: string = word[j];\n            if (word.indexOf(char)\
    \ === j) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "    let max_word = \"\";\n   \
    \ let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "    let max = 0;\n    let maxWord\
    \ = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let uniqueChars = [];\n        for (let j = 0; j < word.length; j++)\
    \ {\n            let char = word[j];\n            if (uniqueChars.indexOf(char)\
    \ === -1) {\n                uniqueChars.push(char);\n            }\n        }\n\
    \        if (uniqueChars.length > max) {\n            max = uniqueChars.length;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", " \
    \   let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n   \
    \     let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n     \
    \       if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n         \
    \       unique++;\n            }\n        }\n        if (unique > max) {\n   \
    \         max = unique;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\n", "  let max_word = \"\";\n  let max_count = 0;\n  for (let word\
    \ of words) {\n    let count = new Set(word).size;\n    if (count > max_count)\
    \ {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n", "    let max_word: string = \"\";\n    let max_count: number = 0;\n    for\
    \ (let word of words) {\n        let unique_chars: string[] = [];\n        for\
    \ (let char of word) {\n            if (unique_chars.indexOf(char) == -1) {\n\
    \                unique_chars.push(char);\n            }\n        }\n        if\
    \ (unique_chars.length > max_count) {\n            max_count = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "    let max = 0;\n\
    \    let maxWord = \"\";\n    for (let i = 0; i < words.length; i++) {\n     \
    \   let word = words[i];\n        let unique = 0;\n        for (let j = 0; j <\
    \ word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                unique++;\n            }\n  \
    \      }\n        if (unique > max) {\n            max = unique;\n           \
    \ maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", "  let max = 0;\n\
    \  let maxWord = \"\";\n  for (let word of words) {\n    let uniqueChars = new\
    \ Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
