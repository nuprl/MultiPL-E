name: HumanEval_111_histogram
language: humaneval_to_typescript.py
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n//\
  \ histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
  \ string): {[key: string]: number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["    const result: {[key: string]: number} = {};\n    const letters\
    \ = test.split(' ');\n    for (const letter of letters) {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    const hist: {[key: string]:\
    \ number} = {};\n    test.split(' ').forEach(letter => {\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    });\n    const max = Math.max(...Object.values(hist));\n\
    \    const result: {[key: string]: number} = {};\n    Object.keys(hist).forEach(key\
    \ => {\n        if (hist[key] === max) {\n            result[key] = hist[key];\n\
    \        }\n    });\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(' ');\n    for (let letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(' ');\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n", "    const result: {[key: string]: number} = {};\n\
    \    const letters = test.split(' ');\n    for (const letter of letters) {\n \
    \       if (result[letter]) {\n            result[letter]++;\n        } else {\n\
    \            result[letter] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split('\
    \ ');\n    for (let letter of letters) {\n        if (result[letter]) {\n    \
    \        result[letter]++;\n        } else {\n            result[letter] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let array = test.split(' ');\n    let max = 0;\n    for (let\
    \ i = 0; i < array.length; i++) {\n        if (result[array[i]]) {\n         \
    \   result[array[i]]++;\n        } else {\n            result[array[i]] = 1;\n\
    \        }\n        if (result[array[i]] > max) {\n            max = result[array[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split('\
    \ ');\n    letters.forEach(letter => {\n        if (result[letter]) {\n      \
    \      result[letter]++;\n        } else {\n            result[letter] = 1;\n\
    \        }\n    });\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let testArray: string[] = test.split(' ');\n    let max:\
    \ number = 0;\n    for (let i = 0; i < testArray.length; i++) {\n        if (result[testArray[i]])\
    \ {\n            result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n        if (result[testArray[i]] > max) {\n            max\
    \ = result[testArray[i]];\n        }\n    }\n    for (let key in result) {\n \
    \       if (result[key] !== max) {\n            delete result[key];\n        }\n\
    \    }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    if (test.length > 0) {\n        let arr: string[] = test.split(' ');\n  \
    \      let max: number = 0;\n        for (let i: number = 0; i < arr.length; i++)\
    \ {\n            if (result[arr[i]]) {\n                result[arr[i]]++;\n  \
    \          } else {\n                result[arr[i]] = 1;\n            }\n    \
    \        if (result[arr[i]] > max) {\n                max = result[arr[i]];\n\
    \            }\n        }\n        for (let key in result) {\n            if (result[key]\
    \ < max) {\n                delete result[key];\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let arr: string[] = test.split(' ');\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]] === undefined) {\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n    }\n  \
    \  return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters: string[] = test.split(' ');\n    let max: number = 0;\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter]++;\n  \
    \      }\n        if (result[letter] > max) {\n            max = result[letter];\n\
    \        }\n    }\n    for (let letter in result) {\n        if (result[letter]\
    \ !== max) {\n            delete result[letter];\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let arr:\
    \ string[] = test.split(' ');\n    for (let i: number = 0; i < arr.length; i++)\
    \ {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n        } else\
    \ {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "  let result: {[key: string]: number} = {};\n  let testArr = test.split(' ');\n\
    \  let max = 0;\n  for (let i = 0; i < testArr.length; i++) {\n    if (result[testArr[i]])\
    \ {\n      result[testArr[i]]++;\n    } else {\n      result[testArr[i]] = 1;\n\
    \    }\n    if (result[testArr[i]] > max) {\n      max = result[testArr[i]];\n\
    \    }\n  }\n  for (let key in result) {\n    if (result[key] < max) {\n     \
    \ delete result[key];\n    }\n  }\n  return result;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let letters: string[] = test.split(' ');\n    for\
    \ (let letter of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(' ');\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let letters: string[] = test.split(' ');\n    let max: number = 0;\n    for\
    \ (let letter of letters) {\n        if (result[letter] === undefined) {\n   \
    \         result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n        if (result[letter] > max) {\n            max = result[letter];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] !==\
    \ max) {\n            delete result[key];\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let arr = test.split('\
    \ ');\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result = {};\n  \
    \  let arr = test.split(' ');\n    let max = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(' ');\n    for (let i\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
