completions:
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n     \
  \           min_diff = diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (distance < closest_distance) {\n             \
  \   closest_distance = distance;\n                closest = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_diff_pair: [number, number] =\
  \ [0, 0];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n           \
  \ }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff) {\n \
  \               closest_diff = diff;\n                closest_pair = [numbers[i],\
  \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    if (numbers.length < 2) {\n        throw new Error(\"List must have at least\
  \ two elements\");\n    }\n    let min_diff = Math.abs(numbers[0] - numbers[1]);\n\
  \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length\
  \ - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n        \
  \    let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
  \ {\n                min_diff = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return min_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n  \
  \      for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n           \
  \ }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_diff_pair: [number, number] =\
  \ [0, 0];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n           \
  \ }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 1; i < numbers.length - 1; i++) {\n        let\
  \ diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n\
  \            min_diff = diff;\n            min_pair = [numbers[i], numbers[i + 1]];\n\
  \        }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "  let closest_pair: [number, number] = [numbers[0], numbers[1]];\n  let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n      if (distance < closest_distance) {\n        closest_distance\
  \ = distance;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n\
  \  }\n  return closest_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n     \
  \           min_diff = diff;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] -\
  \ numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n  \
  \      for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n           \
  \ }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (distance < closest_distance) {\n             \
  \   closest_distance = distance;\n                closest = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_numbers = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_numbers = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return min_numbers;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_elements = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_elements = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return min_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_difference = Math.abs(numbers[0] - numbers[1]);\n    let closest_numbers\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n            if (difference < closest_difference)\
  \ {\n                closest_difference = difference;\n                closest_numbers\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_numbers;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "  let min_diff: number = Number.MAX_VALUE;\n  let min_pair: [number, number] =\
  \ [0, 0];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1;\
  \ j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n\
  \      if (diff < min_diff) {\n        min_diff = diff;\n        min_pair = [numbers[i],\
  \ numbers[j]];\n      }\n    }\n  }\n  return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
  \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "  let closest_elements: [number, number] = [numbers[0], numbers[1]];\n  let closest_difference:\
  \ number = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n      if (difference < closest_difference)\
  \ {\n        closest_difference = difference;\n        closest_elements = [numbers[i],\
  \ numbers[j]];\n      }\n    }\n  }\n  return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_numbers = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_numbers = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return min_numbers;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return result;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (distance < closest_distance) {\n             \
  \   closest_distance = distance;\n                closest = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let min_diff\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n\
  \                min_diff = diff;\n                closest = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_difference = Number.MAX_VALUE;\n    let closest_pair: [number,\
  \ number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (difference < closest_difference) {\n         \
  \       closest_difference = difference;\n                closest_pair = [numbers[i],\
  \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "  let closest_elements: [number, number] = [numbers[0], numbers[1]];\n  let closest_difference:\
  \ number = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n      if (difference < closest_difference)\
  \ {\n        closest_elements = [numbers[i], numbers[j]];\n        closest_difference\
  \ = difference;\n      }\n    }\n  }\n  return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "  let closest_diff = Number.MAX_VALUE;\n  let closest_pair: [number, number] =\
  \ [0, 0];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1;\
  \ j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n\
  \      if (diff < closest_diff) {\n        closest_diff = diff;\n        closest_pair\
  \ = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let closest_elements = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_elements = [numbers[i], numbers[j]];\n            \
  \    closest_distance = distance;\n            }\n        }\n    }\n    return closest_elements;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let smallestDifference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ smallestDifference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               smallestDifference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let min_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < min_distance)\
  \ {\n                min_distance = distance;\n                closest = [numbers[i],\
  \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest_diff = diff;\n                closest_pair = [numbers[i],\
  \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    if (numbers.length < 2) {\n        throw new Error(\"List must have at least\
  \ two elements\");\n    }\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
  \    let closest_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest_diff = diff;\n                closest_pair = [numbers[i],\
  \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest_difference = difference;\n    \
  \            closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return closest_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ smallest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (difference < smallest_difference) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                smallest_difference = difference;\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "  let closest_pair: [number, number] = [numbers[0], numbers[1]];\n  let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n      if (distance < closest_distance) {\n        closest_distance\
  \ = distance;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n\
  \  }\n  return closest_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let closest_pair: [number, number] =\
  \ [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j =\
  \ i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return closest_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest_distance)\
  \ {\n                closest_elements = [numbers[i], numbers[j]];\n            \
  \    closest_distance = Math.abs(numbers[i] - numbers[j]);\n            }\n    \
  \    }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_diff_pair: [number, number] =\
  \ [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j =\
  \ i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n           \
  \ }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
  \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_elements = [numbers[i], numbers[j]];\n            \
  \    closest_distance = distance;\n            }\n        }\n    }\n    return closest_elements;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n         \
  \       min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n    let minDiffPair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n\
  \                minDiffPair = [numbers[i], numbers[j]];\n            }\n      \
  \  }\n    }\n    return minDiffPair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest_difference = difference;\n    \
  \            closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return closest_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
  \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
  \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
  \        }\n    }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest_difference = difference;\n    \
  \            closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return closest_pair;\n}\n"
- "    let closest = [numbers[0], numbers[1]];\n    let min_diff = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                closest = [numbers[i], numbers[j]];\n            }\n  \
  \      }\n    }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let closest_difference = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n            if (difference < closest_difference)\
  \ {\n                closest_difference = difference;\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest_difference = difference;\n    \
  \            closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return closest_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                result = [numbers[i], numbers[j]];\n            }\n   \
  \     }\n    }\n    return result;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
  \ < min_diff) {\n                min_diff = Math.abs(numbers[i] - numbers[j]);\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    if (numbers.length < 2) {\n        throw new Error(\"List must have at least\
  \ two elements\");\n    }\n    let closest_pair: [number, number] = [numbers[0],\
  \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
  \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j <\
  \ numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_distance\
  \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n      \
  \      }\n        }\n    }\n    return closest_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n    \
  \        if (difference < closest_difference) {\n                closest_difference\
  \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] -\
  \ numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n\
  \                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_difference = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            const difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n            if (difference < closest_difference)\
  \ {\n                closest_difference = difference;\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_distance = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let distance\
  \ = Math.abs(numbers[i] - numbers[j]);\n            if (distance < min_distance)\
  \ {\n                min_distance = distance;\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "  let closest: [number, number] = [numbers[0], numbers[1]];\n  let closest_diff\
  \ = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n      if (diff < closest_diff) {\n        closest = [numbers[i],\
  \ numbers[j]];\n        closest_diff = diff;\n      }\n    }\n  }\n  return closest;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for\
  \ (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
  \ - numbers[j]) < min_diff) {\n                min_diff = Math.abs(numbers[i] -\
  \ numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n         \
  \   }\n        }\n    }\n    return min_pair;\n}\n"
- "    let closest_difference = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair\
  \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let difference\
  \ = Math.abs(numbers[i] - numbers[j]);\n            if (difference < closest_difference)\
  \ {\n                closest_difference = difference;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n     \
  \           min_diff = diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Infinity;\n    let min_pair: [number, number] = [0, 0];\n  \
  \  for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j\
  \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n     \
  \           min_diff = diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let [min, max] = [numbers[0], numbers[1]];\n    let min_diff = Math.abs(min\
  \ - max);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j =\
  \ i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min = numbers[i];\n                max = numbers[j];\n\
  \            }\n        }\n    }\n    return [min, max];\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair =\
  \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
  \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
  \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n     \
  \           min_diff = diff;\n                min_diff_pair = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return min_diff_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest_difference = difference;\n    \
  \            closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
  \    }\n    return closest_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
  \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest_distance = distance;\n                closest_pair\
  \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
  }\n"
- "    let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
  \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (distance < closest_distance) {\n             \
  \   closest_distance = distance;\n                closest = [numbers[i], numbers[j]];\n\
  \            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let closest_elements: [number, number] = [numbers[0], numbers[1]];\n    let\
  \ closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
  \ j++) {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (distance < closest_distance) {\n                closest_elements\
  \ = [numbers[i], numbers[j]];\n                closest_distance = distance;\n  \
  \          }\n        }\n    }\n    return closest_elements;\n}\n"
- "    let min_diff = Number.MAX_VALUE;\n    let min_pair: [number, number] = [0,\
  \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
  \ 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
  \            if (diff < min_diff) {\n                min_diff = diff;\n        \
  \        min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
  \    return min_pair;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let\
  \ distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
  \ {\n                closest = [numbers[i], numbers[j]];\n                closest_distance\
  \ = distance;\n            }\n        }\n    }\n    return closest;\n}\n"
- "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
  \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const\
  \ difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference <\
  \ closest_difference) {\n                closest = [numbers[i], numbers[j]];\n \
  \               closest_difference = difference;\n            }\n        }\n   \
  \ }\n    return closest;\n}\n"
- "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
  \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
  \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
  \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff =\
  \ diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n \
  \       }\n    }\n    return min_pair;\n}\n"
language: ts
name: HumanEval_20_find_closest_elements
prompt: '//From a supplied list of numbers (of length at least two) select and return
  two that are the closest to each

  // other and return them in order (smaller number, larger number).

  // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])

  // (2.0, 2.2)

  // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])

  // (2.0, 2.0)

  function find_closest_elements(numbers: number[]): [number, number] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
