name: HumanEval_69_search
language: humaneval_to_typescript.py
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5,\
  \ 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3,\
  \ 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2,\
  \ 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6,\
  \ 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2,\
  \ 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n\
  \  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n\
  \  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10,\
  \ 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4,\
  \ 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10,\
  \ 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6,\
  \ 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6,\
  \ 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["    let result: number = -1;\n    let obj: { [key: number]: number\
    \ } = {};\n    lst.forEach(num => {\n        if (obj[num]) {\n            obj[num]++;\n\
    \        } else {\n            obj[num] = 1;\n        }\n    });\n    for (let\
    \ key in obj) {\n        if (obj[key] >= Number(key) && Number(key) > result)\
    \ {\n            result = Number(key);\n        }\n    }\n    return result;\n\
    }\n", "    let freq: number[] = [];\n    let max: number = 0;\n    let result:\
    \ number = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]\
    \ == undefined) {\n            freq[lst[i]] = 1;\n        } else {\n         \
    \   freq[lst[i]]++;\n        }\n        if (freq[lst[i]] >= lst[i] && lst[i] >\
    \ max) {\n            max = lst[i];\n            result = max;\n        }\n  \
    \  }\n    return result;\n}\n", "    let max = Math.max(...lst);\n    let count\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max)\
    \ {\n            count++;\n        }\n    }\n    return count >= max ? max : -1;\n\
    }\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));", "    let freq = {};\n\
    \    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n     \
    \   if (freq[num]) {\n            freq[num]++;\n        } else {\n           \
    \ freq[num] = 1;\n        }\n    }\n    let max = -1;\n    for (let key in freq)\
    \ {\n        if (freq[key] >= key && key > max) {\n            max = key;\n  \
    \      }\n    }\n    return max;\n}\n", "    let max = -1;\n    let maxCount =\
    \ 0;\n    let count = 0;\n    let current = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (current != lst[i]) {\n            if (count >= current &&\
    \ current > max) {\n                max = current;\n                maxCount =\
    \ count;\n            }\n            current = lst[i];\n            count = 1;\n\
    \        } else {\n            count++;\n        }\n    }\n    if (count >= current\
    \ && current > max) {\n        max = current;\n        maxCount = count;\n   \
    \ }\n    return maxCount >= max ? max : -1;\n}\n\nconsole.log(search([4, 1, 2,\
    \ 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
    \ 5, 4, 4, 4]));", "    let max = -1;\n    let freq = 0;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n", "    let freq = {};\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n   \
    \         freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n \
    \       }\n    }\n    let max = -1;\n    for (let key in freq) {\n        if (freq[key]\
    \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = 0;\n    let count = 0;\n    let result = -1;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n \
    \   if (count >= max) {\n        result = max;\n    }\n    return result;\n}\n\
    \nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));", "    let freq = {};\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n   \
    \         freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n \
    \       }\n    }\n    let max = -1;\n    for (let key in freq) {\n        if (freq[key]\
    \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return\
    \ max;\n}\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n", "    let\
    \ max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    return count >= max ? max : -1;\n}\nconsole.log(search([4, 1, 2, 2, 3,\
    \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
    \ 5, 4, 4, 4]));\n", "    let max = -1;\n    let freq = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j <\
    \ lst.length; j++) {\n            if (lst[i] == lst[j]) {\n                count++;\n\
    \            }\n        }\n        if (lst[i] > max && count >= lst[i]) {\n  \
    \          max = lst[i];\n            freq = count;\n        }\n    }\n    return\
    \ max;\n}\n", "    let map: Map<number, number> = new Map();\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let [key, value] of map) {\n   \
    \     if (key <= value && key > max) {\n            max = key;\n        }\n  \
    \  }\n    return max;\n}\n", "    let max = -1;\n    let freq = {};\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
    \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n",
  "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
    \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] =\
    \ 1;\n        }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n", "    let result = -1;\n\
    \    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i]\
    \ === lst[j]) {\n                count++;\n            }\n        }\n        if\
    \ (count >= lst[i] && count > max) {\n            max = count;\n            result\
    \ = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([4,\
    \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
    \ 5, 4, 4, 4]));", "    let max = -1;\n    let maxFreq = 0;\n    let freq = {};\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n   \
    \         freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]\
    \ >= lst[i] && lst[i] > maxFreq) {\n            max = lst[i];\n            maxFreq\
    \ = freq[lst[i]];\n        }\n    }\n    return max;\n}\n", "    let freq = {}\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n   \
    \         freq[lst[i]]++\n        } else {\n            freq[lst[i]] = 1\n   \
    \     }\n    }\n    let max = -1\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max = lst[i]\n\
    \        }\n    }\n    return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\n\
    console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4,\
    \ 4, 4]))", "    let max = Math.max(...lst);\n    let count = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n\
    \        }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n\
    \        return -1;\n    }\n}\n", "    let max = -1;\n    let obj = {};\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (obj[lst[i]]) {\n           \
    \ obj[lst[i]]++;\n        } else {\n            obj[lst[i]] = 1;\n        }\n\
    \    }\n    for (let key in obj) {\n        if (obj[key] >= key && key > max)\
    \ {\n            max = key;\n        }\n    }\n    return max;\n}\n", "    let\
    \ max = Math.max(...lst);\n    for (let i = max; i > 0; i--) {\n        if (lst.filter(x\
    \ => x === i).length >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
