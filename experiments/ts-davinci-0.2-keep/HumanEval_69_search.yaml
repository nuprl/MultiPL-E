completions:
- "    let result: number = -1;\n    let obj: { [key: number]: number } = {};\n  \
  \  lst.forEach(num => {\n        if (obj[num]) {\n            obj[num]++;\n    \
  \    } else {\n            obj[num] = 1;\n        }\n    });\n    for (let key in\
  \ obj) {\n        if (obj[key] >= Number(key) && Number(key) > result) {\n     \
  \       result = Number(key);\n        }\n    }\n    return result;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    let result: number\
  \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] ==\
  \ undefined) {\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n\
  \        }\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
  \ = lst[i];\n            result = max;\n        }\n    }\n    return result;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    return count >= max ? max : -1;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4,\
  \ 4, 4]));"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        let num\
  \ = lst[i];\n        if (freq[num]) {\n            freq[num]++;\n        } else\
  \ {\n            freq[num] = 1;\n        }\n    }\n    let max = -1;\n    for (let\
  \ key in freq) {\n        if (freq[key] >= key && key > max) {\n            max\
  \ = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    let current =\
  \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (current != lst[i])\
  \ {\n            if (count >= current && current > max) {\n                max =\
  \ current;\n                maxCount = count;\n            }\n            current\
  \ = lst[i];\n            count = 1;\n        } else {\n            count++;\n  \
  \      }\n    }\n    if (count >= current && current > max) {\n        max = current;\n\
  \        maxCount = count;\n    }\n    return maxCount >= max ? max : -1;\n}\n\n\
  console.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3,\
  \ 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = -1;\n    let freq = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max =\
  \ lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let key in freq) {\n        if (freq[key]\
  \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\n"
- "    let max = 0;\n    let count = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
  \        result = max;\n    }\n    return result;\n}\n\nconsole.log(search([4, 1,\
  \ 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let key in freq) {\n        if (freq[key]\
  \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3,\
  \ 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    return count >= max ? max : -1;\n}\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4,\
  \ 4, 4]));\n"
- "    let max = -1;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++) {\n  \
  \          if (lst[i] == lst[j]) {\n                count++;\n            }\n  \
  \      }\n        if (lst[i] > max && count >= lst[i]) {\n            max = lst[i];\n\
  \            freq = count;\n        }\n    }\n    return max;\n}\n"
- "    let map: Map<number, number> = new Map();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let freq = {};\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
  \            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
  \ = lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    return max;\n}\n"
- "    let result = -1;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++) {\n  \
  \          if (lst[i] === lst[j]) {\n                count++;\n            }\n \
  \       }\n        if (count >= lst[i] && count > max) {\n            max = count;\n\
  \            result = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
  \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] >\
  \ maxFreq) {\n            max = lst[i];\n            maxFreq = freq[lst[i]];\n \
  \       }\n    }\n    return max;\n}\n"
- "    let freq = {}\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++\n        } else {\n            freq[lst[i]] = 1\n\
  \        }\n    }\n    let max = -1\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max = lst[i]\n\
  \        }\n    }\n    return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4,\
  \ 4]))"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n"
- "    let max = -1;\n    let obj = {};\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n\
  \            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
  \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    for (let i = max; i > 0; i--) {\n        if\
  \ (lst.filter(x => x === i).length >= i) {\n            return i;\n        }\n \
  \   }\n    return -1;\n}\n"
- "    let max = -1;\n    let count = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max =\
  \ lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let num = lst[i];\n        if (map.has(num)) {\n            map.set(num,\
  \ map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n\
  \    }\n    let max = -1;\n    for (let [key, value] of map) {\n        if (key\
  \ <= value && key > max) {\n            max = key;\n        }\n    }\n    return\
  \ max;\n}\n"
- "    let max = -1;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
  \ key in freq) {\n        if (freq[key] >= Number(key) && Number(key) > max) {\n\
  \            max = Number(key);\n            maxFreq = freq[key];\n        }\n \
  \   }\n    return max;\n}\n"
- "    let result = -1;\n    let frequency = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n \
  \       } else {\n            frequency[lst[i]] = 1;\n        }\n    }\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (frequency[lst[i]] >= lst[i] &&\
  \ lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
  \ result;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key <= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    }\n    return result;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        let val = lst[i];\n       \
  \ if (map.has(val)) {\n            map.set(val, map.get(val) + 1);\n        } else\
  \ {\n            map.set(val, 1);\n        }\n    }\n    for (let [key, value] of\
  \ map) {\n        if (key <= value && key > max) {\n            max = key;\n   \
  \         result = key;\n        }\n    }\n    return result;\n}\n"
- "    let frequencyMap = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let frequency = frequencyMap.get(lst[i]);\n        if (frequency)\
  \ {\n            frequencyMap.set(lst[i], frequency + 1);\n        } else {\n  \
  \          frequencyMap.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n \
  \   for (let [key, value] of frequencyMap) {\n        if (key <= value && key >\
  \ max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let frequency: number[] = [];\n    let max: number = 0;\n    for (let i: number\
  \ = 0; i < lst.length; i++) {\n        if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n\
  \        } else {\n            frequency[lst[i]] = 1;\n        }\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n        }\n    }\n    for (let i: number\
  \ = max; i > 0; i--) {\n        if (frequency[i] >= i) {\n            return i;\n\
  \        }\n    }\n    return -1;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    map.forEach((value, key) => {\n   \
  \     if (key >= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    });\n    return result;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n       \
  \ if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else\
  \ {\n            map.set(num, 1);\n        }\n    }\n    for (let [key, value] of\
  \ map) {\n        if (key <= value && key > max) {\n            max = key;\n   \
  \         result = key;\n        }\n    }\n    return result;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key <= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    }\n    return result;\n}\n"
- "    let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
  \            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
  \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([4, 1, 2,\
  \ 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let result: number = -1;\n    let frequency: number = 0;\n    let frequencyMap:\
  \ Map<number, number> = new Map<number, number>();\n    for (let i: number = 0;\
  \ i < lst.length; i++) {\n        if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
  \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
  \ 1);\n        }\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n  \
  \      if (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > frequency) {\n       \
  \     frequency = lst[i];\n            result = lst[i];\n        }\n    }\n    return\
  \ result;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n \
  \       }\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
  \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i >\
  \ 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n   \
  \ }\n    return -1;\n}\n"
- "  let max = -1;\n  let count = 0;\n  let map = new Map();\n  for (let i = 0; i\
  \ < lst.length; i++) {\n    if (map.has(lst[i])) {\n      map.set(lst[i], map.get(lst[i])\
  \ + 1);\n    } else {\n      map.set(lst[i], 1);\n    }\n  }\n  for (let [key, value]\
  \ of map) {\n    if (key <= value && key > max) {\n      max = key;\n    }\n  }\n\
  \  return max;\n}\n"
- "    let counter: number[] = [];\n    let max: number = 0;\n    let maxIndex: number\
  \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
  \            max = lst[i];\n        }\n    }\n    for (let i = 0; i < max; i++)\
  \ {\n        counter.push(0);\n    }\n    for (let i = 0; i < lst.length; i++) {\n\
  \        counter[lst[i] - 1]++;\n    }\n    for (let i = 0; i < counter.length;\
  \ i++) {\n        if (counter[i] >= i + 1) {\n            maxIndex = i + 1;\n  \
  \      }\n    }\n    return maxIndex;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let val = lst[i];\n        if (map.has(val)) {\n\
  \            map.set(val, map.get(val) + 1);\n        } else {\n            map.set(val,\
  \ 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (key <=\
  \ value && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\n"
- "    let max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n    \
  \        count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
  \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    if (maxCount >= max) {\n        return max;\n    } else {\n\
  \        return -1;\n    }\n}\n"
- "    let map: Map<number, number> = new Map();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let keys = Object.keys(freq);\n    let max = -1;\n    for\
  \ (let i = 0; i < keys.length; i++) {\n        if (freq[keys[i]] >= parseInt(keys[i]))\
  \ {\n            if (parseInt(keys[i]) > max) {\n                max = parseInt(keys[i]);\n\
  \            }\n        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let value = lst[i];\n        if (map.has(value)) {\n            map.set(value,\
  \ map.get(value) + 1);\n        } else {\n            map.set(value, 1);\n     \
  \   }\n    }\n    let max = -1;\n    for (let [key, value] of map) {\n        if\
  \ (key <= value && key > max) {\n            max = key;\n        }\n    }\n    return\
  \ max;\n}\n"
- "    const freq = lst.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] ||\
  \ 0) + 1;\n        return acc;\n    }, {});\n    return Object.keys(freq).reduce((acc,\
  \ curr) => {\n        if (freq[curr] >= +curr && +curr > acc) {\n            return\
  \ +curr;\n        }\n        return acc;\n    }, -1);\n}\n\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let map: Map<number, number> = new Map();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n            map.set(num,\
  \ map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n\
  \    }\n    let max = -1;\n    map.forEach((value, key) => {\n        if (key >\
  \ value) {\n            return;\n        }\n        if (key > max) {\n         \
  \   max = key;\n        }\n    });\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let value = lst[i];\n        if (map.has(value))\
  \ {\n            map.set(value, map.get(value) + 1);\n        } else {\n       \
  \     map.set(value, 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let value = lst[i];\n        if (map.get(value) >= value && value\
  \ > max) {\n            max = value;\n        }\n    }\n    return max;\n}\n"
- "    let map: Map<number, number> = new Map();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let freq = lst.filter(x => x == max).length;\n\
  \    if (freq >= max) {\n        return max;\n    }\n    return -1;\n}\n"
- "    let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (counts[lst[i]])\
  \ {\n            counts[lst[i]]++;\n        } else {\n            counts[lst[i]]\
  \ = 1;\n        }\n    }\n    let max = -1;\n    for (let key in counts) {\n   \
  \     if (counts[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (map.get(num) >= num && num > max) {\n            max\
  \ = num;\n        }\n    }\n    return max;\n}\n"
- "    let count = 0;\n    let max = 0;\n    let maxCount = 0;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n     \
  \       if (lst[i] === lst[j]) {\n                count++;\n            }\n    \
  \    }\n        if (count >= lst[i] && count > maxCount) {\n            max = lst[i];\n\
  \            maxCount = count;\n        }\n        count = 0;\n    }\n    return\
  \ max > 0 ? max : -1;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let key of map.keys()) {\n   \
  \     if (key <= map.get(key) && key > max) {\n            max = key;\n        \
  \    result = key;\n        }\n    }\n    return result;\n}\n"
- "  let max = -1;\n  let count = 0;\n  lst.sort((a, b) => a - b);\n  for (let i =\
  \ 0; i < lst.length; i++) {\n    if (lst[i] === lst[i + 1]) {\n      count++;\n\
  \    } else {\n      count = 0;\n    }\n    if (count >= lst[i]) {\n      max =\
  \ lst[i];\n    }\n  }\n  return max;\n}\n"
- "    let result: number = -1;\n    let count: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n       \
  \     if (lst[i] == lst[j]) {\n                count++;\n            }\n       \
  \ }\n        if (count >= lst[i] && lst[i] > result) {\n            result = lst[i];\n\
  \        }\n        count = 0;\n    }\n    return result;\n}\n"
- "    const freq = lst.reduce((acc, curr) => {\n        acc[curr] = acc[curr] + 1\
  \ || 1;\n        return acc;\n    }, {});\n    const max = Math.max(...Object.keys(freq));\n\
  \    return freq[max] >= max ? max : -1;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    let current =\
  \ -1;\n    lst.sort((a, b) => a - b);\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] === current) {\n            count++;\n        } else {\n\
  \            if (current > maxCount && current >= max) {\n                max =\
  \ current;\n                maxCount = count;\n            }\n            current\
  \ = lst[i];\n            count = 1;\n        }\n    }\n    if (current > maxCount\
  \ && current >= max) {\n        max = current;\n        maxCount = count;\n    }\n\
  \    return max;\n}\n"
- "    let nums = lst.sort((a, b) => a - b);\n    let max = -1;\n    let count = 1;\n\
  \    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1])\
  \ {\n            count++;\n        } else {\n            if (nums[i] <= count) {\n\
  \                max = nums[i];\n            }\n            count = 1;\n       \
  \ }\n    }\n    return max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let key in freq) {\n        if (freq[key]\
  \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let counts = lst.reduce((acc, curr) => {\n        acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n        return acc;\n    }, {});\n    let max = -1;\n    for (let key\
  \ in counts) {\n        if (counts[key] >= key && key > max) {\n            max\
  \ = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n \
  \       return max;\n    } else {\n        return -1;\n    }\n}\n"
- "    let max = -1;\n    let freq = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key >= value && key > max) {\n            max = key;\n            freq\
  \ = value;\n        }\n    }\n    return max;\n}\n"
- "    let result = -1;\n    let max = Math.max(...lst);\n    for (let i = 1; i <=\
  \ max; i++) {\n        if (lst.filter(x => x === i).length >= i) {\n           \
  \ result = i;\n        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count = map.get(lst[i]);\n        if (count\
  \ === undefined) {\n            map.set(lst[i], 1);\n        } else {\n        \
  \    map.set(lst[i], count + 1);\n        }\n    }\n    for (let [key, value] of\
  \ map) {\n        if (key > max && value >= key) {\n            max = key;\n   \
  \     }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (map.get(num) >= num && num > max) {\n            max\
  \ = num;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let freq = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
  \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i >\
  \ 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n   \
  \ }\n    return -1;\n}\n"
- "    let obj: any = {};\n    let max: number = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else\
  \ {\n            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n\
  \        if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max > 0 ? max : -1;\n}\n"
- "    let max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n    \
  \        count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
  \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let frequency: number[] = [];\n    let max: number = 0;\n    for (let i: number\
  \ = 0; i < lst.length; i++) {\n        frequency[lst[i]] = (frequency[lst[i]] ||\
  \ 0) + 1;\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n \
  \   }\n    for (let i: number = max; i > 0; i--) {\n        if (frequency[i] >=\
  \ i) {\n            return i;\n        }\n    }\n    return -1;\n}\n"
- "  const counts = lst.reduce((acc, curr) => {\n    if (acc[curr]) {\n      acc[curr]++;\n\
  \    } else {\n      acc[curr] = 1;\n    }\n    return acc;\n  }, {});\n  const\
  \ keys = Object.keys(counts);\n  const values = Object.values(counts);\n  const\
  \ max = Math.max(...values);\n  const maxIndex = values.indexOf(max);\n  const maxKey\
  \ = keys[maxIndex];\n  return maxKey > max ? -1 : maxKey;\n}\n"
- "    let frequency = {};\n    let max = -1;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n \
  \       } else {\n            frequency[lst[i]] = 1;\n        }\n    }\n    for\
  \ (let key in frequency) {\n        if (frequency[key] >= key && key > max) {\n\
  \            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    return count >= max ? max : -1;\n}\n"
- "    let max = -1;\n    let freq = {};\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
  \            freq[lst[i]] = 1;\n        }\n    }\n    for (let key in freq) {\n\
  \        if (freq[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
  \ freq[lst[i]];\n        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let obj = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n\
  \            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
  \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let count: number = 0;\n    let max: number = 0;\n    let maxCount: number\
  \ = 0;\n    let result: number = -1;\n    lst.sort((a, b) => a - b);\n    for (let\
  \ i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n\
  \        } else {\n            if (count >= max) {\n                maxCount = count;\n\
  \                result = max;\n            }\n            max = lst[i];\n     \
  \       count = 1;\n        }\n    }\n    if (count >= max) {\n        maxCount\
  \ = count;\n        result = max;\n    }\n    return maxCount >= result ? result\
  \ : -1;\n}\n"
- "  const freq = lst.reduce((acc, curr) => {\n    acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n    return acc;\n  }, {});\n  const max = Math.max(...Object.keys(freq));\n\
  \  return freq[max] >= max ? max : -1;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    let prev = 0;\n\
  \    lst.sort((a, b) => a - b);\n    for (let i = 0; i < lst.length; i++) {\n  \
  \      if (lst[i] === prev) {\n            count++;\n        } else {\n        \
  \    count = 1;\n            prev = lst[i];\n        }\n        if (count >= prev\
  \ && prev > maxCount) {\n            max = prev;\n            maxCount = count;\n\
  \        }\n    }\n    return max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4,\
  \ 4, 4]));"
- "    let result = -1;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++) {\n  \
  \          if (lst[i] === lst[j]) {\n                count++;\n            }\n \
  \       }\n        if (count >= lst[i] && count > max) {\n            max = count;\n\
  \            result = lst[i];\n        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let [key, value] of map) {\n        if (key <= value &&\
  \ key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    let result = -1;\n   \
  \ for (let i = 1; i <= max; i++) {\n        count = 0;\n        for (let j = 0;\
  \ j < lst.length; j++) {\n            if (lst[j] === i) {\n                count++;\n\
  \            }\n        }\n        if (count >= i) {\n            result = i;\n\
  \        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let [key, value] of map) {\n        if (key <= value &&\
  \ key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = max; i\
  \ > 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n \
  \   }\n    return -1;\n}\n"
- "    const freq = lst.reduce((acc, curr) => {\n        acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n        return acc;\n    }, {});\n    const max = Math.max(...Object.keys(freq).map(Number));\n\
  \    return freq[max] >= max ? max : -1;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    let count = 0;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n \
  \       return max;\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = 0;\n    let count = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
  \        result = max;\n    }\n    return result;\n}\n\nconsole.log(search([4, 1,\
  \ 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let key of map.keys()) {\n        if (key > max\
  \ && map.get(key) >= key) {\n            max = key;\n        }\n    }\n    return\
  \ max;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        let count = map.get(lst[i])\
  \ || 0;\n        map.set(lst[i], count + 1);\n        if (lst[i] > max) {\n    \
  \        max = lst[i];\n        }\n    }\n    for (let i = max; i > 0; i--) {\n\
  \        let count = map.get(i) || 0;\n        if (count >= i) {\n            result\
  \ = i;\n            break;\n        }\n    }\n    return result;\n}\n"
- "    const freq = lst.reduce((acc, curr) => {\n        acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n        return acc;\n    }, {});\n    const maxFreq = Math.max(...Object.values(freq));\n\
  \    return Object.keys(freq).find(key => freq[key] === maxFreq && key >= maxFreq)\
  \ || -1;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
  \ freq[lst[i]];\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let freq = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
  \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i >\
  \ 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n   \
  \ }\n    return -1;\n}\n"
- "    let max = -1;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            count =\
  \ 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n   \
  \ }\n    return count >= max ? max : -1;\n}\n"
- "    let result: number = -1;\n    let freq: number = 0;\n    let count: number\
  \ = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length;\
  \ i++) {\n        count = 0;\n        for (j = 0; j < lst.length; j++) {\n     \
  \       if (lst[i] == lst[j]) {\n                count++;\n            }\n     \
  \   }\n        if (count >= lst[i] && lst[i] > freq) {\n            freq = lst[i];\n\
  \            result = lst[i];\n        }\n    }\n    return result;\n}\n"
- "    let max = 0;\n    let count = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
  \        result = max;\n    }\n    return result;\n}\n"
- "    let count: number = 0;\n    let max: number = 0;\n    let maxCount: number\
  \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j <\
  \ lst.length; j++) {\n            if (lst[i] == lst[j]) {\n                count++;\n\
  \            }\n        }\n        if (count >= lst[i] && lst[i] > max) {\n    \
  \        max = lst[i];\n            maxCount = count;\n        }\n        count\
  \ = 0;\n    }\n    if (maxCount == 0) {\n        return -1;\n    }\n    return max;\n\
  }\n"
- "  let max = -1;\n  let freq = 0;\n  let obj = {};\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (obj[lst[i]]) {\n      obj[lst[i]]++;\n    } else {\n      obj[lst[i]]\
  \ = 1;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (obj[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n\
  }\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
  \  return max;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n \
  \       return max;\n    } else {\n        return -1;\n    }\n}\n"
- "    let count = 0;\n    let max = 0;\n    let maxCount = 0;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
  \        return max;\n    } else {\n        return -1;\n    }\n}\n"
- "    let counts = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let count = counts.get(lst[i]);\n        if (count === undefined)\
  \ {\n            counts.set(lst[i], 1);\n        } else {\n            counts.set(lst[i],\
  \ count + 1);\n        }\n    }\n    let keys = Array.from(counts.keys());\n   \
  \ keys.sort((a, b) => b - a);\n    for (let i = 0; i < keys.length; i++) {\n   \
  \     if (keys[i] <= counts.get(keys[i])) {\n            return keys[i];\n     \
  \   }\n    }\n    return -1;\n}\n"
- "    let max = -1;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (freq[num] === undefined)\
  \ {\n            freq[num] = 1;\n        } else {\n            freq[num]++;\n  \
  \      }\n        if (freq[num] >= num && num > maxFreq) {\n            max = num;\n\
  \            maxFreq = freq[num];\n        }\n    }\n    return max;\n}\n"
- "    let nums = lst.sort((a, b) => a - b);\n    let max = -1;\n    for (let i =\
  \ 0; i < nums.length; i++) {\n        let count = 1;\n        for (let j = i + 1;\
  \ j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n            \
  \    count++;\n            }\n        }\n        if (count >= nums[i] && nums[i]\
  \ > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]] += 1;\n        } else {\n            freq[lst[i]]\
  \ = 1;\n        }\n    }\n    let max = -1;\n    for (let key in freq) {\n     \
  \   if (freq[key] >= key && key > max) {\n            max = key;\n        }\n  \
  \  }\n    return max;\n}\n"
- "    let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (counts[lst[i]])\
  \ {\n            counts[lst[i]]++;\n        } else {\n            counts[lst[i]]\
  \ = 1;\n        }\n    }\n    let keys = Object.keys(counts);\n    let max = -1;\n\
  \    for (let i = 0; i < keys.length; i++) {\n        if (counts[keys[i]] >= parseInt(keys[i])\
  \ && parseInt(keys[i]) > max) {\n            max = parseInt(keys[i]);\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let result = -1;\n    for (let key in freq) {\n        if\
  \ (freq[key] >= key && key > result) {\n            result = key;\n        }\n \
  \   }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let key = lst[i];\n        if (map.has(key)) {\n\
  \            map.set(key, map.get(key) + 1);\n        } else {\n            map.set(key,\
  \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
  \ key = lst[i];\n        if (map.get(key) >= key && key > max) {\n            max\
  \ = key;\n        }\n    }\n    return max;\n}\nconsole.log(search([4, 1, 2, 2,\
  \ 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));\n"
- "    let result: number = -1;\n    let max: number = 0;\n    let obj: any = {};\n\
  \    for (let i: number = 0; i < lst.length; i++) {\n        if (obj[lst[i]]) {\n\
  \            obj[lst[i]]++;\n        } else {\n            obj[lst[i]] = 1;\n  \
  \      }\n    }\n    for (let key in obj) {\n        if (obj[key] >= +key && +key\
  \ > max) {\n            max = +key;\n            result = max;\n        }\n    }\n\
  \    return result;\n}\n"
- "  const sorted = lst.sort((a, b) => a - b);\n  const freq = {};\n  for (let i =\
  \ 0; i < sorted.length; i++) {\n    const num = sorted[i];\n    if (freq[num]) {\n\
  \      freq[num]++;\n    } else {\n      freq[num] = 1;\n    }\n  }\n  for (let\
  \ i = sorted.length - 1; i >= 0; i--) {\n    const num = sorted[i];\n    if (num\
  \ <= freq[num]) {\n      return num;\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let [key, value] of map) {\n        if (key <= value &&\
  \ key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "  const freq = lst.reduce((acc, curr) => {\n    acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n    return acc;\n  }, {});\n  const max = Math.max(...Object.keys(freq).map(Number));\n\
  \  return freq[max] >= max ? max : -1;\n}\n\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n           \
  \ freq++;\n        }\n    }\n    if (freq >= max) {\n        return max;\n    }\
  \ else {\n        return -1;\n    }\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let [key, value] of map) {\n        if (key <= value &&\
  \ key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count = map.get(lst[i]);\n        if (count\
  \ == undefined) {\n            count = 0;\n        }\n        count++;\n       \
  \ map.set(lst[i], count);\n        if (count >= lst[i] && lst[i] > max) {\n    \
  \        max = lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let frequency: { [key: number]: number } = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n \
  \       } else {\n            frequency[lst[i]] = 1;\n        }\n    }\n    let\
  \ max = -1;\n    for (let key in frequency) {\n        if (frequency[key] >= Number(key)\
  \ && Number(key) > max) {\n            max = Number(key);\n        }\n    }\n  \
  \  return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = 0;\n    let result = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
  \    for (let i = max; i > 0; i--) {\n        let count = 0;\n        for (let j\
  \ = 0; j < lst.length; j++) {\n            if (lst[j] == i) {\n                count++;\n\
  \            }\n        }\n        if (count >= i) {\n            result = i;\n\
  \            break;\n        }\n    }\n    return result;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "  let result = -1;\n  const frequency = {};\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (frequency[lst[i]]) {\n      frequency[lst[i]]++;\n    } else {\n\
  \      frequency[lst[i]] = 1;\n    }\n  }\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    if (frequency[lst[i]] >= lst[i] && lst[i] > result) {\n      result = lst[i];\n\
  \    }\n  }\n  return result;\n}\n"
- "    let max = -1;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            count =\
  \ 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n   \
  \ }\n    return count >= max ? max : -1;\n}\n"
- "    let max = Math.max(...lst);\n    let result = -1;\n    for (let i = 1; i <=\
  \ max; i++) {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++)\
  \ {\n            if (lst[j] === i) {\n                count++;\n            }\n\
  \        }\n        if (count >= i) {\n            result = i;\n        }\n    }\n\
  \    return result;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    return count >= max ? max : -1;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let result: number = -1;\n    const map: Map<number, number> = new Map();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > result) {\n            result\
  \ = lst[i];\n        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count = map.get(lst[i]);\n        if (count\
  \ == undefined) {\n            count = 0;\n        }\n        count++;\n       \
  \ map.set(lst[i], count);\n        if (lst[i] > max && count >= lst[i]) {\n    \
  \        max = lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (freq[lst[i]] == undefined) {\n            freq[lst[i]]\
  \ = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = max; i\
  \ > 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n \
  \   }\n    return -1;\n}\n"
- "    let max = -1;\n    let maxCount = 0;\n    let count = 0;\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    if (maxCount >= max) {\n        return max;\n    } else {\n\
  \        return -1;\n    }\n}\n"
- "    let max = 0;\n    let count = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n \
  \       result = max;\n    }\n    return result;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key <= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    }\n    return result;\n}\n"
- "    const freq = lst.reduce((acc, curr) => {\n        acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n        return acc;\n    }, {});\n    const max = Math.max(...Object.keys(freq).map(Number));\n\
  \    return freq[max] >= max ? max : -1;\n}\n\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = Math.max(...lst);\n    let freq = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
  \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i >\
  \ 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n   \
  \ }\n    return -1;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    let result = -1;\n   \
  \ for (let i = 1; i <= max; i++) {\n        count = 0;\n        for (let j = 0;\
  \ j < lst.length; j++) {\n            if (lst[j] === i) {\n                count++;\n\
  \            }\n        }\n        if (count >= i) {\n            result = i;\n\
  \        }\n    }\n    return result;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4,\
  \ 4, 4]));"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n"
- "    let max = -1;\n    let count = 0;\n    lst.sort((a, b) => a - b);\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
  \ = lst[i];\n            count = 1;\n        } else if (lst[i] === max) {\n    \
  \        count++;\n        }\n        if (count >= max) {\n            return max;\n\
  \        }\n    }\n    return -1;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
  \  return max;\n}\n"
- "    let map: Map<number, number> = new Map();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let key of map.keys()) {\n        if (key <= map.get(key)\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]\
  \ += 1;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n   \
  \ for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] &&\
  \ lst[i] > max) {\n            max = lst[i];\n            maxFreq = freq[lst[i]];\n\
  \        }\n    }\n    return maxFreq >= max ? max : -1;\n}\n\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            count =\
  \ 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n   \
  \ }\n    return max == count ? max : -1;\n}\n"
- "    let max = Math.max(...lst);\n    for (let i = max; i > 0; i--) {\n        if\
  \ (lst.filter(x => x === i).length >= i) {\n            return i;\n        }\n \
  \   }\n    return -1;\n}\n"
- "    let max = Math.max(...lst);\n    for (let i = max; i > 0; i--) {\n        if\
  \ (lst.filter(x => x === i).length >= i) {\n            return i;\n        }\n \
  \   }\n    return -1;\n}\n"
- "    let obj = {};\n    let max = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (obj[lst[i]]) {\n            obj[lst[i]] +=\
  \ 1;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n    for\
  \ (let key in obj) {\n        if (obj[key] >= key && key > max) {\n            max\
  \ = key;\n            result = max;\n        }\n    }\n    return result;\n}\nconsole.log(search([4,\
  \ 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));\n"
- "  let max = -1;\n  let obj = {};\n  for (let i = 0; i < lst.length; i++) {\n  \
  \  if (obj[lst[i]]) {\n      obj[lst[i]]++;\n    } else {\n      obj[lst[i]] = 1;\n\
  \    }\n  }\n  for (let key in obj) {\n    if (obj[key] >= key && key > max) {\n\
  \      max = key;\n    }\n  }\n  return max;\n}\n"
- "    let max = -1;\n    let count = 0;\n    lst.sort((a, b) => a - b);\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] === lst[i + 1]) {\n   \
  \         count++;\n        } else {\n            count = 0;\n        }\n      \
  \  if (lst[i] > count) {\n            max = lst[i];\n        }\n    }\n    return\
  \ max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let [key, value] of map) {\n        if (key <= value &&\
  \ key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let cnt = map.get(lst[i]);\n        if (cnt ==\
  \ null) {\n            cnt = 0;\n        }\n        cnt++;\n        map.set(lst[i],\
  \ cnt);\n        if (cnt >= lst[i] && lst[i] > max) {\n            max = lst[i];\n\
  \        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (key <=\
  \ value && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\n"
- "    let obj = {};\n    for (let i = 0; i < lst.length; i++) {\n        let num\
  \ = lst[i];\n        if (obj[num]) {\n            obj[num]++;\n        } else {\n\
  \            obj[num] = 1;\n        }\n    }\n    let max = -1;\n    for (let key\
  \ in obj) {\n        if (obj[key] >= key && key > max) {\n            max = key;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n \
  \       }\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
  \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i >\
  \ 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n   \
  \ }\n    return -1;\n}\n"
- "    let result: number = -1;\n    let count: number = 0;\n    let maxCount: number\
  \ = 0;\n    let maxNum: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > maxNum) {\n            maxNum = lst[i];\n        }\n    }\n\
  \    for (let i = 1; i <= maxNum; i++) {\n        for (let j = 0; j < lst.length;\
  \ j++) {\n            if (lst[j] == i) {\n                count++;\n           \
  \ }\n        }\n        if (count >= i && count > maxCount) {\n            maxCount\
  \ = count;\n            result = i;\n        }\n        count = 0;\n    }\n    return\
  \ result;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
  \ freq[lst[i]];\n        }\n    }\n    return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (key <=\
  \ value && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
  }\n"
- "    let max = -1;\n    let maxFreq = -1;\n    let freq = {};\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        let num = lst[i];\n        if (freq[num] ===\
  \ undefined) {\n            freq[num] = 1;\n        } else {\n            freq[num]++;\n\
  \        }\n        if (freq[num] >= num && num > maxFreq) {\n            max =\
  \ num;\n            maxFreq = freq[num];\n        }\n    }\n    return max;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        let count = map.get(lst[i])\
  \ || 0;\n        count++;\n        map.set(lst[i], count);\n        if (count >=\
  \ lst[i] && lst[i] > max) {\n            max = lst[i];\n            result = lst[i];\n\
  \        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let obj = {};\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n\
  \            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
  \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let counts = lst.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] ||\
  \ 0) + 1;\n        return acc;\n    }, {});\n    let max = 0;\n    for (let key\
  \ in counts) {\n        if (counts[key] >= key && key > max) {\n            max\
  \ = key;\n        }\n    }\n    return max > 0 ? max : -1;\n}\n"
- "    let frequency: number[] = [];\n    let max: number = 0;\n    let result: number\
  \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
  \            max = lst[i];\n        }\n    }\n    for (let i = 0; i < max; i++)\
  \ {\n        frequency.push(0);\n    }\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        frequency[lst[i] - 1]++;\n    }\n    for (let i = 0; i < frequency.length;\
  \ i++) {\n        if (frequency[i] >= i + 1) {\n            result = i + 1;\n  \
  \      }\n    }\n    return result;\n}\n"
- "    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
  \ (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n     \
  \   } else {\n            map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n\
  \    for (let [key, value] of map) {\n        if (key <= value && key > max) {\n\
  \            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "  const freq = lst.reduce((acc, curr) => {\n    acc[curr] = acc[curr] ? acc[curr]\
  \ + 1 : 1;\n    return acc;\n  }, {});\n  const max = Math.max(...Object.keys(freq));\n\
  \  return freq[max] >= max ? max : -1;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
  \  return max;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (map.get(num) >= num && num > max) {\n            max\
  \ = num;\n        }\n    }\n    return max;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
  \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
  \   let max = -1;\n    for (let key of map.keys()) {\n        if (key <= map.get(key)\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let obj: any = {};\n    let max: number = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else\
  \ {\n            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n\
  \        if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max > 0 ? max : -1;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key <= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    }\n    return result;\n}\n"
- "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let value = lst[i];\n        if (map.has(value)) {\n            map.set(value,\
  \ map.get(value) + 1);\n        } else {\n            map.set(value, 1);\n     \
  \   }\n    }\n    let max = -1;\n    for (let [key, value] of map) {\n        if\
  \ (key <= value && key > max) {\n            max = key;\n        }\n    }\n    return\
  \ max;\n}\n"
- "    let max = -1;\n    let maxFreq = -1;\n    let freq = {};\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
  \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && freq[lst[i]]\
  \ > maxFreq) {\n            max = lst[i];\n            maxFreq = freq[lst[i]];\n\
  \        }\n    }\n    return max;\n}\n"
- "    let result: number = -1;\n    let max: number = 0;\n    let frequency: number\
  \ = 0;\n    let count: number = 0;\n    for (let i: number = 0; i < lst.length;\
  \ i++) {\n        for (let j: number = 0; j < lst.length; j++) {\n            if\
  \ (lst[i] === lst[j]) {\n                count++;\n            }\n        }\n  \
  \      if (lst[i] > max) {\n            max = lst[i];\n        }\n        if (lst[i]\
  \ >= count && lst[i] <= max) {\n            result = lst[i];\n        }\n      \
  \  count = 0;\n    }\n    return result;\n}\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));\n"
- "    let dict: { [key: number]: number } = {};\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (dict[lst[i]] === undefined) {\n            dict[lst[i]] =\
  \ 1;\n        } else {\n            dict[lst[i]]++;\n        }\n    }\n    let max:\
  \ number = -1;\n    for (let key in dict) {\n        if (dict[key] >= key && key\
  \ > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2,\
  \ 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n"
- "    let obj = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n\
  \            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
  \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n"
- "    const frequencies = lst.reduce((acc, curr) => {\n        acc[curr] = (acc[curr]\
  \ || 0) + 1;\n        return acc;\n    }, {});\n    const max = Math.max(...lst);\n\
  \    for (let i = max; i > 0; i--) {\n        if (frequencies[i] >= i) {\n     \
  \       return i;\n        }\n    }\n    return -1;\n}\n"
- "    let result = -1;\n    let map = new Map<number, number>();\n    for (let i\
  \ = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
  \ >= lst[i] && lst[i] > result) {\n            result = lst[i];\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n\
  \            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
  \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (map.get(num) >= num && num > max) {\n            max\
  \ = num;\n        }\n    }\n    return max;\n}\n"
- "    let result = -1;\n    let max = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n \
  \       if (key <= value && key > max) {\n            max = key;\n            result\
  \ = key;\n        }\n    }\n    return result;\n}\n"
- "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
  \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n   \
  \     }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
  \  return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
  \        } else {\n            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n            maxFreq =\
  \ freq[lst[i]];\n        }\n    }\n    return max;\n}\n"
- "    let frequency = {};\n    let max = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n \
  \       } else {\n            frequency[lst[i]] = 1;\n        }\n        if (frequency[lst[i]]\
  \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
  \  return max > 0 ? max : -1;\n}\n"
- "    let obj = {};\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (obj[lst[i]]) {\n            obj[lst[i]] += 1;\n        } else {\n \
  \           obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n   \
  \     if (obj[key] >= key && key > max) {\n            max = key;\n        }\n \
  \   }\n    return max > 0 ? max : -1;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n\
  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4,\
  \ 4, 4]));"
- "    let max = -1;\n    let obj = {};\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n\
  \            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
  \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
  \    }\n    return max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
  \            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
  \ = lst[i];\n        }\n    }\n    return max;\n}\n"
- "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i: number\
  \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \        }\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        }\
  \ else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i: number\
  \ = max; i > 0; i--) {\n        if (freq[i] && freq[i] >= i) {\n            return\
  \ i;\n        }\n    }\n    return -1;\n}\n"
- "    let counts = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (counts.has(lst[i])) {\n            counts.set(lst[i], counts.get(lst[i])\
  \ + 1);\n        } else {\n            counts.set(lst[i], 1);\n        }\n    }\n\
  \    let max = -1;\n    for (let key of counts.keys()) {\n        if (key <= counts.get(key)\
  \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n}\n"
- "  let map = new Map<number, number>();\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    if (map.has(lst[i])) {\n      map.set(lst[i], map.get(lst[i]) + 1);\n \
  \   } else {\n      map.set(lst[i], 1);\n    }\n  }\n  let max = -1;\n  for (let\
  \ [key, value] of map) {\n    if (key <= value && key > max) {\n      max = key;\n\
  \    }\n  }\n  return max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let max = Math.max(...lst);\n    let result = -1;\n    for (let i = 1; i <=\
  \ max; i++) {\n        if (lst.filter(x => x === i).length >= i) {\n           \
  \ result = i;\n        }\n    }\n    return result;\n}\n"
- "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
  \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n\
  \        }\n    }\n    let result = -1;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (freq[lst[i]] >= lst[i] && lst[i] > result) {\n            result\
  \ = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([4, 1,\
  \ 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
- "    let max = -1;\n    let count = 0;\n    let map = new Map<number, number>();\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n  \
  \          map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
  \ map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max =\
  \ lst[i];\n        }\n    }\n    return max;\n}\n"
- "  let max = -1;\n  let map = new Map<number, number>();\n  for (let i = 0; i <\
  \ lst.length; i++) {\n    let num = lst[i];\n    if (map.has(num)) {\n      map.set(num,\
  \ map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  for (let\
  \ [key, value] of map) {\n    if (key <= value && key > max) {\n      max = key;\n\
  \    }\n  }\n  return max;\n}\n"
- "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] == max) {\n            count++;\n        }\n    }\n\
  \    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
  \    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2,\
  \ 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));"
- "    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
  \ (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n     \
  \   } else {\n            map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n\
  \    for (let [key, value] of map) {\n        if (key <= value && key > max) {\n\
  \            max = key;\n        }\n    }\n    return max;\n}\n"
- "    let count = 0;\n    let max = 0;\n    let result = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n     \
  \       if (lst[i] === lst[j]) {\n                count++;\n            }\n    \
  \    }\n        if (count >= lst[i] && lst[i] > max) {\n            max = lst[i];\n\
  \            result = max;\n        }\n        count = 0;\n    }\n    return result;\n\
  }\n"
- "    let counts = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let count = counts.get(lst[i]);\n        if (count == undefined)\
  \ {\n            counts.set(lst[i], 1);\n        } else {\n            counts.set(lst[i],\
  \ count + 1);\n        }\n    }\n    let max = -1;\n    for (let key of counts.keys())\
  \ {\n        if (key <= counts.get(key) && key > max) {\n            max = key;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n    \
  \        count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
  \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([4, 1, 2, 2, 3,\
  \ 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5,\
  \ 5, 4, 4, 4]));"
language: ts
name: HumanEval_69_search
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst: number[]):\
  \ number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5,\
  \ 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3,\
  \ 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2,\
  \ 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6,\
  \ 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2,\
  \ 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n\
  \  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n\
  \  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10,\
  \ 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4,\
  \ 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10,\
  \ 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6,\
  \ 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6,\
  \ 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
