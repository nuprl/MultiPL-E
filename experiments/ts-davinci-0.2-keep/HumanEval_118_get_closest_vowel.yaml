name: HumanEval_118_get_closest_vowel
language: humaneval_to_typescript.py
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
  quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
  yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
  easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
  ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
  most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
  ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
  anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
  Above\"),\"o\");\n}\n\ntest();"
completions: ["    const vowels = \"aeiou\";\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let closestVowel = \"\";\n    let closestIndex = -1;\n    for (let i =\
    \ word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) > -1)\
    \ {\n            for (let j = i + 1; j < word.length; j++) {\n               \
    \ if (vowels.indexOf(word[j]) > -1) {\n                    if (closestIndex ===\
    \ -1 || j < closestIndex) {\n                        closestIndex = j;\n     \
    \                   closestVowel = word[j];\n                    }\n         \
    \       }\n            }\n            break;\n        }\n    }\n    return closestVowel;\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (cons.indexOf(word[i]) >= 0) {\n            for (let j = i + 1; j\
    \ < word.length; j++) {\n                if (vowels.indexOf(word[j]) >= 0) {\n\
    \                    result = word[j];\n                    break;\n         \
    \       }\n            }\n            break;\n        }\n    }\n    return result;\n\
    }\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const wordArr = word.split('');\n\
    \    let vowel = '';\n    let vowelIndex = 0;\n    let consonantIndex = 0;\n \
    \   let consonant = '';\n    let closestVowel = '';\n    let closestVowelIndex\
    \ = 0;\n    let closestConsonantIndex = 0;\n    let closestConsonant = '';\n \
    \   let closestDistance = 0;\n    let distance = 0;\n    for (let i = wordArr.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(wordArr[i])) {\n          \
    \  vowel = wordArr[i];\n            vowelIndex = i;\n            for (let j =\
    \ vowelIndex - 1; j >= 0; j--) {\n                if (!vowels.includes(wordArr[j]))\
    \ {\n                    consonant = wordArr[j];\n                    consonantIndex\
    \ = j;\n                    distance = vowelIndex - consonantIndex;\n        \
    \            if (distance > closestDistance) {\n                        closestVowel\
    \ = vowel;\n                        closestVowelIndex = vowelIndex;\n        \
    \                closestConsonant = consonant;\n                        closestConsonantIndex\
    \ = consonantIndex;\n                        closestDistance = distance;\n   \
    \                 }\n                    break;\n                }\n         \
    \   }\n        }\n    }\n    return closestVowel;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "    let vowels = \"aeiou\"\
    ;\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestDistance) {\n                closestDistance\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n", "    const vowels = \"aeiou\";\n    const\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let closestVowel = \"\";\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.includes(word[i]))\
    \ {\n            closestVowel = word[i];\n            break;\n        }\n    }\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.includes(word[i]))\
    \ {\n            if (vowels.includes(word[i - 1])) {\n                if (word[i\
    \ - 1] === closestVowel) {\n                    return closestVowel;\n       \
    \         }\n            }\n        }\n    }\n    return \"\";\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let result\
    \ = \"\";\n    let index = word.length - 1;\n    while (index >= 0) {\n      \
    \  if (cons.indexOf(word[index]) !== -1) {\n            if (vowels.indexOf(word[index\
    \ - 1]) !== -1) {\n                result = word[index - 1];\n               \
    \ break;\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }\n", "    const vowels = \"aeiou\";\n    const wordArr = word.split(\"\");\n\
    \    const wordArrRev = wordArr.reverse();\n    let vowelIndex = -1;\n    let\
    \ consonantIndex = -1;\n    for (let i = 0; i < wordArrRev.length; i++) {\n  \
    \      if (vowels.includes(wordArrRev[i])) {\n            vowelIndex = i;\n  \
    \          break;\n        }\n    }\n    for (let i = vowelIndex + 1; i < wordArrRev.length;\
    \ i++) {\n        if (!vowels.includes(wordArrRev[i])) {\n            consonantIndex\
    \ = i;\n            break;\n        }\n    }\n    if (vowelIndex === -1 || consonantIndex\
    \ === -1) {\n        return \"\";\n    }\n    return wordArrRev[vowelIndex];\n\
    }\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \  let closestVowel = \"\";\n  let closestVowelIndex = word.length;\n  for (let\
    \ i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n \
    \     if (consonants.includes(word[i - 1]) && consonants.includes(word[i + 1]))\
    \ {\n        if (i < closestVowelIndex) {\n          closestVowel = word[i];\n\
    \          closestVowelIndex = i;\n        }\n      }\n    }\n  }\n  return closestVowel;\n\
    }\n", "    let vowels = \"aeiou\";\n    let cons = \"bcdfghjklmnpqrstvwxyz\";\n\
    \    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n  \
    \      if (cons.indexOf(word[i]) != -1) {\n            for (let j = i + 1; j <\
    \ word.length; j++) {\n                if (vowels.indexOf(word[j]) != -1) {\n\
    \                    result = word[j];\n                    break;\n         \
    \       }\n            }\n            break;\n        }\n    }\n    return result;\n\
    }\n", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let arr = word.split('');\n    let vowel = '';\n \
    \   let consonant = '';\n    let result = '';\n    for (let i = arr.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(arr[i]) !== -1) {\n            vowel\
    \ = arr[i];\n            break;\n        }\n    }\n    for (let i = arr.length\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(arr[i]) !== -1) {\n    \
    \        consonant = arr[i];\n            break;\n        }\n    }\n    if (vowel\
    \ === '' || consonant === '') {\n        return result;\n    }\n    for (let i\
    \ = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === vowel) {\n        \
    \    result = vowel;\n            break;\n        }\n        if (arr[i] === consonant)\
    \ {\n            result = vowel;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "    let vowels = \"aeiou\";\n    let cons = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (cons.indexOf(word[i]) > -1) {\n            for (let j = i + 1; j\
    \ < word.length; j++) {\n                if (vowels.indexOf(word[j]) > -1) {\n\
    \                    result = word[j];\n                    break;\n         \
    \       }\n            }\n            break;\n        }\n    }\n    return result;\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n    for\
    \ (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i]) >=\
    \ 0) {\n            for (let j = i + 1; j < word.length; j++) {\n            \
    \    if (consonants.indexOf(word[j]) >= 0) {\n                    if (j - i <\
    \ closestDistance) {\n                        closestDistance = j - i;\n     \
    \                   closestVowel = word[i];\n                    }\n         \
    \           break;\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n", "    let vowels = \"aeiou\";\n    let closest = \"\";\n\
    \    let closest_distance = word.length;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            let distance\
    \ = word.length - i;\n            if (distance < closest_distance) {\n       \
    \         closest_distance = distance;\n                closest = word[i];\n \
    \           }\n        }\n    }\n    return closest;\n}\n", "    let vowels =\
    \ \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let result\
    \ = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            for (let j = i + 1; j < word.length; j++) {\n         \
    \       if (vowels.indexOf(word[j]) > -1) {\n                    result = word[j];\n\
    \                    break;\n                }\n            }\n            break;\n\
    \        }\n    }\n    return result;\n}\n", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let result = \"\";\n    let index = word.length - 1;\n    while (index\
    \ >= 0) {\n        if (vowels.indexOf(word[index]) !== -1) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (consonants.indexOf(word[i]) > -1) {\n            for (let j = i +\
    \ 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j]) > -1)\
    \ {\n                    result = word[j];\n                    break;\n     \
    \           }\n            }\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ wordArr = word.split(\"\");\n    let result = \"\";\n    for (let i = wordArr.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i]) !== -1) {\n    \
    \        result = wordArr[i];\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "    let vowels = \"aeiou\";\n    let cons = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (cons.indexOf(word[i]) != -1) {\n            for (let j = i; j >=\
    \ 0; j--) {\n                if (vowels.indexOf(word[j]) != -1) {\n          \
    \          result = word[j];\n                    break;\n                }\n\
    \            }\n            break;\n        }\n    }\n    return result;\n}\n",
  "    let vowels = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance\
    \ = word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) !== -1) {\n            if (i < closestDistance) {\n\
    \                closestDistance = i;\n                closestVowel = word[i];\n\
    \            }\n        }\n    }\n    return closestVowel;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "    let vowels = \"aeiou\"\
    ;\n    let cons = \"bcdfghjklmnpqrstvwxyz\";\n    let result = \"\";\n    let\
    \ index = word.length - 1;\n    while (index >= 0) {\n        if (cons.indexOf(word[index])\
    \ != -1) {\n            if (index == word.length - 1) {\n                return\
    \ result;\n            }\n            else {\n                if (vowels.indexOf(word[index\
    \ + 1]) != -1) {\n                    return word[index + 1];\n              \
    \  }\n                else {\n                    return result;\n           \
    \     }\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
