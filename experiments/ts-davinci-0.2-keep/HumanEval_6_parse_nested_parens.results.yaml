language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === '(') {\n                current_nesting++;\n   \
    \             max_nesting = Math.max(max_nesting, current_nesting);\n        \
    \    } else if (char === ')') {\n                current_nesting--;\n        \
    \    }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp___4iaqy.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(' ');\n  let paren_levels = [];\n\
    \  for (let paren_group of paren_groups) {\n    let paren_level = 0;\n    let\
    \ max_paren_level = 0;\n    for (let paren of paren_group) {\n      if (paren\
    \ === '(') {\n        paren_level++;\n      } else if (paren === ')') {\n    \
    \    paren_level--;\n      }\n      if (paren_level > max_paren_level) {\n   \
    \     max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8oavlgm2.ts(12,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(' ');\n  let result = [];\n  for\
    \ (let paren_group of paren_groups) {\n    let stack = [];\n    let max_depth\
    \ = 0;\n    for (let c of paren_group) {\n      if (c === '(') {\n        stack.push(c);\n\
    \        max_depth = Math.max(max_depth, stack.length);\n      } else if (c ===\
    \ ')') {\n        stack.pop();\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxiu8kwnz.ts(12,19): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_level: number\
    \ = 0;\n        let level: number = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                level++;\n\
    \                if (level > max_level) {\n                    max_level = level;\n\
    \                }\n            } else if (paren_group[i] === ')') {\n       \
    \         level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n \
    \   let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ '(') {\n        level++;\n        if (level > max_level) {\n          max_level\
    \ = level;\n        }\n      } else if (paren === ')') {\n        level--;\n \
    \     }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt141nz9w.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let count = 0;\n    for\
    \ (const char of paren) {\n      if (char === '(') {\n        count++;\n     \
    \   if (count > max) {\n          max = count;\n        }\n      } else if (char\
    \ === ')') {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps8mu_b79.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let count = 0;\n    for\
    \ (const char of paren) {\n      if (char === '(') {\n        count++;\n     \
    \   if (count > max) {\n          max = count;\n        }\n      } else if (char\
    \ === ')') {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps8mu_b79.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const parens = paren_string.split(' ');\n\
    \  for (const paren of parens) {\n    let max_depth = 0;\n    let depth = 0;\n\
    \    for (const char of paren) {\n      if (char === '(') {\n        depth++;\n\
    \        max_depth = Math.max(max_depth, depth);\n      } else if (char === ')')\
    \ {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp30zp5lhw.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zz3tubr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_level = 0;\n\
    \        let current_level = 0;\n        for (const char of group) {\n       \
    \     if (char === '(') {\n                current_level++;\n                max_level\
    \ = Math.max(max_level, current_level);\n            } else if (char === ')')\
    \ {\n                current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0fhrt544.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        const paren_level\
    \ = parse_nested_parens_helper(paren_group);\n        paren_levels.push(paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb59g6j33.ts(10,29): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu29a_xin.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const max_nesting_levels\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const max_nesting_level\
    \ = get_max_nesting_level(paren_group);\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdq_ys45v.ts(10,31): error TS2304: Cannot find name
    ''get_max_nesting_level''.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let nesting = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === '(') {\n        nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ nesting);\n      } else if (paren === ')') {\n        nesting--;\n      }\n\
    \    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3reckim8.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ level = 0;\n    for (const char of group) {\n      if (char === '(') {\n   \
    \     level++;\n        max_level = Math.max(max_level, level);\n      } else\
    \ if (char === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5ukue4_.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_counts = [];\n\
    \  for (const paren_group of paren_groups) {\n    paren_counts.push(count_nested_parens(paren_group));\n\
    \  }\n  return paren_counts;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyjdfgxr7.ts(10,23): error TS2304: Cannot find name
    ''count_nested_parens''.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_array = paren_string.split(' ');\n    let max_paren_array:\
    \ number[] = [];\n    paren_array.forEach(paren => {\n        let max_paren =\
    \ 0;\n        let current_paren = 0;\n        for (let i = 0; i < paren.length;\
    \ i++) {\n            if (paren[i] === '(') {\n                current_paren++;\n\
    \            } else if (paren[i] === ')') {\n                current_paren--;\n\
    \            }\n            if (current_paren > max_paren) {\n               \
    \ max_paren = current_paren;\n            }\n        }\n        max_paren_array.push(max_paren);\n\
    \    });\n    return max_paren_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  return paren_groups.map(paren_group\
    \ => {\n    let max_depth = 0;\n    let depth = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === '(') {\n        depth++;\n        max_depth\
    \ = Math.max(max_depth, depth);\n      } else if (paren_group[i] === ')') {\n\
    \        depth--;\n      }\n    }\n    return max_depth;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let count = 0;\n    for\
    \ (const char of paren) {\n      if (char === '(') {\n        count++;\n     \
    \   if (count > max) {\n          max = count;\n        }\n      } else if (char\
    \ === ')') {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps8mu_b79.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let max_level = 0;\n        let\
    \ current_level = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n\
    \            if (paren_group[i] === '(') {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (paren_group[i] ===\
    \ ')') {\n                current_level--;\n            }\n        }\n       \
    \ return max_level;\n    });\n    return paren_levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzmc284dr.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_nesting = 0;\n\
    \        let current_nesting = 0;\n        for (const char of group) {\n     \
    \       if (char === '(') {\n                current_nesting++;\n            }\
    \ else if (char === ')') {\n                current_nesting--;\n            }\n\
    \            if (current_nesting > max_nesting) {\n                max_nesting\
    \ = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzz3c6ydc.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = paren_groups.map(group => {\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let i = 0; i < group.length; i++) {\n            if (group[i]\
    \ === '(') {\n                level++;\n            } else if (group[i] === ')')\
    \ {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        return\
    \ max_level;\n    });\n    return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting++;\n  \
    \              max_nesting = Math.max(max_nesting, current_nesting);\n       \
    \     } else if (paren === ')') {\n                current_nesting--;\n      \
    \      }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnszn8pps.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let level = 0;\n   \
    \ let max_level = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        level++;\n      } else if (char === ')') {\n        level--;\n\
    \      }\n      max_level = Math.max(max_level, level);\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2aiyot5.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_nesting_level:\
    \ number = 0;\n        let current_nesting_level: number = 0;\n        for (let\
    \ paren of paren_group) {\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \                if (current_nesting_level > max_nesting_level) {\n          \
    \          max_nesting_level = current_nesting_level;\n                }\n   \
    \         } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n        }\n        result.push(max_nesting_level);\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcshn9wfr.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const res: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else {\n        current_nesting--;\n      }\n   \
    \ }\n    res.push(max_nesting);\n  }\n  return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ymb4ryn.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split('\
    \ ');\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group:\
    \ string = paren_groups[i];\n    let max_depth: number = 0;\n    let curr_depth:\
    \ number = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === '(') {\n        curr_depth++;\n        if (curr_depth > max_depth) {\n \
    \         max_depth = curr_depth;\n        }\n      } else if (paren_group[j]\
    \ === ')') {\n        curr_depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (paren === ')') {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw0j3u1cd.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === '(') {\n                paren_stack.push(paren);\n                max_nesting\
    \ = Math.max(max_nesting, paren_stack.length);\n            } else if (paren ===\
    \ ')') {\n                paren_stack.pop();\n            }\n        }\n     \
    \   result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        const stack: string[]\
    \ = [];\n        let max_depth = 0;\n        for (const char of paren_group) {\n\
    \            if (char === '(') {\n                stack.push(char);\n        \
    \        max_depth = Math.max(max_depth, stack.length);\n            } else if\
    \ (char === ')') {\n                stack.pop();\n            }\n        }\n \
    \       result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fofp08x.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    return paren_groups.map(paren_group\
    \ => {\n        let max_depth = 0;\n        let current_depth = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ '(') {\n                current_depth++;\n                max_depth = Math.max(max_depth,\
    \ current_depth);\n            } else if (paren_group[i] === ')') {\n        \
    \        current_depth--;\n            }\n        }\n        return max_depth;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zz3tubr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_nesting: number = 0;\n        let\
    \ current_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === '(') {\n                current_nesting++;\n\
    \                if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (paren_group[j]\
    \ === ')') {\n                current_nesting--;\n            }\n        }\n \
    \       result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let count = 0;\n    for\
    \ (const char of paren) {\n      if (char === '(') {\n        count++;\n     \
    \   if (count > max) {\n          max = count;\n        }\n      } else if (char\
    \ === ')') {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps8mu_b79.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of paren_group) {\n      if (paren === '(') {\n \
    \       level += 1;\n      } else if (paren === ')') {\n        level -= 1;\n\
    \      }\n      max_level = Math.max(max_level, level);\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiru9s286.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  return parens.map(paren => {\n\
    \    let max = 0;\n    let current = 0;\n    for (let i = 0; i < paren.length;\
    \ i++) {\n      if (paren[i] === '(') {\n        current++;\n        max = Math.max(max,\
    \ current);\n      } else {\n        current--;\n      }\n    }\n    return max;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(' ');\n  let result: number[] = [];\n\
    \  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group = paren_groups[i];\n\
    \    let stack: string[] = [];\n    let max_depth = 0;\n    for (let j = 0; j\
    \ < paren_group.length; j++) {\n      let char = paren_group[j];\n      if (char\
    \ === '(') {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === ')') {\n        stack.pop();\n   \
    \   }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0wagfsb.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === '(') {\n                current_depth++;\n     \
    \           if (current_depth > max_depth) {\n                    max_depth =\
    \ current_depth;\n                }\n            } else if (char === ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2vftk2rj.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === '(') {\n                current_depth++;\n     \
    \           max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (char === ')') {\n                current_depth--;\n            }\n     \
    \   }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9dbu77wc.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_count = 0;\n\
    \    let count = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        count++;\n        max_count = Math.max(max_count, count);\n\
    \      } else if (char === ')') {\n        count--;\n      }\n    }\n    result.push(max_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjjm3qjl.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = paren_groups.map(paren_group\
    \ => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === '(') {\n        level++;\n      } else\
    \ if (paren_group[i] === ')') {\n        level--;\n      }\n      max_level =\
    \ Math.max(max_level, level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let result = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      current_nesting++;\n      max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n    } else if (paren_string[i] === \")\") {\n      current_nesting--;\n\
    \    } else if (paren_string[i] === \" \") {\n      result.push(max_nesting);\n\
    \      max_nesting = 0;\n      current_nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === '(') {\n                current_depth++;\n     \
    \           max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (char === ')') {\n                current_depth--;\n            }\n     \
    \   }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9dbu77wc.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let depth: number = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (paren_group[i] === ')') {\n       \
    \         depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0wagfsb.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu29a_xin.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        result.push(parse_nested_parens_helper(group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzwbuweyp.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738542
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result = [];\n \
    \   for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group =\
    \ paren_groups[i];\n        let max_depth = 0;\n        let current_depth = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            let paren\
    \ = paren_group[j];\n            if (paren === '(') {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren === ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n    let\
    \ current_nesting = 0;\n    for (const paren of group) {\n      if (paren ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwcbxq6d.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738543
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let count = 0;\n   \
    \ let max_count = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === '(') {\n        count++;\n      } else if (paren === ')') {\n        count--;\n\
    \      }\n      max_count = Math.max(max_count, count);\n    }\n    result.push(max_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ihbo_xq.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (paren === ')') {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw0j3u1cd.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu29a_xin.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const results = [];\n\
    \    for (const paren_group of paren_groups) {\n        let max_nesting = 0;\n\
    \        let current_nesting = 0;\n        for (const paren of paren_group) {\n\
    \            if (paren === '(') {\n                current_nesting++;\n      \
    \          if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (paren === ')')\
    \ {\n                current_nesting--;\n            }\n        }\n        results.push(max_nesting);\n\
    \    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsrt7mrsl.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            current_depth++;\n            max_depth = Math.max(max_depth,\
    \ current_depth);\n        } else if (paren_string[i] === ')') {\n           \
    \ current_depth--;\n        } else if (paren_string[i] === ' ') {\n          \
    \  result.push(max_depth);\n            max_depth = 0;\n            current_depth\
    \ = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of paren_group) {\n      if (paren === '(') {\n \
    \       level++;\n      } else if (paren === ')') {\n        level--;\n      }\n\
    \      if (level > max_level) {\n        max_level = level;\n      }\n    }\n\
    \    paren_levels.push(max_level);\n  }\n  return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9cho_6n0.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_list = paren_string.split(' ');\n  const result: number[] =\
    \ [];\n  for (const paren of paren_list) {\n    let count = 0;\n    let max =\
    \ 0;\n    for (const char of paren) {\n      if (char === '(') {\n        count++;\n\
    \      } else if (char === ')') {\n        count--;\n      }\n      if (count\
    \ > max) {\n        max = count;\n      }\n    }\n    result.push(max);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2cg5w286.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zz3tubr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const paren_groups = paren_string.split('\
    \ ');\n    for (const paren_group of paren_groups) {\n        let max_depth =\
    \ 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (paren === ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy3cx5la8.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_depth = 0;\n    for (const char of paren_group) {\n     \
    \ if (char === '(') {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === ')') {\n        stack.pop();\n   \
    \   }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6zgm3gct.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (char === ')') {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwp3zdt5n.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzmc284dr.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const char of paren_group) {\n  \
    \          if (char === '(') {\n                depth++;\n                max_depth\
    \ = Math.max(max_depth, depth);\n            } else if (char === ')') {\n    \
    \            depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8k95shct.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0wagfsb.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const max_nesting_levels\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting_level\
    \ = 0;\n    let current_nesting_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === '(') {\n        current_nesting_level++;\n        if\
    \ (current_nesting_level > max_nesting_level) {\n          max_nesting_level =\
    \ current_nesting_level;\n        }\n      } else if (paren === ')') {\n     \
    \   current_nesting_level--;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqxj38xnr.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = paren_groups.map(paren_group\
    \ => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === '(') {\n        level++;\n      } else\
    \ if (paren_group[i] === ')') {\n        level--;\n      }\n      max_level =\
    \ Math.max(max_level, level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (const paren of paren_group) {\n    \
    \        if (paren === '(') {\n                level++;\n            } else if\
    \ (paren === ')') {\n                level--;\n            }\n            if (level\
    \ > max_level) {\n                max_level = level;\n            }\n        }\n\
    \        paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfym9me2t.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ depth = 0;\n    for (const char of group) {\n      if (char === '(') {\n   \
    \     depth++;\n        max_depth = Math.max(max_depth, depth);\n      } else\
    \ if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpem4b3r23.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_level\
    \ = 0;\n        let level = 0;\n        for (const char of paren_group) {\n  \
    \          if (char === '(') {\n                level++;\n                max_level\
    \ = Math.max(max_level, level);\n            } else if (char === ')') {\n    \
    \            level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwihzk1_l.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_level\
    \ = 0;\n        let current_level = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_level++;\n    \
    \            max_level = Math.max(max_level, current_level);\n            } else\
    \ if (paren === ')') {\n                current_level--;\n            }\n    \
    \    }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdal4c_2b.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = paren_groups.map(group\
    \ => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < group.length;\
    \ i++) {\n      if (group[i] === '(') {\n        level++;\n      } else if (group[i]\
    \ === ')') {\n        level--;\n      }\n      max_level = Math.max(max_level,\
    \ level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(' ');\n  let result = [];\n  for\
    \ (let paren_group of paren_groups) {\n    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i]\
    \ === '(') {\n        current_depth++;\n      } else if (paren_group[i] === ')')\
    \ {\n        current_depth--;\n      }\n      if (current_depth > max_depth) {\n\
    \        max_depth = current_depth;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738545
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    paren_levels.push(paren_group.split('').reduce((acc,\
    \ curr) => {\n      if (curr === '(') {\n        return acc + 1;\n      } else\
    \ if (curr === ')') {\n        return acc - 1;\n      }\n      return acc;\n \
    \   }, 0));\n  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpk45fi7zq.js:26:12)\n    at Object.<anonymous> (/tmp/tmpk45fi7zq.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of paren_group) {\n      if (paren === '(') {\n \
    \       level += 1;\n      } else if (paren === ')') {\n        level -= 1;\n\
    \      }\n      max_level = Math.max(max_level, level);\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiru9s286.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0wagfsb.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738542
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_nesting: number\
    \ = 0;\n        let nesting: number = 0;\n        for (let i: number = 0; i <\
    \ paren_group.length; i++) {\n            if (paren_group[i] === '(') {\n    \
    \            nesting++;\n                if (nesting > max_nesting) {\n      \
    \              max_nesting = nesting;\n                }\n            } else if\
    \ (paren_group[i] === ')') {\n                nesting--;\n            }\n    \
    \    }\n        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens = paren_string.split(' ');\n    let result: number[] = [];\n\
    \    for (let i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === '(') {\n              \
    \  level++;\n                if (level > max_level) {\n                    max_level\
    \ = level;\n                }\n            } else {\n                level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738545
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(' ');\n    const result: number[] =\
    \ [];\n    for (const paren of parens) {\n        let max = 0;\n        let count\
    \ = 0;\n        for (const char of paren) {\n            if (char === '(') {\n\
    \                count++;\n                if (count > max) {\n              \
    \      max = count;\n                }\n            } else if (char === ')') {\n\
    \                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk_ongh5j.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  return paren_groups.map(paren_group\
    \ => {\n    let max_nesting = 0;\n    let current_nesting = 0;\n    for (let i\
    \ = 0; i < paren_group.length; i++) {\n      if (paren_group[i] === '(') {\n \
    \       current_nesting++;\n        max_nesting = Math.max(max_nesting, current_nesting);\n\
    \      } else if (paren_group[i] === ')') {\n        current_nesting--;\n    \
    \  }\n    }\n    return max_nesting;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738545
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let paren_level = 0;\n    let\
    \ max_paren_level = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === '(') {\n        paren_level++;\n      } else if (paren === ')') {\n    \
    \    paren_level--;\n      }\n      if (paren_level > max_paren_level) {\n   \
    \     max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphihz6w0b.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_nesting: number = 0;\n        let\
    \ current_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let char: string = paren_group[j];\n            if (char\
    \ === '(') {\n                current_nesting++;\n                if (current_nesting\
    \ > max_nesting) {\n                    max_nesting = current_nesting;\n     \
    \           }\n            } else if (char === ')') {\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === '(') {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (char === ')') {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwp3zdt5n.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpropwdkwg.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(' ');\n    const result: number[] =\
    \ [];\n    for (const paren of parens) {\n        let max = 0;\n        let count\
    \ = 0;\n        for (const char of paren) {\n            if (char === '(') {\n\
    \                count++;\n                if (count > max) {\n              \
    \      max = count;\n                }\n            } else if (char === ')') {\n\
    \                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk_ongh5j.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let count = 0;\n    let max = 0;\n    for\
    \ (const char of paren) {\n      if (char === '(') {\n        count++;\n     \
    \ } else if (char === ')') {\n        count--;\n      }\n      if (count > max)\
    \ {\n        max = count;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy9x1zn02.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_stack = [];\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                paren_stack.push(paren);\n\
    \                max_nesting_level = Math.max(max_nesting_level, paren_stack.length);\n\
    \            } else if (paren === ')') {\n                paren_stack.pop();\n\
    \            }\n        }\n        max_nesting.push(max_nesting_level);\n    }\n\
    \    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    return paren_groups.map(paren_group\
    \ => {\n        let max_depth = 0;\n        let current_depth = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ '(') {\n                current_depth++;\n                max_depth = Math.max(max_depth,\
    \ current_depth);\n            } else if (paren_group[i] === ')') {\n        \
    \        current_depth--;\n            }\n        }\n        return max_depth;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result: number[]\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_depth =\
    \ 0;\n        let current_depth = 0;\n        for (let char of paren_group) {\n\
    \            if (char === '(') {\n                current_depth++;\n         \
    \       if (current_depth > max_depth) {\n                    max_depth = current_depth;\n\
    \                }\n            } else if (char === ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojkgnck9.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const paren_groups = paren_string.split('\
    \ ');\n    for (const group of paren_groups) {\n        let max_nesting = 0;\n\
    \        let current_nesting = 0;\n        for (const char of group) {\n     \
    \       if (char === '(') {\n                current_nesting++;\n            \
    \    max_nesting = Math.max(max_nesting, current_nesting);\n            } else\
    \ if (char === ')') {\n                current_nesting--;\n            }\n   \
    \     }\n        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp9sccth5.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (paren === ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpet8bc4gu.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zz3tubr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (paren === ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpet8bc4gu.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = paren_groups.map(group\
    \ => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < group.length;\
    \ i++) {\n      if (group[i] === '(') {\n        level++;\n      } else if (group[i]\
    \ === ')') {\n        level--;\n      }\n      max_level = Math.max(max_level,\
    \ level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const max_nested_parens:\
    \ number[] = [];\n  for (const paren_group of paren_groups) {\n    let max_nested_parens_count\
    \ = 0;\n    let current_nested_parens_count = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === '(') {\n        current_nested_parens_count++;\n    \
    \  } else if (paren === ')') {\n        current_nested_parens_count--;\n     \
    \ }\n      if (current_nested_parens_count > max_nested_parens_count) {\n    \
    \    max_nested_parens_count = current_nested_parens_count;\n      }\n    }\n\
    \    max_nested_parens.push(max_nested_parens_count);\n  }\n  return max_nested_parens;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd1iwp76d.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        result.push(get_nested_parens(paren_groups[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqu2de4qg.ts(10,21): error TS2552: Cannot find name
    ''get_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ level = 0;\n    for (const char of group) {\n      if (char === '(') {\n   \
    \     level++;\n        max_level = Math.max(max_level, level);\n      } else\
    \ if (char === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5ukue4_.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split('\
    \ ');\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzmc284dr.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_level: number\
    \ = 0;\n        let level: number = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === '(') {\n                level++;\n            \
    \    if (level > max_level) {\n                    max_level = level;\n      \
    \          }\n            } else if (paren === ')') {\n                level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpifrbwwlc.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let level = 0;\n        let max_level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === ')') {\n                level--;\n            }\n\
    \        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let paren_level\
    \ = 0;\n        let max_paren_level = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                paren_level++;\n      \
    \      } else if (paren === ')') {\n                paren_level--;\n         \
    \   }\n            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70shua6c.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  return paren_groups.map(paren_group\
    \ => {\n    let max_nesting = 0;\n    let current_nesting = 0;\n    for (let i\
    \ = 0; i < paren_group.length; i++) {\n      if (paren_group[i] === '(') {\n \
    \       current_nesting++;\n        max_nesting = Math.max(max_nesting, current_nesting);\n\
    \      } else if (paren_group[i] === ')') {\n        current_nesting--;\n    \
    \  }\n    }\n    return max_nesting;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738545
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const max_nesting_levels\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let nesting_level =\
    \ 0;\n    let max_nesting_level = 0;\n    for (const paren of paren_group) {\n\
    \      if (paren === '(') {\n        nesting_level++;\n      } else if (paren\
    \ === ')') {\n        nesting_level--;\n      }\n      if (nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzm1l0lwn.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split('\
    \ ');\n  for (let paren_group of paren_groups) {\n    let max_level: number =\
    \ 0;\n    let current_level: number = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === '(') {\n        current_level++;\n    \
    \  } else if (paren_group[i] === ')') {\n        current_level--;\n      }\n \
    \     if (current_level > max_level) {\n        max_level = current_level;\n \
    \     }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    // TODO: Implement this function\n    return [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7_mlf2hx.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7_mlf2hx.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(' ');\n  let max_nesting_levels =\
    \ [];\n  for (let paren_group of paren_groups) {\n    let paren_stack = [];\n\
    \    let nesting_level = 0;\n    for (let paren of paren_group) {\n      if (paren\
    \ === '(') {\n        paren_stack.push(paren);\n        nesting_level++;\n   \
    \   } else if (paren === ')') {\n        paren_stack.pop();\n        nesting_level--;\n\
    \      }\n    }\n    max_nesting_levels.push(nesting_level);\n  }\n  return max_nesting_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo6agwfiq.ts(12,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === '(') {\n                current_nesting++;\n   \
    \             max_nesting = Math.max(max_nesting, current_nesting);\n        \
    \    } else if (char === ')') {\n                current_nesting--;\n        \
    \    }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp___4iaqy.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting++;\n  \
    \              max_nesting = Math.max(max_nesting, current_nesting);\n       \
    \     } else if (paren === ')') {\n                current_nesting--;\n      \
    \      }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnszn8pps.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const paren of group) {\n      if (paren === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (paren === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc8_ie84l.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split('\
    \ ');\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group:\
    \ string = paren_groups[i];\n    let max_level: number = 0;\n    let level: number\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === '(') {\n        level++;\n        if (level > max_level) {\n          max_level\
    \ = level;\n        }\n      } else if (paren_group[j] === ')') {\n        level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const max_nesting_levels\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting_level\
    \ = 0;\n    let current_nesting_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === '(') {\n        current_nesting_level++;\n        if\
    \ (current_nesting_level > max_nesting_level) {\n          max_nesting_level =\
    \ current_nesting_level;\n        }\n      } else if (paren === ')') {\n     \
    \   current_nesting_level--;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqxj38xnr.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_level: number = 0;\n        let current_level:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === '(') {\n                current_level++;\n     \
    \           if (current_level > max_level) {\n                    max_level =\
    \ current_level;\n                }\n            } else if (paren_group[j] ===\
    \ ')') {\n                current_level--;\n            }\n        }\n       \
    \ result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const paren of paren_group) {\n \
    \           if (paren === '(') {\n                depth++;\n            } else\
    \ if (paren === ')') {\n                depth--;\n            }\n            if\
    \ (depth > max_depth) {\n                max_depth = depth;\n            }\n \
    \       }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp11hlsv1y.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_level\
    \ = 0;\n        let level = 0;\n        for (const char of paren_group) {\n  \
    \          if (char === '(') {\n                level++;\n                max_level\
    \ = Math.max(max_level, level);\n            } else if (char === ')') {\n    \
    \            level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwihzk1_l.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === '(') {\n                level++;\n            } else if\
    \ (paren_group[i] === ')') {\n                level--;\n            }\n      \
    \      max_level = Math.max(max_level, level);\n        }\n        return max_level;\n\
    \    });\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ level = 0;\n    for (const char of group) {\n      if (char === '(') {\n   \
    \     level++;\n        max_level = Math.max(max_level, level);\n      } else\
    \ if (char === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5ukue4_.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of paren_group) {\n      if (paren === '(') {\n \
    \       level++;\n      } else if (paren === ')') {\n        level--;\n      }\n\
    \      if (level > max_level) {\n        max_level = level;\n      }\n    }\n\
    \    paren_levels.push(max_level);\n  }\n  return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9cho_6n0.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (const paren of paren_group) {\n    \
    \        if (paren === '(') {\n                level++;\n            } else if\
    \ (paren === ')') {\n                level--;\n            }\n            if (level\
    \ > max_level) {\n                max_level = level;\n            }\n        }\n\
    \        paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfym9me2t.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ '(') {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (paren === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoisqfd24.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const char of group) {\n      if (char === '(') {\n        level++;\n\
    \      } else if (char === ')') {\n        level--;\n      }\n      if (level\
    \ > max_level) {\n        max_level = level;\n      }\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcrv6p4jg.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738548
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_depth = 0;\n\
    \        let current_depth = 0;\n        for (const char of group) {\n       \
    \     if (char === '(') {\n                current_depth++;\n                max_depth\
    \ = Math.max(max_depth, current_depth);\n            } else if (char === ')')\
    \ {\n                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_z49o3yn.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738548
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const char of group) {\n      if (char === '(') {\n        level++;\n\
    \      } else if (char === ')') {\n        level--;\n      }\n      if (level\
    \ > max_level) {\n        max_level = level;\n      }\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcrv6p4jg.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738548
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(paren_group => {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_depth++;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else {\n                current_depth--;\n            }\n        }\n     \
    \   return max_depth;\n    });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === ')') {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78ur8fh4.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of paren_group) {\n      if (paren === '(') {\n \
    \       level += 1;\n      } else if (paren === ')') {\n        level -= 1;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c6azuw0.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result = [];\n \
    \   for (let paren_group of paren_groups) {\n        let max_depth = 0;\n    \
    \    let current_depth = 0;\n        for (let paren of paren_group) {\n      \
    \      if (paren === '(') {\n                current_depth++;\n              \
    \  max_depth = Math.max(max_depth, current_depth);\n            } else {\n   \
    \             current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph3b7uxoq.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (const paren of paren_group) {\n    \
    \        if (paren === '(') {\n                level++;\n            } else if\
    \ (paren === ')') {\n                level--;\n            }\n            if (level\
    \ > max_level) {\n                max_level = level;\n            }\n        }\n\
    \        paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfym9me2t.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const paren_groups = paren_string.split('\
    \ ');\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting++;\n  \
    \          } else if (paren === ')') {\n                current_nesting--;\n \
    \           }\n            if (current_nesting > max_nesting) {\n            \
    \    max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0d6q9a26.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === '(') {\n                current_depth += 1;\n  \
    \              max_depth = Math.max(max_depth, current_depth);\n            }\
    \ else if (char === ')') {\n                current_depth -= 1;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp25tgcno9.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (char === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfj2j712a.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            if (current_depth > max_depth) {\n                    max_depth =\
    \ current_depth;\n                }\n            } else if (paren === ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiuv_qxyw.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_array: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ string = paren_array[i];\n        let paren_stack: string[] = [];\n        let\
    \ max_nesting: number = 0;\n        for (let j = 0; j < paren_group.length; j++)\
    \ {\n            let paren: string = paren_group[j];\n            if (paren ===\
    \ '(') {\n                paren_stack.push(paren);\n                max_nesting\
    \ = Math.max(max_nesting, paren_stack.length);\n            } else if (paren ===\
    \ ')') {\n                paren_stack.pop();\n            }\n        }\n     \
    \   result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  return paren_groups.map(paren_group\
    \ => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0;\
    \ i < paren_group.length; i++) {\n      if (paren_group[i] === '(') {\n      \
    \  current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (paren_group[i] === ')') {\n        current_depth--;\n      }\n\
    \    }\n    return max_depth;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result = [];\n \
    \   for (let paren_group of paren_groups) {\n        let max_nesting = 0;\n  \
    \      let nesting = 0;\n        for (let i = 0; i < paren_group.length; i++)\
    \ {\n            if (paren_group[i] === '(') {\n                nesting++;\n \
    \               if (nesting > max_nesting) {\n                    max_nesting\
    \ = nesting;\n                }\n            } else if (paren_group[i] === ')')\
    \ {\n                nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const paren of group) {\n      if (paren === '(') {\n       \
    \ level++;\n      } else if (paren === ')') {\n        level--;\n      }\n   \
    \   if (level > max_level) {\n        max_level = level;\n      }\n    }\n   \
    \ paren_levels.push(max_level);\n  }\n  return paren_levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo9vle9mq.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_level = 0;\n\
    \        let current_level = 0;\n        for (const char of group) {\n       \
    \     if (char === '(') {\n                current_level++;\n                max_level\
    \ = Math.max(max_level, current_level);\n            } else if (char === ')')\
    \ {\n                current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0fhrt544.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    return paren_groups.map(group\
    \ => {\n        let max_depth = 0;\n        let current_depth = 0;\n        for\
    \ (let i = 0; i < group.length; i++) {\n            if (group[i] === '(') {\n\
    \                current_depth++;\n                max_depth = Math.max(max_depth,\
    \ current_depth);\n            } else if (group[i] === ')') {\n              \
    \  current_depth--;\n            }\n        }\n        return max_depth;\n   \
    \ });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(' ');\n    const result: number[] =\
    \ [];\n    for (const paren of parens) {\n        let max_depth = 0;\n       \
    \ let current_depth = 0;\n        for (const char of paren) {\n            if\
    \ (char === '(') {\n                current_depth++;\n                max_depth\
    \ = Math.max(max_depth, current_depth);\n            } else if (char === ')')\
    \ {\n                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo94tf2u_.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    return paren_groups.map(paren_group\
    \ => {\n        let max_depth = 0;\n        let curr_depth = 0;\n        for (let\
    \ i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === '(')\
    \ {\n                curr_depth++;\n                max_depth = Math.max(max_depth,\
    \ curr_depth);\n            } else if (paren_group[i] === ')') {\n           \
    \     curr_depth--;\n            }\n        }\n        return max_depth;\n   \
    \ });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(paren_group => {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_depth++;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else {\n                current_depth--;\n            }\n        }\n     \
    \   return max_depth;\n    });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split('\
    \ ');\n  paren_groups.forEach((group) => {\n    let count: number = 0;\n    let\
    \ max: number = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i]\
    \ === '(') {\n        count++;\n        if (count > max) {\n          max = count;\n\
    \        }\n      } else if (group[i] === ')') {\n        count--;\n      }\n\
    \    }\n    result.push(max);\n  });\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === '(') {\n                level++;\n            } else if\
    \ (paren_group[i] === ')') {\n                level--;\n            }\n      \
    \      max_level = Math.max(max_level, level);\n        }\n        return max_level;\n\
    \    });\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = paren_groups.map(paren_group\
    \ => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === '(') {\n        level++;\n      } else\
    \ if (paren_group[i] === ')') {\n        level--;\n      }\n      max_level =\
    \ Math.max(max_level, level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting++;\n  \
    \              max_nesting = Math.max(max_nesting, current_nesting);\n       \
    \     } else if (paren === ')') {\n                current_nesting--;\n      \
    \      }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnszn8pps.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_depth = 0;\n\
    \        let current_depth = 0;\n        for (const char of group) {\n       \
    \     if (char === '(') {\n                current_depth++;\n                max_depth\
    \ = Math.max(max_depth, current_depth);\n            } else if (char === ')')\
    \ {\n                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_z49o3yn.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738548
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const char of group) {\n      if (char === '(') {\n        level++;\n\
    \      } else if (char === ')') {\n        level--;\n      }\n      if (level\
    \ > max_level) {\n        max_level = level;\n      }\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcrv6p4jg.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738548
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result = [];\n \
    \   for (let paren_group of paren_groups) {\n        let max_depth = 0;\n    \
    \    let current_depth = 0;\n        for (let i = 0; i < paren_group.length; i++)\
    \ {\n            if (paren_group[i] === '(') {\n                current_depth++;\n\
    \            } else {\n                current_depth--;\n            }\n     \
    \       if (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === ')') {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zz3tubr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const paren of paren_group) {\n \
    \           if (paren === '(') {\n                depth++;\n            } else\
    \ if (paren === ')') {\n                depth--;\n            }\n            if\
    \ (depth > max_depth) {\n                max_depth = depth;\n            }\n \
    \       }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp11hlsv1y.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq67zkpbk.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let count = 0;\n    let max_count\
    \ = 0;\n    for (const char of group) {\n      if (char === '(') {\n        count++;\n\
    \      } else if (char === ')') {\n        count--;\n      }\n      max_count\
    \ = Math.max(max_count, count);\n    }\n    result.push(max_count);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3bjqranu.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu29a_xin.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_level = 0;\n\
    \        let current_level = 0;\n        for (const char of group) {\n       \
    \     if (char === '(') {\n                current_level++;\n                max_level\
    \ = Math.max(max_level, current_level);\n            } else if (char === ')')\
    \ {\n                current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0fhrt544.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const max_nesting\
    \ = paren_groups.map(paren_group => {\n        let max_nesting = 0;\n        let\
    \ current_nesting = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n\
    \            if (paren_group[i] === '(') {\n                current_nesting++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        return\
    \ max_nesting;\n    });\n    return max_nesting;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let current = 0;\n   \
    \ for (const char of paren) {\n      if (char === '(') {\n        current++;\n\
    \        max = Math.max(max, current);\n      } else {\n        current--;\n \
    \     }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnrxl6i4f.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738550
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  return paren_groups.map(paren_group\
    \ => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0;\
    \ i < paren_group.length; i++) {\n      if (paren_group[i] === '(') {\n      \
    \  current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (paren_group[i] === ')') {\n        current_depth--;\n      }\n\
    \    }\n    return max_depth;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738549
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const results: number[] = [];\n\
    \  for (const paren of parens) {\n    let max = 0;\n    let current = 0;\n   \
    \ for (const char of paren) {\n      if (char === '(') {\n        current++;\n\
    \        if (current > max) {\n          max = current;\n        }\n      } else\
    \ if (char === ')') {\n        current--;\n      }\n    }\n    results.push(max);\n\
    \  }\n  return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbcmfrgla.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === '(') {\n                current_nesting_level++;\n\
    \            } else if (char === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj3bs73mq.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n\
    \  for (const paren_group of paren_groups) {\n    let paren_level = 0;\n    let\
    \ max_paren_level = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === '(') {\n        paren_level++;\n      } else if (paren === ')') {\n    \
    \    paren_level--;\n      }\n      if (paren_level > max_paren_level) {\n   \
    \     max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphihz6w0b.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let result = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      current_nesting++;\n      max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n    } else if (paren_string[i] === \")\") {\n      current_nesting--;\n\
    \    } else if (paren_string[i] === \" \") {\n      result.push(max_nesting);\n\
    \      max_nesting = 0;\n      current_nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_depth = 0;\n    for (const char of paren_group) {\n     \
    \ if (char === '(') {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === ')') {\n        stack.pop();\n   \
    \   }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6zgm3gct.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  const result: number[] = [];\n\
    \  for (const paren of parens) {\n    result.push(parse_parens(paren));\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp15tn3xi6.ts(10,17): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1659738550
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let max_level = 0;\n        let\
    \ current_level = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n\
    \            if (paren_group[i] === '(') {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (paren_group[i] ===\
    \ ')') {\n                current_level--;\n            }\n        }\n       \
    \ return max_level;\n    });\n    return paren_levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ '(') {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (paren === ')') {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoisqfd24.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738547
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (paren === ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpet8bc4gu.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split('\
    \ ');\n  for (let paren_group of paren_groups) {\n    let max_level = 0;\n   \
    \ let current_level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n\
    \      if (paren_group[i] === '(') {\n        current_level++;\n      } else if\
    \ (paren_group[i] === ')') {\n        current_level--;\n      }\n      if (current_level\
    \ > max_level) {\n        max_level = current_level;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738550
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let paren_group of paren_groups) {\n        let max_level: number\
    \ = 0;\n        let current_level: number = 0;\n        for (let i: number = 0;\
    \ i < paren_group.length; i++) {\n            if (paren_group[i] === '(') {\n\
    \                current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (paren_group[i] === ')') {\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjep75aa.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738544
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_nesting_level: number = 0;\n    \
    \    let current_nesting_level: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === '(') {\n                current_nesting_level++;\n\
    \                if (current_nesting_level > max_nesting_level) {\n          \
    \          max_nesting_level = current_nesting_level;\n                }\n   \
    \         } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n        }\n        result.push(max_nesting_level);\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu29a_xin.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_depth++;\n    \
    \            max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (paren === ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpet8bc4gu.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738546
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels = [];\n\
    \    for (let paren_group of paren_groups) {\n        let paren_level = 0;\n \
    \       let max_level = 0;\n        for (let paren of paren_group) {\n       \
    \     if (paren === '(') {\n                paren_level++;\n            } else\
    \ if (paren === ')') {\n                paren_level--;\n            }\n      \
    \      if (paren_level > max_level) {\n                max_level = paren_level;\n\
    \            }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppyjqpxuo.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738550
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(' ');\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === '(') {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9qhgeyd.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738539
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(' ');\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting++;\n  \
    \              max_nesting = Math.max(max_nesting, current_nesting);\n       \
    \     } else if (paren === ')') {\n                current_nesting--;\n      \
    \      }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnszn8pps.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738541
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split('\
    \ ');\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === '(') {\n                paren_stack.push(paren);\n                max_nesting\
    \ = Math.max(max_nesting, paren_stack.length);\n            } else if (paren ===\
    \ ')') {\n                paren_stack.pop();\n            }\n        }\n     \
    \   result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738542
