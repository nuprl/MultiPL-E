name: HumanEval_30_get_positive
language: humaneval_to_typescript.py
prompt: "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2,\
  \ 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0,\
  \ 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
  \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
completions: ["    return l.filter(function(x) {\n        return x > 0;\n    });\n\
    }\n", "    return l.filter(function(n) {\n        return n > 0;\n    });\n}\n",
  "    return l.filter(x => x > 0);\n}\n", "    return l.filter(x => x > 0);\n}\n",
  "    return l.filter(x => x > 0);\n}\n", "    return l.filter(function(num) {\n\
    \        return num > 0;\n    });\n}\n", "    return l.filter(function(num) {\n\
    \        return num > 0;\n    });\n}\n", "    return l.filter(function(x) {\n\
    \        return x > 0;\n    });\n}\n", "    return l.filter(function(n) {\n  \
    \      return n > 0;\n    });\n}\n", "    return l.filter(x => x > 0);\n}\n",
  "    return l.filter(function(n) {\n        return n > 0;\n    });\n}\n", "    return\
    \ l.filter(x => x > 0);\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return\
    \ l.filter(x => x > 0);\n}\n", "    let result: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return l.filter(x => x > 0);\n\
    }\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(x => x > 0);\n\
    }\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(x => x > 0);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
