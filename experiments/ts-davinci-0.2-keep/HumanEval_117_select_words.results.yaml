language: ts
name: HumanEval_117_select_words
results:
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let word of words) {\n        let consonants:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpkaoxaxtr.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpkaoxaxtr.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe2huzn5f.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4dkyqvbc.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (isConsonant(letter)) {\n           \
    \     consonants++;\n            }\n        }\n        if (consonants === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqm0tdwq.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word[i] != \"a\" && word[i]\
    \ != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpt43y_l38.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpt43y_l38.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (isConsonant(letter)) {\n           \
    \     consonants++;\n            }\n        }\n        if (consonants === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqm0tdwq.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words\
    \ = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n        let\
    \ word = words[i];\n        let consonants = 0;\n        for (let j = 0; j < word.length;\
    \ j++) {\n            if (isConsonant(word[j])) {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpj2jx7qow.ts(19,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() != 'a' && letter.toLowerCase()\
    \ != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase() != 'o' && letter.toLowerCase()\
    \ != 'u') {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants == n) {\n            result.push(word);\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i\
    \ = 0; i < words.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j]))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpi5efr2qg.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpi5efr2qg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() != 'a' && letter.toLowerCase()\
    \ != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase() != 'o' && letter.toLowerCase()\
    \ != 'u') {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants == n) {\n            result.push(word);\n        }\n    }\n \
    \   return result;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word[i] !== \"a\" && word[i]\
    \ !== \"e\" && word[i] !== \"i\" && word[i] !== \"o\" && word[i] !== \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpqstgpwrw.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpqstgpwrw.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (!isVowel(word[j])) {\n                consonants++;\n       \
    \     }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjvne_ink.ts(19,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (isConsonant(char)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3dkka83n.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (char.match(/[^aeiou]/i)) {\n              \
    \  count++;\n            }\n        }\n        if (count === n) {\n          \
    \  result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6_n2nhg1.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333980
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let words = s.split(' ');\n    let result = [];\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (!vowels.includes(words[i][j])) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp4e8nhxnc.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp4e8nhxnc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let arr = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (countConsonants(arr[i])\
    \ === n) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7jrehby7.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != 'a' && char != 'e' &&\
    \ char != 'i' && char != 'o' && char != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8p9g6t2z.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8p9g6t2z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let word of words) {\n    let count = 0;\n    for (let i = 0;\
    \ i < word.length; i++) {\n      if (isConsonant(word[i])) {\n        count++;\n\
    \      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp34w91dv.ts(18,11): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let char of word) {\n            if (char.match(/[^aeiou]/i)) {\n         \
    \       consonants++;\n            }\n        }\n        if (consonants === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333980
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        let consonants = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  let words =\
    \ s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let word =\
    \ words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n\
    \      if (isConsonant(word[j])) {\n        count++;\n      }\n    }\n    if (count\
    \ === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp_5hbuaa_.ts(19,11): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != 'a' && char != 'e' &&\
    \ char != 'i' && char != 'o' && char != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8p9g6t2z.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8p9g6t2z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333980
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const words = s.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n\
    \        const consonants = word.match(/[^aeiou]/g);\n        if (consonants &&\
    \ consonants.length === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp_9634b_g.js:31:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp_9634b_g.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333982
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let consonants: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            if (word[j]\
    \ !== \"a\" && word[j] !== \"e\" && word[j] !== \"i\" && word[j] !== \"o\" &&\
    \ word[j] !== \"u\") {\n                consonants++;\n            }\n       \
    \ }\n        if (consonants === n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3gdhwxao.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3gdhwxao.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333982
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmppfe8bf48.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let char of word) {\n            if (isConsonant(char))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpq6p_t9bn.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== \"a\" && char !== \"\
    e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n               \
    \ consonants++;\n            }\n        }\n        if (consonants === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp5521z4xi.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp5521z4xi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\") {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ==\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpsrvs89f0.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsrvs89f0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].match(/[aeiou]/gi)\
    \ === null && words[i].length === n) {\n            result.push(words[i]);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptjf3qjx4.js:25:12)\n  \
    \  at Object.<anonymous> (/tmp/tmptjf3qjx4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter.toLowerCase() != \"\
    a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase() != \"i\" && letter.toLowerCase()\
    \ != \"o\" && letter.toLowerCase() != \"u\") {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n          \
    \      count++;\n            }\n        }\n        if (count === n) {\n      \
    \      result.push(word);\n        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let consonants: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            if (word[j]\
    \ !== \"a\" && word[j] !== \"e\" && word[j] !== \"i\" && word[j] !== \"o\" &&\
    \ word[j] !== \"u\") {\n                consonants++;\n            }\n       \
    \ }\n        if (consonants === n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3gdhwxao.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3gdhwxao.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333982
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (!isVowel(char)) {\n        \
    \        consonants++;\n            }\n        }\n        if (consonants === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpfobzojs1.ts(20,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9iklvx2q.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() != 'a' && letter.toLowerCase()\
    \ != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase() != 'o' && letter.toLowerCase()\
    \ != 'u') {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants == n) {\n            result.push(word);\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (isVowel(letter)) {\n        \
    \        count++;\n            }\n        }\n        if (count === n) {\n    \
    \        result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9l27os_d.ts(20,17): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (letter !== \"a\" && letter !==\
    \ \"e\" && letter !== \"i\" && letter !== \"o\" && letter !== \"u\") {\n     \
    \           count++;\n            }\n        }\n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpvsoo1flw.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpvsoo1flw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (isConsonant(letter)) {\n           \
    \     consonants++;\n            }\n        }\n        if (consonants === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphepe7ibc.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let arr = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(/[aeiou]/gi)\
    \ === null) {\n            if (arr[i].length === n) {\n                result.push(arr[i]);\n\
    \            }\n        } else {\n            if (arr[i].length - arr[i].match(/[aeiou]/gi).length\
    \ === n) {\n                result.push(arr[i]);\n            }\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333980
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for\
    \ (let j = 0; j < words[i].length; j++) {\n      if (\n        words[i][j] !=\
    \ \"a\" &&\n        words[i][j] != \"e\" &&\n        words[i][j] != \"i\" &&\n\
    \        words[i][j] != \"o\" &&\n        words[i][j] != \"u\"\n      ) {\n  \
    \      count++;\n      }\n    }\n    if (count == n) {\n      result.push(words[i]);\n\
    \    }\n  }\n  return result;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpbjjdx33b.js:44:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpbjjdx33b.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let word of\
    \ words) {\n        let count = 0;\n        for (let letter of word) {\n     \
    \       if (!vowels.includes(letter)) {\n                count++;\n          \
    \  }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpre1vfd2w.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpre1vfd2w.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  const words = s.split(\" \");\n  const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const result = [];\n  for (let i =\
    \ 0; i < words.length; i++) {\n    let consonants = 0;\n    for (let j = 0; j\
    \ < words[i].length; j++) {\n      if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char != 'a' && char != 'e' && char\
    \ != 'i' && char != 'o' && char != 'u') {\n                count++;\n        \
    \    }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpzem98sfx.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpzem98sfx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== 'a' && char !== 'e'\
    \ && char !== 'i' && char !== 'o' && char !== 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp9aw8zzcj.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9aw8zzcj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       let word: string = words[i];\n        let consonants: number = 0;\n  \
    \      for (let j = 0; j < word.length; j++) {\n            let char: string =\
    \ word[j];\n            if (char.match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n      \
    \          consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (word[i] != \"a\" && word[i]\
    \ != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i] != \"u\") {\n  \
    \              count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpcxz8e2h0.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpcxz8e2h0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let word of words) {\n        let consonants:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word[i] !== \"a\" && word[i] !== \"e\" && word[i] !== \"i\" && word[i]\
    \ !== \"o\" && word[i] !== \"u\") {\n                consonants++;\n         \
    \   }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk8sx9tf8.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpk8sx9tf8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333986
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let arr: string[] = s.split(' ');\n    let\
    \ result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ let count: number = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n\
    \            if (arr[i][j] !== 'a' && arr[i][j] !== 'e' && arr[i][j] !== 'i' &&\
    \ arr[i][j] !== 'o' && arr[i][j] !== 'u') {\n                count++;\n      \
    \      }\n        }\n        if (count === n) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpp__bfhxy.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpp__bfhxy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333986
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (word[j] !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j]\
    \ !== 'o' && word[j] !== 'u') {\n                consonants++;\n            }\n\
    \        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmppynmk2rf.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmppynmk2rf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333986
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let consonants: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            if (word[j]\
    \ !== \"a\" && word[j] !== \"e\" && word[j] !== \"i\" && word[j] !== \"o\" &&\
    \ word[j] !== \"u\") {\n                consonants++;\n            }\n       \
    \ }\n        if (consonants === n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3gdhwxao.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3gdhwxao.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333982
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != 'a' && char != 'e' &&\
    \ char != 'i' && char != 'o' && char != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8p9g6t2z.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8p9g6t2z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = 'aeiouAEIOU';\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let consonants = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (!vowels.includes(words[i][j])) {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333986
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (!isVowel(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp85sbaqc6.ts(19,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333986
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (isConsonant(char)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3dkka83n.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const result: string[] = [];\n    const\
    \ words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n      \
    \  const word = words[i];\n        if (countConsonants(word) === n) {\n      \
    \      result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp5t9ht6b4.ts(17,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333986
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       if (words[i].match(/[aeiou]/gi) === null) {\n            if (words[i].length\
    \ === n) {\n                result.push(words[i]);\n            }\n        } else\
    \ {\n            if (words[i].length - words[i].match(/[aeiou]/gi).length ===\
    \ n) {\n                result.push(words[i]);\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (!isVowel(word[i])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpahmbkuj8.ts(18,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333986
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char.match(/[^aeiou]/i)) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' &&\
    \ words[i][j] != 'u') {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(words[i]);\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpuhf71l_d.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpuhf71l_d.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== 'a' && char !== 'e'\
    \ && char !== 'i' && char !== 'o' && char !== 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp9aw8zzcj.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9aw8zzcj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        let consonants = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333980
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char != \"a\" && char != \"e\"\
    \ && char != \"i\" && char != \"o\" && char != \"u\") {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp1xzru92o.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp1xzru92o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/g);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp0e_sx0qb.js:30:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0e_sx0qb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (isConsonant(char)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3dkka83n.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (letter !== \"a\" && letter !==\
    \ \"e\" && letter !== \"i\" && letter !== \"o\" && letter !== \"u\") {\n     \
    \           count++;\n            }\n        }\n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpvsoo1flw.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpvsoo1flw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let word of words) {\n    let count = 0;\n    for (let char of\
    \ word) {\n      if (isConsonant(char)) {\n        count++;\n      }\n    }\n\
    \    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpnx5tqtsi.ts(18,11): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char != 'a' && char != 'e' && char\
    \ != 'i' && char != 'o' && char != 'u') {\n                count++;\n        \
    \    }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpzem98sfx.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpzem98sfx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9iklvx2q.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let char of word) {\n            if (isConsonant(char)) {\n               \
    \ consonants++;\n            }\n        }\n        if (consonants === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdlp7q592.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333987
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333980
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (letter.match(/[aeiou]/i)) {\n           \
    \     count++;\n            }\n        }\n        if (word.length - count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== \"a\" && char !== \"\
    e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n               \
    \ consonants++;\n            }\n        }\n        if (consonants === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp5521z4xi.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp5521z4xi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== 'a' && char !== 'e'\
    \ && char !== 'i' && char !== 'o' && char !== 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp9aw8zzcj.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9aw8zzcj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    let result = [];\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let letter of word) {\n            if\
    \ (consonants.includes(letter.toLowerCase())) {\n                count++;\n  \
    \          }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (!isVowel(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmporwaeixd.ts(19,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333987
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words: string[] = s.split(\" \");\n\
    \    let result: string[] = [];\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        let word: string = words[i];\n        let consonants: number\
    \ = 0;\n        for (let j: number = 0; j < word.length; j++) {\n            let\
    \ letter: string = word[j];\n            if (letter.match(/[^aeiou]/i)) {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let word of\
    \ words) {\n        let count = 0;\n        for (let letter of word) {\n     \
    \       if (!vowels.includes(letter)) {\n                count++;\n          \
    \  }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpre1vfd2w.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpre1vfd2w.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (countConsonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsixg1813.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333987
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() != \"a\" && letter.toLowerCase()\
    \ != \"e\" && letter.toLowerCase() != \"i\" && letter.toLowerCase() != \"o\" &&\
    \ letter.toLowerCase() != \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (isConsonant(word[j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3aqjvq1f.ts(19,11): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4dkyqvbc.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let char of word) {\n            if (char.match(/[^aeiou]/i)) {\n         \
    \       consonants++;\n            }\n        }\n        if (consonants === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333980
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (\n\
    \        word[j] != \"a\" &&\n        word[j] != \"e\" &&\n        word[j] !=\
    \ \"i\" &&\n        word[j] != \"o\" &&\n        word[j] != \"u\"\n      ) {\n\
    \        count++;\n      }\n    }\n    if (count == n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpyggyhyzw.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpyggyhyzw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/g);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp0e_sx0qb.js:30:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0e_sx0qb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words = s.split(\" \");\n  let result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      let letter\
    \ = word[j];\n      if (\n        letter != \"a\" &&\n        letter != \"e\"\
    \ &&\n        letter != \"i\" &&\n        letter != \"o\" &&\n        letter !=\
    \ \"u\"\n      ) {\n        count++;\n      }\n    }\n    if (count == n) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpydv6r681.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpydv6r681.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333989
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word[i] !== 'a' && word[i]\
    \ !== 'e' && word[i] !== 'i' && word[i] !== 'o' && word[i] !== 'u') {\n      \
    \          consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpw6ez1po0.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpw6ez1po0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333989
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (isConsonant(letter)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbjhilv7i.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333989
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char != \"a\" && char != \"e\"\
    \ && char != \"i\" && char != \"o\" && char != \"u\") {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp1xzru92o.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp1xzru92o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    return s.split(' ').filter(word => word.replace(/[aeiou]/gi,\
    \ '').length === n);\n}\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333990
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (letter.match(/[aeiou]/i)) {\n           \
    \     count++;\n            }\n        }\n        if (word.length - count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let word of\
    \ words) {\n        let count = 0;\n        for (let letter of word) {\n     \
    \       if (!vowels.includes(letter)) {\n                count++;\n          \
    \  }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpre1vfd2w.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpre1vfd2w.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  if (s.length === 0) return [];\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    let consonants = 0;\n    for (let j\
    \ = 0; j < word.length; j++) {\n      if (\n        word[j] !== \"a\" &&\n   \
    \     word[j] !== \"e\" &&\n        word[j] !== \"i\" &&\n        word[j] !==\
    \ \"o\" &&\n        word[j] !== \"u\"\n      ) {\n        consonants++;\n    \
    \  }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp32ocuagb.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp32ocuagb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333990
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (isVowel(letter)) {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp72t7_0fx.ts(20,17): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333989
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (isConsonant(char)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3dkka83n.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (!isVowel(word[i])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6rqj80fo.ts(18,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333990
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words: string[] = s.split(\" \");\n\
    \    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n\
    \        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp56ln9jq9.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word[i] != \"a\" && word[i]\
    \ != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpt3fcibb6.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpt3fcibb6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    return s.split(' ').filter(word => {\n \
    \       return word.split('').filter(letter => {\n            return !'aeiou'.includes(letter.toLowerCase());\n\
    \        }).length === n;\n    });\n}\n\nconsole.log(select_words(\"Mary had a\
    \ little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\n\
    console.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (word[j] !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j]\
    \ !== 'o' && word[j] !== 'u') {\n                consonants++;\n            }\n\
    \        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmppynmk2rf.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmppynmk2rf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333986
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (letter.match(/[aeiou]/i)) {\n           \
    \     count++;\n            }\n        }\n        if (count === n) {\n       \
    \     result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc8bj5nuh.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpc8bj5nuh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let word of words) {\n        let consonants:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpeqy0spu8.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpeqy0spu8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  let words: string[]\
    \ = s.split(\" \");\n  for (let word of words) {\n    let count: number = 0;\n\
    \    for (let i: number = 0; i < word.length; i++) {\n      if (word[i] !== \"\
    a\" && word[i] !== \"e\" && word[i] !== \"i\" && word[i] !== \"o\" && word[i]\
    \ !== \"u\") {\n        count++;\n      }\n    }\n    if (count === n) {\n   \
    \   result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpro8ny3gz.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpro8ny3gz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        const word = words[i];\n        let consonants\
    \ = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (!vowels.includes(word[j].toLowerCase()))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       let word: string = words[i];\n        let consonants: number = 0;\n  \
    \      for (let j = 0; j < word.length; j++) {\n            let letter: string\
    \ = word[j];\n            if (letter.toLowerCase() !== \"a\" && letter.toLowerCase()\
    \ !== \"e\" && letter.toLowerCase() !== \"i\" && letter.toLowerCase() !== \"o\"\
    \ && letter.toLowerCase() !== \"u\") {\n                consonants++;\n      \
    \      }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (isConsonant(letter)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqii7tiy.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333990
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (countConsonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0rgq_gc1.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333990
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       let word: string = words[i];\n        let consonants: number = 0;\n  \
    \      for (let j = 0; j < word.length; j++) {\n            let char: string =\
    \ word[j];\n            if (char != \"a\" && char != \"e\" && char != \"i\" &&\
    \ char != \"o\" && char != \"u\") {\n                consonants++;\n         \
    \   }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpalst8ja1.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpalst8ja1.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char != 'a' && char != 'e' && char\
    \ != 'i' && char != 'o' && char != 'u') {\n                count++;\n        \
    \    }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpzem98sfx.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpzem98sfx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\") {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp6gth3h2p.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp6gth3h2p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpu51_ridh.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333991
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (letter != 'a' && letter != 'e'\
    \ && letter != 'i' && letter != 'o' && letter != 'u') {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpqzuvflo9.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpqzuvflo9.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter.toLowerCase() != \"\
    a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase() != \"i\" && letter.toLowerCase()\
    \ != \"o\" && letter.toLowerCase() != \"u\") {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    return s.split(\" \").filter(x => x.match(/[^aeiou]/g).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk4tpcywq.js:13\n    return s.split(\" \").filter(x => x.match(/[^aeiou]/g).length\
    \ === n);\n                                                        ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at /tmp/tmpk4tpcywq.js:13:57\n\
    \    at Array.filter (<anonymous>)\n    at select_words (/tmp/tmpk4tpcywq.js:13:25)\n\
    \    at test (/tmp/tmpk4tpcywq.js:18:22)\n    at Object.<anonymous> (/tmp/tmpk4tpcywq.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' &&\
    \ words[i][j] != 'u') {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(words[i]);\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpuhf71l_d.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpuhf71l_d.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmppfe8bf48.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (!isVowel(word[i])) {\n     \
    \           count++;\n            }\n        }\n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjm572t2v.ts(18,18): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333993
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' &&\
    \ words[i][j] != 'u') {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(words[i]);\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpuhf71l_d.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpuhf71l_d.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpiq_kx85n.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333993
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (letter != 'a' && letter != 'e'\
    \ && letter != 'i' && letter != 'o' && letter != 'u') {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpqzuvflo9.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpqzuvflo9.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        let consonants = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333993
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    let consonants = 'bcdfghjklmnpqrstvwxyz';\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (consonants.includes(char.toLowerCase())) {\n                count++;\n    \
    \        }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333993
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let letter of word) {\n            if\
    \ (!vowels.includes(letter)) {\n                count++;\n            }\n    \
    \    }\n        if (count === n) {\n            result.push(word);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpgkpqi8o6.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpgkpqi8o6.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333993
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let cons = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"\
    o\" && words[i][j] != \"u\") {\n                cons++;\n            }\n     \
    \   }\n        if (cons == n) {\n            result.push(words[i]);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmptfp3h0su.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmptfp3h0su.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    const words = s.split(\" \");\n    const result = [];\n    for\
    \ (let i = 0; i < words.length; i++) {\n        let count = 0;\n        for (let\
    \ j = 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333993
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (isConsonant(word[j])) {\n                consonants++;\n    \
    \        }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp49qpod5.ts(19,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333993
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let consonants: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            if (isConsonant(word[j]))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4rekmc3m.ts(19,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333993
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let cons = 0;\n        for (let\
    \ letter of word) {\n            if (isConsonant(letter)) {\n                cons++;\n\
    \            }\n        }\n        if (cons === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpyutp1pxy.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333994
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (isConsonant(letter)) {\n           \
    \     consonants++;\n            }\n        }\n        if (consonants === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqm0tdwq.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    return s.split(' ').filter(word => word.match(/[^aeiou]/g).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp78v123fr.js:13\n    return s.split(' ').filter(word => word.match(/[^aeiou]/g).length\
    \ === n);\n                                                              ^\n\n\
    TypeError: Cannot read properties of null (reading 'length')\n    at /tmp/tmp78v123fr.js:13:63\n\
    \    at Array.filter (<anonymous>)\n    at select_words (/tmp/tmp78v123fr.js:13:25)\n\
    \    at test (/tmp/tmp78v123fr.js:18:22)\n    at Object.<anonymous> (/tmp/tmp78v123fr.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333994
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (countConsonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsixg1813.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9iklvx2q.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (countConsonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsixg1813.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333987
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let arr = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j]\
    \ == \"a\" || arr[i][j] == \"e\" || arr[i][j] == \"i\" || arr[i][j] == \"o\" ||\
    \ arr[i][j] == \"u\") {\n                count++;\n            }\n        }\n\
    \        if (arr[i].length - count == n) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8ie4nzsg.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8ie4nzsg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  const words = s.split(\" \");\n  const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n  const result = [];\n  for (let word of words)\
    \ {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char.toLowerCase()))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (word[j] != \"a\" && word[j] != \"e\" && word[j] != \"i\" && word[j]\
    \ != \"o\" && word[j] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpq1xspqvi.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpq1xspqvi.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333994
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (countConsonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsixg1813.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333987
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ char of word) {\n            if (isConsonant(char)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3dkka83n.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (letter.match(/[^aeiou]/i)) {\n          \
    \      count++;\n            }\n        }\n        if (count === n) {\n      \
    \      result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let char of word) {\n            if (isConsonant(char)) consonants++;\n   \
    \     }\n        if (consonants === n) result.push(word);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpq7jnc9v4.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333994
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != 'a' && char != 'e' &&\
    \ char != 'i' && char != 'o' && char != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8p9g6t2z.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8p9g6t2z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (isConsonant(word[j])) {\n                consonants++;\n    \
    \        }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpodemaqd4.ts(19,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333994
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6_n2nhg1.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe2huzn5f.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let vowels = \"aeiou\";\n    let words =\
    \ s.split(\" \");\n    let result = [];\n    for (let word of words) {\n     \
    \   let consonants = 0;\n        for (let letter of word) {\n            if (vowels.indexOf(letter)\
    \ === -1) {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7nl04ufv.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp7nl04ufv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() != 'a' && letter.toLowerCase()\
    \ != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase() != 'o' && letter.toLowerCase()\
    \ != 'u') {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants == n) {\n            result.push(word);\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\") {\n     \
    \           consonants++;\n            }\n        }\n        if (consonants ==\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpsrvs89f0.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsrvs89f0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (isVowel(char)) {\n         \
    \       consonants++;\n            }\n        }\n        if (consonants === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp__4fsj17.ts(20,17): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words\
    \ = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n        let\
    \ word = words[i];\n        let consonants = 0;\n        for (let j = 0; j < word.length;\
    \ j++) {\n            let char = word[j];\n            if (char != \"a\" && char\
    \ != \"e\" && char != \"i\" && char != \"o\" && char != \"u\") {\n           \
    \     consonants++;\n            }\n        }\n        if (consonants == n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpc_eoos92.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpc_eoos92.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333995
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (char !== 'a' && char !== 'e' &&\
    \ char !== 'i' && char !== 'o' && char !== 'u') {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpgxe5lvgg.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpgxe5lvgg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333995
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (word[i] != 'a' && word[i] !=\
    \ 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n             \
    \   count++;\n            }\n        }\n        if (count == n) {\n          \
    \  result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpmm0l1jy3.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpmm0l1jy3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333996
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let word of words) {\n        let consonants:\
    \ number = 0;\n        for (let letter of word) {\n            if (letter.toLowerCase()\
    \ != \"a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase() != \"i\" &&\
    \ letter.toLowerCase() != \"o\" && letter.toLowerCase() != \"u\") {\n        \
    \        consonants++;\n            }\n        }\n        if (consonants == n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333996
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word[i] != \"a\" && word[i]\
    \ != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpt43y_l38.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpt43y_l38.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333979
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (!vowels.includes(words[i][j])) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpz3ffw7vi.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpz3ffw7vi.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333996
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (consonants.indexOf(word[j])\
    \ !== -1) {\n                count++;\n            }\n        }\n        if (count\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpj4uzaag5.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj4uzaag5.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (isConsonant(letter)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqii7tiy.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333990
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  const words = s.split(\" \");\n  const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      if (consonants.includes(words[i][j].toLowerCase())) {\n        count++;\n\
    \      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const words = s.split(' ');\n    const consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n    const result = [];\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (consonants.includes(char.toLowerCase())) {\n                count++;\n    \
    \        }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp1sc5_6az.ts(18,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j]\
    \ != 'o' && word[j] != 'u') {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpduo9o2gg.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpduo9o2gg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let arr = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j]\
    \ == \"a\" || arr[i][j] == \"e\" || arr[i][j] == \"i\" || arr[i][j] == \"o\" ||\
    \ arr[i][j] == \"u\") {\n                count++;\n            }\n        }\n\
    \        if (arr[i].length - count == n) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp2gn0bfd3.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp2gn0bfd3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       if (countConsonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptjp9dt32.ts(16,13): error TS2304: Cannot find name ''countConsonants''.

    '
  timestamp: 1660333997
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let consonants: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            if (isConsonant(word[j]))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4rekmc3m.ts(19,17): error TS2552: Cannot find name ''isConsonant''.
    Did you mean ''consonants''?

    '
  timestamp: 1660333993
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char !== 'a' && char !== 'e'\
    \ && char !== 'i' && char !== 'o' && char !== 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp9aw8zzcj.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9aw8zzcj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != 'a' && char != 'e' &&\
    \ char != 'i' && char != 'o' && char != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8p9g6t2z.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8p9g6t2z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333980
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmper8_6sni.ts(16,13): error TS2304: Cannot find name ''count_consonants''.

    '
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let letter = word[j];\n            if (letter !== \"a\" && letter !==\
    \ \"e\" && letter !== \"i\" && letter !== \"o\" && letter !== \"u\") {\n     \
    \           count++;\n            }\n        }\n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpvsoo1flw.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpvsoo1flw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333983
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (isConsonant(letter)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphqii7tiy.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333990
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = 0;\n        for\
    \ (let letter of word) {\n            if (letter.toLowerCase() !== 'a' && letter.toLowerCase()\
    \ !== 'e' && letter.toLowerCase() !== 'i' && letter.toLowerCase() !== 'o' && letter.toLowerCase()\
    \ !== 'u') {\n                consonants++;\n            }\n        }\n      \
    \  if (consonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j]\
    \ != 'o' && word[j] != 'u') {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpduo9o2gg.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpduo9o2gg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let word of\
    \ words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++)\
    \ {\n            if (consonants.includes(word[i])) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp5vazvu_j.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5vazvu_j.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9iklvx2q.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter.toLowerCase() != 'a'\
    \ && letter.toLowerCase() != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase()\
    \ != 'o' && letter.toLowerCase() != 'u') {\n                consonants++;\n  \
    \          }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\") {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp6gth3h2p.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp6gth3h2p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    let consonants = 'bcdfghjklmnpqrstvwxyz';\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let letter of word) {\n            if\
    \ (consonants.includes(letter.toLowerCase())) {\n                count++;\n  \
    \          }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  return s.split(' ').filter(x => x.replace(/[aeiou]/gi,\
    \ '').length === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (isConsonant(word[i])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9iklvx2q.ts(18,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333983
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' &&\
    \ words[i][j] != 'u') {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(words[i]);\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpuhf71l_d.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpuhf71l_d.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333987
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    const words = s.split(' ');\n    const consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n    const result = [];\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (consonants.includes(words[i][j].toLowerCase())) {\n\
    \                count++;\n            }\n        }\n        if (count === n)\
    \ {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char = word[j];\n            if (char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\") {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp6gth3h2p.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp6gth3h2p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let words:\
    \ string[] = s.split(\" \");\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let count: number = 0;\n  \
    \      for (let j: number = 0; j < word.length; j++) {\n            if (isConsonant(word[j]))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpm08rtu2d.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333997
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let word of words) {\n        let consonants = word.match(/[^aeiou]/gi);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333994
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let consonants = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let letter = word[j];\n            if (letter.match(/[bcdfghjklmnpqrstvwxz]/i))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpq4_nwqfi.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq4_nwqfi.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words = s.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (isConsonant(word[j])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjgfd706k.ts(19,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660333979
