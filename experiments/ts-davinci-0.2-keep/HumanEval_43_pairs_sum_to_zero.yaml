name: HumanEval_43_pairs_sum_to_zero
language: humaneval_to_typescript.py
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
  // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n", "    let i: number = 0;\n    let j: number = 0;\n    let k: number =\
    \ 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n\
    \    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let\
    \ s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number\
    \ = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n\
    \    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n  \
    \  let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n   \
    \ let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let\
    \ ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll:\
    \ number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number\
    \ = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number =\
    \ 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n\
    \    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n \
    \   let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n \
    \   let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n\
    \    let eee: number = 0;\n    let fff: number = 0;\n    let ggg: number = 0;\n\
    \    let hhh: number = 0;\n    let iii: number = 0;\n    let jjj: number = 0;\n\
    \    let kkk: number = 0", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "  for (let i = 0; i < l.length; i++) {\n    for (let j = i\
    \ + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "  // YOUR CODE HERE\n  return false;\n\
    }\n", "    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j\
    \ < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n", "    // YOUR\
    \ CODE HERE\n    throw new Error(\"Not implemented yet.\");\n}\n", "  let seen\
    \ = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (seen.has(-l[i]))\
    \ {\n      return true;\n    }\n    seen.add(l[i]);\n  }\n  return false;\n}\n",
  "  // YOUR CODE HERE\n  return false;\n}\n", "    // YOUR CODE HERE\n    throw new\
    \ Error(\"Not implemented yet.\");\n}\n", "    // YOUR CODE HERE\n    throw new\
    \ Error(\"Not implemented yet.\");\n}\n", "    // Your code here\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n\
    }\n", "    let i: number;\n    let j: number;\n    for (i = 0; i < l.length; i++)\
    \ {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j]\
    \ === 0) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "  let set: Set<number> = new Set();\n  for (let i = 0; i <\
    \ l.length; i++) {\n    if (set.has(l[i])) {\n      return true;\n    }\n    set.add(-l[i]);\n\
    \  }\n  return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not\
    \ implemented yet.\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
