language: ts
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let negative: number | undefined = undefined;\n\
    \    let positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (negative === undefined) {\n\
    \                negative = lst[i];\n            } else if (lst[i] > negative)\
    \ {\n                negative = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (positive === undefined) {\n                positive\
    \ = lst[i];\n            } else if (lst[i] < positive) {\n                positive\
    \ = lst[i];\n            }\n        }\n    }\n    return [negative, positive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    const positives = lst.filter(x => x\
    \ > 0);\n    const negatives = lst.filter(x => x < 0);\n    return [negatives.length\
    \ > 0 ? Math.max(...negatives) : undefined, positives.length > 0 ? Math.min(...positives)\
    \ : undefined];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative: number | undefined;\n\
    \  let smallestPositive: number | undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i]\
    \ > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallestPositive === undefined || lst[i] < smallestPositive)\
    \ {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number | undefined = undefined;\n\
    \    let pos: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (neg === undefined) {\n  \
    \              neg = lst[i];\n            } else if (lst[i] > neg) {\n       \
    \         neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n   \
    \         if (pos === undefined) {\n                pos = lst[i];\n          \
    \  } else if (lst[i] < pos) {\n                pos = lst[i];\n            }\n\
    \        }\n    }\n    return [neg, pos];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number | undefined = undefined;\n\
    \    let pos: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (neg == undefined) {\n   \
    \             neg = lst[i];\n            } else if (lst[i] > neg) {\n        \
    \        neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n    \
    \        if (pos == undefined) {\n                pos = lst[i];\n            }\
    \ else if (lst[i] < pos) {\n                pos = lst[i];\n            }\n   \
    \     }\n    }\n    return [neg, pos];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg = undefined;\n    let pos =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (neg === undefined || lst[i] > neg) {\n               \
    \ neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (pos === undefined || lst[i] < pos) {\n                pos = lst[i];\n  \
    \          }\n        }\n    }\n    return [neg, pos];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest_negative = undefined;\n\
    \    let smallest_positive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined\
    \ || lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive\
    \ === undefined || lst[i] < smallest_positive) {\n                smallest_positive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let negs: number[] = [];\n    let poss:\
    \ number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            negs.push(lst[i]);\n        } else if (lst[i] > 0) {\n \
    \           poss.push(lst[i]);\n        }\n    }\n    if (negs.length === 0) {\n\
    \        negs.push(undefined);\n    }\n    if (poss.length === 0) {\n        poss.push(undefined);\n\
    \    }\n    return [Math.max(...negs), Math.min(...poss)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpcvsmuw7f.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcvsmuw7f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n\
    \  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest_positive: number | undefined\
    \ = undefined;\n    let largest_negative: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n       \
    \     if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        } else if (lst[i] <\
    \ 0) {\n            if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let a: number | undefined = undefined;\n\
    \  let b: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (a === undefined) {\n        a = lst[i];\n\
    \      } else if (lst[i] > a) {\n        a = lst[i];\n      }\n    } else if (lst[i]\
    \ > 0) {\n      if (b === undefined) {\n        b = lst[i];\n      } else if (lst[i]\
    \ < b) {\n        b = lst[i];\n      }\n    }\n  }\n  return [a, b];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative: number | undefined;\n\
    \  let smallestPositive: number | undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i]\
    \ > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallestPositive === undefined || lst[i] < smallestPositive)\
    \ {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg = lst.filter(x => x < 0).sort((a,\
    \ b) => a - b);\n    let pos = lst.filter(x => x > 0).sort((a, b) => a - b);\n\
    \    return [neg[0], pos[0]];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -6,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -1,\n  undefined\n]\n    at test (/tmp/tmpstm9p8f9.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpstm9p8f9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -6, undefined\
    \ ],\n  expected: [ -1, undefined ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let negative: number[] = [];\n    let\
    \ positive: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < 0) {\n            negative.push(lst[i]);\n        } else if (lst[i]\
    \ > 0) {\n            positive.push(lst[i]);\n        }\n    }\n    if (negative.length\
    \ === 0) {\n        negative.push(undefined);\n    }\n    if (positive.length\
    \ === 0) {\n        positive.push(undefined);\n    }\n    return [Math.max(...negative),\
    \ Math.min(...positive)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpvzapld8e.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvzapld8e.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n\
    \  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest = undefined;\n    let smallest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest === undefined || lst[i] > largest) {\n     \
    \           largest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallest === undefined || lst[i] < smallest) {\n            \
    \    smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest_negative: number | undefined\
    \ = undefined;\n    let smallest_positive: number | undefined = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos:\
    \ number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n  \
    \          pos.push(lst[i]);\n        }\n    }\n    if (neg.length == 0) {\n \
    \       neg.push(undefined);\n    }\n    if (pos.length == 0) {\n        pos.push(undefined);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpu043d_88.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu043d_88.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n\
    \  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let\
    \ smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative)\
    \ {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n\
    \      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n  \
    \      smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative == undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive == undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos:\
    \ number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n  \
    \          pos.push(lst[i]);\n        }\n    }\n    if (neg.length == 0) {\n \
    \       neg.push(undefined);\n    }\n    if (pos.length == 0) {\n        pos.push(undefined);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpu043d_88.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu043d_88.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n\
    \  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos:\
    \ number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n  \
    \          pos.push(lst[i]);\n        }\n    }\n    if (neg.length === 0) {\n\
    \        neg.push(undefined);\n    }\n    if (pos.length === 0) {\n        pos.push(undefined);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmprkh51wbp.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmprkh51wbp.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n\
    \  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined ||\
    \ lst[i] > largest) {\n                largest = lst[i];\n            }\n    \
    \    } else if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined ||\
    \ lst[i] > largest) {\n                largest = lst[i];\n            }\n    \
    \    } else if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number | undefined = undefined;\n\
    \    let pos: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (neg === undefined) {\n  \
    \              neg = lst[i];\n            } else if (lst[i] > neg) {\n       \
    \         neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n   \
    \         if (pos === undefined) {\n                pos = lst[i];\n          \
    \  } else if (lst[i] < pos) {\n                pos = lst[i];\n            }\n\
    \        }\n    }\n    return [neg, pos];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest == undefined) {\n   \
    \             smallest = lst[i];\n            } else if (lst[i] < smallest) {\n\
    \                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest == undefined) {\n                largest = lst[i];\n\
    \            } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let pos = lst.filter(x => x > 0);\n\
    \    let neg = lst.filter(x => x < 0);\n    return [neg.length > 0 ? Math.max(...neg)\
    \ : undefined, pos.length > 0 ? Math.min(...pos) : undefined];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest: number | undefined;\n \
    \   let smallest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (max === undefined || lst[i] > max) {\n               \
    \ max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (min === undefined || lst[i] < min) {\n                min = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (max === undefined || lst[i] > max) {\n               \
    \ max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (min === undefined || lst[i] < min) {\n                min = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    if (lst.length === 0) {\n        return\
    \ [undefined, undefined];\n    }\n    let min = lst[0];\n    let max = lst[0];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         min = lst[i];\n        }\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    if (min >= 0) {\n        min = undefined;\n\
    \    }\n    if (max <= 0) {\n        max = undefined;\n    }\n    return [max,\
    \ min];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  7,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpdgsxuicf.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdgsxuicf.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 7, undefined\
    \ ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest: number | undefined = undefined;\n\
    \    let smallest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined) {\n\
    \                largest = lst[i];\n            } else if (lst[i] > largest) {\n\
    \                largest = lst[i];\n            }\n        } else if (lst[i] >\
    \ 0) {\n            if (smallest === undefined) {\n                smallest =\
    \ lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    if (lst.length === 0) {\n        return\
    \ [undefined, undefined];\n    }\n    let largestNegative = undefined;\n    let\
    \ smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined\
    \ || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative: number | undefined\
    \ = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative\
    \ === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i]\
    \ > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive\
    \ = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive\
    \ = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest = undefined;\n    let largest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (smallest === undefined || lst[i] < smallest) {\n   \
    \             smallest = lst[i];\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (largest === undefined || lst[i] > largest) {\n          \
    \      largest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallestPositive: number | undefined\
    \ = undefined;\n    let largestNegative: number | undefined = undefined;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n        \
    \    if (smallestPositive === undefined) {\n                smallestPositive =\
    \ lst[i];\n            } else if (lst[i] < smallestPositive) {\n             \
    \   smallestPositive = lst[i];\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        }\n    }\n    return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (min === undefined || lst[i] < min) {\n             \
    \   min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let a: number | undefined;\n    let\
    \ b: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n\
    \            } else if (lst[i] < b) {\n                b = lst[i];\n         \
    \   }\n        } else if (lst[i] < 0) {\n            if (a === undefined) {\n\
    \                a = lst[i];\n            } else if (lst[i] > a) {\n         \
    \       a = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest: number | undefined;\n \
    \   let smallest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest_negative: number | undefined\
    \ = undefined;\n    let smallest_positive: number | undefined = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n\
    \    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n    \
    \            a = lst[i];\n            } else if (lst[i] > a) {\n             \
    \   a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i]\
    \ < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return\
    \ [a, b];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let smallest: number | undefined;\n  let\
    \ largest: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n\
    \        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined\
    \ || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpc_c7l1bv.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc_c7l1bv.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 1
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    if (lst.length === 0) {\n        return\
    \ [undefined, undefined];\n    }\n    let negative: number[] = [];\n    let positive:\
    \ number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            negative.push(lst[i]);\n        } else if (lst[i] > 0) {\n\
    \            positive.push(lst[i]);\n        }\n    }\n    if (negative.length\
    \ === 0) {\n        return [undefined, Math.min(...positive)];\n    } else if\
    \ (positive.length === 0) {\n        return [Math.max(...negative), undefined];\n\
    \    } else {\n        return [Math.max(...negative), Math.min(...positive)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  undefined\n\
    ]\n    at test (/tmp/tmpfdia1t3j.js:42:12)\n    at Object.<anonymous> (/tmp/tmpfdia1t3j.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ Infinity ],\n  expected: [ undefined, undefined ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallestPositive = undefined;\n\
    \    let largestNegative = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallestPositive === undefined\
    \ || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        } else if (lst[i] < 0) {\n            if (largestNegative\
    \ === undefined || lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let\
    \ smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative)\
    \ {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n\
    \      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n  \
    \      smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined ||\
    \ lst[i] > largest) {\n                largest = lst[i];\n            }\n    \
    \    } else if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n\
    \    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n    \
    \            a = lst[i];\n            } else if (lst[i] > a) {\n             \
    \   a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i]\
    \ < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return\
    \ [a, b];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallestPositive = undefined;\n\
    \    let largestNegative = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallestPositive === undefined\
    \ || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        } else if (lst[i] < 0) {\n            if (largestNegative\
    \ === undefined || lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest = undefined;\n    let smallest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest === undefined || lst[i] > largest) {\n     \
    \           largest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallest === undefined || lst[i] < smallest) {\n            \
    \    smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest: number | undefined;\n \
    \   let smallest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n\
    \    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n    \
    \            a = lst[i];\n            } else if (lst[i] > a) {\n             \
    \   a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i]\
    \ < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return\
    \ [a, b];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n       \
    \     if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        }\n    }\n    return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest: number | undefined;\n \
    \   let smallest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let maxNegative: number | undefined\
    \ = undefined;\n    let minPositive: number | undefined = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (maxNegative === undefined || lst[i] > maxNegative) {\n                maxNegative\
    \ = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (minPositive\
    \ === undefined || lst[i] < minPositive) {\n                minPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [maxNegative, minPositive];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let maxNegative = undefined;\n    let\
    \ minPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < 0) {\n            if (maxNegative === undefined || lst[i] > maxNegative)\
    \ {\n                maxNegative = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (minPositive === undefined || lst[i] < minPositive) {\n\
    \                minPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [maxNegative, minPositive];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738599
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (min === undefined || lst[i] < min) {\n             \
    \   min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let maxNeg = undefined;\n    let minPos\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (maxNeg === undefined || lst[i] > maxNeg) {\n       \
    \         maxNeg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (minPos === undefined || lst[i] < minPos) {\n                minPos\
    \ = lst[i];\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738599
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (max === undefined || lst[i] > max) {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n  let largestNegative: number | undefined;\n\
    \  let smallestPositive: number | undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i]\
    \ > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallestPositive === undefined || lst[i] < smallestPositive)\
    \ {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative,\
    \ smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let maxNeg = undefined;\n    let minPos\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (maxNeg === undefined || lst[i] > maxNeg) {\n       \
    \         maxNeg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (minPos === undefined || lst[i] < minPos) {\n                minPos\
    \ = lst[i];\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738599
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined;\n\
    \    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest = undefined;\n    let largest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (smallest === undefined || lst[i] < smallest) {\n   \
    \             smallest = lst[i];\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (largest === undefined || lst[i] > largest) {\n          \
    \      largest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let maxNeg = undefined;\n    let minPos\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (maxNeg === undefined || lst[i] > maxNeg) {\n       \
    \         maxNeg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (minPos === undefined || lst[i] < minPos) {\n                minPos\
    \ = lst[i];\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738599
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let neg: number | undefined = undefined;\n\
    \    let pos: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (neg === undefined) {\n  \
    \              neg = lst[i];\n            } else if (lst[i] > neg) {\n       \
    \         neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n   \
    \         if (pos === undefined) {\n                pos = lst[i];\n          \
    \  } else if (lst[i] < pos) {\n                pos = lst[i];\n            }\n\
    \        }\n    }\n    return [neg, pos];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (min === undefined || lst[i] < min) {\n             \
    \   min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n\
    \                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let negative: number | undefined = undefined;\n\
    \    let positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (negative === undefined) {\n\
    \                negative = lst[i];\n            } else if (lst[i] > negative)\
    \ {\n                negative = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (positive === undefined) {\n                positive\
    \ = lst[i];\n            } else if (lst[i] < positive) {\n                positive\
    \ = lst[i];\n            }\n        }\n    }\n    return [negative, positive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n\
    \    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined ||\
    \ lst[i] < smallest) {\n                smallest = lst[i];\n            }\n  \
    \      } else if (lst[i] < 0) {\n            if (largest === undefined || lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n\
    \    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n    \
    \            a = lst[i];\n            } else if (lst[i] > a) {\n             \
    \   a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n           \
    \ if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i]\
    \ < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return\
    \ [a, b];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738598
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n\
    \    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (min === undefined || lst[i] < min) {\n             \
    \   min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738597
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let min = undefined;\n    let max =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            if (min === undefined || lst[i] < min) {\n               \
    \ min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n           \
    \ if (max === undefined || lst[i] > max) {\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return [max, min];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
    \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9,\
    \ 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
    \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
    \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
    \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largest_neg: number | undefined\
    \ = undefined;\n    let smallest_pos: number | undefined = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (largest_neg === undefined) {\n                largest_neg = lst[i];\n     \
    \       } else if (lst[i] > largest_neg) {\n                largest_neg = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_pos\
    \ === undefined) {\n                smallest_pos = lst[i];\n            } else\
    \ if (lst[i] < smallest_pos) {\n                smallest_pos = lst[i];\n     \
    \       }\n        }\n    }\n    return [largest_neg, smallest_pos];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738599
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined\
    \ = undefined;\n    let smallestPositive: number | undefined = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n\
    \  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2,\
    \ 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7,\
    \ 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
- exit_code: 0
  program: "//Create a function that returns a tuple (a, b), where 'a' is\n// the\
    \ largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers(lst: number[]): [number\
    \ | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n\
    \    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined\
    \ || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined || lst[i] < smallestPositive) {\n                smallestPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3,\
    \ 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6,\
    \ -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n\
    \  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
    \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n \
    \ assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1,\
    \ -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4,\
    \ -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3,\
    \ 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738596
