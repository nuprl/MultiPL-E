name: HumanEval_114_minSubArraySum
language: humaneval_to_typescript.py
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
  // minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
  \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let currentSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if\
    \ (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) {\n \
    \     sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n\
    \  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum\
    \ += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n  \
    \  }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n",
  "  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n\
    \    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));", "  let minSum = Infinity;\n  let currentSum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum\
    \ = Math.min(minSum, currentSum);\n    if (currentSum < 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let currentSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if\
    \ (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if\
    \ (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) {\n \
    \     sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n", " \
    \ let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let currentSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum <\
    \ minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let sum = 0;\n\
    \  let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    sum += nums[end];\n\
    \    while (sum >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n    end++;\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n\
    \    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
