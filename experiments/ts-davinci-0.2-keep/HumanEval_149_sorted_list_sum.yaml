name: HumanEval_149_sorted_list_sum
language: humaneval_to_typescript.py
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// assert list_sort([\"\
  aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\"\
  , \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["  return lst.filter(x => x.length % 2 === 0).sort();\n}\n", "  let\
    \ result: string[] = [];\n  for (let i: number = 0; i < lst.length; i++) {\n \
    \   if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n \
    \ result.sort();\n  return result;\n}\n\nconsole.log(sorted_list_sum([\"aa\",\
    \ \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]));\n", "  const result: string[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n   \
    \ }\n  }\n  return result.sort();\n}\n\nconsole.log(sorted_list_sum([\"aa\", \"\
    a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    ]));\n", "  let result: string[] = [];\n  for (let i: number = 0; i < lst.length;\
    \ i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n   \
    \ }\n  }\n  result.sort();\n  return result;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "  let result: string[] = [];\n  for (let i: number = 0; i <\
    \ lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n\
    \    }\n  }\n  result.sort();\n  return result;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "  return lst.filter(x => x.length % 2 === 0).sort();\n}\n",
  "  let result: string[] = [];\n  let sorted_list: string[] = lst.sort();\n  let\
    \ length: number = sorted_list[0].length;\n  for (let i: number = 0; i < sorted_list.length;\
    \ i++) {\n    if (sorted_list[i].length === length) {\n      result.push(sorted_list[i]);\n\
    \    } else {\n      length = sorted_list[i].length;\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let lst_len = lst.length;\n  let lst_sorted:\
    \ string[] = [];\n  let lst_sorted_len = 0;\n  for (let i = 0; i < lst_len; i++)\
    \ {\n    if (lst[i].length % 2 === 0) {\n      lst_sorted[lst_sorted_len] = lst[i];\n\
    \      lst_sorted_len++;\n    }\n  }\n  lst_sorted.sort();\n  return lst_sorted;\n\
    }\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let new_lst: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      new_lst.push(lst[i]);\n    }\n  }\n  new_lst.sort();\n  return new_lst;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let lst_sorted: string[] = [];\n  let\
    \ lst_sorted_by_length: string[] = [];\n  let lst_sorted_by_length_and_alphabet:\
    \ string[] = [];\n  let lst_sorted_by_length_and_alphabet_without_duplicates:\
    \ string[] = [];\n  let lst_sorted_by_length_and_alphabet_without_duplicates_and_odd_length:\
    \ string[] = [];\n  lst_sorted = lst.sort();\n  for (let i: number = 0; i < lst_sorted.length;\
    \ i++) {\n    if (lst_sorted[i].length % 2 === 0) {\n      lst_sorted_by_length.push(lst_sorted[i]);\n\
    \    }\n  }\n  lst_sorted_by_length_and_alphabet = lst_sorted_by_length.sort();\n\
    \  for (let i: number = 0; i < lst_sorted_by_length_and_alphabet.length; i++)\
    \ {\n    if (lst_sorted_by_length_and_alphabet[i] !== lst_sorted_by_length_and_alphabet[i\
    \ + 1]) {\n      lst_sorted_by_length_and_alphabet_without_duplicates.push(lst_sorted_by_length_and_alphabet[i]);\n\
    \    }\n  }\n  lst_sorted_by_length_and_alphabet_without_duplicates_and_odd_length\
    \ = lst_sorted_by_length_and_alphabet_without_duplicates.sort();\n  return lst_sorted_by_length_and_alphabet_without_duplicates_and_odd_length;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let new_lst: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      new_lst.push(lst[i]);\n    }\n  }\n  new_lst.sort();\n  return new_lst;\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  let temp:\
    \ string[] = [];\n  for (let i: number = 0; i < lst.length; i++) {\n    if (lst[i].length\
    \ % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return\
    \ result;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n\
    \      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "  let result: string[] = [];\n  for (let i: number = 0; i <\
    \ lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n\
    \    }\n  }\n  result.sort();\n  return result;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
