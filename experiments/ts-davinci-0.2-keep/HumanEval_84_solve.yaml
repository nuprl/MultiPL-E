name: HumanEval_84_solve
language: humaneval_to_typescript.py
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// For N = 1000, the sum of digits will be 1 the output should be \"\
  1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n\
  // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//\
  \ Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n\
  // a string of binary number\nfunction solve(N: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n\
  \  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"\
  1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"\
  10010\");\n}\n\ntest();"
completions: ["  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i\
    \ < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let sum = 0;\n  let binary = \"\";\n  while (N >\
    \ 0) {\n    sum += N % 2;\n    binary = (N % 2).toString() + binary;\n    N =\
    \ Math.floor(N / 2);\n  }\n  return sum.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  let binary = N.toString(2);\n\
    \  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n\
    \  }\n  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
