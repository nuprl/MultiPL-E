name: HumanEval_19_sort_numbers
language: humaneval_to_typescript.py
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
  \ sort_numbers(numbers: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  const nums = numbers.split(' ');\n  const nums_map = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums_sorted\
    \ = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n  return nums_sorted.join('\
    \ ');\n}\n", "  const numeral_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n\
    \    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9,\n  };\n  const nums = numbers.split(' ');\n  const nums_int\
    \ = nums.map((num) => numeral_map[num]);\n  const sorted_nums = nums_int.sort((a,\
    \ b) => a - b);\n  const sorted_nums_str = sorted_nums.map((num) => {\n    for\
    \ (const [key, value] of Object.entries(numeral_map)) {\n      if (value === num)\
    \ {\n        return key;\n      }\n    }\n  });\n  return sorted_nums_str.join('\
    \ ');\n}\n", "    const nums = numbers.split(' ');\n    const nums_map = {\n \
    \       'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const nums_sorted = nums.sort((a,\
    \ b) => {\n        return nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join('\
    \ ');\n}\n", "  const nums = numbers.split(' ');\n  const nums_sorted = nums.sort((a,\
    \ b) => {\n    const nums = {\n      zero: 0,\n      one: 1,\n      two: 2,\n\
    \      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven:\
    \ 7,\n      eight: 8,\n      nine: 9,\n    };\n    return nums[a] - nums[b];\n\
    \  });\n  return nums_sorted.join(' ');\n}\n", "  const nums = numbers.split('\
    \ ');\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9,\n  };\n  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sorted.join(' ');\n}\n", "  const nums = numbers.split(' ');\n\
    \  const nums_sorted = nums.sort((a, b) => {\n    return num_to_int(a) - num_to_int(b);\n\
    \  });\n  return nums_sorted.join(' ');\n}\n", "  const nums = numbers.split('\
    \ ');\n  const nums_sorted = nums.sort((a, b) => {\n    if (a === 'zero') {\n\
    \      return -1;\n    } else if (b === 'zero') {\n      return 1;\n    } else\
    \ if (a === 'one') {\n      return -1;\n    } else if (b === 'one') {\n      return\
    \ 1;\n    } else if (a === 'two') {\n      return -1;\n    } else if (b === 'two')\
    \ {\n      return 1;\n    } else if (a === 'three') {\n      return -1;\n    }\
    \ else if (b === 'three') {\n      return 1;\n    } else if (a === 'four') {\n\
    \      return -1;\n    } else if (b === 'four') {\n      return 1;\n    } else\
    \ if (a === 'five') {\n      return -1;\n    } else if (b === 'five') {\n    \
    \  return 1;\n    } else if (a === 'six') {\n      return -1;\n    } else if (b\
    \ === 'six') {\n      return 1;\n    } else if (a === 'seven') {\n      return\
    \ -1;\n    } else if (b === 'seven') {\n      return 1;\n    } else if (a ===\
    \ 'eight') {\n      return -1;\n    } else if (b === 'eight') {\n      return\
    \ 1;\n    } else if (a === 'nine') {\n      return -1;\n    } else if (b === 'nine')\
    \ {\n      return 1;\n    }\n  });\n  return nums_sorted.join(' ');\n}\n", " \
    \ const nums = numbers.split(' ');\n  const nums_sorted = nums.sort((a, b) =>\
    \ {\n    const num_a = number_to_int(a);\n    const num_b = number_to_int(b);\n\
    \    return num_a - num_b;\n  });\n  return nums_sorted.join(' ');\n}\n", "  \
    \  const nums = numbers.split(' ');\n    const nums_map = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    const nums_sorted = nums.sort((a, b) => nums_map[a]\
    \ - nums_map[b]);\n    return nums_sorted.join(' ');\n}\n", "  const nums = numbers.split('\
    \ ');\n  const nums_sorted = nums.sort((a, b) => {\n    return num_to_int(a) -\
    \ num_to_int(b);\n  });\n  return nums_sorted.join(' ');\n}\n", "  const nums\
    \ = numbers.split(' ');\n  const nums_map = {\n    zero: 0,\n    one: 1,\n   \
    \ two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven:\
    \ 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums_sorted = nums.sort((a, b)\
    \ => nums_map[a] - nums_map[b]);\n  return nums_sorted.join(' ');\n}\n", "  const\
    \ nums = numbers.split(' ');\n  const nums_sorted = nums.sort((a, b) => {\n  \
    \  const nums_map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three:\
    \ 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight:\
    \ 8,\n      nine: 9,\n    };\n    return nums_map[a] - nums_map[b];\n  });\n \
    \ return nums_sorted.join(' ');\n}\n", "    const nums = numbers.split(' ');\n\
    \    const nums_sorted = nums.sort((a, b) => {\n        return nums_to_int(a)\
    \ - nums_to_int(b);\n    });\n    return nums_sorted.join(' ');\n}\n", "  const\
    \ nums = numbers.split(' ');\n  const nums_sorted = nums.sort((a, b) => {\n  \
    \  return num_to_int(a) - num_to_int(b);\n  });\n  return nums_sorted.join(' ');\n\
    }\n", "  const numeralMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9,\n  };\n  const nums = numbers.split(' ');\n  const numsSorted =\
    \ nums.sort((a, b) => numeralMap[a] - numeralMap[b]);\n  return numsSorted.join('\
    \ ');\n}\n", "    const nums = numbers.split(' ');\n    const nums_sorted = nums.sort((a,\
    \ b) => {\n        return nums_to_int(a) - nums_to_int(b);\n    });\n    return\
    \ nums_sorted.join(' ');\n}\n", "  const nums = numbers.split(' ');\n  const nums_map\
    \ = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n \
    \   five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\
    \  const sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n  return sorted.join('\
    \ ');\n}\n", "  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n   \
    \ three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9,\n  };\n  const nums = numbers.split(' ');\n  const numsSorted\
    \ = nums.sort((a, b) => numMap[a] - numMap[b]);\n  return numsSorted.join(' ');\n\
    }\n", "  const nums = numbers.split(' ');\n  const nums_sorted = nums.sort((a,\
    \ b) => {\n    return nums_to_numbers[a] - nums_to_numbers[b];\n  });\n  return\
    \ nums_sorted.join(' ');\n}\n", "  const nums = numbers.split(' ');\n  const nums_sorted\
    \ = nums.sort((a, b) => {\n    const nums_map = {\n      zero: 0,\n      one:\
    \ 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six:\
    \ 6,\n      seven: 7,\n      eight: 8,\n      nine: 9,\n    };\n    return nums_map[a]\
    \ - nums_map[b];\n  });\n  return nums_sorted.join(' ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
