name: HumanEval_10_make_palindrome
language: humaneval_to_typescript.py
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n\
  // 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunction make_palindrome(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    if (string.length <= 1) {\n        return string;\n    }\n    let\
    \ suffix = longest_palindrome_suffix(string);\n    let prefix = string.slice(0,\
    \ string.length - suffix.length);\n    return prefix + suffix + prefix.split('').reverse().join('');\n\
    }\n", "    if (string.length === 0) {\n        return '';\n    }\n\n    let longest_palindrome_suffix_length\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (is_palindrome(string.substring(i)))\
    \ {\n            longest_palindrome_suffix_length = string.length - i;\n     \
    \       break;\n        }\n    }\n\n    return string + string.substring(0, string.length\
    \ - longest_palindrome_suffix_length).split('').reverse().join('');\n}\n", " \
    \   let palindrome_suffix = longest_palindrome_suffix(string);\n    let prefix\
    \ = string.slice(0, string.length - palindrome_suffix.length);\n    return prefix\
    \ + palindrome_suffix + prefix.split('').reverse().join('');\n}\n", "    let palindrome_suffix\
    \ = find_palindrome_suffix(string);\n    let prefix = string.slice(0, string.length\
    \ - palindrome_suffix.length);\n    return prefix + palindrome_suffix + prefix.split('').reverse().join('');\n\
    }\n", "    if (string.length <= 1) {\n        return string;\n    }\n    let i\
    \ = 0;\n    let j = string.length - 1;\n    while (i < j) {\n        if (string[i]\
    \ !== string[j]) {\n            break;\n        }\n        i++;\n        j--;\n\
    \    }\n    if (i >= j) {\n        return string;\n    }\n    const suffix = string.substring(i);\n\
    \    const prefix = string.substring(0, i);\n    return prefix + suffix + reverse(prefix);\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    const\
    \ longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n    const\
    \ prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split('').reverse().join('');\n\
    }\n", "    const reverse = string.split('').reverse().join('');\n    const postfix\
    \ = longest_common_substring(string, reverse);\n    const prefix = string.substring(0,\
    \ string.length - postfix.length);\n    return string + reverse.substring(prefix.length);\n\
    }\n", "    let prefix = string.split('').reverse().join('');\n    let suffix =\
    \ '';\n    for (let i = 0; i < string.length; i++) {\n        if (is_palindrome(string.substr(i)))\
    \ {\n            suffix = string.substr(i);\n            break;\n        }\n \
    \   }\n    return string + prefix.substr(suffix.length);\n}\n", "    if (string.length\
    \ === 0) {\n        return string;\n    }\n    let longest_palindrome_suffix =\
    \ find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return string + reverse_prefix;\n\
    }\n", "  let result = string;\n  let prefix = '';\n  let suffix = '';\n  for (let\
    \ i = 0; i < string.length; i++) {\n    prefix = string.slice(0, i);\n    suffix\
    \ = string.slice(i);\n    if (is_palindrome(suffix)) {\n      result += reverse(prefix);\n\
    \      break;\n    }\n  }\n  return result;\n}\n", "    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let reverse_prefix =\
    \ reverse_string(prefix);\n    return string + reverse_prefix;\n}\n", "    if\
    \ (string.length === 0) {\n        return '';\n    }\n    let longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    if (string.length === 0) {\n        return string;\n\
    \    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n  \
    \  let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return prefix + longest_palindrome_suffix\
    \ + reverse_prefix;\n}\n", "    if (string.length === 0) {\n        return '';\n\
    \    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return string;\n    }\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + prefix.split('').reverse().join('');\n}\n", "    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.slice(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return string + reverse(prefix);\n\
    }\n", "    const reversed_string = string.split('').reverse().join('');\n    const\
    \ longest_palindrome_suffix = longest_common_substring(string, reversed_string);\n\
    \    const prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return string + prefix.split('').reverse().join('');\n}\n", "    const reversed_string\
    \ = string.split('').reverse().join('');\n    const reversed_string_length = reversed_string.length;\n\
    \    const string_length = string.length;\n    let i = 0;\n    while (i < reversed_string_length)\
    \ {\n        if (string.substr(0, string_length - i) === reversed_string.substr(i))\
    \ {\n            break;\n        }\n        i++;\n    }\n    return string + reversed_string.substr(i);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
