language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i < j) {\n        result.push(lst[i]);\n        result.push(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i === j) {\n        result.push(lst[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    const lst_len = lst.length;\n    if (lst_len === 0) {\n        return\
    \ [];\n    }\n    if (lst_len === 1) {\n        return lst;\n    }\n    const\
    \ sorted_lst = lst.sort((a, b) => a - b);\n    const result = [];\n    let i =\
    \ 0;\n    let j = lst_len - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let minIndex = lst.indexOf(min);\n    let\
    \ maxIndex = lst.indexOf(max);\n    let newLst = [min];\n    lst.splice(minIndex,\
    \ 1);\n    lst.splice(maxIndex - 1, 1);\n    while (lst.length !== 0) {\n    \
    \    min = Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex\
    \ = lst.indexOf(min);\n        maxIndex = lst.indexOf(max);\n        newLst.push(max);\n\
    \        newLst.push(min);\n        lst.splice(minIndex, 1);\n        lst.splice(maxIndex\
    \ - 1, 1);\n    }\n    return newLst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpw8_k0m8l.js:34:12)\n    at Object.<anonymous> (/tmp/tmpw8_k0m8l.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmppuwiidm2.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppuwiidm2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let min = 0;\n  let max = sorted.length\
    \ - 1;\n  while (min <= max) {\n    result.push(sorted[min]);\n    min++;\n  \
    \  if (min <= max) {\n      result.push(sorted[max]);\n      max--;\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result:\
    \ number[] = [];\n    let min: number = Math.min(...lst);\n    let max: number\
    \ = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n    let maxIndex:\
    \ number = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n \
    \   lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    while (lst.length\
    \ > 0) {\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \       minIndex = lst.indexOf(min);\n        maxIndex = lst.indexOf(max);\n \
    \       result.push(min);\n        result.push(max);\n        lst.splice(minIndex,\
    \ 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpmon6cdqi.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmon6cdqi.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738674
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return [];\n    let res: number[] = [];\n    let\
    \ min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n \
    \   let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    res.push(min);\n    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return res.concat(strange_sort_list(lst));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmp2iec_d9z.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2iec_d9z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted_list\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sorted_list.length - 1;\n    while (i <= j) {\n        result.push(sorted_list[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_list[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    while (sorted.length >\
    \ 0) {\n        result.push(sorted.shift());\n        if (sorted.length > 0) {\n\
    \            result.push(sorted.pop());\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result =\
    \ [];\n    let sorted = lst.sort((a, b) => a - b);\n    let left = sorted.slice(0,\
    \ sorted.length / 2);\n    let right = sorted.slice(sorted.length / 2);\n    for\
    \ (let i = 0; i < left.length; i++) {\n        result.push(left[i]);\n       \
    \ result.push(right[i]);\n    }\n    if (right.length > left.length) {\n     \
    \   result.push(right[right.length - 1]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp6v23lfa0.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6v23lfa0.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let lst_copy: number[] = lst.slice();\n\
    \    while (lst_copy.length > 0) {\n        result.push(Math.min(...lst_copy));\n\
    \        lst_copy.splice(lst_copy.indexOf(Math.min(...lst_copy)), 1);\n      \
    \  if (lst_copy.length > 0) {\n            result.push(Math.max(...lst_copy));\n\
    \            lst_copy.splice(lst_copy.indexOf(Math.max(...lst_copy)), 1);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted = lst.sort((a, b) => a - b);\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return lst;\n    }\n    let result: number[]\
    \ = [];\n    let sorted_lst = lst.sort((a, b) => a - b);\n    let min_index =\
    \ 0;\n    let max_index = sorted_lst.length - 1;\n    while (min_index <= max_index)\
    \ {\n        result.push(sorted_lst[min_index]);\n        min_index++;\n     \
    \   if (min_index <= max_index) {\n            result.push(sorted_lst[max_index]);\n\
    \            max_index--;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return lst;\n    const sorted = lst.sort((a, b)\
    \ => a - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i > j) {\n            break;\n        }\n        result.push(sorted[j]);\n\
    \        j--;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let res = [];\n    let i = 0;\n    while\
    \ (lst.length > 0) {\n        if (i % 2 === 0) {\n            res.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4]));\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\nconsole.log(strange_sort_list([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 4, 2, 3 ]

    [ 5, 5, 5, 5 ]

    []

    '
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minLst: number[] = lst.slice(0, minIndex);\n    let maxLst: number[]\
    \ = lst.slice(minIndex + 1, maxIndex);\n    let minLst2: number[] = lst.slice(maxIndex\
    \ + 1);\n    result.push(min);\n    result.push(max);\n    if (minLst.length >\
    \ 0) {\n        result = result.concat(strange_sort_list(minLst));\n    }\n  \
    \  if (maxLst.length > 0) {\n        result = result.concat(strange_sort_list(maxLst));\n\
    \    }\n    if (minLst2.length > 0) {\n        result = result.concat(strange_sort_list(minLst2));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpylx2hn48.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylx2hn48.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    sorted.push(min);\n    sorted.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    return sorted.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpbm910afm.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbm910afm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result =\
    \ [];\n    let sorted = lst.sort((a, b) => a - b);\n    let min = sorted.shift();\n\
    \    let max = sorted.pop();\n    while (sorted.length > 0) {\n        result.push(min);\n\
    \        result.push(max);\n        min = sorted.shift();\n        max = sorted.pop();\n\
    \    }\n    result.push(min);\n    if (max !== undefined) {\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return [];\n    let min = Math.min(...lst);\n \
    \   let max = Math.max(...lst);\n    let result = [min];\n    let newLst = lst.filter(x\
    \ => x !== min);\n    while (newLst.length > 0) {\n        let newMin = Math.min(...newLst);\n\
    \        let newMax = Math.max(...newLst);\n        result.push(newMax);\n   \
    \     newLst = newLst.filter(x => x !== newMax);\n        if (newLst.length >\
    \ 0) {\n            result.push(newMin);\n            newLst = newLst.filter(x\
    \ => x !== newMin);\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  5,\n  5,\n  5,\n  5\n]\n    at test (/tmp/tmpq0f___d4.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq0f___d4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ 5, 5, 5, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    if (lst.length\
    \ == 1) {\n        return lst;\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let minIndex = lst.indexOf(min);\n    let maxIndex\
    \ = lst.indexOf(max);\n    let newLst = [min];\n    let newLst2 = [max];\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (i != minIndex && i != maxIndex)\
    \ {\n            newLst.push(lst[i]);\n        }\n    }\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i != minIndex && i != maxIndex) {\n      \
    \      newLst2.push(lst[i]);\n        }\n    }\n    return newLst.concat(newLst2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n\
    \  3\n]\n    at test (/tmp/tmpsm7lpu7w.js:36:12)\n    at Object.<anonymous> (/tmp/tmpsm7lpu7w.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result:\
    \ number[] = [];\n    let sortedLst = lst.sort((a, b) => a - b);\n    let i =\
    \ 0;\n    let j = sortedLst.length - 1;\n    while (i <= j) {\n        result.push(sortedLst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedLst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < sorted.length;\
    \ i++) {\n        if (i % 2 === 0) {\n            result.push(sorted[i]);\n  \
    \      } else {\n            result.unshift(sorted[i]);\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpz1dhwvzc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz1dhwvzc.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  if (lst.length === 1) {\n\
    \    return lst;\n  }\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let newArr = [];\n  newArr.push(min);\n  newArr.push(max);\n  lst.splice(lst.indexOf(min),\
    \ 1);\n  lst.splice(lst.indexOf(max), 1);\n  return newArr.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            result.push(lst[j]);\n            j--;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    return result.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpmhvc__mb.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhvc__mb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i < j) {\n        result.push(sorted[i]);\n\
    \        result.push(sorted[j]);\n        i++;\n        j--;\n    }\n    if (i\
    \ === j) {\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let sorted: number[] = lst.sort((a, b)\
    \ => a - b);\n    let i: number = 0;\n    let j: number = sorted.length - 1;\n\
    \    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n       \
    \ if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minRemaining: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex\
    \ + 1));\n    let maxRemaining: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    result.push(min);\n    result.push(max);\n    while (minRemaining.length\
    \ > 0) {\n        min = Math.min(...minRemaining);\n        max = Math.max(...maxRemaining);\n\
    \        minIndex = minRemaining.indexOf(min);\n        maxIndex = maxRemaining.indexOf(max);\n\
    \        minRemaining = minRemaining.slice(0, minIndex).concat(minRemaining.slice(minIndex\
    \ + 1));\n        maxRemaining = maxRemaining.slice(0, maxIndex).concat(maxRemaining.slice(maxIndex\
    \ + 1));\n        result.push(min);\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3,\n  2,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp48g_u6p2.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp48g_u6p2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 3,\n    3, 2, 4, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4]));\nconsole.log(strange_sort_list([5, 5, 5, 5]));\nconsole.log(strange_sort_list([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 4, 2, 3 ]

    [ 5, 5, 5, 5 ]

    []

    '
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted_lst = lst.sort((a, b) => a - b);\n    let i = 0;\n   \
    \ let j = sorted_lst.length - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    const lst_sorted = lst.sort((a, b) => a - b);\n    const lst_sorted_reverse\
    \ = lst_sorted.reverse();\n    const lst_result = [];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (i % 2 === 0) {\n            lst_result.push(lst_sorted[i\
    \ / 2]);\n        } else {\n            lst_result.push(lst_sorted_reverse[(i\
    \ - 1) / 2]);\n        }\n    }\n    return lst_result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp6ufbq5c4.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6ufbq5c4.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 3,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) return [];\n    let min = Math.min(...lst);\n  \
    \  let max = Math.max(...lst);\n    let result = [];\n    let min_index = lst.indexOf(min);\n\
    \    let max_index = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    while (lst.length\
    \ > 0) {\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \       min_index = lst.indexOf(min);\n        max_index = lst.indexOf(max);\n\
    \        result.push(min);\n        result.push(max);\n        lst.splice(min_index,\
    \ 1);\n        lst.splice(max_index - 1, 1);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpaaclhsq2.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaaclhsq2.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return lst;\n    let sorted = lst.sort((a, b) =>\
    \ a - b);\n    let result = [];\n    let min = sorted.shift();\n    let max =\
    \ sorted.pop();\n    while (min !== undefined || max !== undefined) {\n      \
    \  if (min !== undefined) {\n            result.push(min);\n            min =\
    \ sorted.shift();\n        }\n        if (max !== undefined) {\n            result.push(max);\n\
    \            max = sorted.pop();\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let sortedList: number[] = lst.sort((a,\
    \ b) => a - b);\n    let i: number = 0;\n    let j: number = sortedList.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sortedList[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted = lst.sort((a, b) => a - b);\n    let left = 0;\n    let\
    \ right = sorted.length - 1;\n    while (left <= right) {\n        result.push(sorted[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sorted[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [min];\n    let new_lst2 =\
    \ [max];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] !== min\
    \ && lst[i] !== max) {\n            new_lst.push(lst[i]);\n        }\n    }\n\
    \    for (let i = 0; i < new_lst.length; i++) {\n        if (i % 2 === 0) {\n\
    \            new_lst2.push(new_lst[i]);\n        } else {\n            new_lst2.unshift(new_lst[i]);\n\
    \        }\n    }\n    return new_lst2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpts0wuy0u.js:34:12)\n    at Object.<anonymous> (/tmp/tmpts0wuy0u.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minCount: number = 0;\n    let maxCount: number = 0;\n    while (result.length\
    \ < lst.length) {\n        if (minCount < maxCount) {\n            result.push(min);\n\
    \            minCount++;\n        } else {\n            result.push(max);\n  \
    \          maxCount++;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1,\n\
    \  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpx663fkmm.js:34:12)\n    at Object.<anonymous> (/tmp/tmpx663fkmm.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1, 4,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    let minRemaining: number[]\
    \ = lst.slice(0, minIndex).concat(lst.slice(minIndex + 1));\n    let maxRemaining:\
    \ number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex + 1));\n    result.push(min);\n\
    \    result.push(max);\n    while (minRemaining.length > 0) {\n        min = Math.min(...minRemaining);\n\
    \        max = Math.max(...maxRemaining);\n        minIndex = minRemaining.indexOf(min);\n\
    \        maxIndex = maxRemaining.indexOf(max);\n        minRemaining = minRemaining.slice(0,\
    \ minIndex).concat(minRemaining.slice(minIndex + 1));\n        maxRemaining =\
    \ maxRemaining.slice(0, maxIndex).concat(maxRemaining.slice(maxIndex + 1));\n\
    \        result.push(min);\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3,\n  2,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpd2qmptbp.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd2qmptbp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 3,\n    3, 2, 4, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738678
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sortedLst = lst.sort((a, b) => a - b);\n    let min = sortedLst.shift();\n\
    \    let max = sortedLst.pop();\n    while (min !== undefined || max !== undefined)\
    \ {\n        if (min !== undefined) {\n            result.push(min);\n       \
    \     min = sortedLst.shift();\n        }\n        if (max !== undefined) {\n\
    \            result.push(max);\n            max = sortedLst.pop();\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738678
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let sortedList\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sortedList.length - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedList[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738678
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sortedList = lst.sort((a, b) => a - b);\n    let i = 0;\n   \
    \ while (sortedList.length > 0) {\n        if (i % 2 === 0) {\n            result.push(sortedList.shift());\n\
    \        } else {\n            result.push(sortedList.pop());\n        }\n   \
    \     i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738678
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [min];\n    let new_lst_2\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] !== min)\
    \ {\n            new_lst_2.push(lst[i]);\n        }\n    }\n    let new_lst_3\
    \ = [];\n    for (let i = 0; i < new_lst_2.length; i++) {\n        if (new_lst_2[i]\
    \ !== max) {\n            new_lst_3.push(new_lst_2[i]);\n        }\n    }\n  \
    \  new_lst.push(max);\n    new_lst = new_lst.concat(strange_sort_list(new_lst_3));\n\
    \    return new_lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpim4ax2tq.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpim4ax2tq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738678
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let sorted: number[] = lst.sort((a, b)\
    \ => a - b);\n    let i: number = 0;\n    let j: number = sorted.length - 1;\n\
    \    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n       \
    \ if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return [];\n    let min = Math.min(...lst);\n \
    \   let max = Math.max(...lst);\n    let result = [min];\n    let index = lst.indexOf(min);\n\
    \    lst.splice(index, 1);\n    while (lst.length > 0) {\n        let max = Math.max(...lst);\n\
    \        let min = Math.min(...lst);\n        result.push(max);\n        result.push(min);\n\
    \        let index = lst.indexOf(max);\n        lst.splice(index, 1);\n      \
    \  index = lst.indexOf(min);\n        lst.splice(index, 1);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpqyyxku6f.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqyyxku6f.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2,\
    \ 3, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    const sorted =\
    \ lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let sorted =\
    \ [lst[0]];\n    let remaining = lst.slice(1);\n    while (remaining.length >\
    \ 0) {\n        let min = Math.min(...remaining);\n        let max = Math.max(...remaining);\n\
    \        sorted.push(max);\n        remaining = remaining.filter(x => x !== max);\n\
    \        sorted.push(min);\n        remaining = remaining.filter(x => x !== min);\n\
    \    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmp2uim1lfl.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2uim1lfl.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2,\
    \ 3, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let sortedList\
    \ = lst.sort((a, b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n\
    \    let j = sortedList.length - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedList[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return [];\n    const sorted = lst.sort((a, b)\
    \ => a - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i < j) {\n        result.push(sorted[i]);\n        result.push(sorted[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i === j) result.push(sorted[i]);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        if (i !==\
    \ j) {\n            result.push(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) return [];\n    let result = [];\n    let sorted\
    \ = lst.sort((a, b) => a - b);\n    let min = sorted.shift();\n    let max = sorted.pop();\n\
    \    while (sorted.length > 0) {\n        result.push(min);\n        result.push(max);\n\
    \        min = sorted.shift();\n        max = sorted.pop();\n    }\n    result.push(min);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpcbhw6asl.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcbhw6asl.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted_lst\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sorted_lst.length - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    if (lst.length === 0) {\n        return\
    \ result;\n    }\n    let min: number = lst[0];\n    let max: number = lst[0];\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i] < min)\
    \ {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n        }\n    }\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    let minValue: number = min;\n\
    \    let maxValue: number = max;\n    let minFound: boolean = false;\n    let\
    \ maxFound: boolean = false;\n    let minCount: number = 0;\n    let maxCount:\
    \ number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0) {\n            if (minCount === 0) {\n                result.push(minValue);\n\
    \                minCount++;\n            } else {\n                for (let j:\
    \ number = 0; j < lst.length; j++) {\n                    if (lst[j] < maxValue\
    \ && lst[j] > minValue) {\n                        minValue = lst[j];\n      \
    \                  minIndex = j;\n                        minFound = true;\n \
    \                   }\n                }\n                if (minFound) {\n  \
    \                  result.push(minValue);\n                    minCount++;\n \
    \                   minFound = false;\n                } else {\n            \
    \        result.push(minValue);\n                    minCount++;\n           \
    \     }\n            }\n        } else {\n            if (maxCount === 0) {\n\
    \                result.push(maxValue);\n                maxCount++;\n       \
    \     } else {\n                for (let j: number = 0; j < lst.length; j++) {\n\
    \                    if (lst[j] > minValue && lst[j] < maxValue) {\n         \
    \               maxValue = lst[j];\n                        maxIndex = j;\n  \
    \                      maxFound = true;\n                   \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx5hwee2m.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738679
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return [];\n    let result: number[] = [];\n  \
    \  let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minRemaining: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex\
    \ + 1));\n    let maxRemaining: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    while (minRemaining.length > 0 || maxRemaining.length > 0) {\n \
    \       if (minRemaining.length > 0) {\n            result.push(min);\n      \
    \      min = Math.min(...minRemaining);\n            minIndex = minRemaining.indexOf(min);\n\
    \            minRemaining = minRemaining.slice(0, minIndex).concat(minRemaining.slice(minIndex\
    \ + 1));\n        }\n        if (maxRemaining.length > 0) {\n            result.push(max);\n\
    \            max = Math.max(...maxRemaining);\n            maxIndex = maxRemaining.indexOf(max);\n\
    \            maxRemaining = maxRemaining.slice(0, maxIndex).concat(maxRemaining.slice(maxIndex\
    \ + 1));\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n\
    \  3\n]\n    at test (/tmp/tmpef_pfjdq.js:37:12)\n    at Object.<anonymous> (/tmp/tmpef_pfjdq.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2,\
    \ 3, 3, 2 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            result.push(lst[j]);\n            j--;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpuyd06f3_.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuyd06f3_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted: number[] = lst.sort((a, b) => a - b);\n    let min: number\
    \ = sorted[0];\n    let max: number = sorted[sorted.length - 1];\n    let i: number\
    \ = 0;\n    while (i < sorted.length) {\n        if (i % 2 === 0) {\n        \
    \    result.push(min);\n            min = sorted[sorted.indexOf(min) + 1];\n \
    \       } else {\n            result.push(max);\n            max = sorted[sorted.indexOf(max)\
    \ - 1];\n        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5,\n  5,\n  5\n\
    ]\n    at test (/tmp/tmpccmh7fic.js:37:12)\n    at Object.<anonymous> (/tmp/tmpccmh7fic.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5,\
    \ undefined ],\n  expected: [ 5, 5, 5, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let sorted: number[] = lst.sort((a, b)\
    \ => a - b);\n    let min: number = sorted[0];\n    let max: number = sorted[sorted.length\
    \ - 1];\n    let min_index: number = 0;\n    let max_index: number = sorted.length\
    \ - 1;\n    let min_max: boolean = true;\n    while (min_index <= max_index) {\n\
    \        if (min_max) {\n            result.push(min);\n            min_index++;\n\
    \            min = sorted[min_index];\n        } else {\n            result.push(max);\n\
    \            max_index--;\n            max = sorted[max_index];\n        }\n \
    \       min_max = !min_max;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n\
    \    if (sorted.length > 0) {\n      result.push(sorted.pop());\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    lst.sort((a, b)\
    \ => a - b);\n    let result = [];\n    let i = 0;\n    let j = lst.length - 1;\n\
    \    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n        if\
    \ (i <= j) {\n            result.push(lst[j]);\n            j--;\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n    let\
    \ i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_removed: number[] = lst.slice(0, min_index).concat(lst.slice(min_index\
    \ + 1));\n    let max_removed: number[] = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n    result.push(min);\n    result.push(max);\n    return result.concat(strange_sort_list(max_removed));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpd37hlzlc.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd37hlzlc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let res: number[] = [];\n  let sorted = lst.sort((a, b) => a - b);\n  let\
    \ i = 0;\n  let j = sorted.length - 1;\n  while (i < j) {\n    res.push(sorted[i]);\n\
    \    res.push(sorted[j]);\n    i++;\n    j--;\n  }\n  if (i == j) {\n    res.push(sorted[i]);\n\
    \  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let minIndex = lst.indexOf(min);\n    let\
    \ maxIndex = lst.indexOf(max);\n    if (minIndex == maxIndex) {\n        return\
    \ lst;\n    }\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n\
    \    return [min, max, ...strange_sort_list(lst)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  9,\n\
    \  5,\n  9,\n  6,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  9,\n  5,\n\
    \  8,\n  6,\n  7\n]\n    at test (/tmp/tmp43g2t5cg.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp43g2t5cg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9, 5,\
    \ 9, 6, 7 ],\n  expected: [ 1, 9, 5, 8, 6, 7 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: -5
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [min];\n    let new_lst_2\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] != min)\
    \ {\n            new_lst_2.push(lst[i]);\n        }\n    }\n    while (new_lst_2.length\
    \ != 0) {\n        let min = Math.min(...new_lst_2);\n        let max = Math.max(...new_lst_2);\n\
    \        new_lst.push(max);\n        new_lst_2 = [];\n        for (let i = 0;\
    \ i < lst.length; i++) {\n            if (lst[i] != min && lst[i] != max) {\n\
    \                new_lst_2.push(lst[i]);\n            }\n        }\n    }\n  \
    \  return new_lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 174895934\n#\n#\n#\n#FailureMessage Object: 0x7ffe358990c0\n 1: 0x2ad995135727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ad995cca28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ad995604f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ad995796760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ad99579e0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ad9959887db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ad9952e77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738692
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result:\
    \ number[] = [];\n    let sorted: number[] = lst.sort((a, b) => a - b);\n    let\
    \ i: number = 0;\n    while (sorted.length > 0) {\n        result.push(sorted[i]);\n\
    \        sorted.splice(i, 1);\n        i = sorted.length - 1 - i;\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  undefined,\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpwe3j3fjm.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwe3j3fjm.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, undefined,\
    \ undefined, undefined ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let result: number[] =\
    \ [];\n  let sorted = lst.sort((a, b) => a - b);\n  let left = 0;\n  let right\
    \ = sorted.length - 1;\n  while (left <= right) {\n    result.push(sorted[left]);\n\
    \    left++;\n    if (left <= right) {\n      result.push(sorted[right]);\n  \
    \    right--;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let res: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    res.push(min);\n    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return res.concat(strange_sort_list(lst));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpzr3zp_s3.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzr3zp_s3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minValue: number = lst[minIndex];\n    let maxValue: number = lst[maxIndex];\n\
    \    let minValueIndex: number = lst.indexOf(minValue);\n    let maxValueIndex:\
    \ number = lst.indexOf(maxValue);\n    let minValueIndex2: number = lst.indexOf(minValue,\
    \ minValueIndex + 1);\n    let maxValueIndex2: number = lst.indexOf(maxValue,\
    \ maxValueIndex + 1);\n    let minValue2: number = lst[minValueIndex2];\n    let\
    \ maxValue2: number = lst[maxValueIndex2];\n    let minValueIndex3: number = lst.indexOf(minValue2,\
    \ minValueIndex2 + 1);\n    let maxValueIndex3: number = lst.indexOf(maxValue2,\
    \ maxValueIndex2 + 1);\n    let minValue3: number = lst[minValueIndex3];\n   \
    \ let maxValue3: number = lst[maxValueIndex3];\n    let minValueIndex4: number\
    \ = lst.indexOf(minValue3, minValueIndex3 + 1);\n    let maxValueIndex4: number\
    \ = lst.indexOf(maxValue3, maxValueIndex3 + 1);\n    let minValue4: number = lst[minValueIndex4];\n\
    \    let maxValue4: number = lst[maxValueIndex4];\n    let minValueIndex5: number\
    \ = lst.indexOf(minValue4, minValueIndex4 + 1);\n    let maxValueIndex5: number\
    \ = lst.indexOf(maxValue4, maxValueIndex4 + 1);\n    let minValue5: number = lst[minValueIndex5];\n\
    \    let maxValue5: number = lst[maxValueIndex5];\n    let minValueIndex6: number\
    \ =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgso813be.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpgso813be.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    while\
    \ (sorted.length > 0) {\n        result.push(sorted[i]);\n        sorted.splice(i,\
    \ 1);\n        i = sorted.length - 1;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpritfbcl5.js:25:12)\n    at Object.<anonymous> (/tmp/tmpritfbcl5.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 3,\
    \ 2 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    let minCount: number = 0;\n\
    \    let maxCount: number = 0;\n    while (lst.length > 0) {\n        if (minCount\
    \ < maxCount) {\n            result.push(min);\n            lst.splice(minIndex,\
    \ 1);\n            min = Math.min(...lst);\n            minIndex = lst.indexOf(min);\n\
    \            minCount++;\n        } else {\n            result.push(max);\n  \
    \          lst.splice(maxIndex, 1);\n            max = Math.max(...lst);\n   \
    \         maxIndex = lst.indexOf(max);\n            maxCount++;\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1,\n\
    \  3,\n  2,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n\
    \  3\n]\n    at test (/tmp/tmprr0_sys2.js:37:12)\n    at Object.<anonymous> (/tmp/tmprr0_sys2.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1, 3,\
    \ 2, 3, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let lst1 = lst.slice();\n\
    \    lst1.sort((a, b) => a - b);\n    let lst2 = lst1.slice();\n    let lst3 =\
    \ [];\n    while (lst1.length > 0) {\n        lst3.push(lst1.shift());\n     \
    \   lst3.push(lst2.pop());\n    }\n    return lst3;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3,\n  2,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpgzzjx5f6.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgzzjx5f6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 3,\n    3, 2, 4, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) return [];\n    let res: number[] = [];\n    let\
    \ min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index\
    \ = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n    res.push(min);\n\
    \    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index -\
    \ 1, 1);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n    \
    \    max = Math.max(...lst);\n        min_index = lst.indexOf(min);\n        max_index\
    \ = lst.indexOf(max);\n        res.push(min);\n        res.push(max);\n      \
    \  lst.splice(min_index, 1);\n        lst.splice(max_index - 1, 1);\n    }\n \
    \   return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmp8_j83ym8.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8_j83ym8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const result\
    \ = [];\n    const sorted = lst.sort((a, b) => a - b);\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            result.push(lst[j]);\n            j--;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmppuwiidm2.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppuwiidm2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted = lst.sort((a, b) => a - b);\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (!lst.length) return [];\n    const result: number[] = [];\n    let\
    \ min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n \
    \   while (lst.length) {\n        result.push(min);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        if (lst.length) {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n        }\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    const sorted =\
    \ lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i < j) {\n        result.push(sorted[i]);\n\
    \        result.push(sorted[j]);\n        i++;\n        j--;\n    }\n    if (i\
    \ == j) {\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            result.push(lst[j]);\n            j--;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sortedList\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sortedList.length - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedList[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let newLst = [min];\n    let index = lst.indexOf(min);\n\
    \    lst.splice(index, 1);\n\n    while (lst.length > 0) {\n        let max =\
    \ Math.max(...lst);\n        newLst.push(max);\n        let index = lst.indexOf(max);\n\
    \        lst.splice(index, 1);\n\n        if (lst.length === 0) {\n          \
    \  break;\n        }\n\n        let min = Math.min(...lst);\n        newLst.push(min);\n\
    \        let index = lst.indexOf(min);\n        lst.splice(index, 1);\n    }\n\
    \n    return newLst;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4]));\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\nconsole.log(strange_sort_list([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpijxsg7_c.ts(22,13): error TS2451: Cannot redeclare
    block-scoped variable ''index''.

    ../../../../../tmp/tmpijxsg7_c.ts(31,13): error TS2451: Cannot redeclare block-scoped
    variable ''index''.

    '
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result =\
    \ [];\n    let sorted = lst.sort((a, b) => a - b);\n    let left = 0;\n    let\
    \ right = sorted.length - 1;\n    while (left <= right) {\n        result.push(sorted[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sorted[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sortedLst = lst.sort((a, b) => a - b);\n    let i = 0;\n    let\
    \ j = sortedLst.length - 1;\n    while (i <= j) {\n        result.push(sortedLst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedLst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result:\
    \ number[] = [];\n    let min: number = Math.min(...lst);\n    let max: number\
    \ = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n    let maxIndex:\
    \ number = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n \
    \   lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    while (lst.length\
    \ > 0) {\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \       minIndex = lst.indexOf(min);\n        maxIndex = lst.indexOf(max);\n \
    \       result.push(min);\n        result.push(max);\n        lst.splice(minIndex,\
    \ 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpmon6cdqi.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmon6cdqi.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738674
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sortedLst = lst.sort((a, b) => a - b);\n    let i = 0;\n    let\
    \ j = sortedLst.length - 1;\n    while (i <= j) {\n        result.push(sortedLst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedLst[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let result:\
    \ number[] = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    let maxIndex = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    return result.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpf5qd0g84.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf5qd0g84.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738681
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    if (lst.length\
    \ === 1) {\n        return lst;\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index\
    \ = lst.indexOf(max);\n    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ new_lst.concat(strange_sort_list(lst));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  9,\n\
    \  5,\n  9,\n  6,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  9,\n  5,\n\
    \  8,\n  6,\n  7\n]\n    at test (/tmp/tmplccb4kqs.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplccb4kqs.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9, 5,\
    \ 9, 6, 7 ],\n  expected: [ 1, 9, 5, 8, 6, 7 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738682
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minLst: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex +\
    \ 1));\n    let maxLst: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    result.push(min);\n    result.push(max);\n    while (minLst.length\
    \ > 0) {\n        min = Math.min(...minLst);\n        max = Math.max(...maxLst);\n\
    \        minIndex = minLst.indexOf(min);\n        maxIndex = maxLst.indexOf(max);\n\
    \        minLst = minLst.slice(0, minIndex).concat(minLst.slice(minIndex + 1));\n\
    \        maxLst = maxLst.slice(0, maxIndex).concat(maxLst.slice(maxIndex + 1));\n\
    \        result.push(min);\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  3,\n  2,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpu95s9p96.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu95s9p96.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 3,\n    3, 2, 4, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738682
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let min_count: number = 0;\n\
    \    let max_count: number = 0;\n    let min_flag: boolean = true;\n    let max_flag:\
    \ boolean = true;\n    while (lst.length > 0) {\n        if (min_flag) {\n   \
    \         result.push(min);\n            lst.splice(min_index, 1);\n         \
    \   min_count++;\n            min_flag = false;\n        }\n        if (max_flag)\
    \ {\n            result.push(max);\n            lst.splice(max_index, 1);\n  \
    \          max_count++;\n            max_flag = false;\n        }\n        if\
    \ (min_count === max_count) {\n            min = Math.min(...lst);\n         \
    \   max = Math.max(...lst);\n            min_index = lst.indexOf(min);\n     \
    \       max_index = lst.indexOf(max);\n            min_flag = true;\n        \
    \    max_flag = true;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjhptxj1j.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjhptxj1j.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738682
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmppuwiidm2.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppuwiidm2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) return lst;\n    let result: number[] = [];\n \
    \   let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minCount: number = 0;\n    let maxCount: number = 0;\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            minCount++;\n        } else {\n            result.push(max);\n\
    \            maxCount++;\n        }\n    }\n    lst.splice(minIndex, minCount);\n\
    \    lst.splice(maxIndex, maxCount);\n    return result.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  1,\n  4,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmp1hm46g3o.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1hm46g3o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 1, 4,\n    3, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738683
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n    let\
    \ i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [min];\n    lst.splice(lst.indexOf(min),\
    \ 1);\n    while (lst.length > 0) {\n        let max = Math.max(...lst);\n   \
    \     result.push(max);\n        lst.splice(lst.indexOf(max), 1);\n        if\
    \ (lst.length === 0) {\n            break;\n        }\n        let min = Math.min(...lst);\n\
    \        result.push(min);\n        lst.splice(lst.indexOf(min), 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738683
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    let minCount: number = 0;\n\
    \    let maxCount: number = 0;\n    let i: number = 0;\n    while (i < lst.length)\
    \ {\n        if (i % 2 === 0) {\n            result.push(min);\n            minCount++;\n\
    \            lst.splice(minIndex, 1);\n            min = Math.min(...lst);\n \
    \           minIndex = lst.indexOf(min);\n        } else {\n            result.push(max);\n\
    \            maxCount++;\n            lst.splice(maxIndex, 1);\n            max\
    \ = Math.max(...lst);\n            maxIndex = lst.indexOf(max);\n        }\n \
    \       i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpks29rtsq.js:39:12)\n    at Object.<anonymous> (/tmp/tmpks29rtsq.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738683
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    let minRemaining: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex\
    \ + 1));\n    let maxRemaining: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    result.push(min);\n    result.push(max);\n    if (minRemaining.length\
    \ === 0) {\n        return result;\n    }\n    if (minRemaining.length === 1)\
    \ {\n        result.push(minRemaining[0]);\n        return result;\n    }\n  \
    \  if (maxRemaining.length === 1) {\n        result.push(maxRemaining[0]);\n \
    \       return result;\n    }\n    return result.concat(strange_sort_list(minRemaining)).concat(strange_sort_list(maxRemaining));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  2,\n  3,\n  3,\n  1,\n  3,\n  2,\n  3,\n  3,\n\
    \  1,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpe4intx3q.js:37:12)\n    at Object.<anonymous> (/tmp/tmpe4intx3q.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4, 3, 4, 4,\n    2, 3, 3, 1, 3, 2, 3,\n    3, 1, 2, 2\n  ],\n  expected:\
    \ [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738683
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let lst_copy: number[] = lst.slice();\n\
    \    lst_copy.splice(min_index, 1);\n    lst_copy.splice(max_index - 1, 1);\n\
    \    result.push(min);\n    result.push(max);\n    while (lst_copy.length > 0)\
    \ {\n        min = Math.min(...lst_copy);\n        max = Math.max(...lst_copy);\n\
    \        min_index = lst_copy.indexOf(min);\n        max_index = lst_copy.indexOf(max);\n\
    \        result.push(min);\n        result.push(max);\n        lst_copy.splice(min_index,\
    \ 1);\n        lst_copy.splice(max_index - 1, 1);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmptbi5kvgw.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptbi5kvgw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <=\
    \ j) {\n      result.push(sorted[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [min];\n    let index = 0;\n\
    \    while (result.length < lst.length) {\n        if (index % 2 === 0) {\n  \
    \          result.push(max);\n            max = Math.max(...lst.filter(x => x\
    \ < max));\n        } else {\n            result.push(min);\n            min =\
    \ Math.min(...lst.filter(x => x > min));\n        }\n        index++;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpg1v1gk0h.js:32:12)\n    at Object.<anonymous> (/tmp/tmpg1v1gk0h.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 1,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738683
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++)\
    \ {\n    if (i % 2 === 0) {\n      result.push(sorted[i]);\n    } else {\n   \
    \   result.unshift(sorted[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjwyvqmfx.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjwyvqmfx.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738683
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let\
    \ sorted = lst.sort((a, b) => a - b);\n  let max = sorted.length - 1;\n  let min\
    \ = 0;\n  while (max > min) {\n    result.push(sorted[min]);\n    result.push(sorted[max]);\n\
    \    max--;\n    min++;\n  }\n  if (max === min) {\n    result.push(sorted[min]);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length -\
    \ 1;\n  while (i < j) {\n    result.push(sorted[i]);\n    result.push(sorted[j]);\n\
    \    i++;\n    j--;\n  }\n  if (i === j) {\n    result.push(sorted[i]);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    return result.concat(strange_sort_list(lst));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpmhvc__mb.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhvc__mb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738676
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n  \
    \  let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let min_removed: number[]\
    \ = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n    let max_removed:\
    \ number[] = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n    res.push(min);\n    res.push(max);\n    while (max_removed.length\
    \ > 0) {\n        min = Math.min(...max_removed);\n        max = Math.max(...max_removed);\n\
    \        min_index = max_removed.indexOf(min);\n        max_index = max_removed.indexOf(max);\n\
    \        min_removed = max_removed.slice(0, min_index).concat(max_removed.slice(min_index\
    \ + 1));\n        max_removed = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n        res.push(min);\n        res.push(max);\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpmhwofcki.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhwofcki.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738684
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex, 1);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n     \
    \   maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex, 1);\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpqqm43llu.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqqm43llu.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    const sorted = lst.sort((a, b) => a - b);\n    const result: number[]\
    \ = [];\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        if (sorted.length > 0) {\n            result.push(sorted.pop());\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const sorted = lst.sort((a,\
    \ b) => a - b);\n  const result = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n\
    \    if (sorted.length > 0) {\n      result.push(sorted.pop());\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sortedList\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sortedList.length - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedList[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let left = 0;\n  \
    \  let right = sorted.length - 1;\n    while (left <= right) {\n        result.push(sorted[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sorted[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const lst_sorted\
    \ = lst.sort((a, b) => a - b);\n    const lst_sorted_reversed = lst_sorted.slice().reverse();\n\
    \    const lst_sorted_reversed_without_first = lst_sorted_reversed.slice(1);\n\
    \    const lst_sorted_without_last = lst_sorted.slice(0, -1);\n    const lst_sorted_reversed_without_first_and_last\
    \ = lst_sorted_reversed_without_first.slice(0, -1);\n    const lst_sorted_without_first_and_last\
    \ = lst_sorted_without_last.slice(1);\n    const lst_sorted_reversed_without_first_and_last_reversed\
    \ = lst_sorted_reversed_without_first_and_last.slice().reverse();\n    const lst_sorted_without_first_and_last_reversed\
    \ = lst_sorted_without_first_and_last.slice().reverse();\n    const lst_sorted_reversed_without_first_and_last_reversed_without_first\
    \ = lst_sorted_reversed_without_first_and_last_reversed.slice(1);\n    const lst_sorted_without_first_and_last_reversed_without_last\
    \ = lst_sorted_without_first_and_last_reversed.slice(0, -1);\n    return [lst_sorted[0],\
    \ lst_sorted_reversed[0], ...lst_sorted_reversed_without_first_and_last_reversed_without_first,\
    \ ...lst_sorted_without_first_and_last_reversed_without_last];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpban_3zgv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpban_3zgv.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 3,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i = 0;\n    let j = lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            result.push(lst[j]);\n            j--;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738676
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    const result:\
    \ number[] = [];\n    const sortedList = lst.sort((a, b) => a - b);\n    let i\
    \ = 0;\n    let j = sortedList.length - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sortedList[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length == 0) {\n        return [];\n    }\n    lst.sort((a, b)\
    \ => a - b);\n    let result = [];\n    let i = 0;\n    let j = lst.length - 1;\n\
    \    while (i <= j) {\n        result.push(lst[i]);\n        i++;\n        if\
    \ (i <= j) {\n            result.push(lst[j]);\n            j--;\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738679
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return lst;\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738673
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let result: number[]\
    \ = [];\n    let sorted: number[] = lst.sort((a, b) => a - b);\n    let start:\
    \ number = 0;\n    let end: number = sorted.length - 1;\n    while (start <= end)\
    \ {\n        result.push(sorted[start]);\n        start++;\n        if (start\
    \ <= end) {\n            result.push(sorted[end]);\n            end--;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let newLst = [min];\n    let lst2 = lst.slice(0,\
    \ lst.indexOf(min)).concat(lst.slice(lst.indexOf(min) + 1));\n    while (lst2.length\
    \ > 0) {\n        min = Math.min(...lst2);\n        max = Math.max(...lst2);\n\
    \        newLst.push(max);\n        lst2 = lst2.slice(0, lst2.indexOf(max)).concat(lst2.slice(lst2.indexOf(max)\
    \ + 1));\n        if (lst2.length > 0) {\n            newLst.push(min);\n    \
    \        lst2 = lst2.slice(0, lst2.indexOf(min)).concat(lst2.slice(lst2.indexOf(min)\
    \ + 1));\n        }\n    }\n    return newLst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n    if (lst.length === 0) {\n        return [];\n    }\n    let lst_copy\
    \ = lst.slice();\n    lst_copy.sort((a, b) => a - b);\n    let res = [];\n   \
    \ let i = 0;\n    let j = lst_copy.length - 1;\n    while (i <= j) {\n       \
    \ res.push(lst_copy[i]);\n        i++;\n        if (i <= j) {\n            res.push(lst_copy[j]);\n\
    \            j--;\n        }\n    }\n    return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738684
