{
  "language": "ts",
  "name": "HumanEval_81_numerical_letter_grade",
  "results": [
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const grade_map = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n  const letter_grades: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i];\n    if (grade >= 4.0) {\n      letter_grades.push('A+');\n    } else if (grade >= 3.7) {\n      letter_grades.push('A');\n    } else if (grade >= 3.3) {\n      letter_grades.push('A-');\n    } else if (grade >= 3.0) {\n      letter_grades.push('B+');\n    } else if (grade >= 2.7) {\n      letter_grades.push('B');\n    } else if (grade >= 2.3) {\n      letter_grades.push('B-');\n    } else if (grade >= 2.0) {\n      letter_grades.push('C+');\n    } else if (grade >= 1.7) {\n      letter_grades.push('C');\n    } else if (grade >= 1.3) {\n      letter_grades.push('C-');\n    } else if (grade >= 1.0) {\n      letter_grades.push('D+');\n    } else if (grade >= 0.7) {\n      letter_grades.push('D');\n    } else if (grade >= 0.0) {\n      letter_grades.push('D-');\n    } else {\n      letter_grades.push('E');\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzfv3ncbr.js:85:12)\n    at Object.<anonymous> (/tmp/tmpzfv3ncbr.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpfw5a4c51.js:71:12)\n    at Object.<anonymous> (/tmp/tmpfw5a4c51.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push('A+');\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push('A');\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push('A-');\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push('B+');\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push('B');\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push('B-');\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push('C+');\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push('C');\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push('C-');\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push('D+');\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push('D');\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push('D-');\n        } else {\n            grades_letter.push('E');\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpc1njvbu0.js:71:12)\n    at Object.<anonymous> (/tmp/tmpc1njvbu0.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl8222xe4.js:71:12)\n    at Object.<anonymous> (/tmp/tmpl8222xe4.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grade_letter.push('A+');\n        } else if (grades[i] >= 3.7) {\n            grade_letter.push('A');\n        } else if (grades[i] >= 3.3) {\n            grade_letter.push('A-');\n        } else if (grades[i] >= 3.0) {\n            grade_letter.push('B+');\n        } else if (grades[i] >= 2.7) {\n            grade_letter.push('B');\n        } else if (grades[i] >= 2.3) {\n            grade_letter.push('B-');\n        } else if (grades[i] >= 2.0) {\n            grade_letter.push('C+');\n        } else if (grades[i] >= 1.7) {\n            grade_letter.push('C');\n        } else if (grades[i] >= 1.3) {\n            grade_letter.push('C-');\n        } else if (grades[i] >= 1.0) {\n            grade_letter.push('D+');\n        } else if (grades[i] >= 0.7) {\n            grade_letter.push('D');\n        } else if (grades[i] >= 0.0) {\n            grade_letter.push('D-');\n        } else {\n            grade_letter.push('E');\n        }\n    }\n    return grade_letter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4cfdxzad.js:70:12)\n    at Object.<anonymous> (/tmp/tmp4cfdxzad.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1: 'E'\n    }\n    return grades.map(grade => {\n        let letter_grade = '';\n        for (let key in grades_map) {\n            if (grade >= parseFloat(key)) {\n                letter_grade = grades_map[key];\n                break;\n            }\n        }\n        return letter_grade;\n    })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvz5v_7cj.ts(36,9): error TS1136: Property assignment expected.\n../../../../tmp/tmpvz5v_7cj.ts(36,11): error TS1005: ',' expected.\n../../../../tmp/tmpvz5v_7cj.ts(36,13): error TS1134: Variable declaration expected.\n../../../../tmp/tmpvz5v_7cj.ts(48,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    grades.forEach(grade => {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    });\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcqz3l197.js:70:12)\n    at Object.<anonymous> (/tmp/tmpcqz3l197.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const grade_map = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n  return grades.map(grade => {\n    if (grade > 4.0) {\n      return 'A+';\n    } else if (grade < 0.0) {\n      return 'E';\n    }\n    for (let key in grade_map) {\n      if (grade >= Number(key)) {\n        return grade_map[key];\n      }\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-',\n  'D-',\n  'D-',\n  'D-',\n  'D-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpps7_jo2l.js:54:12)\n    at Object.<anonymous> (/tmp/tmpps7_jo2l.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-', 'D-', 'D-', 'D-', 'D-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const grade_map = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n  return grades.map(grade => {\n    let grade_letter = 'E';\n    for (const [key, value] of Object.entries(grade_map)) {\n      if (grade >= parseFloat(key)) {\n        grade_letter = value;\n        break;\n      }\n    }\n    return grade_letter;\n  });\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-',\n  'D-',\n  'D-',\n  'D-',\n  'D-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp82ifpocu.js:52:12)\n    at Object.<anonymous> (/tmp/tmp82ifpocu.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-', 'D-', 'D-', 'D-', 'D-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'D-', 'D-', 'D-', 'D-', 'D-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 0,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] == 4.0) {\n            result.push('A+');\n        } else if (grades[i] > 3.7) {\n            result.push('A');\n        } else if (grades[i] > 3.3) {\n            result.push('A-');\n        } else if (grades[i] > 3.0) {\n            result.push('B+');\n        } else if (grades[i] > 2.7) {\n            result.push('B');\n        } else if (grades[i] > 2.3) {\n            result.push('B-');\n        } else if (grades[i] > 2.0) {\n            result.push('C+');\n        } else if (grades[i] > 1.7) {\n            result.push('C');\n        } else if (grades[i] > 1.3) {\n            result.push('C-');\n        } else if (grades[i] > 1.0) {\n            result.push('D+');\n        } else if (grades[i] > 0.7) {\n            result.push('D');\n        } else if (grades[i] > 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push('A+');\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push('A');\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push('A-');\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push('B+');\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push('B');\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push('B-');\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push('C+');\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push('C');\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push('C-');\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push('D+');\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push('D');\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push('D-');\n        } else {\n            grades_letter.push('E');\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpc1njvbu0.js:71:12)\n    at Object.<anonymous> (/tmp/tmpc1njvbu0.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq9mwdkn8.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq9mwdkn8.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1.0: 'E'\n    };\n    const grade_keys = Object.keys(grade_map).map(Number).sort((a, b) => b - a);\n    return grades.map(g => {\n        for (let i = 0; i < grade_keys.length; i++) {\n            if (g >= grade_keys[i]) {\n                return grade_map[grade_keys[i]];\n            }\n        }\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdqyuf7fg.ts(36,9): error TS1136: Property assignment expected.\n../../../../tmp/tmpdqyuf7fg.ts(36,13): error TS1005: ',' expected.\n../../../../tmp/tmpdqyuf7fg.ts(36,15): error TS1134: Variable declaration expected.\n../../../../tmp/tmpdqyuf7fg.ts(47,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let letter_grades: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2ihj1qx_.js:70:12)\n    at Object.<anonymous> (/tmp/tmp2ihj1qx_.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 0,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            result.push('A+');\n        } else if (grades[i] > 3.7) {\n            result.push('A');\n        } else if (grades[i] > 3.3) {\n            result.push('A-');\n        } else if (grades[i] > 3.0) {\n            result.push('B+');\n        } else if (grades[i] > 2.7) {\n            result.push('B');\n        } else if (grades[i] > 2.3) {\n            result.push('B-');\n        } else if (grades[i] > 2.0) {\n            result.push('C+');\n        } else if (grades[i] > 1.7) {\n            result.push('C');\n        } else if (grades[i] > 1.3) {\n            result.push('C-');\n        } else if (grades[i] > 1.0) {\n            result.push('D+');\n        } else if (grades[i] > 0.7) {\n            result.push('D');\n        } else if (grades[i] > 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    let grade: string;\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grade = 'A+';\n        } else if (grades[i] >= 3.7) {\n            grade = 'A';\n        } else if (grades[i] >= 3.3) {\n            grade = 'A-';\n        } else if (grades[i] >= 3.0) {\n            grade = 'B+';\n        } else if (grades[i] >= 2.7) {\n            grade = 'B';\n        } else if (grades[i] >= 2.3) {\n            grade = 'B-';\n        } else if (grades[i] >= 2.0) {\n            grade = 'C+';\n        } else if (grades[i] >= 1.7) {\n            grade = 'C';\n        } else if (grades[i] >= 1.3) {\n            grade = 'C-';\n        } else if (grades[i] >= 1.0) {\n            grade = 'D+';\n        } else if (grades[i] >= 0.7) {\n            grade = 'D';\n        } else if (grades[i] >= 0.0) {\n            grade = 'D-';\n        } else {\n            grade = 'E';\n        }\n        result.push(grade);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpimird1aq.js:72:12)\n    at Object.<anonymous> (/tmp/tmpimird1aq.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1: 'E'\n    }\n    return grades.map(grade => {\n        for (let key in grades_map) {\n            if (grade >= parseFloat(key)) {\n                return grades_map[key];\n            }\n        }\n    })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq22tex75.ts(36,9): error TS1136: Property assignment expected.\n../../../../tmp/tmpq22tex75.ts(36,11): error TS1005: ',' expected.\n../../../../tmp/tmpq22tex75.ts(36,13): error TS1134: Variable declaration expected.\n../../../../tmp/tmpq22tex75.ts(45,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return grades_map['4.0'];\n        } else if (grade >= 3.7) {\n            return grades_map['3.7'];\n        } else if (grade >= 3.3) {\n            return grades_map['3.3'];\n        } else if (grade >= 3.0) {\n            return grades_map['3.0'];\n        } else if (grade >= 2.7) {\n            return grades_map['2.7'];\n        } else if (grade >= 2.3) {\n            return grades_map['2.3'];\n        } else if (grade >= 2.0) {\n            return grades_map['2.0'];\n        } else if (grade >= 1.7) {\n            return grades_map['1.7'];\n        } else if (grade >= 1.3) {\n            return grades_map['1.3'];\n        } else if (grade >= 1.0) {\n            return grades_map['1.0'];\n        } else if (grade >= 0.7) {\n            return grades_map['0.7'];\n        } else if (grade >= 0.0) {\n            return grades_map['0.0'];\n        } else {\n            return grades_map['-1.0'];\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpt_xyeugw.js:83:12)\n    at Object.<anonymous> (/tmp/tmpt_xyeugw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push('A+');\n    } else if (grades[i] >= 3.7) {\n      result.push('A');\n    } else if (grades[i] >= 3.3) {\n      result.push('A-');\n    } else if (grades[i] >= 3.0) {\n      result.push('B+');\n    } else if (grades[i] >= 2.7) {\n      result.push('B');\n    } else if (grades[i] >= 2.3) {\n      result.push('B-');\n    } else if (grades[i] >= 2.0) {\n      result.push('C+');\n    } else if (grades[i] >= 1.7) {\n      result.push('C');\n    } else if (grades[i] >= 1.3) {\n      result.push('C-');\n    } else if (grades[i] >= 1.0) {\n      result.push('D+');\n    } else if (grades[i] >= 0.7) {\n      result.push('D');\n    } else if (grades[i] >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpw6shob75.js:70:12)\n    at Object.<anonymous> (/tmp/tmpw6shob75.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let grade of grades) {\n    if (grade >= 4.0) {\n      result.push('A+');\n    } else if (grade >= 3.7) {\n      result.push('A');\n    } else if (grade >= 3.3) {\n      result.push('A-');\n    } else if (grade >= 3.0) {\n      result.push('B+');\n    } else if (grade >= 2.7) {\n      result.push('B');\n    } else if (grade >= 2.3) {\n      result.push('B-');\n    } else if (grade >= 2.0) {\n      result.push('C+');\n    } else if (grade >= 1.7) {\n      result.push('C');\n    } else if (grade >= 1.3) {\n      result.push('C-');\n    } else if (grade >= 1.0) {\n      result.push('D+');\n    } else if (grade >= 0.7) {\n      result.push('D');\n    } else if (grade >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpymk8mmnc.js:70:12)\n    at Object.<anonymous> (/tmp/tmpymk8mmnc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_map = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return grade_map['4.0'];\n        } else if (grade >= 3.7) {\n            return grade_map['3.7'];\n        } else if (grade >= 3.3) {\n            return grade_map['3.3'];\n        } else if (grade >= 3.0) {\n            return grade_map['3.0'];\n        } else if (grade >= 2.7) {\n            return grade_map['2.7'];\n        } else if (grade >= 2.3) {\n            return grade_map['2.3'];\n        } else if (grade >= 2.0) {\n            return grade_map['2.0'];\n        } else if (grade >= 1.7) {\n            return grade_map['1.7'];\n        } else if (grade >= 1.3) {\n            return grade_map['1.3'];\n        } else if (grade >= 1.0) {\n            return grade_map['1.0'];\n        } else if (grade >= 0.7) {\n            return grade_map['0.7'];\n        } else if (grade >= 0.0) {\n            return grade_map['0.0'];\n        } else {\n            return grade_map['-1.0'];\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvpcr60sn.js:83:12)\n    at Object.<anonymous> (/tmp/tmpvpcr60sn.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1: 'E'\n    }\n    let result: string[] = [];\n    grades.forEach(grade => {\n        let grade_key = Object.keys(grades_map).find(key => grade >= parseFloat(key));\n        result.push(grades_map[grade_key]);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsddua1ir.ts(36,9): error TS1136: Property assignment expected.\n../../../../tmp/tmpsddua1ir.ts(36,11): error TS1005: ',' expected.\n../../../../tmp/tmpsddua1ir.ts(36,13): error TS1134: Variable declaration expected.\n../../../../tmp/tmpsddua1ir.ts(44,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return grades_map['4.0'];\n        } else if (grade >= 3.7) {\n            return grades_map['3.7'];\n        } else if (grade >= 3.3) {\n            return grades_map['3.3'];\n        } else if (grade >= 3.0) {\n            return grades_map['3.0'];\n        } else if (grade >= 2.7) {\n            return grades_map['2.7'];\n        } else if (grade >= 2.3) {\n            return grades_map['2.3'];\n        } else if (grade >= 2.0) {\n            return grades_map['2.0'];\n        } else if (grade >= 1.7) {\n            return grades_map['1.7'];\n        } else if (grade >= 1.3) {\n            return grades_map['1.3'];\n        } else if (grade >= 1.0) {\n            return grades_map['1.0'];\n        } else if (grade >= 0.7) {\n            return grades_map['0.7'];\n        } else if (grade >= 0.0) {\n            return grades_map['0.0'];\n        } else {\n            return grades_map['-1.0'];\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpt_xyeugw.js:83:12)\n    at Object.<anonymous> (/tmp/tmpt_xyeugw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let grade of grades) {\n    if (grade >= 4.0) {\n      result.push('A+');\n    } else if (grade >= 3.7) {\n      result.push('A');\n    } else if (grade >= 3.3) {\n      result.push('A-');\n    } else if (grade >= 3.0) {\n      result.push('B+');\n    } else if (grade >= 2.7) {\n      result.push('B');\n    } else if (grade >= 2.3) {\n      result.push('B-');\n    } else if (grade >= 2.0) {\n      result.push('C+');\n    } else if (grade >= 1.7) {\n      result.push('C');\n    } else if (grade >= 1.3) {\n      result.push('C-');\n    } else if (grade >= 1.0) {\n      result.push('D+');\n    } else if (grade >= 0.7) {\n      result.push('D');\n    } else if (grade >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmptwfb19tk.js:71:12)\n    at Object.<anonymous> (/tmp/tmptwfb19tk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let grades_letter = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      grades_letter.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      grades_letter.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      grades_letter.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      grades_letter.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      grades_letter.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      grades_letter.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      grades_letter.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      grades_letter.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      grades_letter.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      grades_letter.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      grades_letter.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      grades_letter.push(\"D-\");\n    } else {\n      grades_letter.push(\"E\");\n    }\n  }\n  return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpo925qz4r.js:71:12)\n    at Object.<anonymous> (/tmp/tmpo925qz4r.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_map = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(grade_map['4.0']);\n        } else if (grade >= 3.7) {\n            result.push(grade_map['3.7']);\n        } else if (grade >= 3.3) {\n            result.push(grade_map['3.3']);\n        } else if (grade >= 3.0) {\n            result.push(grade_map['3.0']);\n        } else if (grade >= 2.7) {\n            result.push(grade_map['2.7']);\n        } else if (grade >= 2.3) {\n            result.push(grade_map['2.3']);\n        } else if (grade >= 2.0) {\n            result.push(grade_map['2.0']);\n        } else if (grade >= 1.7) {\n            result.push(grade_map['1.7']);\n        } else if (grade >= 1.3) {\n            result.push(grade_map['1.3']);\n        } else if (grade >= 1.0) {\n            result.push(grade_map['1.0']);\n        } else if (grade >= 0.7) {\n            result.push(grade_map['0.7']);\n        } else if (grade >= 0.0) {\n            result.push(grade_map['0.0']);\n        } else {\n            result.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_idw_2a.ts(65,20): error TS1003: Identifier expected.\n../../../../tmp/tmpu_idw_2a.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let letter_grades: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2ihj1qx_.js:70:12)\n    at Object.<anonymous> (/tmp/tmp2ihj1qx_.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i: number = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpjialpf47.js:70:12)\n    at Object.<anonymous> (/tmp/tmpjialpf47.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push('A+');\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push('A');\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push('A-');\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push('B+');\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push('B');\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push('B-');\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push('C+');\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push('C');\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push('C-');\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push('D+');\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push('D');\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push('D-');\n        } else {\n            grades_letter.push('E');\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpc1njvbu0.js:71:12)\n    at Object.<anonymous> (/tmp/tmpc1njvbu0.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpywygdl2u.js:70:12)\n    at Object.<anonymous> (/tmp/tmpywygdl2u.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_table = {\n        \"4.0\": \"A+\",\n        \"3.7\": \"A\",\n        \"3.3\": \"A-\",\n        \"3.0\": \"B+\",\n        \"2.7\": \"B\",\n        \"2.3\": \"B-\",\n        \"2.0\": \"C+\",\n        \"1.7\": \"C\",\n        \"1.3\": \"C-\",\n        \"1.0\": \"D+\",\n        \"0.7\": \"D\",\n        \"0.0\": \"D-\",\n        \"-1.0\": \"E\"\n    }\n    const result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        let grade = grades[i];\n        if (grade >= 4.0) {\n            result.push(grade_table[\"4.0\"]);\n        } else if (grade >= 3.7) {\n            result.push(grade_table[\"3.7\"]);\n        } else if (grade >= 3.3) {\n            result.push(grade_table[\"3.3\"]);\n        } else if (grade >= 3.0) {\n            result.push(grade_table[\"3.0\"]);\n        } else if (grade >= 2.7) {\n            result.push(grade_table[\"2.7\"]);\n        } else if (grade >= 2.3) {\n            result.push(grade_table[\"2.3\"]);\n        } else if (grade >= 2.0) {\n            result.push(grade_table[\"2.0\"]);\n        } else if (grade >= 1.7) {\n            result.push(grade_table[\"1.7\"]);\n        } else if (grade >= 1.3) {\n            result.push(grade_table[\"1.3\"]);\n        } else if (grade >= 1.0) {\n            result.push(grade_table[\"1.0\"]);\n        } else if (grade >= 0.7) {\n            result.push(grade_table[\"0.7\"]);\n        } else if (grade >= 0.0) {\n            result.push(grade_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpga8dyzq7.ts(65,1): error TS1005: ',' expected.\n../../../../tmp/tmpga8dyzq7.ts(65,9): error TS1005: ',' expected.\n../../../../tmp/tmpga8dyzq7.ts(79,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphmlr852f.js:71:12)\n    at Object.<anonymous> (/tmp/tmphmlr852f.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const grades_map = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n  return grades.map((grade) => {\n    if (grade === 0) {\n      return 'E';\n    }\n    for (let key in grades_map) {\n      if (grade > parseFloat(key)) {\n        return grades_map[key];\n      }\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-',\n  'D-',\n  'D-',\n  'D-',\n  'D-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp49_4e9up.js:51:12)\n    at Object.<anonymous> (/tmp/tmp49_4e9up.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-', 'D-', 'D-', 'D-', 'D-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push('A+');\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push('A');\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push('A-');\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push('B+');\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push('B');\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push('B-');\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push('C+');\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push('C');\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push('C-');\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push('D+');\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push('D');\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push('D-');\n        } else {\n            grades_letter.push('E');\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpc1njvbu0.js:71:12)\n    at Object.<anonymous> (/tmp/tmpc1njvbu0.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpawt0fo_7.js:70:12)\n    at Object.<anonymous> (/tmp/tmpawt0fo_7.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl8222xe4.js:71:12)\n    at Object.<anonymous> (/tmp/tmpl8222xe4.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grade >= 3.7) {\n            letter_grades.push('A');\n        } else if (grade >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grade >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grade >= 2.7) {\n            letter_grades.push('B');\n        } else if (grade >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grade >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grade >= 1.7) {\n            letter_grades.push('C');\n        } else if (grade >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grade >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grade >= 0.7) {\n            letter_grades.push('D');\n        } else if (grade >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgf588yzu.js:70:12)\n    at Object.<anonymous> (/tmp/tmpgf588yzu.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpawt0fo_7.js:70:12)\n    at Object.<anonymous> (/tmp/tmpawt0fo_7.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl8222xe4.js:71:12)\n    at Object.<anonymous> (/tmp/tmpl8222xe4.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) return 'A+';\n        if (grade >= 3.7) return 'A';\n        if (grade >= 3.3) return 'A-';\n        if (grade >= 3.0) return 'B+';\n        if (grade >= 2.7) return 'B';\n        if (grade >= 2.3) return 'B-';\n        if (grade >= 2.0) return 'C+';\n        if (grade >= 1.7) return 'C';\n        if (grade >= 1.3) return 'C-';\n        if (grade >= 1.0) return 'D+';\n        if (grade >= 0.7) return 'D';\n        if (grade >= 0.0) return 'D-';\n        return 'E';\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzc_7r786.js:54:12)\n    at Object.<anonymous> (/tmp/tmpzc_7r786.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return 'A+';\n        } else if (grade >= 3.7) {\n            return 'A';\n        } else if (grade >= 3.3) {\n            return 'A-';\n        } else if (grade >= 3.0) {\n            return 'B+';\n        } else if (grade >= 2.7) {\n            return 'B';\n        } else if (grade >= 2.3) {\n            return 'B-';\n        } else if (grade >= 2.0) {\n            return 'C+';\n        } else if (grade >= 1.7) {\n            return 'C';\n        } else if (grade >= 1.3) {\n            return 'C-';\n        } else if (grade >= 1.0) {\n            return 'D+';\n        } else if (grade >= 0.7) {\n            return 'D';\n        } else if (grade >= 0.0) {\n            return 'D-';\n        } else {\n            return 'E';\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdneqkqdh.js:68:12)\n    at Object.<anonymous> (/tmp/tmpdneqkqdh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpawt0fo_7.js:70:12)\n    at Object.<anonymous> (/tmp/tmpawt0fo_7.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push('A+');\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push('A');\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push('A-');\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push('B+');\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push('B');\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push('B-');\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push('C+');\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push('C');\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push('C-');\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push('D+');\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push('D');\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp96pfsycs.js:70:12)\n    at Object.<anonymous> (/tmp/tmp96pfsycs.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n            result.push('A-');\n        } else if (grade >= 3.0) {\n            result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n        } else if (grade >= 2.3) {\n            result.push('B-');\n        } else if (grade >= 2.0) {\n            result.push('C+');\n        } else if (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >= 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n            result.push('D+');\n        } else if (grade >= 0.7) {\n            result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplkh9ocyc.js:70:12)\n    at Object.<anonymous> (/tmp/tmplkh9ocyc.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push('A+');\n        } else if (grades[i] >= 3.7) {\n            result.push('A');\n        } else if (grades[i] >= 3.3) {\n            result.push('A-');\n        } else if (grades[i] >= 3.0) {\n            result.push('B+');\n        } else if (grades[i] >= 2.7) {\n            result.push('B');\n        } else if (grades[i] >= 2.3) {\n            result.push('B-');\n        } else if (grades[i] >= 2.0) {\n            result.push('C+');\n        } else if (grades[i] >= 1.7) {\n            result.push('C');\n        } else if (grades[i] >= 1.3) {\n            result.push('C-');\n        } else if (grades[i] >= 1.0) {\n            result.push('D+');\n        } else if (grades[i] >= 0.7) {\n            result.push('D');\n        } else if (grades[i] >= 0.0) {\n            result.push('D-');\n        } else {\n            result.push('E');\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq4o5wcxn.js:70:12)\n    at Object.<anonymous> (/tmp/tmpq4o5wcxn.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8tzeumt0.js:68:12)\n    at Object.<anonymous> (/tmp/tmp8tzeumt0.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpawt0fo_7.js:70:12)\n    at Object.<anonymous> (/tmp/tmpawt0fo_7.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    }
  ]
}