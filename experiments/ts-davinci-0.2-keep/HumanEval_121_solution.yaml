name: HumanEval_121_solution
language: humaneval_to_typescript.py
prompt: "//Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n//\
  \ solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunction\
  \ solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["  return lst.filter((el, i) => i % 2 === 0 && el % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((num, index) => index % 2 !== 0 && num\
    \ % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7,\
    \ 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13,\
    \ 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((x,\
    \ i) => i % 2 === 1 && x % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  return\
    \ lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8,\
    \ 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((x, i) => i % 2 === 1 && x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((num,\
    \ index) => index % 2 === 1 && num % 2 === 1).reduce((a, b) => a + b, 0);\n}\n\
    \nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
