language: ts
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((x, i) => x === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ (\n        a\n            .split('')\n            .map((v, i) => v === b[i]\
    \ ? '0' : '1')\n            .join('')\n    );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    const\
    \ aBin = a.split('');\n    const bBin = b.split('');\n    const result = [];\n\
    \n    for (let i = 0; i < aBin.length; i++) {\n        if (aBin[i] === bBin[i])\
    \ {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n\n    return result.join('');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738150
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ===\
    \ b[i]) ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  if\
    \ (a.length !== b.length) {\n    throw new Error('Strings must be of equal length');\n\
    \  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result +=\
    \ a[i] === b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  const\
    \ aBin = a.split('');\n  const bBin = b.split('');\n  const result = [];\n\n \
    \ for (let i = 0; i < aBin.length; i++) {\n    if (aBin[i] === bBin[i]) {\n  \
    \    result.push('0');\n    } else {\n      result.push('1');\n    }\n  }\n\n\
    \  return result.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a\n    .split('')\n    .map((char, index) => (char === b[index] ? '0' : '1'))\n\
    \    .join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((value, index) => {\n    return value === b[index] ? '0' : '1';\n\
    \  }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738150
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((x, i) => x === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 2
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((x, i) => x ^ b[i]).join('');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5lu8fprl.ts(6,36): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmp5lu8fprl.ts(6,40): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a\n    .split('')\n    .map((char, index) => (char === b[index] ? '0' : '1'))\n\
    \    .join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    const\
    \ aBits = a.split('');\n    const bBits = b.split('');\n    const result = [];\n\
    \    for (let i = 0; i < aBits.length; i++) {\n        result.push(aBits[i] ===\
    \ bBits[i] ? '0' : '1');\n    }\n    return result.join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((char, index) => {\n        return char === b[index] ? '0' :\
    \ '1';\n    }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  const\
    \ result: string[] = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]\
    \ === b[i]) {\n      result.push('0');\n    } else {\n      result.push('1');\n\
    \    }\n  }\n  return result.join('');\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((char, index) => {\n        return char === b[index] ? '0' :\
    \ '1';\n    }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((x, i) => x === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((x, i) => (x === b[i] ? '0' : '1')).join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((x, i) => (x === b[i] ? '0' : '1')).join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else\
    \ {\n            result += '1';\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((v, i) => v === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((char, i) => char === b[i] ? '0' : '1').join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result +=\
    \ a[i] === b[i] ? \"0\" : \"1\";\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    const\
    \ aBin = a.split('').map(x => parseInt(x, 10));\n    const bBin = b.split('').map(x\
    \ => parseInt(x, 10));\n    const result = [];\n    for (let i = 0; i < aBin.length;\
    \ i++) {\n        result.push(aBin[i] ^ bBin[i]);\n    }\n    return result.join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((x, i) => (x === b[i] ? '0' : '1')).join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((x, i) => x === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((v, i) => v == b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ===\
    \ b[i]) ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ===\
    \ b[i]) ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ res = '';\n    for (let i = 0; i < a.length; i++) {\n        res += a[i] ===\
    \ b[i] ? '0' : '1';\n    }\n    return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    if\
    \ (a.length !== b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let result = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? \"0\" : \"1\";\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a\n    .split('')\n    .map((v, i) => (v === b[i] ? '0' : '1'))\n    .join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  if\
    \ (a.length !== b.length) {\n    throw new Error('Strings must be of equal length');\n\
    \  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result +=\
    \ (a[i] === b[i]) ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i]\
    \ === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  if\
    \ (a.length !== b.length) {\n    throw new Error('Strings must be of equal length');\n\
    \  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result +=\
    \ (parseInt(a[i], 10) ^ parseInt(b[i], 10)).toString();\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 1
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ '';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'010010'\n    at test (/tmp/tmpq3xyziks.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq3xyziks.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ '010010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((c, i) => (c === b[i] ? '0' : '1')).join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((v, i) => (v === b[i]) ? '0' : '1').join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  const\
    \ aBin = a.split('').map(x => parseInt(x, 10));\n  const bBin = b.split('').map(x\
    \ => parseInt(x, 10));\n  const result = [];\n  for (let i = 0; i < aBin.length;\
    \ i++) {\n    result.push(aBin[i] ^ bBin[i]);\n  }\n  return result.join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a.split('').map((v, i) => (v === b[i] ? '0' : '1')).join('');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"\
    101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n \
    \ assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  return\
    \ a\n    .split('')\n    .map((c, i) => (c === b[i] ? '0' : '1'))\n    .join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i]\
    \ === b[i] ? '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    let\
    \ result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] ===\
    \ b[i]) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n    return\
    \ a.split('').map((x, i) => x === b[i] ? '0' : '1').join('');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"\
    ),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i])\
    \ {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738151
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ===\
    \ b[i] ? '0' : '1';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738153
