name: HumanEval_70_strange_sort_list
language: humaneval_to_typescript.py
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([])\
  \ == []\nfunction strange_sort_list(lst: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = lst.length - 1;\n    while (i < j)\
    \ {\n        result.push(lst[i]);\n        result.push(lst[j]);\n        i++;\n\
    \        j--;\n    }\n    if (i === j) {\n        result.push(lst[i]);\n    }\n\
    \    return result;\n}\n", "    const lst_len = lst.length;\n    if (lst_len ===\
    \ 0) {\n        return [];\n    }\n    if (lst_len === 1) {\n        return lst;\n\
    \    }\n    const sorted_lst = lst.sort((a, b) => a - b);\n    const result =\
    \ [];\n    let i = 0;\n    let j = lst_len - 1;\n    while (i <= j) {\n      \
    \  result.push(sorted_lst[i]);\n        i++;\n        if (i <= j) {\n        \
    \    result.push(sorted_lst[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\n", "    if (lst.length === 0) {\n        return [];\n    }\n   \
    \ let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n\
    \    let j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    const sorted = lst.sort((a, b) => a\
    \ - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n\
    \    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n       \
    \ if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n     \
    \   }\n    }\n    return result;\n}\n", "    if (lst.length === 0) {\n       \
    \ return lst;\n    }\n    const sorted = lst.sort((a, b) => a - b);\n    const\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n   \
    \ }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ minIndex = lst.indexOf(min);\n    let maxIndex = lst.indexOf(max);\n    let\
    \ newLst = [min];\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1,\
    \ 1);\n    while (lst.length !== 0) {\n        min = Math.min(...lst);\n     \
    \   max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n        maxIndex\
    \ = lst.indexOf(max);\n        newLst.push(max);\n        newLst.push(min);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return newLst;\n}\n", "    if (lst.length === 0) {\n        return [];\n\
    \    }\n    const sorted = lst.sort((a, b) => a - b);\n    const result = [];\n\
    \    let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n      \
    \  result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a, b) => a - b);\n\
    \  const result = [];\n  let i = 0;\n  let j = sorted.length - 1;\n  while (i\
    \ <= j) {\n    result.push(sorted[i]);\n    i++;\n    if (i <= j) {\n      result.push(sorted[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\n", "    if (lst.length === 0) {\n\
    \        return [];\n    }\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n", "  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  let\
    \ j = sorted.length - 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n  \
    \  i++;\n    if (i <= j) {\n      result.push(sorted[j]);\n      j--;\n    }\n\
    \  }\n  return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n\
    \    }\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    while (lst.length\
    \ > 0) {\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \       minIndex = lst.indexOf(min);\n        maxIndex = lst.indexOf(max);\n \
    \       result.push(min);\n        result.push(max);\n        lst.splice(minIndex,\
    \ 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n    return result;\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a, b)\
    \ => a - b);\n  const result = [];\n  let min = 0;\n  let max = sorted.length\
    \ - 1;\n  while (min <= max) {\n    result.push(sorted[min]);\n    min++;\n  \
    \  if (min <= max) {\n      result.push(sorted[max]);\n      max--;\n    }\n \
    \ }\n  return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n\
    \    }\n    const sorted = lst.sort((a, b) => a - b);\n    const result = [];\n\
    \    let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n      \
    \  result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return lst;\n    }\n    let result: number[] = [];\n    let\
    \ min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n \
    \   let minIndex: number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n\
    \    lst.splice(maxIndex - 1, 1);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        maxIndex = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n\
    \    return result;\n}\n", "    if (lst.length === 0) return [];\n    let res:\
    \ number[] = [];\n    let min: number = Math.min(...lst);\n    let max: number\
    \ = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n    let\
    \ max_index: number = lst.indexOf(max);\n    res.push(min);\n    res.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ res.concat(strange_sort_list(lst));\n}\n", "    if (lst.length == 0) {\n   \
    \     return [];\n    }\n    let sorted_list = lst.sort((a, b) => a - b);\n  \
    \  let result = [];\n    let i = 0;\n    let j = sorted_list.length - 1;\n   \
    \ while (i <= j) {\n        result.push(sorted_list[i]);\n        i++;\n     \
    \   if (i <= j) {\n            result.push(sorted_list[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n", "    if (lst.length === 0) {\n  \
    \      return [];\n    }\n    const sorted = lst.sort((a, b) => a - b);\n    const\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n   \
    \ }\n    let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n    while\
    \ (sorted.length > 0) {\n        result.push(sorted.shift());\n        if (sorted.length\
    \ > 0) {\n            result.push(sorted.pop());\n        }\n    }\n    return\
    \ result;\n}\n", "    if (lst.length === 0) {\n        return [];\n    }\n   \
    \ let result = [];\n    let sorted = lst.sort((a, b) => a - b);\n    let left\
    \ = sorted.slice(0, sorted.length / 2);\n    let right = sorted.slice(sorted.length\
    \ / 2);\n    for (let i = 0; i < left.length; i++) {\n        result.push(left[i]);\n\
    \        result.push(right[i]);\n    }\n    if (right.length > left.length) {\n\
    \        result.push(right[right.length - 1]);\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
