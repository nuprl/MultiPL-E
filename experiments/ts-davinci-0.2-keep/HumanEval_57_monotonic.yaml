name: HumanEval_57_monotonic
language: humaneval_to_typescript.py
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n\
  // >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["    if (l.length <= 1) {\n        return true;\n    }\n    let increasing\
    \ = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (increasing\
    \ && l[i] > l[i + 1]) {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] < l[i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    let increasing = true;\n    let decreasing = true;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n     \
    \       decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    let increasing = true;\n    let decreasing = true;\n    for (let i\
    \ = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n", "  \
    \  let inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n\
    \        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n    }\n\
    \    return inc || dec;\n}\n", "    let increasing = true;\n    let decreasing\
    \ = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "    let increasing = true;\n    let decreasing = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n\
    \            decreasing = false;\n        }\n        if (l[i] > l[i + 1]) {\n\
    \            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    let increasing = true;\n    let decreasing = true;\n    for (let i\
    \ = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n", "  \
    \  let inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n\
    \        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n    }\n\
    \    return inc || dec;\n}\n", "    let increasing = true;\n    let decreasing\
    \ = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "    let increasing = true;\n    let decreasing = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    let increasing = true;\n    let decreasing = true;\n    for (let i\
    \ = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n", "  let\
    \ increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n\
    \    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing\
    \ || decreasing;\n}\n", "    let inc = true;\n    let dec = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  inc = false;\n        }\n        if (l[i] < l[i + 1]) {\n            dec =\
    \ false;\n        }\n    }\n    return inc || dec;\n}\n", "    let isIncreasing\
    \ = true;\n    let isDecreasing = true;\n    for (let i = 0; i < l.length - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n\
    \        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "    let increasing\
    \ = true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n", "    let increasing =\
    \ true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n", "    let isIncreasing\
    \ = true;\n    let isDecreasing = true;\n    for (let i = 0; i < l.length - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n\
    \        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "    let increasing\
    \ = true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n", "    let increasing =\
    \ true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n", "    let increasing =\
    \ true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
