name: HumanEval_132_is_nested
language: humaneval_to_typescript.py
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n//\
  \ is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
  \ is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            count++;\n        } else\
    \ if (string[i] === ']') {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));\n", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else {\n         \
    \   if (stack.length === 0) {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    return stack.length === 0;\n\
    }\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[[][]]'));\nconsole.log(is_nested('[[]][['));", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let count: number = 0;\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n       \
    \     count++;\n        } else if (string[i] === \"]\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[[][]]'));\nconsole.log(is_nested('[[]][['));", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else {\n         \
    \   if (stack.length === 0) {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    return stack.length === 0;\n\
    }\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else {\n         \
    \   if (stack.length === 0) {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    return stack.length === 0;\n\
    }\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[[][]]'));\nconsole.log(is_nested('[[]][['));", "    let\
    \ counter: number = 0;\n    for (let i: number = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            counter++;\n        } else if (string[i]\
    \ === ']') {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter === 0;\n}\n\n\
    console.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\nconsole.log(is_nested('[[]][['));",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[]][['));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
