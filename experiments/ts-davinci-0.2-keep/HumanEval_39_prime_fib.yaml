name: HumanEval_39_prime_fib
language: humaneval_to_typescript.py
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["    let a = 1;\n    let b = 1;\n    let count = 0;\n    let fib = 0;\n\
    \    while (count < n) {\n        fib = a + b;\n        a = b;\n        b = fib;\n\
    \        if (is_prime(fib)) {\n            count++;\n        }\n    }\n    return\
    \ fib;\n}\n", "    let fib_list: number[] = [2, 3];\n    let prime_fib_list: number[]\
    \ = [2, 3];\n    let i: number = 2;\n    while (prime_fib_list.length < n) {\n\
    \        fib_list.push(fib_list[i - 1] + fib_list[i - 2]);\n        if (is_prime(fib_list[i]))\
    \ {\n            prime_fib_list.push(fib_list[i]);\n        }\n        i += 1;\n\
    \    }\n    return prime_fib_list[n - 1];\n}\n", "    let a = 1;\n    let b =\
    \ 1;\n    let c = 2;\n    let i = 3;\n    while (i < n) {\n        a = b;\n  \
    \      b = c;\n        c = a + b;\n        i++;\n    }\n    return c;\n}\n", " \
    \   let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num =\
    \ fib(n);\n        n++;\n    }\n    return fib_num;\n}\n", "    let fib = fibonacci(n);\n\
    \    let prime = prime_numbers(n);\n    let result = 0;\n    for (let i = 0; i\
    \ < fib.length; i++) {\n        for (let j = 0; j < prime.length; j++) {\n   \
    \         if (fib[i] === prime[j]) {\n                result = fib[i];\n     \
    \       }\n        }\n    }\n    return result;\n}\n", "    let fib = fibonacci(n);\n\
    \    let prime = prime_numbers(n);\n    let result = 0;\n    for (let i = 0; i\
    \ < fib.length; i++) {\n        for (let j = 0; j < prime.length; j++) {\n   \
    \         if (fib[i] === prime[j]) {\n                result = fib[i];\n     \
    \       }\n        }\n    }\n    return result;\n}\n", "    let fib_num = fib(n);\n\
    \    while (!is_prime(fib_num)) {\n        fib_num = fib(++n);\n    }\n    return\
    \ fib_num;\n}\n", "    let fib = fibonacci(n);\n    let prime = prime_numbers(n);\n\
    \    let i = 0;\n    let j = 0;\n    while (i < fib.length && j < prime.length)\
    \ {\n        if (fib[i] === prime[j]) {\n            return fib[i];\n        }\
    \ else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n        \
    \    j++;\n        }\n    }\n    return -1;\n}\n", "  let fib_num = fib(n);\n\
    \  while (!is_prime(fib_num)) {\n    fib_num = fib(n);\n    n += 1;\n  }\n  return\
    \ fib_num;\n}\n", "    let fib: number[] = [2, 3];\n    let i: number = 2;\n \
    \   while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n\
    \    }\n    return fib[n - 1];\n}\n", "    let fib: number = 1;\n    let fib_prev:\
    \ number = 1;\n    let fib_prev_prev: number = 0;\n    let count: number = 0;\n\
    \    while (count < n) {\n        if (is_prime(fib)) {\n            count++;\n\
    \        }\n        fib_prev_prev = fib_prev;\n        fib_prev = fib;\n     \
    \   fib = fib_prev + fib_prev_prev;\n    }\n    return fib;\n}\n", "  let fib:\
    \ number = 1;\n  let fib_prev: number = 1;\n  let counter: number = 2;\n  while\
    \ (counter < n) {\n    let fib_next: number = fib + fib_prev;\n    fib_prev =\
    \ fib;\n    fib = fib_next;\n    if (is_prime(fib)) {\n      counter += 1;\n \
    \   }\n  }\n  return fib;\n}\n", "    let fib = fibonacci(n);\n    let prime =\
    \ prime_nth(n);\n    if (fib === prime) {\n        return fib;\n    } else {\n\
    \        return prime_fib(n + 1);\n    }\n}\n", "    let fib_numbers: number[]\
    \ = [2, 3, 5, 13, 89];\n    if (n <= fib_numbers.length) {\n        return fib_numbers[n\
    \ - 1];\n    }\n    let i: number = fib_numbers.length;\n    let fib_number: number\
    \ = fib_numbers[i - 1];\n    while (i < n) {\n        fib_number = fib_number\
    \ + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n\
    \            i = i + 1;\n        }\n    }\n    return fib_number;\n}\n", "   \
    \ let fib: number[] = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n \
    \       fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n\
    \ - 1];\n}\n", "    let fib: number[] = [2, 3];\n    let i: number = 2;\n    while\
    \ (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n\
    \    return fib[n - 1];\n}\n", "    let fib_list: number[] = [2, 3];\n    let\
    \ i: number = 2;\n    while (i < n) {\n        fib_list.push(fib_list[i - 1] +\
    \ fib_list[i - 2]);\n        i++;\n    }\n    return fib_list[n - 1];\n}\n", " \
    \   let fib = fibonacci(n);\n    let prime = prime_number(n);\n    let i = 0;\n\
    \    let j = 0;\n    while (i < n) {\n        if (fib[i] === prime[j]) {\n   \
    \         i++;\n            j++;\n        } else if (fib[i] < prime[j]) {\n  \
    \          i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ prime[j - 1];\n}\n", "    let fib = fibonacci(n);\n    let prime = prime_number(n);\n\
    \    let i = 0;\n    let j = 0;\n    let result = 0;\n    while (i < n) {\n  \
    \      if (fib[i] == prime[j]) {\n            result = fib[i];\n            i++;\n\
    \            j++;\n        } else if (fib[i] < prime[j]) {\n            i++;\n\
    \        } else {\n            j++;\n        }\n    }\n    return result;\n}\n",
  "    let fib_list: number[] = [2, 3];\n    let i: number = 2;\n    while (i < n)\
    \ {\n        fib_list.push(fib_list[i - 1] + fib_list[i - 2]);\n        i++;\n\
    \    }\n    return fib_list[n - 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
