name: HumanEval_153_Strongest_Extension
language: humaneval_to_typescript.py
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let current_extension\
    \ = extensions[i];\n        let current_extension_strength = 0;\n        for (let\
    \ j = 0; j < current_extension.length; j++) {\n            if (current_extension[j]\
    \ == current_extension[j].toUpperCase()) {\n                current_extension_strength++;\n\
    \            } else {\n                current_extension_strength--;\n       \
    \     }\n        }\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = current_extension;\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + '.'\
    \ + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let letter of extension) {\n          \
    \  if (letter.toUpperCase() === letter) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "  let strongest = extensions[0];\n  let\
    \ strongest_strength = 0;\n  extensions.forEach(ext => {\n    let strength = 0;\n\
    \    ext.split('').forEach(char => {\n      if (char === char.toUpperCase()) {\n\
    \        strength += 1;\n      } else {\n        strength -= 1;\n      }\n   \
    \ });\n    if (strength > strongest_strength) {\n      strongest = ext;\n    \
    \  strongest_strength = strength;\n    }\n  });\n  return `${class_name}.${strongest}`;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongestExtension: string = '';\n    let strongestExtensionStrength:\
    \ number = 0;\n    extensions.forEach(extension => {\n        let strength: number\
    \ = 0;\n        for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongestExtensionStrength) {\n            strongestExtensionStrength\
    \ = strength;\n            strongestExtension = extension;\n        }\n    });\n\
    \    return `${class_name}.${strongestExtension}`;\n}\n", "    let strongest =\
    \ extensions[0];\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest;\n}\n", "    let strongest:\
    \ string = '';\n    let strongest_strength: number = 0;\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let strength: number = 0;\n        for\
    \ (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}\n", "    let strongest: string = extensions[0];\n    let\
    \ strongest_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j: number = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest;\n}\n", "    let strongest\
    \ = extensions[0];\n    let strongest_strength = 0;\n    extensions.forEach(extension\
    \ => {\n        let strength = extension.split('').reduce((acc, curr) => {\n \
    \           if (curr === curr.toUpperCase()) {\n                acc += 1;\n  \
    \          } else {\n                acc -= 1;\n            }\n            return\
    \ acc;\n        }, 0);\n        if (strength > strongest_strength) {\n       \
    \     strongest = extension;\n            strongest_strength = strength;\n   \
    \     }\n    });\n    return `${class_name}.${strongest}`;\n}\n", "    let strongest:\
    \ string = extensions[0];\n    let strongest_strength: number = 0;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let strength: number = 0;\n  \
    \      for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}\n", "    let strongest: string = extensions[0];\n    let\
    \ strongest_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j: number = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest;\n}\n", "    let strongest\
    \ = extensions[0];\n    let strongestStrength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongestStrength) {\n     \
    \       strongestStrength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest;\n}\n", "    let strongest:\
    \ string = extensions[0];\n    let strongest_strength: number = 0;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let strength: number = 0;\n  \
    \      for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}\n", "    let strongest = 0;\n    let strongest_extension\
    \ = '';\n    for (let extension of extensions) {\n        let strength = extension.split('').reduce((sum,\
    \ char) => {\n            if (char.toUpperCase() === char) {\n               \
    \ return sum + 1;\n            } else {\n                return sum - 1;\n   \
    \         }\n        }, 0);\n        if (strength > strongest) {\n           \
    \ strongest = strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "    let\
    \ strongest = {\n        name: '',\n        strength: 0\n    };\n    extensions.forEach(ext\
    \ => {\n        let strength = ext.split('').filter(char => char === char.toUpperCase()).length\
    \ - ext.split('').filter(char => char === char.toLowerCase()).length;\n      \
    \  if (strength > strongest.strength) {\n            strongest.name = ext;\n \
    \           strongest.strength = strength;\n        }\n    });\n    return `${class_name}.${strongest.name}`;\n\
    }\n\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA', 'BB']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA', 'BB', 'CC']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA', 'BB', 'CC', 'DD']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA', 'BB', 'CC', 'DD', 'EE']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'AA', 'BB', 'CC', 'DD', 'EE', 'FF']));\n\
    console.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuF",
  "    let strongest = extensions[0];\n    let strongest_strength = 0;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let strength = 0;\n        for\
    \ (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n        \
    \    } else {\n                strength--;\n            }\n        }\n       \
    \ if (strength > strongest_strength) {\n            strongest = extensions[i];\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}\n", "    let strongest_extension = extensions[0];\n  \
    \  let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n\nconsole.log(Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']));\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed']));\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed', 'SErviNGSliCes']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes', 'SErviNGSliCes']));\n\
    console.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed',\
    \ 'SErviNGSliCes', 'SErviNGSliCes', 'SErviNGSliCes']));\nconsole.log(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes', 'SErviNGSliCes', 'SErviNGSliCes',\
    \ 'SErviNGSliCes']));\nconsole.log(Strongest_Extension('S", "    let strongest_extension:\
    \ string = extensions[0];\n    let strongest_extension_strength: number = 0;\n\
    \    for (let i: number = 0; i < extensions.length; i++) {\n        let strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest = extensions[0];\n    let strength = 0;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let cap = 0;\n        let sm =\
    \ 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if\
    \ (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            strength = cap - sm;\n           \
    \ strongest = extensions[i];\n        }\n    }\n    return class_name + '.' +\
    \ strongest;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
