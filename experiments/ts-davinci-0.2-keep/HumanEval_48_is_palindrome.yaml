name: HumanEval_48_is_palindrome
language: humaneval_to_typescript.py
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
  // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n//\
  \ >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text: string): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text.length <= 1) {\n        return true;\n    }\n    if (text[0]\
    \ === text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    return false;\n}\n", "    if (text.length <= 1) {\n     \
    \   return true;\n    }\n    if (text[0] === text[text.length - 1]) {\n      \
    \  return is_palindrome(text.slice(1, text.length - 1));\n    }\n    return false;\n\
    }\n", "    return text === text.split('').reverse().join('');\n}\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    }\n    else if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    let reversed = text.split('').reverse().join('');\n\
    \    return text === reversed;\n}\n", "  return text === text.split('').reverse().join('');\n\
    }\n", "    if (text.length === 0) {\n        return true;\n    }\n    else {\n\
    \        if (text[0] === text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        }\n        else {\n            return false;\n \
    \       }\n    }\n}\n", "    if (text.length < 2) {\n        return true;\n  \
    \  }\n    if (text[0] !== text[text.length - 1]) {\n        return false;\n  \
    \  }\n    return is_palindrome(text.slice(1, text.length - 1));\n}\n", "    if\
    \ (text.length <= 1) {\n        return true;\n    }\n    else if (text[0] ===\
    \ text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    } else if (text[0] != text[text.length -\
    \ 1]) {\n        return false;\n    } else {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n}\n", "    if (text.length === 0) {\n        return\
    \ true;\n    }\n    if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    let i: number = 0;\n\
    \    let j: number = text.length - 1;\n    while (i < j) {\n        if (text[i]\
    \ !== text[j]) {\n            return false;\n        }\n        i++;\n       \
    \ j--;\n    }\n    return true;\n}\n", "    return text === text.split('').reverse().join('');\n\
    }\n", "    let text_length = text.length;\n    if (text_length <= 1) {\n     \
    \   return true;\n    }\n    if (text[0] != text[text_length - 1]) {\n       \
    \ return false;\n    }\n    return is_palindrome(text.slice(1, text_length - 1));\n\
    }\n", "    if (text.length === 0) {\n        return true;\n    }\n    else {\n\
    \        if (text[0] === text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        }\n        else {\n            return false;\n \
    \       }\n    }\n}\n", "    let i: number = 0;\n    let j: number = text.length\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
  "    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n\
    }\n", "    return text === text.split('').reverse().join('');\n}\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    }\n    if (text[0] === text[text.length -\
    \ 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n", "    return text === text.split('').reverse().join('');\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
