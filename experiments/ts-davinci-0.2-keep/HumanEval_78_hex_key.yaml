name: HumanEval_78_hex_key
language: humaneval_to_typescript.py
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\"\
  \ the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n//\
  \ For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\"\
  \ the output should be 2.\nfunction hex_key(num: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
  \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"\
  ),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
  123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ),12);\n}\n\ntest();"
completions: ["    let hex_key: number = 0;\n    let hex_key_str: string = \"\";\n\
    \    let hex_key_arr: string[] = [];\n    let hex_key_arr_num: number[] = [];\n\
    \    let hex_key_arr_num_prime: number[] = [];\n    let hex_key_arr_num_prime_count:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr: number[] = [];\n    let\
    \ hex_key_arr_num_prime_count_arr_max: number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr: number[]\
    \ = [];\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count: number =\
    \ 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr: number[]\
    \ = [];\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index_arr:\
    \ number[] = [];\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index_arr_count:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index_arr_count_arr:\
    \ number[] = [];\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index_arr_count_arr_max:\
    \ number = 0;\n    let hex_key_arr_num_prime_count_arr_max_index_arr_count_arr_max_index_arr_count_arr_max_index",
  "    let count: number = 0;\n    let hex_key: string = \"2357BDF\";\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (hex_key.indexOf(num[i]) >\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count: number = 0;\n    let hex_key: string = \"2357BDF\";\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (hex_key.indexOf(num[i]) !==\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let hex_key: number = 0;\n    for (let i: number = 0; i < num.length; i++)\
    \ {\n        switch (num[i]) {\n            case 'A':\n                hex_key\
    \ += 10;\n                break;\n            case 'B':\n                hex_key\
    \ += 11;\n                break;\n            case 'C':\n                hex_key\
    \ += 12;\n                break;\n            case 'D':\n                hex_key\
    \ += 13;\n                break;\n            case 'E':\n                hex_key\
    \ += 14;\n                break;\n            case 'F':\n                hex_key\
    \ += 15;\n                break;\n            default:\n                hex_key\
    \ += Number(num[i]);\n        }\n    }\n    return hex_key;\n}", "    let count\
    \ = 0;\n    let hex_primes = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i =\
    \ 0; i < num.length; i++) {\n        if (hex_primes.includes(num[i])) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count: number = 0;\n    let hex_key: string = \"2357BDF\";\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (hex_key.indexOf(num[i]) >\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let hex_key: number = 0;\n    let hex_key_arr: string[] = ['2', '3', '5', '7',\
    \ 'B', 'D'];\n    for (let i: number = 0; i < num.length; i++) {\n        if (hex_key_arr.indexOf(num[i])\
    \ !== -1) {\n            hex_key++;\n        }\n    }\n    return hex_key;\n}\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let count: number = 0;\n    let hex_array: string[] = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length; i++) {\n \
    \       if (hex_array.indexOf(num[i]) > -1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let count: number = 0;\n    let hex:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (hex.indexOf(num[i]) > -1) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count: number = 0;\n    let hex_key: string = \"2357BDF\";\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (hex_key.indexOf(num[i]) >\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let count: number = 0;\n    let hex_key: string = \"2357BDF\";\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (hex_key.indexOf(num[i]) !==\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex_primes = [2, 3, 5, 7, 11, 13];\n    for (let i\
    \ = 0; i < num.length; i++) {\n        if (hex_primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let hex = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n    \
    \    \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n    \
    \    \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n   \
    \     \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n\
    \        \"F\": 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count: number = 0;\n    let hex_num: number = parseInt(num, 16);\n    for\
    \ (let i: number = 2; i <= hex_num; i++) {\n        if (hex_num % i == 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "    let count:\
    \ number = 0;\n    let hex: string[] = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let prime: string[] = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length; i++) {\n \
    \       for (let j: number = 0; j < prime.length; j++) {\n            if (num[i]\
    \ === prime[j]) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let count: number = 0;\n    let\
    \ hex: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i:\
    \ number = 0; i < num.length; i++) {\n        for (let j: number = 0; j < hex.length;\
    \ j++) {\n            if (num[i] === hex[j]) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let count: number\
    \ = 0;\n    let hex_primes: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"];\n    for (let i: number = 0; i < num.length; i++) {\n        if (hex_primes.includes(num[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let count = 0;\n    let hex_prime = [\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"];\n    for (let i = 0; i < num.length; i++) {\n        if (hex_prime.includes(num[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let hex_key: string = \"0123456789ABCDEF\";\n    let hex_value: number = 0;\n\
    \    for (let i: number = 0; i < hex_key.length; i++) {\n        if (num === hex_key[i])\
    \ {\n            hex_value = i;\n        }\n    }\n    return hex_value;\n}",
  "    let count: number = 0;\n    let hex_arr: string[] = ['0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let hex_prime:\
    \ string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i <\
    \ num.length; i++) {\n        if (hex_prime.indexOf(num[i]) !== -1) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
