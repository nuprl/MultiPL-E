language: ts
name: HumanEval_128_prod_signs
results:
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp532ttjkg.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += -arr[i];\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpt9k12gn7.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9k12gn7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v4vbh9l.ts(17,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ === 0) {\n            prod = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        prod\
    \ *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return prod\
    \ * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg38mh6bj.ts(19,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sign = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n        } else if\
    \ (arr[i] < 0) {\n            sum += -arr[i];\n            sign *= -1;\n     \
    \   }\n    }\n    return sum * sign;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpw7y0ltme.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw7y0ltme.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number =\
    \ 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += -arr[i];\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpt9k12gn7.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9k12gn7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n        }\n   \
    \ }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbxsv7g20.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxsv7g20.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    const signs = arr.map(x => Math.sign(x));\n    const magnitudes = arr.map(x\
    \ => Math.abs(x));\n    const prod = signs.reduce((a, b) => a * b);\n    const\
    \ sum = magnitudes.reduce((a, b) => a + b);\n    return prod * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu_d6s9fx.ts(13,37): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] === 0) {\n      prod\
    \ = 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return sum * prod;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    const signs = arr.map(x => Math.sign(x));\n    const magnitudes = arr.map(x\
    \ => Math.abs(x));\n    const product = signs.reduce((a, b) => a * b);\n    const\
    \ sum = magnitudes.reduce((a, b) => a + b);\n    return product * sum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8kv1g2e.ts(13,37): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] !== 0) {\n      sum += Math.abs(arr[i]);\n      prod *= Math.sign(arr[i]);\n\
    \    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe2hb896q.ts(18,20): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) return undefined;\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjf81syjf.ts(15,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n        }\n   \
    \ }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n      prod\
    \ *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738475
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    return arr.reduce((acc, cur) => acc * Math.sign(cur), 1) * arr.reduce((acc,\
    \ cur) => acc + Math.abs(cur), 0);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp34dhark0.ts(13,48): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v4vbh9l.ts(17,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n     \
    \       prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8dvoe_si.ts(18,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  const\
    \ prod = arr.reduce((acc, curr) => {\n    if (curr === 0) {\n      return acc;\n\
    \    }\n    return acc * Math.sign(curr);\n  }, 1);\n  const sum = arr.reduce((acc,\
    \ curr) => {\n    return acc + Math.abs(curr);\n  }, 0);\n  return prod * sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd_6jwrh8.ts(17,23): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n        }\n   \
    \ }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] === 0) {\n      continue;\n    }\n    sum += Math.abs(arr[i]);\n   \
    \ prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpug433409.ts(20,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n      prod\
    \ *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n \
    \   sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2a4ke777.ts(19,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += -arr[i];\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpt9k12gn7.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9k12gn7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n      prod\
    \ *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let sign = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n        } else if\
    \ (arr[i] < 0) {\n            sum += -arr[i];\n            sign *= -1;\n     \
    \   } else {\n            sign = 0;\n        }\n    }\n    return sum * sign;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738476
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbxsv7g20.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxsv7g20.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += -arr[i];\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpt9k12gn7.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9k12gn7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v4vbh9l.ts(17,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp532ttjkg.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ === 0) {\n            prod = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n        }\n   \
    \ }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ === 0) {\n            prod = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    return arr.reduce((acc, curr) => acc * Math.sign(curr), 1) * arr.reduce((acc,\
    \ curr) => acc + Math.abs(curr), 0);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiwhcngau.ts(13,49): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        if (arr[i] !== 0) {\n         \
    \   prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph82fqj8v.ts(18,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) return undefined;\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ == 0) continue;\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzbyn0n_.ts(16,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738476
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp532ttjkg.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t03v8dn.ts(20,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbxsv7g20.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxsv7g20.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ el = arr[i];\n    if (el > 0) {\n      sum += el;\n      prod *= 1;\n    } else\
    \ if (el < 0) {\n      sum += Math.abs(el);\n      prod *= -1;\n    } else {\n\
    \      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738476
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            product *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            product *= -1;\n    \
    \        sum += Math.abs(arr[i]);\n        } else {\n            product *= 0;\n\
    \        }\n    }\n    return product * sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738476
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        prod\
    \ *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return prod\
    \ * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg38mh6bj.ts(19,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738474
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] !== 0) {\n      sum += Math.abs(arr[i]);\n      prod *= Math.sign(arr[i]);\n\
    \    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe2hb896q.ts(18,20): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738475
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v4vbh9l.ts(17,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum\
    \ += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbxsv7g20.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxsv7g20.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738474
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let\
    \ sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v4vbh9l.ts(17,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr: number[]): number\
    \ | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n  \
    \  }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3glo9y1.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659738473
