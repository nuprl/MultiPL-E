name: HumanEval_120_maximum
language: humaneval_to_typescript.py
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
  \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
  \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
  \ k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (\n      result.length &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "    if (k === 0) {\n        return [];\n  \
    \  }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    let\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    while (\n      result.length &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let result: number[] = [];\n    let max: number\
    \ = Math.max(...arr);\n    let min: number = Math.min(...arr);\n    let maxIndex:\
    \ number = arr.indexOf(max);\n    let minIndex: number = arr.indexOf(min);\n \
    \   if (k === 1) {\n        result.push(max);\n        return result;\n    }\n\
    \    if (k === arr.length) {\n        return arr;\n    }\n    for (let i: number\
    \ = 0; i < k; i++) {\n        if (i === 0) {\n            result.push(max);\n\
    \            arr.splice(maxIndex, 1);\n        } else {\n            let max:\
    \ number = Math.max(...arr);\n            let maxIndex: number = arr.indexOf(max);\n\
    \            result.push(max);\n            arr.splice(maxIndex, 1);\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const maxHeap = new MaxHeap();\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  const result\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length && arr[i] > result[result.length\
    \ - 1] && result.length + arr.length - i > k) {\n            result.pop();\n \
    \       }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   maxHeap.insert(arr[i]);\n    }\n    const result = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ heap = new Heap<number>((a, b) => a - b);\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (heap.size() < k) {\n            heap.add(arr[i]);\n    \
    \    } else {\n            if (arr[i] > heap.peek()) {\n                heap.remove();\n\
    \                heap.add(arr[i]);\n            }\n        }\n    }\n    return\
    \ heap.toArray();\n}\n", "  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && arr[i] > result[result.length - 1] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n\
    \      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max =\
    \ arr[0];\n        let index = 0;\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        index = j;\n            }\n        }\n        result.push(max);\n   \
    \     arr.splice(index, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n\
    \      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  const maxHeap\
    \ = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "    let result: number[] = [];\n    for (let i\
    \ = 0; i < k; i++) {\n        let max = arr[0];\n        let maxIndex = 0;\n \
    \       for (let j = 1; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n                maxIndex = j;\n          \
    \  }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   maxHeap.add(arr[i]);\n    }\n    const result = [];\n    for (let i = 0; i\
    \ < k; i++) {\n        result.push(maxHeap.remove());\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let result: number[] = [];\n    let minHeap:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (minHeap.length\
    \ < k) {\n            minHeap.push(arr[i]);\n            heapify(minHeap, minHeap.length\
    \ - 1);\n        } else {\n            if (arr[i] > minHeap[0]) {\n          \
    \      minHeap[0] = arr[i];\n                heapify(minHeap, 0);\n          \
    \  }\n        }\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(minHeap[0]);\n\
    \        minHeap[0] = minHeap[minHeap.length - 1];\n        minHeap.pop();\n \
    \       heapify(minHeap, 0);\n    }\n    return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n    \
    \  result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length\
    \ + arr.length - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length > 0 && arr[i] > result[result.length - 1] &&\
    \ result.length + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length && arr[i] > result[result.length\
    \ - 1] && result.length + arr.length - i > k) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   maxHeap.insert(arr[i]);\n    }\n    const result = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return\
    \ result;\n}\n", "  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    maxHeap.insert(arr[i]);\n  }\n  const result = [];\n  for (let i\
    \ = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n\
    }\n", "    const heap = new Heap<number>((a, b) => a - b);\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        heap.push(arr[i]);\n        if (heap.size()\
    \ > k) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n\
    }\n", "    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length\
    \ &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length\
    \ - i > k\n    ) {\n      result.pop();\n    }\n    result.push(arr[i]);\n  }\n\
    \  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k\
    \ === 0) return [];\n  if (k === arr.length) return arr;\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length\
    \ > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length\
    \ - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n\
    \      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (\n      result.length &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    let\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    } else {\n      result.sort((a, b) =>\
    \ a - b);\n      if (arr[i] > result[0]) {\n        result[0] = arr[i];\n    \
    \  }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const heap = new Heap();\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        heap.insert(arr[i]);\n    }\n    const result\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        result.push(heap.extractMax());\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    let max: number = Number.MIN_SAFE_INTEGER;\n    let maxIndex: number\
    \ = -1;\n    for (let i = 0; i < k; i++) {\n        max = Number.MIN_SAFE_INTEGER;\n\
    \        maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n    \
    \        if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j\
    \ = 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n\
    \  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max =\
    \ -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k === 0) return [];\n\
    \  if (k === arr.length) return arr;\n  const max = Math.max(...arr);\n  const\
    \ min = Math.min(...arr);\n  const result: number[] = [];\n  const map: { [key:\
    \ number]: number } = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (map[arr[i]]\
    \ === undefined) {\n      map[arr[i]] = 1;\n    } else {\n      map[arr[i]]++;\n\
    \    }\n  }\n  for (let i = max; i >= min; i--) {\n    if (map[i] !== undefined)\
    \ {\n      for (let j = 0; j < map[i]; j++) {\n        result.push(i);\n     \
    \   if (result.length === k) return result;\n      }\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    let heap: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (heap.length < k) {\n            heap.push(arr[i]);\n        \
    \    if (heap.length === k) {\n                heap = heap.sort((a, b) => a -\
    \ b);\n            }\n        } else {\n            if (arr[i] > heap[0]) {\n\
    \                heap[0] = arr[i];\n                heap = heap.sort((a, b) =>\
    \ a - b);\n            }\n        }\n    }\n    return heap;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let max: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex\
    \ = j;\n      }\n    }\n    max.push(arr[maxIndex]);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return max;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let index: number = 0;\n    for (let i: number = 0; i < k; i++) {\n\
    \        max = 0;\n        for (let j: number = 0; j < arr.length; j++) {\n  \
    \          if (arr[j] > max) {\n                max = arr[j];\n              \
    \  index = j;\n            }\n        }\n        result.push(max);\n        arr[index]\
    \ = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length &&\
    \ result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n\
    \      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\ndescribe(\"\
    maximum\", () => {\n  it(\"should return the maximum k numbers\", () => {\n  \
    \  expect(maximum([-3, -4, 5], 3)).toEqual([-4, -3, 5]);\n    expect(maximum([4,\
    \ -4, 4], 2)).toEqual([4, 4]);\n    expect(maximum([-3, 2, 1, 2, -1, -2, 1], 1)).toEqual([2]);\n\
    \  });\n});", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length &&\
    \ result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n\
    \      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n     \
    \ continue;\n    }\n    if (num > result[0]) {\n      result.shift();\n      result.push(num);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    if (k\
    \ === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n        return\
    \ arr;\n    }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    // return arr.sort((a, b) => b - a).slice(0, k);\n    return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "    if (k === 0) {\n        return [];\n    }\n    if (k\
    \ === arr.length) {\n        return arr;\n    }\n    const result: number[] =\
    \ [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    let max: number = Number.MIN_SAFE_INTEGER;\n    let maxIndex: number\
    \ = -1;\n    for (let i = 0; i < k; i++) {\n        max = Number.MIN_SAFE_INTEGER;\n\
    \        maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n    \
    \        if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[0];\n      \
    \  let maxIndex = 0;\n        for (let j = 1; j < arr.length; j++) {\n       \
    \     if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = arr[i];\n        while (result.length > 0 && result[result.length\
    \ - 1] < num && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(num);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  if (k === 0) return [];\n  if (k === arr.length) return arr;\n\
    \  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  while (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i]\
    \ &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n   \
    \ }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++)\
    \ {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n    \
    \        result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length\
    \ > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length\
    \ - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n\
    \      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j\
    \ = 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ maxHeap = new MaxHeap(k);\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  return maxHeap.getSorted();\n}\n", "  const result: number[] = [];\n \
    \ for (let i = 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    // Sort\
    \ the array in descending order\n    arr.sort((a, b) => b - a);\n    // Return\
    \ the first k elements\n    return arr.slice(0, k);\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length &&\
    \ result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n\
    \      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let index\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(index, 1);\n  }\n  return result;\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex\
    \ = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] =\
    \ [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n  for (let\
    \ i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  \
    \  maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  if (k === 0) {\n    return\
    \ result;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const heap = new Heap(arr, (a, b) => a < b);\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(heap.pop());\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && arr[i] > result[result.length\
    \ - 1] && result.length + arr.length - i > k) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ max = new Array(k).fill(Number.MIN_SAFE_INTEGER);\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let j = k - 1;\n        while (j >= 0 && arr[i] > max[j]) {\n\
    \            j--;\n        }\n        if (j < k - 1) {\n            max[j + 1]\
    \ = arr[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max =\
    \ arr[i];\n        let maxIndex = i;\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k\
    \ === 0) return [];\n  if (k === arr.length) return arr;\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length\
    \ > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length\
    \ - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n\
    \      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  const maxHeap\
    \ = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = arr[i];\n        while (result.length > 0 && result[result.length\
    \ - 1] < num && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(num);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n    } else\
    \ {\n      result.sort((a, b) => a - b);\n      if (arr[i] > result[0]) {\n  \
    \      result[0] = arr[i];\n      }\n    }\n  }\n  return result.sort((a, b) =>\
    \ a - b);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n\
    \  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max =\
    \ -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ max: number[] = [];\n    let min: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (max.length > 0 && max[max.length - 1] < arr[i]) {\n \
    \           max.pop();\n        }\n        max.push(arr[i]);\n        if (max.length\
    \ > k) {\n            max.shift();\n        }\n    }\n    for (let i = arr.length\
    \ - 1; i >= 0; i--) {\n        while (min.length > 0 && min[min.length - 1] >\
    \ arr[i]) {\n            min.pop();\n        }\n        min.push(arr[i]);\n  \
    \      if (min.length > k) {\n            min.shift();\n        }\n    }\n   \
    \ return max.concat(min);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n\
    \  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max =\
    \ -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let max: number = 0;\n  let index: number = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    max = arr[i];\n    index = i;\n    for (let j = i\
    \ + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        index = j;\n      }\n    }\n    result.push(max);\n    arr[index] = arr[i];\n\
    \    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    const heap:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (heap.length\
    \ < k) {\n            heap.push(arr[i]);\n            if (heap.length === k) {\n\
    \                heap.sort((a, b) => b - a);\n            }\n        } else {\n\
    \            if (arr[i] > heap[0]) {\n                heap[0] = arr[i];\n    \
    \            heap.sort((a, b) => b - a);\n            }\n        }\n    }\n  \
    \  return heap;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length &&\
    \ result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n\
    \      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n\
    \      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + len\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let heap = new Heap<number>((a, b) => a - b);\n\
    \    for (let i = 0; i < arr.length; i++) {\n        heap.push(arr[i]);\n    \
    \    if (heap.size() > k) {\n            heap.pop();\n        }\n    }\n    return\
    \ heap.toArray();\n}\n", "    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.sort((a, b) => a - b);\n            if (arr[i]\
    \ > result[0]) {\n                result[0] = arr[i];\n            }\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  let i = 0;\n  while (i < k) {\n    result.push(arr[i]);\n    i++;\n\
    \  }\n  result.sort((a, b) => b - a);\n  while (i < arr.length) {\n    if (arr[i]\
    \ > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b)\
    \ => b - a);\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  let result: number[] = [];\n  let max: number = 0;\n  let index:\
    \ number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n    index =\
    \ i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[index] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && arr[i] > result[result.length - 1] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\ndescribe(\"maximum\"\
    , () => {\n  test(\"#1\", () => {\n    expect(maximum([-3, -4, 5], 3)).toEqual([-4,\
    \ -3, 5]);\n  });\n  test(\"#2\", () => {\n    expect(maximum([4, -4, 4], 2)).toEqual([4,\
    \ 4]);\n  });\n  test(\"#3\", () => {\n    expect(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)).toEqual([2]);\n  });\n});", "    let result: number[] = [];\n    for\
    \ (let i = 0; i < k; i++) {\n        let max = arr[0];\n        let maxIndex =\
    \ 0;\n        for (let j = 1; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const result = [];\n   \
    \ for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a,\
    \ b) => b - a);\n    for (let i = k; i < arr.length; i++) {\n        let j = 0;\n\
    \        while (j < k && arr[i] < result[j]) {\n            j++;\n        }\n\
    \        if (j < k) {\n            result.splice(j, 0, arr[i]);\n            result.pop();\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length)\
    \ {\n        return arr;\n    }\n    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    const heap = new Heap(arr, k);\n    return heap.sort();\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n     \
    \ continue;\n    }\n    const min = Math.min(...result);\n    if (num > min) {\n\
    \      result.splice(result.indexOf(min), 1, num);\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    } else {\n      result.sort((a, b) => a -\
    \ b);\n      if (arr[i] > result[0]) {\n        result[0] = arr[i];\n      }\n\
    \    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    const maxHeap:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (maxHeap.length\
    \ < k) {\n            maxHeap.push(arr[i]);\n            if (maxHeap.length ===\
    \ k) {\n                maxHeap.sort((a, b) => b - a);\n            }\n      \
    \  } else {\n            if (arr[i] > maxHeap[0]) {\n                maxHeap[0]\
    \ = arr[i];\n                maxHeap.sort((a, b) => b - a);\n            }\n \
    \       }\n    }\n    return maxHeap;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    if (k === 0) {\n        return [];\n    }\n\
    \    if (k === arr.length) {\n        return arr;\n    }\n    let max = arr[0];\n\
    \    let maxIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            maxIndex = i;\n   \
    \     }\n    }\n    arr[maxIndex] = arr[arr.length - 1];\n    arr.pop();\n   \
    \ return [max, ...maximum(arr, k - 1)];\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  let result: number[] = [];\n  let max: number = -Infinity;\n \
    \ let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    let n: number = arr.length;\n    for (let i: number = 0; i < n; i++)\
    \ {\n        while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + n - i > k) {\n            result.pop();\n        }\n       \
    \ if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n   \
    \     let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n   \
    \         if (arr[j] > max) {\n                max = arr[j];\n               \
    \ maxIndex = j;\n            }\n        }\n        result.push(max);\n       \
    \ arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
