name: HumanEval_120_maximum
language: humaneval_to_typescript.py
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
  \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
  \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
  \ k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (\n      result.length &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "    if (k === 0) {\n        return [];\n  \
    \  }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length && result[result.length - 1] < arr[i] && result.length + arr.length\
    \ - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    let\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    while (\n      result.length &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let result: number[] = [];\n    let max: number\
    \ = Math.max(...arr);\n    let min: number = Math.min(...arr);\n    let maxIndex:\
    \ number = arr.indexOf(max);\n    let minIndex: number = arr.indexOf(min);\n \
    \   if (k === 1) {\n        result.push(max);\n        return result;\n    }\n\
    \    if (k === arr.length) {\n        return arr;\n    }\n    for (let i: number\
    \ = 0; i < k; i++) {\n        if (i === 0) {\n            result.push(max);\n\
    \            arr.splice(maxIndex, 1);\n        } else {\n            let max:\
    \ number = Math.max(...arr);\n            let maxIndex: number = arr.indexOf(max);\n\
    \            result.push(max);\n            arr.splice(maxIndex, 1);\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const maxHeap = new MaxHeap();\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  const result\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while\
    \ (result.length > 0 && result[result.length - 1] < arr[i] && result.length +\
    \ arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length && arr[i] > result[result.length\
    \ - 1] && result.length + arr.length - i > k) {\n            result.pop();\n \
    \       }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
