name: HumanEval_156_int_to_mini_roman
language: humaneval_to_typescript.py
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n\
  // >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman(number: number):\
  \ string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["    let result = '';\n    const roman = {\n        M: 1000,\n     \
    \   CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC:\
    \ 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n     \
    \   V: 5,\n        IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n\
    \        if (number >= roman[key]) {\n            result += key.repeat(Math.floor(number\
    \ / roman[key]));\n            number %= roman[key];\n        }\n    }\n    return\
    \ result;\n}\n", "    let result = '';\n    const roman = {\n        M: 1000,\n\
    \        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n      \
    \  XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n\
    \        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for (let i of Object.keys(roman))\
    \ {\n        const q = Math.floor(number / roman[i]);\n        number -= q * roman[i];\n\
    \        result += i.repeat(q);\n    }\n    return result;\n}\n", "  let result\
    \ = '';\n  const roman = [\n    ['m', 1000],\n    ['cm', 900],\n    ['d', 500],\n\
    \    ['cd', 400],\n    ['c', 100],\n    ['xc', 90],\n    ['l', 50],\n    ['xl',\
    \ 40],\n    ['x', 10],\n    ['ix', 9],\n    ['v', 5],\n    ['iv', 4],\n    ['i',\
    \ 1],\n  ];\n  for (let i = 0; i < roman.length; i++) {\n    while (number >=\
    \ roman[i][1]) {\n      result += roman[i][0];\n      number -= roman[i][1];\n\
    \    }\n  }\n  return result;\n}\n", "    let result = '';\n    const roman =\
    \ {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n \
    \       C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X:\
    \ 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n \
    \   for (let i of Object.keys(roman)) {\n        const q = Math.floor(number /\
    \ roman[i]);\n        number -= q * roman[i];\n        result += i.repeat(q);\n\
    \    }\n    return result;\n}\n", "    let result = \"\";\n    let roman = {\n\
    \        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n     \
    \   C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n\
    \        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for\
    \ (let key in roman) {\n        if (number >= roman[key]) {\n            result\
    \ += key.repeat(Math.floor(number / roman[key]));\n            number -= roman[key]\
    \ * Math.floor(number / roman[key]);\n        }\n    }\n    return result;\n}\n",
  "  let result = '';\n  const roman = [\n    ['m', 1000],\n    ['cm', 900],\n   \
    \ ['d', 500],\n    ['cd', 400],\n    ['c', 100],\n    ['xc', 90],\n    ['l', 50],\n\
    \    ['xl', 40],\n    ['x', 10],\n    ['ix', 9],\n    ['v', 5],\n    ['iv', 4],\n\
    \    ['i', 1],\n  ];\n  for (let i = 0; i < roman.length; i++) {\n    while (number\
    \ >= roman[i][1]) {\n      result += roman[i][0];\n      number -= roman[i][1];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = '';\n  const roman = {\n\
    \    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n\
    \    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I:\
    \ 1,\n  };\n  for (const key in roman) {\n    if (roman.hasOwnProperty(key)) {\n\
    \      const element = roman[key];\n      while (number >= element) {\n      \
    \  result += key;\n        number -= element;\n      }\n    }\n  }\n  return result;\n\
    }\n", "    let result = '';\n    const roman = {\n        M: 1000,\n        CM:\
    \ 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n\
    \        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n\
    \        IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n        if\
    \ (number >= roman[key]) {\n            result += key.repeat(Math.floor(number\
    \ / roman[key]));\n            number %= roman[key];\n        }\n    }\n    return\
    \ result;\n}\n", "  let result = '';\n  const roman = {\n    M: 1000,\n    CM:\
    \ 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL:\
    \ 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  for (const\
    \ key in roman) {\n    const value = roman[key];\n    const times = Math.floor(number\
    \ / value);\n    result += key.repeat(times);\n    number -= value * times;\n\
    \  }\n  return result;\n}\n", "    let result = \"\";\n    let roman = {\n   \
    \     M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C:\
    \ 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n   \
    \     IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for (let\
    \ key in roman) {\n        if (number >= roman[key]) {\n            result +=\
    \ key.repeat(Math.floor(number / roman[key]));\n            number -= roman[key]\
    \ * Math.floor(number / roman[key]);\n        }\n    }\n    return result;\n}\n",
  "  let roman = '';\n  const romanNumList = [\n    'M',\n    'CM',\n    'D',\n  \
    \  'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n\
    \    'IV',\n    'I',\n  ];\n  const arabicNumList = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n\n  for (let i = 0; i < arabicNumList.length;\
    \ i++) {\n    while (number >= arabicNumList[i]) {\n      number -= arabicNumList[i];\n\
    \      roman += romanNumList[i];\n    }\n  }\n\n  return roman.toLowerCase();\n\
    }\n", "    let roman: string = \"\";\n    let romanNumeral: string[] = [\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"];\n    let numbers: number[] = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n  \
    \          number -= numbers[i];\n        }\n    }\n    return roman;\n}\n", " \
    \ let result = '';\n  let roman = [\n    {\n      value: 1000,\n      symbol:\
    \ 'm',\n    },\n    {\n      value: 900,\n      symbol: 'cm',\n    },\n    {\n\
    \      value: 500,\n      symbol: 'd',\n    },\n    {\n      value: 400,\n   \
    \   symbol: 'cd',\n    },\n    {\n      value: 100,\n      symbol: 'c',\n    },\n\
    \    {\n      value: 90,\n      symbol: 'xc',\n    },\n    {\n      value: 50,\n\
    \      symbol: 'l',\n    },\n    {\n      value: 40,\n      symbol: 'xl',\n  \
    \  },\n    {\n      value: 10,\n      symbol: 'x',\n    },\n    {\n      value:\
    \ 9,\n      symbol: 'ix',\n    },\n    {\n      value: 5,\n      symbol: 'v',\n\
    \    },\n    {\n      value: 4,\n      symbol: 'iv',\n    },\n    {\n      value:\
    \ 1,\n      symbol: 'i',\n    },\n  ];\n\n  for (let i = 0; i < roman.length;\
    \ i++) {\n    while (number >= roman[i].value) {\n      result += roman[i].symbol;\n\
    \      number -= roman[i].value;\n    }\n  }\n\n  return result;\n}\n", "    let\
    \ result = '';\n    let num = number;\n    while (num > 0) {\n        if (num\
    \ >= 1000) {\n            result += 'm';\n            num -= 1000;\n        }\
    \ else if (num >= 900) {\n            result += 'cm';\n            num -= 900;\n\
    \        } else if (num >= 500) {\n            result += 'd';\n            num\
    \ -= 500;\n        } else if (num >= 400) {\n            result += 'cd';\n   \
    \         num -= 400;\n        } else if (num >= 100) {\n            result +=\
    \ 'c';\n            num -= 100;\n        } else if (num >= 90) {\n           \
    \ result += 'xc';\n            num -= 90;\n        } else if (num >= 50) {\n \
    \           result += 'l';\n            num -= 50;\n        } else if (num >=\
    \ 40) {\n            result += 'xl';\n            num -= 40;\n        } else if\
    \ (num >= 10) {\n            result += 'x';\n            num -= 10;\n        }\
    \ else if (num >= 9) {\n            result += 'ix';\n            num -= 9;\n \
    \       } else if (num >= 5) {\n            result += 'v';\n            num -=\
    \ 5;\n        } else if (num >= 4) {\n            result += 'iv';\n          \
    \  num -= 4;\n        } else if (num >= 1) {\n            result += 'i';\n   \
    \         num -= 1;\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = \"\";\n    let num = number;\n    while (num > 0) {\n        if (num >= 1000)\
    \ {\n            result += \"m\";\n            num -= 1000;\n        } else if\
    \ (num >= 900) {\n            result += \"cm\";\n            num -= 900;\n   \
    \     } else if (num >= 500) {\n            result += \"d\";\n            num\
    \ -= 500;\n        } else if (num >= 400) {\n            result += \"cd\";\n \
    \           num -= 400;\n        } else if (num >= 100) {\n            result\
    \ += \"c\";\n            num -= 100;\n        } else if (num >= 90) {\n      \
    \      result += \"xc\";\n            num -= 90;\n        } else if (num >= 50)\
    \ {\n            result += \"l\";\n            num -= 50;\n        } else if (num\
    \ >= 40) {\n            result += \"xl\";\n            num -= 40;\n        } else\
    \ if (num >= 10) {\n            result += \"x\";\n            num -= 10;\n   \
    \     } else if (num >= 9) {\n            result += \"ix\";\n            num -=\
    \ 9;\n        } else if (num >= 5) {\n            result += \"v\";\n         \
    \   num -= 5;\n        } else if (num >= 4) {\n            result += \"iv\";\n\
    \            num -= 4;\n        } else if (num >= 1) {\n            result +=\
    \ \"i\";\n            num -= 1;\n        }\n    }\n    return result;\n}\n", " \
    \ let roman = '';\n  const romanNumerals = {\n    M: 1000,\n    CM: 900,\n   \
    \ D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n \
    \   X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  for (const key\
    \ in romanNumerals) {\n    while (number >= romanNumerals[key]) {\n      roman\
    \ += key;\n      number -= romanNumerals[key];\n    }\n  }\n  return roman.toLowerCase();\n\
    }\n", "    let roman = '';\n    const romanNumList = [\n        'M', 'CM', 'D',\
    \ 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'\n    ];\n    const arabicNumList\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\n    for (let i\
    \ = 0; i < arabicNumList.length; i++) {\n        while (number >= arabicNumList[i])\
    \ {\n            number -= arabicNumList[i];\n            roman += romanNumList[i];\n\
    \        }\n    }\n    return roman.toLowerCase();\n}\n", "  let result = '';\n\
    \  let num = number;\n  let roman = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n\
    \    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n\
    \    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n\n  for (let key in roman)\
    \ {\n    if (num >= roman[key]) {\n      result += key.repeat(Math.floor(num /\
    \ roman[key]));\n      num -= roman[key] * Math.floor(num / roman[key]);\n   \
    \ }\n  }\n  return result;\n}\n", "    let result = '';\n    let num = number;\n\
    \    while (num > 0) {\n        if (num >= 1000) {\n            result += 'm';\n\
    \            num -= 1000;\n        } else if (num >= 900) {\n            result\
    \ += 'cm';\n            num -= 900;\n        } else if (num >= 500) {\n      \
    \      result += 'd';\n            num -= 500;\n        } else if (num >= 400)\
    \ {\n            result += 'cd';\n            num -= 400;\n        } else if (num\
    \ >= 100) {\n            result += 'c';\n            num -= 100;\n        } else\
    \ if (num >= 90) {\n            result += 'xc';\n            num -= 90;\n    \
    \    } else if (num >= 50) {\n            result += 'l';\n            num -= 50;\n\
    \        } else if (num >= 40) {\n            result += 'xl';\n            num\
    \ -= 40;\n        } else if (num >= 10) {\n            result += 'x';\n      \
    \      num -= 10;\n        } else if (num >= 9) {\n            result += 'ix';\n\
    \            num -= 9;\n        } else if (num >= 5) {\n            result +=\
    \ 'v';\n            num -= 5;\n        } else if (num >= 4) {\n            result\
    \ += 'iv';\n            num -= 4;\n        } else if (num >= 1) {\n          \
    \  result += 'i';\n            num -= 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result = \"\";\n    let roman = {\n        M: 1000,\n        CM:\
    \ 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n\
    \        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n\
    \        IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n        while\
    \ (number >= roman[key]) {\n            result += key;\n            number -=\
    \ roman[key];\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
