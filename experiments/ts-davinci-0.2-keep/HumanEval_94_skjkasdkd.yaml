name: HumanEval_94_skjkasdkd
language: humaneval_to_typescript.py
prompt: "//You are given a list of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["  let result = 0;\n  let prime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (isPrime(lst[i])) {\n      if (lst[i] > prime) {\n        prime\
    \ = lst[i];\n      }\n    }\n  }\n  let primeArr = prime.toString().split(\"\"\
    );\n  for (let i = 0; i < primeArr.length; i++) {\n    result += Number(primeArr[i]);\n\
    \  }\n  return result;\n}\n", "  let primes: number[] = [];\n  let largestPrime:\
    \ number = 0;\n  let sum: number = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (isPrime(lst[i])) {\n      primes.push(lst[i]);\n    }\n  }\n  largestPrime\
    \ = Math.max(...primes);\n  let str = largestPrime.toString();\n  for (let i =\
    \ 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum;\n\
    }\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (isPrime(lst[i])) {\n      if (lst[i] > largestPrime) {\n        largestPrime\
    \ = lst[i];\n      }\n    }\n  }\n  return largestPrime;\n}\n", "    let maxPrime\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            if (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n\
    \            }\n        }\n    }\n    let sum = 0;\n    while (maxPrime > 0) {\n\
    \        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n\
    \    }\n    return sum;\n}\n", "    let prime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > prime) {\n\
    \                prime = lst[i];\n            }\n        }\n    }\n    let sum\
    \ = 0;\n    while (prime > 0) {\n        sum += prime % 10;\n        prime = Math.floor(prime\
    \ / 10);\n    }\n    return sum;\n}\n", "    let sum: number = 0;\n    let prime:\
    \ number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if\
    \ (isPrime(lst[i])) {\n            if (lst[i] > prime) {\n                prime\
    \ = lst[i];\n            }\n        }\n    }\n    for (let i: number = 0; i <\
    \ prime.toString().length; i++) {\n        sum += parseInt(prime.toString().charAt(i));\n\
    \    }\n    return sum;\n}\n", "  let largestPrime: number = 0;\n  let sum: number\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n\
    \      if (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n      }\n\
    \    }\n  }\n  while (largestPrime > 0) {\n    sum += largestPrime % 10;\n   \
    \ largestPrime = Math.floor(largestPrime / 10);\n  }\n  return sum;\n}\n", " \
    \ let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]))\
    \ {\n      if (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n    \
    \  }\n    }\n  }\n  return sumDigits(largestPrime);\n}\n", "  let largestPrime\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n\
    \      if (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n      }\n\
    \    }\n  }\n  let sum = 0;\n  let str = largestPrime.toString();\n  for (let\
    \ i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum;\n\
    }\n", "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  let prime = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      prime = lst[i];\n\
    \    }\n  }\n  let sum = 0;\n  for (let i = 0; i < prime.toString().length; i++)\
    \ {\n    sum += Number(prime.toString()[i]);\n  }\n  return sum;\n}\n", "    let\
    \ largestPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (isPrime(lst[i])) {\n            if (lst[i] > largestPrime) {\n\
    \                largestPrime = lst[i];\n            }\n        }\n    }\n   \
    \ for (let i = 0; i < largestPrime.toString().length; i++) {\n        sum += parseInt(largestPrime.toString().charAt(i));\n\
    \    }\n    return sum;\n}", "    let prime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > prime) {\n\
    \                prime = lst[i];\n            }\n        }\n    }\n    let sum\
    \ = 0;\n    while (prime > 0) {\n        sum += prime % 10;\n        prime = Math.floor(prime\
    \ / 10);\n    }\n    return sum;\n}\n", "    let max = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        }\n    }\n \
    \   let sum = 0;\n    let str = max.toString();\n    for (let i = 0; i < str.length;\
    \ i++) {\n        sum += parseInt(str[i]);\n    }\n    return sum;\n}\n", "  let\
    \ largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]))\
    \ {\n      if (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n    \
    \  }\n    }\n  }\n  let sum = 0;\n  while (largestPrime > 0) {\n    sum += largestPrime\
    \ % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n  return sum;\n\
    }\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (isPrime(lst[i])) {\n      if (lst[i] > largestPrime) {\n        largestPrime\
    \ = lst[i];\n      }\n    }\n  }\n  return largestPrime.toString().split(\"\"\
    ).reduce((a, b) => +a + +b);\n}\n", "  let largestPrime = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      if (lst[i] > largestPrime)\
    \ {\n        largestPrime = lst[i];\n      }\n    }\n  }\n  return largestPrime;\n\
    }\n", "    let prime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > prime) {\n\
    \                prime = lst[i];\n            }\n        }\n    }\n    while (prime\
    \ > 0) {\n        sum += prime % 10;\n        prime = Math.floor(prime / 10);\n\
    \    }\n    return sum;\n}\n", "  let primes = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (isPrime(lst[i])) {\n      primes.push(lst[i]);\n    }\n  }\n\
    \  let largest = Math.max(...primes);\n  let digits = largest.toString().split(\"\
    \");\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum +=\
    \ parseInt(digits[i]);\n  }\n  return sum;\n}\n", "  let largestPrime = 0;\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      if\
    \ (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n      }\n    }\n\
    \  }\n  return largestPrime;\n}\n", "  let prime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (isPrime(lst[i])) {\n      if (lst[i] > prime) {\n        prime\
    \ = lst[i];\n      }\n    }\n  }\n  return sumDigits(prime);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
