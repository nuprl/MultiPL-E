name: HumanEval_82_prime_length
language: humaneval_to_typescript.py
prompt: "//Write a function that takes a string and returns True if the string\n//\
  \ length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
  \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
  // prime_length('orange') == False\nfunction prime_length(string: string): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"\
  ),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"\
  kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"\
  wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"\
  MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"\
  go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"\
  aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"\
  M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();"
completions: ["    let length = string.length;\n    if (length === 1) {\n        return\
    \ false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length %\
    \ i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    let length: number = string.length;\n    if (length < 2) {\n      \
    \  return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if (string.length < 2) {\n        return false;\n    }\n    for (let\
    \ i = 2; i < string.length; i++) {\n        if (string.length % i === 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n", "    return\
    \ isPrime(string.length);\n}\n", "  let length: number = string.length;\n  for\
    \ (let i: number = 2; i < length; i++) {\n    if (length % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  const length = string.length;\n\
    \  if (length === 1) {\n    return false;\n  }\n  for (let i = 2; i < length;\
    \ i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  const length = string.length;\n  if (length === 1) {\n    return\
    \ false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    let length =\
    \ string.length;\n    if (length === 1) {\n        return false;\n    }\n    for\
    \ (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n", "    let length =\
    \ string.length;\n    if (length === 1) {\n        return false;\n    }\n    for\
    \ (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n", "  let length = string.length;\n\
    \  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i < length; i++)\
    \ {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  const length = string.length;\n  if (length < 2) {\n    return false;\n\
    \  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "  const length = string.length;\n\
    \  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i < length; i++)\
    \ {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    return isPrime(string.length);\n}\n", "  const length = string.length;\n\
    \  if (length === 1) {\n    return false;\n  }\n  for (let i = 2; i < length;\
    \ i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  const length = string.length;\n  if (length === 1) {\n    return\
    \ false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const length =\
    \ string.length;\n  if (length === 1) {\n    return false;\n  }\n  for (let i\
    \ = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    let length = string.length;\n    if (length\
    \ === 1) {\n        return false;\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n", "    let prime = true;\n    for (let i = 2; i <\
    \ string.length; i++) {\n        if (string.length % i === 0) {\n            prime\
    \ = false;\n        }\n    }\n    return prime;\n}\nconsole.log(prime_length('Hello'));\n\
    console.log(prime_length('abcdcba'));\nconsole.log(prime_length('kittens'));\n\
    console.log(prime_length('orange'));\n", "    return isPrime(string.length);\n\
    }\n", "    let length = string.length;\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
