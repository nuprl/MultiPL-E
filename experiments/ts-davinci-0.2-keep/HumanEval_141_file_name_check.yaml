name: HumanEval_141_file_name_check
language: humaneval_to_typescript.py
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\"\
  ) # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nfunction file_name_check(file_name: string): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    let file_name_regex = /^[a-zA-Z]\\w{0,2}\\.[txt|exe|dll]$/;\n \
    \   return file_name_regex.test(file_name) ? 'Yes' : 'No';\n}\n", "    let file_name_regex\
    \ = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n    return file_name_regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "    let file_name_regex = /^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$/;\n\
    \    return file_name_regex.test(file_name) ? 'Yes' : 'No';\n}\n", "    let count\
    \ = 0;\n    let dot_count = 0;\n    let extension = file_name.split('.')[1];\n\
    \    let first_char = file_name.split('.')[0][0];\n    let valid_extensions =\
    \ ['txt', 'exe', 'dll'];\n    for (let i = 0; i < file_name.length; i++) {\n \
    \       if (file_name[i] === '.') {\n            dot_count++;\n        }\n   \
    \     if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3 || dot_count !== 1 || first_char < 'A' ||\
    \ first_char > 'z' || valid_extensions.indexOf(extension) === -1) {\n        return\
    \ 'No';\n    }\n    return 'Yes';\n}\n", "    let result: string = \"No\";\n \
    \   let dot_index: number = file_name.indexOf(\".\");\n    let dot_count: number\
    \ = 0;\n    let digit_count: number = 0;\n    let extension: string = \"\";\n\
    \    let extension_array: string[] = [\"txt\", \"exe\", \"dll\"];\n    let extension_index:\
    \ number = 0;\n    let extension_count: number = 0;\n    let extension_valid:\
    \ boolean = false;\n    let valid_extension: string = \"\";\n    let valid_extension_index:\
    \ number = 0;\n    let valid_extension_count: number = 0;\n    let valid_extension_array:\
    \ string[] = [];\n    let valid_extension_valid: boolean = false;\n    let valid_extension_valid_index:\
    \ number = 0;\n    let valid_extension_valid_count: number = 0;\n    let valid_extension_valid_array:\
    \ string[] = [];\n    let valid_extension_valid_valid: boolean = false;\n    let\
    \ valid_extension_valid_valid_index: number = 0;\n    let valid_extension_valid_valid_count:\
    \ number = 0;\n    let valid_extension_valid_valid_array: string[] = [];\n   \
    \ let valid_extension_valid_valid_valid: boolean = false;\n    let valid_extension_valid_valid_valid_index:\
    \ number = 0;\n    let valid_extension_valid_valid_valid_count: number = 0;\n\
    \    let valid_extension_valid_valid_valid_array: string[] = [];\n    let valid_extension_valid_valid_valid_valid:\
    \ boolean = false;\n    let valid_extension_valid_valid_valid_valid_index: number\
    \ = 0;\n    let valid_extension_valid_valid_valid_valid_count: number = 0;\n \
    \   let valid_extension_valid_valid_valid_valid_array: string[] = [];\n    let\
    \ valid_extension_valid_valid_valid_valid_valid: boolean = false;\n    let valid_extension_valid_valid_valid_valid_valid_index:\
    \ number = 0;\n    let valid", "    let result: string = 'No';\n    let dotIndex:\
    \ number = file_name.indexOf('.');\n    let dotSubstring: string = file_name.substring(dotIndex\
    \ + 1);\n    let beforeDotSubstring: string = file_name.substring(0, dotIndex);\n\
    \    let digits: number = 0;\n    let validExtensions: string[] = ['txt', 'exe',\
    \ 'dll'];\n    let validExtension: boolean = false;\n    for (let i: number =\
    \ 0; i < validExtensions.length; i++) {\n        if (dotSubstring === validExtensions[i])\
    \ {\n            validExtension = true;\n        }\n    }\n    for (let i: number\
    \ = 0; i < beforeDotSubstring.length; i++) {\n        if (beforeDotSubstring.charCodeAt(i)\
    \ >= 48 && beforeDotSubstring.charCodeAt(i) <= 57) {\n            digits++;\n\
    \        }\n    }\n    if (dotIndex !== -1 && digits <= 3 && beforeDotSubstring.length\
    \ > 0 &&\n        (beforeDotSubstring.charCodeAt(0) >= 65 && beforeDotSubstring.charCodeAt(0)\
    \ <= 90 ||\n            beforeDotSubstring.charCodeAt(0) >= 97 && beforeDotSubstring.charCodeAt(0)\
    \ <= 122) &&\n        validExtension) {\n        result = 'Yes';\n    }\n    return\
    \ result;\n}\n", "    let file_name_regex = /^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$/;\n\
    \    return file_name_regex.test(file_name) ? 'Yes' : 'No';\n}\n", "    let file_name_regex\
    \ = /^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$/;\n    if (file_name_regex.test(file_name))\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", " \
    \   const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n  \
    \  return file_name_regex.test(file_name) ? 'Yes' : 'No';\n}\n", "    let count\
    \ = 0;\n    let dot = false;\n    let extension = false;\n    let validExtension\
    \ = ['txt', 'exe', 'dll'];\n    for (let i = 0; i < file_name.length; i++) {\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if (file_name[i] === '.') {\n            dot = true;\n   \
    \     }\n        if (dot && file_name[i] === '.') {\n            return 'No';\n\
    \        }\n        if (dot && file_name[i] !== '.') {\n            for (let j\
    \ = 0; j < validExtension.length; j++) {\n                if (file_name.substring(i)\
    \ === validExtension[j]) {\n                    extension = true;\n          \
    \      }\n            }\n        }\n    }\n    if (count > 3 || !dot || !extension)\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    let dot_index\
    \ = file_name.indexOf('.');\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let name = file_name.substring(0, dot_index);\n    let digits_count\
    \ = 0;\n    for (let i = 0; i < name.length; i++) {\n        if (name[i] >= '0'\
    \ && name[i] <= '9') {\n            digits_count++;\n        }\n    }\n    if\
    \ (digits_count > 3) {\n        return 'No';\n    }\n    if (dot_index === -1)\
    \ {\n        return 'No';\n    }\n    if (name.length === 0) {\n        return\
    \ 'No';\n    }\n    if (name[0] < 'A' || name[0] > 'z' || (name[0] > 'Z' && name[0]\
    \ < 'a')) {\n        return 'No';\n    }\n    if (extension !== 'txt' && extension\
    \ !== 'exe' && extension !== 'dll') {\n        return 'No';\n    }\n    return\
    \ 'Yes';\n}\n", "    let dot_index = file_name.indexOf('.');\n    let file_name_without_extension\
    \ = file_name.substring(0, dot_index);\n    let file_extension = file_name.substring(dot_index\
    \ + 1);\n    let number_of_digits = 0;\n    for (let i = 0; i < file_name_without_extension.length;\
    \ i++) {\n        if (file_name_without_extension[i] >= '0' && file_name_without_extension[i]\
    \ <= '9') {\n            number_of_digits++;\n        }\n    }\n    if (number_of_digits\
    \ > 3) {\n        return 'No';\n    }\n    if (file_name_without_extension.length\
    \ === 0) {\n        return 'No';\n    }\n    if (file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'z' ||\n        (file_name_without_extension[0]\
    \ > 'Z' && file_name_without_extension[0] < 'a')) {\n        return 'No';\n  \
    \  }\n    if (file_extension !== 'txt' && file_extension !== 'exe' && file_extension\
    \ !== 'dll') {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    let\
    \ file_name_regex: RegExp = /^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$/;\n    return file_name_regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "    let file_name_regex = /^[a-zA-Z][0-9]{0,3}\\.txt$|^[a-zA-Z][0-9]{0,3}\\\
    .exe$|^[a-zA-Z][0-9]{0,3}\\.dll$/;\n    return file_name_regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "    let result: string = \"No\";\n    let dot_index:\
    \ number = file_name.indexOf(\".\");\n    let digits_count: number = 0;\n    let\
    \ substring_before_dot: string = file_name.substring(0, dot_index);\n    let substring_after_dot:\
    \ string = file_name.substring(dot_index + 1);\n    let valid_extensions: string[]\
    \ = [\"txt\", \"exe\", \"dll\"];\n    let is_valid_extension: boolean = false;\n\
    \n    for (let i: number = 0; i < file_name.length; i++) {\n        if (file_name[i]\
    \ >= \"0\" && file_name[i] <= \"9\") {\n            digits_count++;\n        }\n\
    \    }\n\n    for (let i: number = 0; i < valid_extensions.length; i++) {\n  \
    \      if (substring_after_dot === valid_extensions[i]) {\n            is_valid_extension\
    \ = true;\n        }\n    }\n\n    if (digits_count <= 3 && dot_index !== -1 &&\
    \ substring_before_dot.length !== 0 &&\n        (substring_before_dot[0] >= \"\
    a\" && substring_before_dot[0] <= \"z\" ||\n            substring_before_dot[0]\
    \ >= \"A\" && substring_before_dot[0] <= \"Z\") &&\n        is_valid_extension)\
    \ {\n        result = \"Yes\";\n    }\n\n    return result;\n}\n", "    let count\
    \ = 0;\n    let dot = false;\n    let valid = false;\n    let extension = '';\n\
    \    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i] ===\
    \ '.') {\n            dot = true;\n            continue;\n        }\n        if\
    \ (dot) {\n            extension += file_name[i];\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return 'No';\n    }\n    if (dot) {\n        if\
    \ (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0]\
    \ <= 'Z') {\n            if (extension === 'txt' || extension === 'exe' || extension\
    \ === 'dll') {\n                valid = true;\n            }\n        }\n    }\n\
    \    if (valid) {\n        return 'Yes';\n    }\n    return 'No';\n}\n", "   \
    \ const file_name_regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n \
    \   return file_name_regex.test(file_name) ? 'Yes' : 'No';\n}\n", "    let file_name_regex\
    \ = /^[a-zA-Z]\\w{0,3}\\.txt|exe|dll$/;\n    return file_name_regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "    let result: string = \"No\";\n    let dotIndex:\
    \ number = file_name.indexOf(\".\");\n    let subStringBeforeDot: string = file_name.substring(0,\
    \ dotIndex);\n    let subStringAfterDot: string = file_name.substring(dotIndex\
    \ + 1);\n    let countDigits: number = 0;\n    for (let i: number = 0; i < subStringBeforeDot.length;\
    \ i++) {\n        if (subStringBeforeDot[i] >= \"0\" && subStringBeforeDot[i]\
    \ <= \"9\") {\n            countDigits++;\n        }\n    }\n    if (countDigits\
    \ <= 3 && subStringBeforeDot[0] >= \"a\" && subStringBeforeDot[0] <= \"z\" &&\n\
    \        subStringAfterDot == \"txt\" || subStringAfterDot == \"exe\" || subStringAfterDot\
    \ == \"dll\") {\n        result = \"Yes\";\n    }\n    return result;\n}\n", " \
    \   let file_name_arr = file_name.split(\".\");\n    let file_name_arr_1 = file_name_arr[0].split(\"\
    \");\n    let file_name_arr_2 = file_name_arr[1].split(\"\");\n    let count =\
    \ 0;\n    let count_1 = 0;\n    let count_2 = 0;\n    let count_3 = 0;\n    let\
    \ count_4 = 0;\n    let count_5 = 0;\n    let count_6 = 0;\n    let count_7 =\
    \ 0;\n    let count_8 = 0;\n    let count_9 = 0;\n    let count_10 = 0;\n    let\
    \ count_11 = 0;\n    let count_12 = 0;\n    let count_13 = 0;\n    let count_14\
    \ = 0;\n    let count_15 = 0;\n    let count_16 = 0;\n    let count_17 = 0;\n\
    \    let count_18 = 0;\n    let count_19 = 0;\n    let count_20 = 0;\n    let\
    \ count_21 = 0;\n    let count_22 = 0;\n    let count_23 = 0;\n    let count_24\
    \ = 0;\n    let count_25 = 0;\n    let count_26 = 0;\n    let count_27 = 0;\n\
    \    let count_28 = 0;\n    let count_29 = 0;\n    let count_30 = 0;\n    let\
    \ count_31 = 0;\n    let count_32 = 0;\n    let count_33 = 0;\n    let count_34\
    \ = 0;\n    let count_35 = 0;\n    let count_36 = 0;\n    let count_37 = 0;\n\
    \    let count_38 = 0;\n    let count_39 = 0;\n    let count_40 = 0;\n    let\
    \ count_41 = 0;\n    let count_42 = 0;\n    let count_43 = 0;\n    let count_44\
    \ = 0;\n    let count_45 = 0;\n    let count_46 = 0;\n    let count_47 = 0;\n\
    \    let count_48 = 0;\n    let count_49 = 0;\n    let"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
