language: ts
name: HumanEval_73_smallest_change
results:
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <\
    \ end) {\n    if (arr[start] !== arr[end]) {\n      count++;\n    }\n    start++;\n\
    \    end--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \nconsole.log(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2]));\nconsole.log(smallest_change([1, 2, 3, 2, 1]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    1

    0

    '
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  const\
    \ len = arr.length;\n  let count = 0;\n  for (let i = 0; i < len / 2; i++) {\n\
    \    if (arr[i] !== arr[len - 1 - i]) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ left = 0;\n    let right = arr.length - 1;\n    let changes = 0;\n    while\
    \ (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ i = 0;\n    let j = arr.length - 1;\n    let count = 0;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  if (arr.length\
    \ === 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  let j = arr.length\
    \ - 1;\n  while (i < j) {\n    if (arr[i] !== arr[j]) {\n      count++;\n    }\n\
    \    i++;\n    j--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] === arr[right]) {\n      left++;\n      right--;\n\
    \    } else {\n      count++;\n      left++;\n      right--;\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count += 1;\n        }\n      \
    \  i += 1;\n        j -= 1;\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n\
    \  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\nconsole.log(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]));\n\
    console.log(smallest_change([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallest_change([1,\
    \ 2, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    1

    0

    '
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ n = arr.length;\n    let left = 0;\n    let right = n - 1;\n    let count =\
    \ 0;\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n   \
    \         count++;\n        }\n        left++;\n        right--;\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 1
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ palindrome = arr.slice().reverse();\n    let count = 0;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] !== palindrome[i]) {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n\
    \  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpcqgb06gw.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcqgb06gw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n\
    \        if (arr[i] !== arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]\
    \ !== arr[arr.length - 1 - i]) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n    let\
    \ count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left\
    \ < right) {\n        if (arr[left] !== arr[right]) {\n            count++;\n\
    \        }\n        left++;\n        right--;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <\
    \ right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ changes = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n \
    \   if (arr[i] !== arr[j]) {\n      changes++;\n    }\n    i++;\n    j--;\n  }\n\
    \  return changes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !==\
    \ arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
- exit_code: 0
  program: "//Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunction smallest_change(arr: number[]): number {\n  let\
    \ count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n   \
    \ if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n\
    \  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1,\
    \ 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3,\
    \ 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738839
