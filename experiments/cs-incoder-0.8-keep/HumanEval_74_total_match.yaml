name: HumanEval_74_total_match
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts two lists of strings and returns\
  \ the list that has \n    // total number of chars in the all strings of the list\
  \ less than the other list.\n    // if the two lists have the same number of chars,\
  \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
  \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    public static List<string> TotalMatch(List<string>\
  \ lst1, List<string> lst2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new\
  \ List<string>()), (new List<string>())).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new\
  \ List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"\
  hi\", (string)\"admin\", (string)\"project\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"\
  2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).Equals((new List<string>(new\
  \ string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"\
  hI\", (string)\"Hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hii\"}))).Equals((new List<string>(new string[]{(string)\"hi\",\
  \ (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new\
  \ List<string>(new string[]{(string)\"this\"}))).Equals((new List<string>())));\n\
  \    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})),\
  \ (new List<string>())).Equals((new List<string>())));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
