name: HumanEval_8_sum_product
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given list of integers, return a tuple consisting of a\
  \ sum and a product of all the integers in a list.\n    // Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n   \
  \ // (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    public static\
  \ Tuple<long, long> SumProduct(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
  \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
  \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,\
  \ 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,\
  \ (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\
  \n}\n"
completions: []
stop_tokens:
- "\n    }\n"
