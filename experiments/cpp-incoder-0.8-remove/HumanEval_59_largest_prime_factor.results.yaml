language: cpp
name: HumanEval_59_largest_prime_factor
results:
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = n;\n    long max_i= 0;\n    while (true) {\n        if (i\
    \ % 2 == 0) max_i = i;\n        i = i / 2;\n        if (i > max_i) max_i = i;\n\
    \    }\n    return max_i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p = 0;\n    for(long i = 1; i<n; i++){\n        if(n % i == 0)\n\
    \            p = i;\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpr_zpaqf0: /tmp/tmpr_zpaqf0.cpp:15: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long a = 2, b = n;\n    while (b <= (a * n)) {\n        long c = (b\
    \ / a);\n        if (c != 1) {\n            a = b;\n            b = c;\n     \
    \   }\n        else b++;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660143058
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long ans = n;\n    // Test for factors of 2\n\
    \    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n   \
    \         ans = i;\n            while (n % ans == 0) {\n                ans =\
    \ ans;\n            }\n            n = n / ans;\n        }\n    }\n    // Test\
    \ for factors of 3\n    for (int i = 5; i * i <= n; i += 3) {\n        while (n\
    \ % i == 0) {\n            ans = i;\n            while (n % ans == 0) {\n    \
    \            ans = ans;\n            }\n            n = n / ans;\n        }\n\
    \    }\n    // Test for factors of 5\n    for (int i = 7; i * i <= n; i += 5)\
    \ {\n        while (n % i == 0) {\n            ans = i;\n            while (n\
    \ % ans == 0) {\n                ans = ans;\n            }\n            n = n\
    \ / ans;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  int i = 5;\n  while(i <= n/2) {\n    int count = 1;\n    while (n %\
    \ i == 0) {\n      n /= i;\n      count++;\n    }\n    i = 2;\n    while (i <=\
    \ n / i) {\n      if (n % i == 0) {\n        n /= i;\n        count++;\n     \
    \ }\n      i++;\n    }\n    if (count == 2) {\n      return i;\n    }\n  }\n \
    \ return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n   \
    \ assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpaqgr_7w1: /tmp/tmpaqgr_7w1.cpp:28: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 1) return 2;\n    long a = n, t = n, i = 2;\n    while (a\
    \ % i == 0) {\n        a = a / i;\n        t = i;\n    }\n    return t;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpganejbg9: /tmp/tmpganejbg9.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // write your code here\n    long largest_factor=2;\n    long i=3;\n\
    \    while(i*i<=n){\n        if(n%i==0){\n            largest_factor=i;\n    \
    \        break;\n        }\n        i++;\n    }\n    return largest_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp2zsh8ml7: /tmp/tmp2zsh8ml7.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 2;\n    long i = 2;\n    while (i <= sqrt(n))\n\
    \    {\n        long test_factor = n / i;\n        if (test_factor > max_factor)\n\
    \            max_factor = test_factor;\n        i += 1;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpzrymhhtc: /tmp/tmpzrymhhtc.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1 && n != 2);\n\tlong factor = 1;\n\tlong m = n;\n\twhile\
    \ (m % 2 == 0) {\n\t\tm /= 2;\n\t\tfactor++;\n\t}\n\tlong k = 2;\n\twhile (m %\
    \ k == 0) {\n\t\tm /= k;\n\t\tk++;\n\t}\n\twhile (k > factor) {\n\t\tk--;\n\t\
    }\n\treturn k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpuys7rthq: /tmp/tmpuys7rthq.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tlong ans = n;\n\tlong root = sqrt(ans);\n\twhile (ans > 1) {\n\t\twhile\
    \ (n % ans == 0) {\n\t\t\tans = ans / 2;\n\t\t}\n\t\tif (ans > 1) {\n\t\t\tn++;\n\
    \t\t}\n\t\tif (ans == 1) {\n\t\t\tbreak;\n\t\t}\n\t\tans = ans / 2;\n\t\troot\
    \ = sqrt(ans);\n\t}\n\treturn root;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpsz7uaj6w: /tmp/tmpsz7uaj6w.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 0;\n    long i = 2;\n    while(i > 1 && n / i > 0) {\n\
    \        if(n % i == 0) {\n            ans = i;\n            while(n > 1 && n\
    \ % i == 0) {\n                n /= i;\n            }\n            break;\n  \
    \      }\n        ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp2s1rvwb4: /tmp/tmp2s1rvwb4.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long d = 2;\n  long n1 = n - 2;\n  long n2 = n - 1;\n  long p = 2;\n\
    \  while (p <= n1) {\n    if (n1 % p == 0 || n2 % p == 0) {\n      d++;\n    }\
    \ else {\n      p = p + 1;\n    }\n  }\n  return d;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long x = 2, y = n;\n    long factor = 1;\n   \
    \ long ifactor = 1;\n    while ((y * factor < n) && (ifactor < y)) {\n       \
    \ factor = ifactor;\n        y = x / factor;\n        ifactor++;\n    }\n    return\
    \ factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp2wzq7w7f: /tmp/tmp2wzq7w7f.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long maxFact = 1, curFact = 2, curDiv = 3, divisor = 2;\n  while (curFact\
    \ < n) {\n    divisor = curDiv;\n    while (divisor < curFact && n % divisor ==\
    \ 0) {\n      divisor++;\n    }\n    if (divisor > maxFact) {\n      maxFact =\
    \ divisor;\n    }\n    curFact = divisor * curDiv;\n    curDiv += 2;\n  }\n  return\
    \ maxFact;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmppv3vmu4i: /tmp/tmppv3vmu4i.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tif (n == 1)\n\t\treturn n;\n\t\n\tint i = 2;\n\tlong long factor = 2;\n\
    \t\n\twhile (i != n) {\n\t\tif (n % i == 0) {\n\t\t\tfactor = i;\n\t\t\tn = n\
    \ / i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpie2_1l7f: /tmp/tmpie2_1l7f.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1);\n\tlong i = 3;\n\tlong factor = 2;\n\twhile (i * i <=\
    \ n) {\n\t\tif (n % i == 0) {\n\t\t\tfactor = i;\n\t\t\twhile (n % (factor * i)\
    \ == 0) {\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\tn /= factor;\n\t\t} else {\n\t\t\t\
    i += 1;\n\t\t}\n\t}\n\treturn factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpt5ac4nts: /tmp/tmpt5ac4nts.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2;\n  long max = 2;\n  while (i <= n) {\n    while (n % i ==\
    \ 0) {\n      max++;\n      n /= i;\n    }\n    i++;\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpjczosud2: /tmp/tmpjczosud2.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long res = n;\n    long d = 2;\n    while (n/d\
    \ > 1) {\n        if (n % d == 0) {\n            res /= d;\n            n /= d;\n\
    \        }\n        d += 2;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp7cbq0mtr: /tmp/tmp7cbq0mtr.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long fact = n, count = 1;\n    long long i, k;\n    while (fact >\
    \ 1) {\n        fact /= 2;\n        count++;\n    }\n    for (i = fact; i > 1;\
    \ i--) {\n        k = fact / i;\n        while (count % i == 0) {\n          \
    \  count /= i;\n        }\n        if (count >= n) return i;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp0e00a0l1: /tmp/tmp0e00a0l1.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long factor = 1;\n  for (long d = 2; d * d <= n; d++)\n    if (n % d\
    \ == 0)\n      while (n % d == 0)\n        factor++;\n  return factor;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Complete this function to return the largest prime factor of n.\n\
    \    assert(n > 1);\n    if (n == 2)\n        return 1;\n    long prime = 1;\n\
    \    for (long i = 2; i <= n / 2; i++)\n        if (n % i == 0)\n            prime\
    \ = i;\n    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmprur3nbcl: /tmp/tmprur3nbcl.cpp:18: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // code here\n    long result = 0;\n    long count = 1;\n    long\
    \ i = 2;\n    while (i < n) {\n        while (n%i == 0) {\n            count++;\n\
    \            n = n/i;\n        }\n        i++;\n        if (count > result) {\n\
    \            result = count;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpqbhtht1o: /tmp/tmpqbhtht1o.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long i = 2, factor = 1;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            n = n / i;\n            factor = i;\n\
    \        }\n        ++i;\n    }\n    return factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphdbz9s24: /tmp/tmphdbz9s24.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143057
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  int max_prime = 2;\n  while (n > 2) {\n    int m = (max_prime + 2) >>\
    \ 1;\n    if (n % m == 0) max_prime = m;\n    n = n / m;\n  }\n  return max_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp48y3qobt: /tmp/tmp48y3qobt.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long res = 1;\n  long prime_count = 0;\n  long p =\
    \ 2;\n  while (p < n) {\n    p += p;\n    prime_count++;\n  }\n  for (long i =\
    \ 3; i <= n; i += 2) {\n    if (n % i == 0) {\n      long r = n;\n      while\
    \ (n % i == 0) {\n        n /= i;\n      }\n      res = (n > 1) ? res : r;\n \
    \     prime_count--;\n    }\n  }\n  return prime_count;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpmzg54q95: /tmp/tmpmzg54q95.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here.\n\tlong res = 1;\n\tfor (int i = 2; i <=\
    \ n / 2; i++) {\n\t\tif (n % i == 0) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn\
    \ = n / i;\n\t\t\t\tres = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp6c7dy961: /tmp/tmp6c7dy961.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long a = 1;\n  long b = 2;\n  long p = 1;\n  while\
    \ (p < n) {\n    if (n % p == 0) {\n      a = b;\n      b = p;\n      n--;\n \
    \   } else {\n      p++;\n    }\n  }\n  return a;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpe61m1tel: /tmp/tmpe61m1tel.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i <= sqrt(res)) {\n   \
    \     if (res == i) return i;\n        if (n % i == 0) {\n            while (true)\
    \ {\n                while (n % i == 0) {\n                    res /= i;\n   \
    \                 n--;\n                }\n                if (res == 1) return\
    \ i;\n                if (i == res + 1) return res;\n                i++;\n  \
    \          }\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqlg8heg5: /tmp/tmpqlg8heg5.cpp:26: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    for (int i = 2; i <= n; i++) {\n        while (n\
    \ % i == 0) {\n            n = n / i;\n            res = i;\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  // We need an array of size n so that each value stores the largest\
    \ factor of n.\n  // Initially, set all the values to the max power of 2.\n  long\
    \ arr[1000];\n  long highest = 2; // Initialize highest to largest power of 2.\n\
    \  for (int i = 0; i < (int) n; i++) {\n    if (n % i == 0) {\n      long j =\
    \ 1;\n      while (j <= i / j) j *= highest;\n      highest = max(j, highest);\n\
    \      arr[i] = j;\n    }\n  }\n  // Find the maximum value in arr and its index.\n\
    \  long max_idx = 0, max_val = arr[n-1];\n  for (int i = 0; i < (int) n; i++)\
    \ {\n    if (arr[i] > max_val) max_val = arr[i];\n    if (arr[i] > highest) {\n\
    \      max_idx = i;\n      highest = arr[i];\n    }\n  }\n  return highest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0h8cls8d.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp0h8cls8d.cpp:13:17: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |       highest = max(j,\
    \ highest);\n      |                 ^~~\n      |                 std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0h8cls8d.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660143057
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here\n    long long factor = 1;\n    long long\
    \ temp = n;\n    while(temp!=1){\n        temp = temp/factor;\n        factor++;\n\
    \    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tint i = 2;\n\tint maxi = 1;\n\tlong j = 0;\n\twhile (i <= n / i) {\n\
    \t\twhile (n % i == 0) {\n\t\t\tmaxi = i;\n\t\t\tn = n / i;\n\t\t}\n\t\ti++;\n\
    \t}\n\tif (maxi != n) {\n\t\twhile (n % maxi == 0) {\n\t\t\tn = n / maxi;\n\t\t\
    }\n\t\tj++;\n\t}\n\treturn maxi;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_7by6xxh: /tmp/tmp_7by6xxh.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int max_factor = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n    \
    \    while (n % i == 0) {\n            ++max_factor;\n            n /= i;\n  \
    \      }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 1;\n    long prime_limit = 2;\n    while (n) {\n        while\
    \ (n % prime_limit == 0) {\n            ++prime_limit;\n        }\n        ++i;\n\
    \        n /= prime_limit;\n    }\n    return i;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp9yt0vt8x: /tmp/tmp9yt0vt8x.cpp:19: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  int count = 0;\n  long p = 1;\n  long t = n;\n  while (p < t) {\n  \
    \  while ((t % p) == 0) {\n      count++;\n      t = t / p;\n    }\n    p++;\n\
    \  }\n  assert(count <= 2 && \"not a prime number\");\n  p = 2;\n  while (p <\
    \ n) {\n    while (n % p == 0) {\n      n = n / p;\n    }\n    p++;\n  }\n  return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // your code here\n     long a = n/2;\n     long b = 0;\n     while(a\
    \ != 1)\n     {\n         while(n%a==0)\n         {\n             b = b + 1;\n\
    \             a = a/2;\n         }\n     }\n     return b;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long result = 2;\n  while (result * result <= n) {\n\
    \    if (n % result == 0) {\n      n /= result;\n      result++;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long factor = 0;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            n = n / i;\n            factor++;\n        }\n \
    \       i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp35gc2sl1: /tmp/tmp35gc2sl1.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 2) return 1;\n    if (n == 0 || n == 1) return n;\n    if\
    \ (n % 2 == 0 || n % 3 == 0) return n;\n    long res = 1;\n    for (long i = 3;\
    \ i * i <= n; i += 2)\n        if (n % i == 0 || n % (i + 2) == 0)\n         \
    \   res = i;\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_aplspkt: /tmp/tmp_aplspkt.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n <= 2)\n        return 2;\n    int flag = 1;\n    long a = 2,\
    \ b;\n    long ans = 1;\n    while (flag) {\n        flag = 0;\n        for (b\
    \ = a * 2; b < n; b += a) {\n            if (n % b == 0)\n                flag\
    \ = 1;\n        }\n        a = b + 1;\n        ans = max(ans, a);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57w6am6y.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp57w6am6y.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ a);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp57w6am6y.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long largest_factor = 1;\n    for(long i=2; i<=n; i++) {\n       \
    \ if(n%i==0) {\n            if(n/i<=largest_factor)\n                largest_factor\
    \ = n/i;\n        }\n    }\n    return largest_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpfqkvgwhi: /tmp/tmpfqkvgwhi.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143059
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l=1;\n    while (l<=n/2) {\n        if (n%l==0)\n           \
    \ return n;\n        l++;\n    }\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpl6ymwqs0: /tmp/tmpl6ymwqs0.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // write your code here\n    long count[n];\n    for(int i=0;i<n;i++)\
    \ {\n        count[i]=0;\n    }\n    for(int i=2;i<=n;i++) {\n        count[i]=count[i/2]+1;\n\
    \    }\n    for(int i=0;i<n;i++) {\n        if(count[i]>1)\n            return\
    \ i;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphd_rwko9: /tmp/tmphd_rwko9.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long p = 2, sqrt = sqrt(n);\n  while (sqrt % p != 0) {\n    p += 1;\n\
    \  }\n  n /= p;\n  while (n % p != 0) {\n    p += 1;\n  }\n  return p;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyocxizgy.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpyocxizgy.cpp:5:28: error: \u2018sqrt\u2019 cannot be used\
    \ as a function\n    5 |   long p = 2, sqrt = sqrt(n);\n      |              \
    \              ^\n"
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long prime = 1;\n    while (i*i <= n) {\n       \
    \ if (n % i == 0) {\n            prime = i;\n            n = n / i;\n        }\n\
    \        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjke5lmbv: /tmp/tmpjke5lmbv.cpp:19: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  // To check if n is a prime, check if the least significant\
    \ bit\n  // is 0 (which means the number is even). Otherwise, check if the\n \
    \ // least significant bit in the binary representation of n is\n  // 1.\n  //\
    \ If it is not 1, then n is not a prime.\n  if (is_prime(n)) return n;\n  // To\
    \ check if n is even, take the binary representation of n and\n  // shift it to\
    \ the left. If the least significant bit is 0, then\n  // n is even. Otherwise,\
    \ n is odd.\n  long binary_num = n;\n  for (int i = 0; i < 8; i++) {\n    binary_num\
    \ >>= 1;\n    if (binary_num & 1) {\n      binary_num--;\n    } else {\n     \
    \ break;\n    }\n  }\n  // If binary_num <= 2, then n is odd.\n  if (binary_num\
    \ <= 2) return binary_num;\n  // If binary_num > 21 and binary_num < 2^64, the\
    \ binary representation of n\n  // is larger than 2^64. n can only be a prime.\n\
    \  if (binary_num > 21 && binary_num <= (std::numeric_limits<long long>::max)())\
    \ return binary_num;\n  // If binary_num > 2^64, the binary representation of\
    \ n is smaller than 2^64.\n  // n can only be a prime.\n  return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6o4607jo.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp6o4607jo.cpp:11:7: error: \u2018is_prime\u2019 was not\
    \ declared in this scope\n   11 |   if (is_prime(n)) return n;\n      |      \
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660143058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = 2;\n    long i;\n    // If n < 2 then 1 is the only prime\
    \ factor\n    if(n<2)return 1;\n    // If n is even then there are no prime factors\n\
    \    if(n%2==0)return n;\n    // For each prime factor of n\n    for(i = 3; i\
    \ < n; i+=2) {\n        // If n is not a prime and is a multiple of this prime\
    \ factor then\n        if(n%i==0)return i;\n        // If n is divisible by this\
    \ prime factor then it is not the largest\n        if(res%i == 0)return i;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpx7bzd1fm: /tmp/tmpx7bzd1fm.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long m = 2;\n    long i = n;\n    while (i < m) {\n        while (n\
    \ % i == 0) {\n            i = i + ((m + 1) / i);\n        }\n        m = i;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpidu71n3q: /tmp/tmpidu71n3q.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 0;\n    for(long i = 2; i <= n; ++i) {\n        for(long\
    \ j = i; j < n; j+=i) {\n            if(n%j == 0) break;\n        }\n        if(j\
    \ > i) {\n            ans = j;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrnoi5lc.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpjrnoi5lc.cpp:10:12: error: \u2018j\u2019 was not declared\
    \ in this scope\n   10 |         if(j > i) {\n      |            ^\n"
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l = n;\n    long r = n;\n    long res = 0;\n\n    // Get rid\
    \ of the smallest prime factor\n    while (r == 1) {\n        long c = l % r;\n\
    \        if (c == 0) {\n            l = r + 1;\n        } else {\n           \
    \ r /= c;\n            res = c;\n        }\n    }\n\n    return res;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpdx5hos7j: /tmp/tmpdx5hos7j.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long max_num = 1;\n  // Assume n > 1 and is not a prime\n  for (long\
    \ i = 2; i <= n; ++i) {\n    if (n % i == 0) {\n      max_num = i;\n    }\n  }\n\
    \  // Return the largest prime factor\n  return max_num;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpxtdaqrzr: /tmp/tmpxtdaqrzr.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    long res = 1;\n    for (i = 2; i <= n / 2; i++) {\n \
    \       while ((n % i) == 0) {\n            n /= i;\n            res = i;\n  \
    \      }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqnxcbzi7: /tmp/tmpqnxcbzi7.cpp:18: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long max_factor = 2;\n  long max_factor_index = 0;\n\
    \  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_factor\
    \ < i) {\n        max_factor = i;\n        max_factor_index = i;\n      }\n  \
    \  }\n  }\n  return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp90qp5ulg: /tmp/tmp90qp5ulg.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long m = n;\n    long a = n;\n    long b = 2;\n\
    \    long d = 1;\n    while (b < a) {\n        while (b * d < m) {\n         \
    \   m *= b;\n            d *= b;\n        }\n        if (m == n) {\n         \
    \   return b;\n        }\n        d /= b;\n        ++b;\n    }\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpjzmmp428: /tmp/tmpjzmmp428.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long factor = 2;\n    while (factor <= n/max_factor)\
    \ {\n        max_factor = factor;\n        factor++;\n    }\n    return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp_8zdg40r: /tmp/tmp_8zdg40r.cpp:16: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if(n < 2){\n        return 2;\n    }\n    long prime = 2;\n    long\
    \ p = 2;\n    long m = n;\n    while(m <= n / prime){\n        while(p <= n/prime){\n\
    \            if(n/prime % p == 0){\n                p = p*prime;\n           \
    \     prime = prime*prime;\n            }\n            else{\n               \
    \ break;\n            }\n        }\n        m++;\n    }\n    return prime;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp1b2zkb4h: /tmp/tmp1b2zkb4h.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long long primes[10];\n    int i = 0;\n    primes[0] = n;\n    long\
    \ long curr = n;\n    while (curr > 1) {\n        while (curr % primes[i] != 0)\
    \ {\n            i--;\n        }\n        curr = (curr / primes[i]) - 1;\n   \
    \     primes[i + 1] = primes[i];\n        i++;\n    }\n    return primes[i + 1];\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpltcqywq4: /tmp/tmpltcqywq4.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // write your code here\n    long ans = 0;\n    while(n > 1){\n  \
    \      if(n%2 == 0){\n            ans = 2;\n            while(ans*2 <= n){\n \
    \               n = n/2;\n                ans ++;\n            }\n        }\n\
    \        else{\n            ans = 1;\n            while(n%2 == 0){\n         \
    \       n = n/2;\n                ans ++;\n            }\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143065
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    // Only need to check for factors up to sqrt(n)\
    \ because\n    // the only prime factors less than sqrt(n) are 2 and 3.\n    long\
    \ factor = 2;\n    while (factor < n) {\n        // If there is a factor smaller\
    \ than sqrt(n), then it is a\n        // factor of n.\n        while (n % factor\
    \ == 0) {\n            n = n / factor;\n            if (n > 1) {\n           \
    \     factor++;\n            }\n        }\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1);\n\tlong p = 2;\n\tfor (long i = 3; i <= n; i = i + 1)\
    \ {\n\t\tif (n % i == 0) {\n\t\t\tp = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn p;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpn_0lhz6m: /tmp/tmpn_0lhz6m.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long next_max_factor = 0;\n    for (long\
    \ i = 2; i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ next_max_factor = i;\n            max_factor = max(max_factor, next_max_factor);\n\
    \        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cx8wtk2.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp7cx8wtk2.cpp:12:26: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   12 |             max_factor\
    \ = max(max_factor, next_max_factor);\n      |                          ^~~\n\
    \      |                          std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7cx8wtk2.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i, count[128];\n    memset(count, 0, sizeof(count));\n    long\
    \ prime = 0;\n    long p = 2;\n    while (p < n) {\n        for (i = 2; i <= p;\
    \ i++) {\n            if (n % i == 0) {\n                count[i]++;\n       \
    \         if (count[i] == 2) {\n                    prime = i;\n             \
    \   }\n                break;\n            }\n        }\n        p++;\n    }\n\
    \    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm5cgjwp_: /tmp/tmpm5cgjwp_.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here.\n    \n    long largest_factor=1;\n    long\
    \ prime=2;\n    while(prime*prime<=n){\n        if(n%prime==0){\n            largest_factor=largest_factor*prime;\n\
    \            n=n/prime;\n        }\n        else{\n            prime++;\n    \
    \    }\n    }\n    return largest_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp77miweam: /tmp/tmp77miweam.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1 && n != n & n - 1);\n    if (n == 1)\n        return\
    \ 1;\n    long i = (long) sqrt(n) + 1;\n    long f = 1;\n    for (; i > 1 && f\
    \ <= n / i; i++)\n        f = f * i;\n    return f;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6fk7b08y: /tmp/tmp6fk7b08y.cpp:5: long int largest_prime_factor(long
    int): Assertion `n > 1 && n != n & n - 1'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int i = 2;\n    long largest_factor = 2;\n    long max_div_n = 1;\n\
    \    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            max_div_n\
    \ = max_div_n * i;\n        } else {\n            largest_factor = i;\n      \
    \      n = n/i;\n        }\n        ++i;\n    }\n    return largest_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpu7hl7rc5: /tmp/tmpu7hl7rc5.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here.\n  assert(n > 1);\n  long res = 2;\n  for(long\
    \ i = n; i > 1; i--) {\n    for(long j = 2; j < i; j++)\n      if(i % j == 0)\
    \ {\n        long n = i - j;\n        while(n % j == 0) n /= j;\n        if(n\
    \ > i) res = i;\n        break;\n      }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpf8ukfo5h: /tmp/tmpf8ukfo5h.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0)\n\
    \            return 0;\n        i += 1;\n    }\n    return n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp5pa0s_d1: /tmp/tmp5pa0s_d1.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long m = 2, d = 0;\n    while (m < n) {\n        while (n % m == 0)\
    \ {\n            n /= m;\n            d++;\n        }\n        m++;\n    }\n \
    \   return d;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwwarhwnt: /tmp/tmpwwarhwnt.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // The only prime factor is 2\n    if (n == 1) return 2;\n    long\
    \ largest = 2;\n    long count = 0;\n    for(long i = 2; i <= n; i++) {\n    \
    \    // If i divides n evenly then it is not prime\n        if (n % i == 0) {\n\
    \            count++;\n            largest = i;\n            if (count == 1) break;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpkd38mxu5: /tmp/tmpkd38mxu5.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    //assert(n > 1);\n    long i = 2;\n    long k = 2;\n    while (i *\
    \ i <= n) {\n        if (n % i == 0) {\n            k = i;\n            break;\n\
    \        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpdts_3i5l: /tmp/tmpdts_3i5l.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n<2)\n        return 0;\n    long l = 1;\n    long k = 1;\n  \
    \  long c = 0;\n    while (l<n-1) {\n        c++;\n        if (k%2==1)\n     \
    \       k=0;\n        else\n            k = (k/2)+2;\n        l = k+1;\n    }\n\
    \    if (c==2)\n        return k;\n    else\n        return -1;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n <= 1) {\n        return 1;\n    }\n    long max_factor = 1;\n\
    \    long i = 3;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n    \
    \        max_factor = i;\n        }\n        i += 2;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpesb2kpup: /tmp/tmpesb2kpup.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l=n;\n    while(l%2==0){\n        l/=2;\n    }\n    while(l%6==0){\n\
    \        l/=6;\n    }\n    return l;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpnivii34_: /tmp/tmpnivii34_.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long long m = n;\n    // Set m to n until we find a prime factor.\n\
    \    while (m % 2 == 0)\n        m /= 2;\n    // Test for trivial factors up to\
    \ sqrt(m).\n    for (long long i = 3; i <= m / i; i += 2)\n        if (m % i ==\
    \ 0)\n            return i;\n    // All remaining factors are prime.\n    return\
    \ m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp8kbhgytr: /tmp/tmp8kbhgytr.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    for (long i = 1; i < n; ++i) {\n       \
    \ if (n % i == 0) {\n            max_factor = i;\n        }\n    }\n    return\
    \ max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm7fo7_w5: /tmp/tmpm7fo7_w5.cpp:16: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long res = 2;\n    for(long i = 3; i <= n/2; i++)\
    \ {\n        while(n % i == 0) {\n            max = i;\n            res = n;\n\
    \            n = n / i;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp2hcbje29: /tmp/tmp2hcbje29.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int i = 2;\n    while (i < n) {\n        long p = i * 2;\n       \
    \ while ((n % p) == 0) {\n            n /= p;\n        }\n        i++;\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp76swxr_l: /tmp/tmp76swxr_l.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143060
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long max_factor = 1;\n    long temp = n;\n   \
    \ while(temp > 1) {\n        if(n % temp == 0) \n            temp /= 2;\n    \
    \    else \n            temp--;\n        max_factor = temp;\n    }\n    return\
    \ max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp9c87mkd3: /tmp/tmp9c87mkd3.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 0;\n    // Initializations will run for every number.\n\
    \    long p = 2;\n    long q = 3;\n    long d = 4;\n    while (p <= n) {\n   \
    \     // Check if n is divisible by any number in its prime factorization.\n \
    \       while ((n % p) == 0) {\n            // If n is divisible by p, increment\
    \ p.\n            p++;\n        }\n        // Check if n is divisible by any number\
    \ in its prime factorization.\n        while ((n % q) == 0) {\n            //\
    \ If n is divisible by q, increment q.\n            q++;\n        }\n        if\
    \ (p * q > n) {\n            break;\n        }\n        // Check if n is divisible\
    \ by any number in its prime factorization.\n        while ((n % d) == 0) {\n\
    \            // If n is divisible by d, increment d.\n            d++;\n     \
    \   }\n        ans = max(ans, p);\n        ans = max(ans, q);\n        ans = max(ans,\
    \ d);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxn0zms6.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmppxn0zms6.cpp:29:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   29 |         ans = max(ans,\
    \ p);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppxn0zms6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int i;\n    // Base case: n is 0 or 1.\n    if (n < 2)\n        return\
    \ 1;\n    // Find the largest prime factor of n that is larger than n.\n    for\
    \ (i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            n = n /\
    \ i;\n            break;\n        }\n    }\n    return n;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp2au8n6gs: /tmp/tmp2au8n6gs.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_i = 0; // first i such that i*i\
    \ <= n\n    for (long i = 2; i * i <= n; ++i) {\n        long j = 0;\n       \
    \ for (; i * j <= n; ++j) {\n            long temp = i * j;\n            if (temp\
    \ % i == 0) {\n                max_i = i;\n                max_factor = temp;\n\
    \                break;\n            }\n        }\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp1yqzqp7i: /tmp/tmp1yqzqp7i.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  if (n < 2) return 2;\n  if (n % 2 == 0) return 2;\n  for (long i = 3;\
    \ i <= n / i; i++) {\n    if (n % i == 0) {\n      if (i > 2 && n % i == i) {\n\
    \        return i;\n      } else {\n        return i;\n      }\n    }\n  }\n \
    \ return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n   \
    \ assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp1m46oda4: /tmp/tmp1m46oda4.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143061
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long ans = n;\n  long p = 2; //prime number\n  for\
    \ (long i = 2; i <= n; i++)\n  {\n    bool isPrime = true;\n    for (int j = p;\
    \ j < i; j++)\n      if (i % j == 0)\n        isPrime = false;\n    if (isPrime)\n\
    \      ans = i;\n    p = i * p;\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long a = 2;\n    while (a < res) {\n        res\
    \ = (res % a) + a;\n        a++;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp534htdga: /tmp/tmp534htdga.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143062
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long x = 2, y = n;\n    while ((x % y) == 0) {\n\
    \        x = y;\n        y = res * y % x;\n        ++res;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp64ol56i5: /tmp/tmp64ol56i5.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_prod = 1;\n    long max_factor = 1;\n    for (int i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n   \
    \         max_prod = n;\n        }\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpr906mdpy: /tmp/tmpr906mdpy.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143062
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = 2;\n    long i = 2;\n    // Loop till i equals n\n    while\
    \ (i <= n) {\n        // If i is a prime, res=n\n        if (n % i == 0)\n   \
    \         return i;\n        // If i is greater than its square root, res=n\n\
    \        if (i > sqrt(n))\n            return n;\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmppcr3k04m: /tmp/tmppcr3k04m.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143062
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i=2, l=n;\n    while(l % i == 0) {\n        ++i;\n        l /=\
    \ i;\n    }\n    return l;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp32zb68y5: /tmp/tmp32zb68y5.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    while (n % factor == 0) {\n        factor++;\n\
    \    }\n    while (n % factor == 0) {\n        factor--;\n    }\n    return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpto6k89vs: /tmp/tmpto6k89vs.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long primes[10000]; // Keep track of primes\n    long p = 3; // Start\
    \ with 3\n    long q = 2; // Start with 2\n    long factor = 3;\n    while (p\
    \ <= n / 2) {\n        if (n % p == 0) {\n            factor = p; // Get largest\
    \ factor of p\n            break; // Break out of while loop\n        }\n    \
    \    p = p + 1; // Move to next prime\n    }\n    long i = 2;\n    while (factor\
    \ != 1 && i < p) {\n        if (n % factor == 0) {\n            primes[q] = factor;\
    \ // Save this prime factor\n            q = q + 1;\n            factor = primes[q];\n\
    \        } else {\n            factor = factor * primes[i];\n        }\n     \
    \   i = i + 1;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp88wctxck: /tmp/tmp88wctxck.cpp:31: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long i, max_factor = 0;\n  long long m = n;\n  for (i = 2; i <= m; ++i)\
    \ {\n    // if (m % i == 0)\n    //   return i;\n    if (n % i == 0) {\n     \
    \ // cout << i << endl;\n      max_factor = i;\n      m /= i;\n      if (m ==\
    \ 1) {\n        break;\n      }\n    }\n  }\n  return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpp3heizm7: /tmp/tmpp3heizm7.cpp:24: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 2;\n    long i = 3;\n    while (i <= n && ans * ans < n)\
    \ {\n        while (n % i == 0) {\n            ans = i;\n            n /= i;\n\
    \        }\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp01gwyn7_: /tmp/tmp01gwyn7_.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2, p;\n  // Set i to 2, because no prime factor will be smaller\
    \ than 2, which is impossible to compute.\n  while (i <= sqrt(n)) {\n    p = i*i;\n\
    \    if (p == n) break;\n    if (p < n) i = i+2;\n  }\n  return i;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpz2y7_0ip: /tmp/tmpz2y7_0ip.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long long i = 2;\n    long long largestFactor = 2;\n    while (i <\
    \ n) {\n        if (n % i == 0) {\n            n /= i;\n            largestFactor\
    \ = i;\n        } else {\n            i++;\n        }\n    }\n    return largestFactor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmphp09v9ch: /tmp/tmphp09v9ch.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 3; // start from 3 and go to sqrt(n)\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return i;\n        i += 2;\n    }\n    // if we reach\
    \ here, then n is a prime\n    assert(false);\n    return 0;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpj06p1sj5: /tmp/tmpj06p1sj5.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2, factor = 2;\n    while (n > 1 && factor < n) {\n   \
    \     while (n % factor == 0) {\n            factor++;\n            n /= factor;\n\
    \        }\n        if (n > 1) {\n            max = factor;\n        }\n     \
    \   factor++;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmprqxtrujc: /tmp/tmprqxtrujc.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  if (n % 2 == 0) return 2;\n  long i = 3, r = n - 1, factor = 0;\n  while\
    \ (i <= r) {\n    while (n % i == 0) {\n      n /= i;\n      factor = i;\n   \
    \ }\n    i++;\n  }\n  return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpu4jd4mea: /tmp/tmpu4jd4mea.cpp:21: int main(): Assertion `candidate((330))
    == (11)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long limit = sqrt(n);\n    for (long i = 3; i <=\
    \ limit; i += 2) {\n        if (n % i == 0) {\n            ans = i;\n        \
    \    break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpkro9i5z3: /tmp/tmpkro9i5z3.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long largest = 2;\n  while (n != 1) {\n    while (n\
    \ % largest == 0) {\n      largest++;\n    }\n    n/=largest;\n  }\n  return largest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmprvh8x2w4: /tmp/tmprvh8x2w4.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long a = n/2;\n    long b = n/2;\n    long c = 1;\n    while (b !=\
    \ 1) {\n        while (a != 1) {\n            while (a % b == 0) {\n         \
    \       a /= b;\n            }\n            while (c % b == 0) {\n           \
    \     c /= b;\n            }\n            if (a == 1) {\n                break;\n\
    \            }\n            b /= 2;\n        }\n        b /= 2;\n    }\n    return\
    \ c;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpn0yq2pe6: /tmp/tmpn0yq2pe6.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 2;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            if (i > largest_prime) {\n       \
    \         largest_prime = i;\n            }\n        }\n        ++i;\n    }\n\
    \    return largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpl5nu1fwj: /tmp/tmpl5nu1fwj.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n < 2)\n        return n;\n    long i = 2;\n    for (long j =\
    \ 2; j <= n; j++) {\n        while ((n % j) == 0) {\n            i = j * i;\n\
    \            n = n / j;\n        }\n    }\n    return i;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmprj20q8_z: /tmp/tmprj20q8_z.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n / p) {\n        if (n % p == 0) return\
    \ p;\n        ++p;\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpibapyfcp: /tmp/tmpibapyfcp.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // We will need a prime table to speed up the algorithm\n    // We\
    \ will need to store the prime table in an array to make it faster\n    long long\
    \ prime_table[1000];\n    long long max_prime = 1;\n    long long factor = 0;\n\
    \    for (long long i = 2; i < n; i++) {\n        // If a prime factor is found\
    \ then we break the loop\n        if (n % i == 0) {\n            factor = 0;\n\
    \            // Find the largest prime factor that can be found if n divided by\
    \ i\n            while (n % i == 0) {\n                max_prime = i;\n      \
    \          n /= i;\n                factor++;\n            }\n        }\n    \
    \    prime_table[i] = max_prime * factor;\n    }\n    return prime_table[n];\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpudcrwwtm: /tmp/tmpudcrwwtm.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  // Find smallest prime factor.\n  long s = 2;\n  //\
    \ Find largest prime factor that does not exceed n.\n  long k = 3;\n  while (s\
    \ * k <= n) {\n    if (n % s == 0 && n / s < k) {\n      s = k;\n    } else if\
    \ (n % (s * k) == 0) {\n      k = s * k;\n    } else {\n      break;\n    }\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5ig3fz49: /tmp/tmp5ig3fz49.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 2;\n    long max_n = 2;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n   \
    \             n = n / i;\n                max_n = i;\n                max_factor\
    \ = i;\n            }\n        }\n        ++i;\n    }\n    return max_n;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpq6frtofx: /tmp/tmpq6frtofx.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long counter = 1;\n    while (n > 2 && is_prime(n)) {\n        counter++;\n\
    \        n /= 2;\n    }\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc16ymnva.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpc16ymnva.cpp:6:21: error: \u2018is_prime\u2019 was not\
    \ declared in this scope\n    6 |     while (n > 2 && is_prime(n)) {\n      |\
    \                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660143063
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int flag = 0;\n    long result = 1;\n    long max = 2;\n    long pwr2\
    \ = 2;\n    // Start iterating from 2 until n / pwr2 is less than or equal to\
    \ n.\n    while(n > 1) {\n        // If n is divisible by pwr, ignore it since\
    \ it is already divisible by max\n        if(n % pwr2 == 0) {\n            n /=\
    \ pwr2;\n            flag = 1;\n        } else {\n            // If n is prime,\
    \ ignore it since it is already a factor of max\n            if(n % max == 0)\
    \ {\n                n /= max;\n                flag = 1;\n            }\n   \
    \     }\n        // If flag is 1, then max * pwr2 is > n, so max is a prime factor\n\
    \        if(flag == 1) {\n            result++;\n            pwr2++;\n       \
    \ }\n        // If pwr reaches n, then max is divisible by n\n        if(pwr2\
    \ == n) {\n            max++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long long a=0;\n    long long b=1;\n    long long c=2;\n    long long\
    \ d=3;\n    long long m=2;\n    while(c <= n/2) {\n        if(n%c==0) {\n    \
    \        if(a>n) return 0;\n            if(b>n/c) return c;\n            if(b>n)\
    \ return 0;\n            if(d>n) return 0;\n            if(m>n/c) return c;\n\
    \            while(c*m<=n) {\n                if(n%(c*m)==0) {\n             \
    \       a=b;\n                    b=c;\n                    c=d;\n           \
    \         d=m;\n                    m=n;\n                    n=c*m;\n       \
    \         }\n                else {\n                    c=c*c;\n            \
    \        d=d*d;\n                    m=m*m;\n                }\n            }\n\
    \        }\n        c++;\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6jf15cus: /tmp/tmp6jf15cus.cpp:39: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 2;\n    while (ans * ans < n) {\n        ans = ans * ans;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpom02x1rw: /tmp/tmpom02x1rw.cpp:13: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n   long p = n;\n   long f = 2;\n   while ((p * f) <= n) {\n      f++;\n\
    \      if (n % f == 0) {\n         n = n / f;\n         p = p * f;\n      }\n\
    \   }\n   return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp2441x0id: /tmp/tmp2441x0id.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143064
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 2;\n    long max_factor_is_prime = false;\n    for\
    \ (long i = 2; i * i <= n; ++i) {\n        // if i is prime, no need to check\
    \ further.\n        if (n % i == 0) {\n            max_factor = i;\n         \
    \   max_factor_is_prime = true;\n        }\n        // if i is not prime, need\
    \ to check further.\n        else\n        {\n            // check if i is prime.\n\
    \            if (n % i == 0) {\n                for (long j = i * 2; j <= n; j\
    \ += i) {\n                    // if j is prime, no need to check further.\n \
    \                   if (n % j == 0) {\n                        max_factor = j;\n\
    \                        max_factor_is_prime = true;\n                    }\n\
    \                    // if j is not prime, need to check further.\n          \
    \          else\n                    {\n                        break;\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp1_xbjc5h: /tmp/tmp1_xbjc5h.cpp:37: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143064
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  // Find the largest divisor of n >= 1 that divides n, and divide the\
    \ remainder by it.\n  long d = n;\n  long r = n / 2;\n  while (d % 2 == 0) {\n\
    \    d = d / 2;\n    r = r / 2;\n  }\n  if (r == n) return n;\n  while (n % d\
    \ == 0) {\n    n = n / d;\n    d = d / 2;\n    r = r / 2;\n  }\n  return d;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpvlwi5sak: /tmp/tmpvlwi5sak.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143064
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    for (int i = 2; i <= n / 2; ++i) {\n        while\
    \ (n % i == 0) {\n            n /= i;\n            ans = max(ans, i);\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvbo_m1c.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpgvbo_m1c.cpp:9:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    9 |             ans =\
    \ max(ans, i);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpgvbo_m1c.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660143063
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i, a = n;\n    long b = 1;\n    long c;\n    while (b != 0) {\n\
    \        c = 0;\n        for (i = 2; i <= sqrt(a); i++) {\n            while (a\
    \ % i == 0) {\n                c += i;\n                a = a / i;\n         \
    \   }\n        }\n        if (c > b)\n            b = c;\n    }\n    return b;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    std::iota(primes, primes + n, 2);\n    long largest_prime = 0;\n \
    \   for (long i = 2; i < n; i++) {\n        while (n % primes[i] != 0) {\n   \
    \         largest_prime = primes[i];\n        }\n        primes[i]++;\n    }\n\
    \    return largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesx9g_cr.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpesx9g_cr.cpp:5:15: error: \u2018primes\u2019 was not declared\
    \ in this scope\n    5 |     std::iota(primes, primes + n, 2);\n      |      \
    \         ^~~~~~\n"
  stdout: ''
  timestamp: 1660143063
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 0;\n    long i = 2;\n    while (i <= n/i) {\n      \
    \  if (n % i == 0) {\n            factor = i;\n            break;\n        }\n\
    \        i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpdntr_g76: /tmp/tmpdntr_g76.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (ans != 1 && i < n) {\n\
    \        while (n % i == 0) {\n            n /= i;\n            ans++;\n     \
    \   }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6rw9kg5k: /tmp/tmp6rw9kg5k.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i=2,j;\n    // Check n and check if n is prime or not\n    if\
    \ (n==2) return 2;\n    if (n%2==0) return n;\n    for (i=3;i*i<=n;i=i+2) {\n\
    \        if (n%i == 0)\n        { \n            j = n/i;\n            while (j*j<n)\n\
    \            {\n                if (j%i == 0)\n                {\n           \
    \         return i;\n                }\n                else\n               \
    \ {\n                    j = j/i;\n                }\n            }\n        }\n\
    \    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpps696xpd: /tmp/tmpps696xpd.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  // Initializing a vector to hold all the prime factors\n\
    \  vector<long long int> primes;\n  // Initializing a variable to be a square\
    \ root of n\n  long long int square = sqrt(n);\n  // While the square root of\
    \ n is not 1\n  while (square != 1) {\n    // If the square root of n is less\
    \ than or equal to 1\n    if (square <= 1) {\n      // If n is not prime, return\
    \ 0\n      if (n == 1) {\n        return 0;\n      }\n      // If n is prime,\
    \ return the square root of n\n      return square;\n    }\n    // If the square\
    \ root of n is greater than 1\n    else {\n      // If the square root of n was\
    \ not already checked for primeness\n      bool isPrime = true;\n      // Iterating\
    \ from 2 to the square root of n\n      for (long long int i = 2; i <= square;\
    \ i++) {\n        // If n is not prime or if n is a square root of n\n       \
    \ if (!isPrime || n % i == 0) {\n          // Set isPrime to false to skip the\
    \ rest of the code\n          isPrime = false;\n          // Initialize a variable\
    \ called 'd' to be half of i\n          long long int d = i / 2;\n          //\
    \ If n is not prime and d is not equal to the square root of n\n          if (!isPrime\
    \ || n % (d + 1) != 0) {\n            // Set isPrime to false to skip the rest\
    \ of the code\n            isPrime = false;\n            // If n is not prime\
    \ and d is not equal to the square root of n, then n is prime\n            //\
    \ Add i to the primes vector\n            primes.push_back(d);\n          }\n\
    \        }\n      }\n      // If the isPrime variable is true, then n is prime\n\
    \      if (isPrime) {\n        primes.push_back(square);\n      }\n    }\n   \
    \ // Update square to be the square root of n minus 1\n    square = n - square;\n\
    \  }\n  // Return the size of the vector which is the largest prime factor of\
    \ n\n  return primes.size();\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi30jwf_1.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpi30jwf_1.cpp:7:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n    7 |   vector<long long int> primes;\n      |   ^~~~~~\n/tmp/tmpi30jwf_1.cpp:7:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi30jwf_1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi30jwf_1.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpi30jwf_1.cpp:7:10:\
    \ error: expected primary-expression before \u2018long\u2019\n    7 |   vector<long\
    \ long int> primes;\n      |          ^~~~\n/tmp/tmpi30jwf_1.cpp:39:13: error:\
    \ \u2018primes\u2019 was not declared in this scope\n   39 |             primes.push_back(d);\n\
    \      |             ^~~~~~\n/tmp/tmpi30jwf_1.cpp:45:9: error: \u2018primes\u2019\
    \ was not declared in this scope\n   45 |         primes.push_back(square);\n\
    \      |         ^~~~~~\n/tmp/tmpi30jwf_1.cpp:52:10: error: \u2018primes\u2019\
    \ was not declared in this scope\n   52 |   return primes.size();\n      |   \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_pfa = 1;\n    for (long pfa = 2; pfa < n; pfa++)\n      \
    \  if (n % pfa == 0) {\n            long new_pfa = pfa;\n            while (new_pfa\
    \ <= max_pfa) {\n                if (n % new_pfa == 0) max_pfa = new_pfa;\n  \
    \              new_pfa++;\n            }\n        }\n    return max_pfa;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpa5cybya0: /tmp/tmpa5cybya0.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    std::stack<long> prime_factors;\n    prime_factors.push(n);\n    long\
    \ next_n = 1;\n    // A prime factor > 1 can only occur after all its factors\
    \ have been pushed to the stack.\n    // This is because each push pushes a new\
    \ value on to the stack and thus it is the largest\n    // factor of the number\
    \ being tested at this point.\n    while (!prime_factors.empty()) {\n        long\
    \ current_n = prime_factors.top();\n        prime_factors.pop();\n        // Check\
    \ current number against all factors pushed onto the stack.\n        // If any\
    \ factor is larger than current_n then it is the largest factor of the number.\n\
    \        for (long i = next_n; i < current_n; i++) {\n            if (prime_factors.empty())\
    \ {\n                break;\n            }\n            long factor = prime_factors.top();\n\
    \            prime_factors.pop();\n            if (factor * i == current_n) {\n\
    \                next_n = factor;\n            }\n        }\n    }\n    return\
    \ next_n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpv1h13y6n: /tmp/tmpv1h13y6n.cpp:31: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long p = 2;\n    long q = 3;\n    while (p < n\
    \ / p) {\n        while (q * p < n / p) {\n            q++;\n        }\n     \
    \   if (q > 2) {\n            p++;\n        }\n    }\n    return p;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp23fayhjp: /tmp/tmp23fayhjp.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long p = 2;\n  long i = 0;\n  long max_count = 0;\n\
    \n  while (p < n) {\n    while (p * p < n) {\n      p++;\n      i++;\n    }\n\n\
    \    if (i > max_count) {\n      max_count = i;\n      p = 2;\n    }\n\n    while\
    \ (n % p) {\n      p++;\n      i++;\n    }\n\n    if (i > max_count) {\n     \
    \ max_count = i;\n      p = 2;\n    }\n  }\n\n  return p;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143070
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long result = n;\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n\
    \ /= 2;\n    } else {\n      long m = (n + 1) >> 1;\n      while (m % 2 == 0)\n\
    \        m /= 2;\n      if (m > n) {\n        n -= m;\n        m -= 1;\n     \
    \ }\n      while (n % m == 0)\n        n /= m;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n   long i = 2;\n   while (i < n) {\n      if (n % i == 0) {\n        \
    \ n = n / i;\n         return n;\n      }\n      i++;\n   }\n   return n;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpe74gy67f: /tmp/tmpe74gy67f.cpp:18: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long result = 1;\n    long max_factor = 1;\n    while ((n % result)\
    \ == 0)\n        max_factor++;\n    for (long i = 2; i <= max_factor; i++) {\n\
    \        while ((n % i) == 0)\n            n /= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long result = 0;\n    assert(n >= 2);\n    // loop from largest to\
    \ smallest number\n    for(long i=n-1; i>0; i--) \n    {\n        long check =\
    \ 1;\n        // loop until it divides n\n        for(long j=i*2; j<n; j+=i) \n\
    \        {\n            check *= j;\n        }\n        if(check == n) \n    \
    \    {\n            result = i;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpsu15xtex: /tmp/tmpsu15xtex.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long ret = 1;\n    long limit = (long) (sqrt(n));\n    for (long i\
    \ = 1; i <= limit; i++) {\n        if (n % i == 0) {\n            if (i != ret)\
    \ {\n                ret = i;\n            }\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp13mf3tne: /tmp/tmp13mf3tne.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tlong a = 2, b = 2, c = 3, d = 2, e = 2, f = 2;\n\t// Scan for prime\
    \ factors until we find one that is factorizable.\n\twhile (n > 1) {\n\t\t// If\
    \ n is a product of two primes, its largest factor is \n\t\t// the product of\
    \ the two primes.\n\t\tif (n % a == 0 && n % b == 0) {\n\t\t\tn = n / a;\n\t\t\
    \twhile (n % c == 0 && n % d == 0) {\n\t\t\t\tn = n / c;\n\t\t\t\twhile (n % e\
    \ == 0 && n % f == 0) {\n\t\t\t\t\tn = n / e;\n\t\t\t\t\twhile (n > 1) {\n\t\t\
    \t\t\t\ta *= b;\n\t\t\t\t\t\tb *= c;\n\t\t\t\t\t\tc *= d;\n\t\t\t\t\t\td *= f;\n\
    \t\t\t\t\t\te *= f;\n\t\t\t\t\t\tf *= f;\n\t\t\t\t\t\tn--;\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t\t// Divide n into its prime factors.\n\t\twhile (n % d\
    \ == 0) {\n\t\t\tn = n / d;\n\t\t\twhile (n % f == 0) {\n\t\t\t\tn = n / f;\n\t\
    \t\t\twhile (n > 1) {\n\t\t\t\t\ta *= b;\n\t\t\t\t\tb *= c;\n\t\t\t\t\tc *= d;\n\
    \t\t\t\t\td *= f;\n\t\t\t\t\te *= f;\n\t\t\t\t\tf *= f;\n\t\t\t\t\tn--;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Base case:\n    if (n < 2) {\n        // Return any prime greater\
    \ than 2.\n        return 2;\n    }\n\n    long smallest_factor = 2;\n    // Set\
    \ n = 3 because n is odd.\n    long factor = 3;\n    long largest_factor = smallest_factor;\n\
    \    long i = 1;\n    while (i != smallest_factor) {\n        // Set smallest_factor\
    \ = 2 because 3 is the smallest factor of n.\n        smallest_factor = factor;\n\
    \        // Set factor = 2 because 3 is the smallest factor of n.\n        factor\
    \ = 2;\n        if (n > factor) {\n            // Set largest_factor = 2 because\
    \ 3 is the largest factor of n.\n            largest_factor = factor;\n      \
    \  }\n        factor = factor * i;\n        i++;\n    }\n    return largest_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp16bw7hra: /tmp/tmp16bw7hra.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1);\n\t// Check trivial case\n\tif (n == 1) return 1;\n\t\
    // Check composite case\n\tif (n % 2 == 0) return 2;\n\t// Check odd-even case\n\
    \tfor (long i = 3; i <= n; i += 2) {\n\t\tif (n % i == 0) return i;\n\t}\n\treturn\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpj2xdqd5v: /tmp/tmpj2xdqd5v.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long f = 3;\n    long x = 2;\n    long p = 1;\n    while (x != 1 &&\
    \ f*f <= n) {\n        if (n % x == 0) {\n            p *= x;\n            if\
    \ (p > f) {\n                f = p;\n            }\n        }\n        x <<= 1;\n\
    \    }\n    return f;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p=2, q=2, r;\n    while(p <= n && q <= n) {\n        r=n/p;\n\
    \        if(r*r == n) \n            return p;\n        else if( (r*r < n) && (r\
    \ % 2) == 0) \n            q = p*p+q;\n        else\n            p = p*p+q;\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp9899lswd: /tmp/tmp9899lswd.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long a = 0;\n    long b = n/2;\n    while (true) {\n        assert(b\
    \ <= 100);\n        if (n % b == 0) {\n            return b;\n        }\n    \
    \    while (n % b != 0) {\n            if (n % b == 1) {\n                a =\
    \ b;\n                n /= b;\n            }\n            else\n             \
    \   n /= b;\n        }\n        assert(n % b == 1);\n        b = n/2;\n    }\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp43a2b56u: /tmp/tmp43a2b56u.cpp:20: long int largest_prime_factor(long
    int): Assertion `n % b == 1'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long maxPrime = 1;\n    long maxPrimeCount = 0;\n    for (long i =\
    \ 2; i <= n; i++) {\n        if (n % i == 0) {\n            maxPrimeCount = i;\n\
    \            maxPrime = i;\n        }\n    }\n    return maxPrimeCount;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpdjbtod7a: /tmp/tmpdjbtod7a.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143065
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long i = 3;\n    while (i * factor <= n) {\n\
    \        while ((n % i) == 0) {\n            factor = i;\n            n /= i;\n\
    \        }\n        i++;\n    }\n    return factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpj28qn5fz: /tmp/tmpj28qn5fz.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long factor = 2;\n    while (i < n && n % i == 0)\
    \ {\n        i += 2;\n        factor = i;\n    }\n    if (i == n) {\n        factor++;\n\
    \    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphvcvkgwn: /tmp/tmphvcvkgwn.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long count = 0;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0)\n            n = n / i;\n        count++;\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp_n5z1lr8: /tmp/tmp_n5z1lr8.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 2) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n \
    \       return 2;\n    }\n    long i = 2;\n    while (i < n / 2) {\n        if\
    \ (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5ygjsjkc: /tmp/tmp5ygjsjkc.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    for(long i = 2; i <= n; i++) {\n        if(n %\
    \ i == 0)\n            n = n / i;\n        else\n            res++;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpbk0czl35: /tmp/tmpbk0czl35.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long maxpf, p, ans;\n    ans = 1;\n    maxpf = 1;\n    p = 2;\n  \
    \  while ((n % p) == 0) {\n        p = p * 2;\n        if (p > maxpf) {\n    \
    \        maxpf = p;\n            ans = p;\n        }\n    }\n    while ((n % ans)\
    \ == 0) {\n        ans = ans * 2;\n        if (ans > maxpf) {\n            maxpf\
    \ = ans;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6i97cg2f: /tmp/tmp6i97cg2f.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here.\n    long a[n];\n    long i=0;\n    long\
    \ j=0;\n    while(j<n && i<n)\n    {\n        if(n%a[i] == 0)\n        {\n   \
    \         a[i]=0;\n            i++;\n            j++;\n        }\n        else\
    \ if(a[i]==0)\n        {\n            a[i]=1;\n            i++;\n            j++;\n\
    \        }\n    }\n    return a[n-1];\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143071
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p = 3;\n    for (long i = 1; i < n; i++) {\n        while (n\
    \ % i == 0) {\n            n = n / i;\n            p++;\n        }\n    }\n  \
    \  return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 2);\n    // Write your logic here\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpujhqg8q9: /tmp/tmpujhqg8q9.cpp:10: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if(n<=2){\n        return 1;\n    }\n    long p = n; \n    long c\
    \ = 2; \n    while(p <= sqrt(n)){\n        if(n % p == 0){\n            c++;\n\
    \            if(c==3){\n                break;\n            }\n        }\n   \
    \     p++;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjawds2mi: /tmp/tmpjawds2mi.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    // Check if n is a prime (2 <= sqrt(n) \u2264\
    \ sqrt(n))\n    long d = 1;\n    while (d <= n / 2) {\n        if (n % d == 0)\
    \ {\n            return d;\n        }\n        d += 2;\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpf0wmrox3: /tmp/tmpf0wmrox3.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  if (n == 2) return 1;\n  if (n == 1 || n % 2 == 0)\
    \ return n;\n  // Find the largest factor by trial division\n  long factor = 3;\n\
    \  while (n % factor != 0) {\n    factor++;\n  }\n  // If it is not a prime, factor\
    \ should be even.\n  assert(n % factor == 0);\n  return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpr02zlha8: /tmp/tmpr02zlha8.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long max_factor = 0;\n  for (long i = 1; i <= n; ++i) {\n    for (long\
    \ j = 2; j <= i; ++j) {\n      if (i % j == 0) {\n        break;\n      }\n  \
    \  }\n    if (j > max_factor) {\n      max_factor = j;\n    }\n  }\n  return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4i6c0ld.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpd4i6c0ld.cpp:12:9: error: \u2018j\u2019 was not declared\
    \ in this scope\n   12 |     if (j > max_factor) {\n      |         ^\n"
  stdout: ''
  timestamp: 1660143065
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    for (long factor = 2; factor <= n; factor++)\n\
    \        while (n % factor == 0)\n            max_factor = factor;\n    return\
    \ max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143071
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n   long m = 2, i = 3, j = 0;\n   while (i <= n) {\n       // i starts\
    \ at 3 because 2 was the first prime factor.\n       while (n % i == 0) {\n  \
    \         j++;\n           i <<= 1;\n       }\n       if (j > m)\n           m\
    \ = j;\n       i *= 2;\n   }\n   return m;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp8j5ef7il: /tmp/tmp8j5ef7il.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // your code goes here\n    long long int m = n;\n    while (n > 1)\
    \ {\n        while (n % 2 == 0)\n            n = n / 2;\n        while (n % 3\
    \ == 0)\n            n = n / 3;\n        while (n % 5 == 0)\n            n = n\
    \ / 5;\n        while (n % 7 == 0)\n            n = n / 7;\n        while (n %\
    \ 11 == 0)\n            n = n / 11;\n        while (n % 13 == 0)\n           \
    \ n = n / 13;\n        while (n % 17 == 0)\n            n = n / 17;\n        while\
    \ (n % 19 == 0)\n            n = n / 19;\n        if (n != 1) {\n            m\
    \ = n;\n        }\n        n = m + 1;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143071
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l = n, p = 2;\n    while (l % p) {\n        l /= p;\n       \
    \ p++;\n    }\n    return l;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqld35fy7: /tmp/tmpqld35fy7.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  // Sieve of Eratosthenes with trial division.\n  long a = 2;\n  long\
    \ b = 2;\n  long c = 2;\n  for (long i = 3; i * i <= n; i += 1) {\n    while ((n\
    \ % i) == 0) {\n      a += i;\n      n /= i;\n    }\n    while ((n % b) == 0)\
    \ {\n      b += i;\n      n /= i;\n    }\n    while ((n % c) == 0) {\n      c\
    \ += i;\n      n /= i;\n    }\n  }\n  return a;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpn7c5pih0: /tmp/tmpn7c5pih0.cpp:28: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max = n;\n    for(long i = 2; i <= max; i++)\n        if(n %\
    \ i == 0)\n            max = i;\n    return max;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpdvd1ene8: /tmp/tmpdvd1ene8.cpp:13: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143066
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 1;\n    long ans = 0;\n    long t;\n    while (i < n) {\n\
    \        t = i;\n        i = i + 1;\n        while(i > 1) {\n            if (n\
    \ % i == 0) {\n                ans = i;\n                break;\n            }\n\
    \            i = i * 2;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143071
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long p = 1;\n    long i = 3;\n    int no_of_tries\
    \ = 10;\n    while (!is_prime(n)) {\n        max_factor = i;\n        while (i\
    \ < n && is_prime(i)) {\n            i = i + 3;\n        }\n        if (i > max_factor)\
    \ max_factor = i;\n        p = i * p;\n        no_of_tries--;\n        if (no_of_tries\
    \ == 0) {\n            break;\n        }\n    }\n    return max_factor;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifb_wqlb.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpifb_wqlb.cpp:9:13: error: \u2018is_prime\u2019 was not\
    \ declared in this scope\n    9 |     while (!is_prime(n)) {\n      |        \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660143066
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int i = 2;\n    while (i < n) {\n        if (n % i == 0)\n       \
    \     return i;\n        ++i;\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp2r8frcyt: /tmp/tmp2r8frcyt.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    \n    \n    long i = 2;\n    long largest = i;\n    \n    while(i\
    \ <= n) {\n        if(n % i == 0) {\n            largest = i;\n        }\n   \
    \     i++;\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjarlrir3: /tmp/tmpjarlrir3.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Write your code here.\n    long largest = 1;\n    int i; \n   \
    \ for (i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            break;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpvrpdx6sc: /tmp/tmpvrpdx6sc.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 2) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n \
    \       return 2;\n    }\n    long a = largest_prime_factor(n/2);\n    if (a %\
    \ 2 == 0) {\n        return a;\n    }\n    for (long b = 2; b * b <= n; b += 2)\
    \ {\n        if (n % b == 0) {\n            return b;\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpt2nmehpp: /tmp/tmpt2nmehpp.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 2;\n    while (n % 2 == 0) {\n        largest = largest\
    \ * 2;\n        n = n / 2;\n    }\n    for (long i = 3; i <= largest; i++) {\n\
    \        while (n % i == 0) {\n            largest = i;\n            n = n / i;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6qoc63dz: /tmp/tmp6qoc63dz.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Initialize your answer as largest prime factor.\n    long largest_prime_factor\
    \ = n;\n    // Check all odd numbers from 2 to sqrt(n). If n is prime, then return\
    \ it.\n    for (long i = 2; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n \
    \           largest_prime_factor = i;\n    return largest_prime_factor;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp2o8ncrax: /tmp/tmp2o8ncrax.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n <= 2) return n;\n    std::vector<long> primes;\n    primes.push_back(n);\n\
    \    for (long i = 2; i <= n / i; ++i) {\n        for (long j = i * i; j <= n;\
    \ j += i) {\n            primes.push_back(j);\n        }\n    }\n    primes.push_back(n);\n\
    \    long max_pf = 1;\n    for (auto pf : primes) {\n        if (pf > max_pf &&\
    \ pf % 2 == 1) max_pf = pf;\n    }\n    return max_pf;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpym4ta3td: /tmp/tmpym4ta3td.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n <= 1)\n        return n;\n    if (n % 2 == 0)\n        return\
    \ 2;\n    long p = 1;\n    while (n % p != 0) {\n        p++;\n    }\n    while\
    \ (n % p == 0) {\n        p = p * 2 + 1;\n    }\n    return p;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmplvle84kc: /tmp/tmplvle84kc.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  // Use a sieve of Eratosthenes \n  assert(n > 1);\n  vector<bool> is_prime(n,\
    \ false);\n  // Initialize all multiples of 2 as primes\n  for (long i = 3; i\
    \ * i <= n; ++i) {\n    if (is_prime[i]) {\n      for (long j = i; i * j <= n;\
    \ ++j)\n        is_prime[i * j] = false;\n    }\n  }\n  // For all primes greater\
    \ than 1, test if they are factors of n\n  while (true) {\n    long i = 2;\n \
    \   while (!is_prime[i]) {\n      if (i * i >= n) {\n        // Reached the highest\
    \ number in the sieve and no factor is found\n        return 0;\n      }\n   \
    \   // Increment i to the square of i\n      ++i;\n    }\n    // If i is a factor\
    \ of n, return i\n    if (n == i)\n      return i;\n    // If i is a prime and\
    \ n is a divisor, change n to i\n    if (is_prime[i] && n / i != i) {\n      n\
    \ = i;\n    }\n  }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi6mfpk0c.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpi6mfpk0c.cpp:7:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n    7 |   vector<bool> is_prime(n, false);\n      |   ^~~~~~\n\
    /tmp/tmpi6mfpk0c.cpp:7:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi6mfpk0c.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi6mfpk0c.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpi6mfpk0c.cpp:7:10:\
    \ error: expected primary-expression before \u2018bool\u2019\n    7 |   vector<bool>\
    \ is_prime(n, false);\n      |          ^~~~\n/tmp/tmpi6mfpk0c.cpp:10:9: error:\
    \ \u2018is_prime\u2019 was not declared in this scope\n   10 |     if (is_prime[i])\
    \ {\n      |         ^~~~~~~~\n/tmp/tmpi6mfpk0c.cpp:18:13: error: \u2018is_prime\u2019\
    \ was not declared in this scope\n   18 |     while (!is_prime[i]) {\n      |\
    \             ^~~~~~~~\n/tmp/tmpi6mfpk0c.cpp:30:9: error: \u2018is_prime\u2019\
    \ was not declared in this scope\n   30 |     if (is_prime[i] && n / i != i) {\n\
    \      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 2);\n    long i, largest = n;\n    for (i = 2; i <= largest;\
    \ ++i) {\n        if (n % i == 0) {\n            largest = i;\n        }\n   \
    \ }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_ss6qzg8: /tmp/tmp_ss6qzg8.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143067
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l2 = sqrt(n);\n    for (long i = 3; i <= l2; i += 2) {\n    \
    \    while (n % i == 0) {\n            n /= i;\n        }\n    }\n    if (n >\
    \ 2) {\n        std::cout << \"n is not a prime\" << std::endl;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp91e_7cn4: /tmp/tmp91e_7cn4.cpp:19: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: 'n is not a prime

    '
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // Initialize n to 1.\n    long i = 2;\n    // While n is not prime:\n\
    \    while (n%i == 0) {\n        // Set i to i*2.\n        i = i * 2;\n      \
    \  // If n is prime, set n to its largest factor i.\n        if ((n%i) == 0) {\n\
    \            // We are done.\n            return i;\n        }\n    }\n    //\
    \ n must be prime. So, return the largest factor of n-1.\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpt9u44atc: /tmp/tmpt9u44atc.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long n1 = (n+2)/3;\n    if(n1==1)\n        return n;\n    while(n1%2==0)\
    \ {\n        n1=n1/2;\n    }\n    while(n1%3==0) {\n        n1=n1/3;\n    }\n\
    \    return n1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpndx3yguj: /tmp/tmpndx3yguj.cpp:19: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long prime = 1;\n    while (n > 1) {\n        if (n % prime == 0)\
    \ {\n            while (n % prime == 0) {\n                n /= prime;\n     \
    \           prime++;\n            }\n            if (n > 1)\n                n\
    \ = prime;\n            else\n                break;\n        } else {\n     \
    \       n /= prime;\n            prime++;\n        }\n    }\n    return n;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp51yc42oq: /tmp/tmp51yc42oq.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long max_factor = 0;\n  long smallest_factor = 2;\n  while (n%2 == 0)\
    \ {\n    max_factor++;\n    smallest_factor++;\n    n/=2;\n  }\n  while (n%3 ==\
    \ 0) {\n    max_factor++;\n    smallest_factor++;\n    n/=3;\n  }\n  while (n%5\
    \ == 0) {\n    max_factor++;\n    smallest_factor++;\n    n/=5;\n  }\n  while\
    \ (smallest_factor <= max_factor) {\n    if (n % smallest_factor == 0) {\n   \
    \   n = (n-1) /smallest_factor;\n    } else {\n      n = (n-1) / smallest_factor;\n\
    \      break;\n    }\n    smallest_factor++;\n  }\n  return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpnrzn_s51: /tmp/tmpnrzn_s51.cpp:35: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long f = 2;\n    long i = 1;\n    while (f * f < n)\n        f = i\
    \ * ++i;\n    return f;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxraenw7l: /tmp/tmpxraenw7l.cpp:13: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long prime = n;\n    while (true) {\n        if\
    \ (n % prime == 0) {\n            if (n%prime == 0) {\n                return\
    \ prime;\n            } else {\n                res = res;\n            }\n  \
    \      }\n        prime = prime + 2;\n    }\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp9co2t00v: /tmp/tmp9co2t00v.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  int j = 0;\n  // int k = sqrt(n);\n\
    \  long k = std::sqrt(n);\n  for (; k > 1; j++, k--) {\n    if (n % k == 0) {\n\
    \      break;\n    }\n  }\n  assert(j > 0);\n  while (n % j == 0) {\n    j++;\n\
    \  }\n  return j;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjkjh7tfk: /tmp/tmpjkjh7tfk.cpp:16: long int largest_prime_factor(long
    int): Assertion `j > 0'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_value = n;\n    long i = 2;\n    while (i < max_value) {\n\
    \        if (n % i == 0) {\n            max_value = i;\n        }\n        ++i;\n\
    \    }\n    return max_value;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmppwds1ekz: /tmp/tmppwds1ekz.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2; \n    long q = n; \n    long r = n;\n    long largest_prime_factor\
    \ = 1;\n\n    for(long i = 3; i < q; i += 2) { \n        if(n % i == 0) {\n  \
    \          p = i;\n            q = n/p;\n        }\n    } \n    for(long i = 3;\
    \ i <= r; i += 2) { \n        if(n % i == 0) { \n            q = i;\n        \
    \    r/=i;\n        } \n        if(q == 1) \n            break; \n    } \n   \
    \ if(q > largest_prime_factor) {\n        largest_prime_factor = q;\n    } \n\
    \    return largest_prime_factor; \n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpoof392k5: /tmp/tmpoof392k5.cpp:32: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long factor = 1;\n    while(i <= n/2) {\n       \
    \ if(n%i == 0) {\n            factor *= i;\n            n /= i;\n        }\n \
    \       i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwzgjm0hx: /tmp/tmpwzgjm0hx.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long p = n;\n    long r = 2;\n    while (p % r == 0) {\n        p\
    \ = p*r;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6fmihc9j: /tmp/tmp6fmihc9j.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_divisor = 1;\n    long max_divisor_index = 0;\n    for (long\
    \ divisor = 2; divisor <= n; ++divisor) {\n        if (n % divisor == 0) {\n \
    \           long diff = divisor - max_divisor;\n            if (diff > max_divisor)\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = diff;\n            }\n        }\n    }\n    return max_divisor_index;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpkq8puhol: /tmp/tmpkq8puhol.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long a=1, b=2, limit=n;\n    while(b <= limit) {\n        if(n%b ==\
    \ 0) {\n            break;\n        }\n        a = b;\n        b = a*2;\n    }\n\
    \    while(b > limit) {\n        a = b;\n        b = a/2;\n    }\n    return a;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpazgkahxi: /tmp/tmpazgkahxi.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  // Search for the\
    \ next prime with lower bound\n  int limit = (int)sqrt(n) + 1;\n  long factor\
    \ = 1;\n  while (limit <= n) {\n    if (n % limit == 0) {\n      factor *= limit;\n\
    \      n /= limit;\n    } else {\n      // n is not prime\n      return factor;\n\
    \    }\n    limit++;\n  }\n  // n is prime, return it\n  return factor;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmplgxoy24f: /tmp/tmplgxoy24f.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 2);\n  long max = 2;\n  for (long i = 3; i <= n / 2; i +=\
    \ 2) {\n    while (n % i == 0) {\n      max = i;\n      n = n / i;\n    }\n  }\n\
    \  return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp1e1g14g_: /tmp/tmp1e1g14g_.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    for (long i = 2; i < n; i++) {\n        while\
    \ (n % i == 0)\n            n = n / i;\n        if (n > 1)\n            return\
    \ n;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpon2ya7ms: /tmp/tmpon2ya7ms.cpp:16: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    long isPrime = 1;\n    long sqrtN\
    \ = sqrt(n);\n    while (sqrtN % i == 0) {\n        isPrime = 0;\n        for\
    \ (i = 2; i <= sqrtN; i++) {\n            if (n % i == 0) {\n                isPrime\
    \ = 1;\n                res = i;\n                break;\n            }\n    \
    \    }\n        if (isPrime) {\n            break;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp2e5gvwbt: /tmp/tmp2e5gvwbt.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long i, p, count = 1;\n    for (i = 2; i <= sqrt(n); i++)\n      \
    \  if (n % i == 0) {\n            p = i;\n            break;\n        }\n    for\
    \ (int j = 2; j <= n; j++)\n        if (n % j == 0) {\n            p = n;\n  \
    \          count++;\n            break;\n        }\n    \n    return count;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpn7y8wg0y: /tmp/tmpn7y8wg0y.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long max_factor = 1;\n  long max_factor_candidate\
    \ = 1;\n  for (long i = 2; i < n; ++i) {\n    if (n % i == 0) {\n      max_factor_candidate\
    \ = i;\n    }\n  }\n  assert(max_factor_candidate > 1);\n  while (max_factor_candidate\
    \ != max_factor) {\n    max_factor = max_factor_candidate;\n    for (long i =\
    \ 2; i <= max_factor; ++i) {\n      if (n % i == 0) {\n        max_factor_candidate\
    \ = i;\n      }\n    }\n  }\n  return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpdqywy25f: /tmp/tmpdqywy25f.cpp:27: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int flag = 0, p = 2;\n    while (n > 1) {\n        if (n % p == 0)\
    \ {\n            flag = 1;\n            break;\n        }\n        ++p;\n    }\n\
    \    if (!flag) {\n        return n;\n    }\n    long maxFact = p, maxFactP =\
    \ 1;\n    for (int i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n        \
    \    long fp = fpp_prime_factors(i, p);\n            if (fp > maxFactP) {\n  \
    \              maxFactP = fp;\n                maxFact = i;\n            }\n \
    \       }\n    }\n    return maxFact;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcflxsikj.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpcflxsikj.cpp:19:23: error: \u2018fpp_prime_factors\u2019\
    \ was not declared in this scope\n   19 |             long fp = fpp_prime_factors(i,\
    \ p);\n      |                       ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 0)\n        return 0;\n    if (n & 1 == 0)\n        return\
    \ n;\n    long i = 2;\n    while (i < n) {\n        // If it is even, divide by\
    \ 2, else skip over multiples of i.\n        if (n % i == 0)\n            i +=\
    \ 2;\n        else\n            i += 1;\n    }\n    return i;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp9faaiu2d: /tmp/tmp9faaiu2d.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long l = n;\n    // Use Sieve of Eratosthenes for finding largest\
    \ prime factor.\n    while (l % 2 == 0) {\n        l *= 2;\n    }\n    for (long\
    \ i = 3; i <= l; i += 2) {\n        if (l % i == 0) {\n            l /= i;\n \
    \       }\n    }\n    return l;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphz12hx2t: /tmp/tmphz12hx2t.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    // write your code here\n    long n = n; //n is given as user input\n\
    \    int k = 0;\n    long m = n/2;\n    bool flag = false;\n    int i = 1;\n \
    \   while(i<m) {\n        if(n%i==0) {\n            flag = true;\n           \
    \ break;\n        }\n        i++;\n    }\n    if(flag == false){\n        return\
    \ n;\n    }\n    while(i<m) {\n        if(n%i==0) {\n            m = m*i;\n  \
    \          i++;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprbmjsju8.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmprbmjsju8.cpp:6:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n    6 |     long n = n; //n is given as user input\n\
    \      |          ^\n"
  stdout: ''
  timestamp: 1660143068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  long long i;\n  // Base case\n  if (n <= 1)\n    return n;\n  // Mark\
    \ the i as 2\n  i = 2;\n  while (i <= sqrt(n)) {\n    while (n % i == 0) {\n \
    \     n = n / i;\n    }\n    // Mark the i as i-1\n    i++;\n  }\n  return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpbraggeyd: /tmp/tmpbraggeyd.cpp:23: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long a = 2, b = 3, c;\n    // First find a divisor of n that is >=\
    \ 2\n    // Test by trial division\n    do {\n        c = a % b;\n    } while\
    \ (b % a != 0);\n    a = c;\n    // Find the smallest factor\n    do {\n     \
    \   if (n % a == 0) {\n            n = n / a;\n            break;\n        }\n\
    \        a = a + 1;\n    } while (a <= n);\n    return a;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660143074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n >= 1 && n <= 10000);\n  if (n == 1)\n    return 1;\n  long\
    \ i = 2;\n  long k = 0;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) {\n   \
    \   i = i + 1;\n      k = i;\n    }\n    else {\n      n = n / i;\n      k = i;\n\
    \    }\n  }\n  return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp0dqjx7w5: /tmp/tmp0dqjx7w5.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  // Prime factor list from Sieve of Eratosthenes. A\
    \ sieve of Eratosthenes\n  // is a prime list which only contains odd numbers.\n\
    \  // https://www.geeksforgeeks.org/sieve-of-eratosthenes/\n  vector<long> prime_factor(2\
    \ * n + 1, 2);\n  prime_factor[0] = 0;\n  for (long i = 2; i <= n; i++) {\n  \
    \  for (long j = i*i; j < prime_factor.size(); j += i) {\n      prime_factor[j]\
    \ = i;\n    }\n  }\n  // Return the first element in the prime factor.\n  return\
    \ prime_factor[0];\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpplc4rw5v.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpplc4rw5v.cpp:9:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n    9 |   vector<long> prime_factor(2 * n + 1, 2);\n      | \
    \  ^~~~~~\n/tmp/tmpplc4rw5v.cpp:9:3: note: suggested alternatives:\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpplc4rw5v.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpplc4rw5v.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpplc4rw5v.cpp:9:10:\
    \ error: expected primary-expression before \u2018long\u2019\n    9 |   vector<long>\
    \ prime_factor(2 * n + 1, 2);\n      |          ^~~~\n/tmp/tmpplc4rw5v.cpp:10:3:\
    \ error: \u2018prime_factor\u2019 was not declared in this scope\n   10 |   prime_factor[0]\
    \ = 0;\n      |   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\
    \ 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
    \ 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\
    \ 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\
    \ 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,\
    \ 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,\
    \ 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\
    \ 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\
    \ 947, 953, 967, 971, 977, 983, 991, 997};\n    int len = sizeof(primes) / sizeof(primes[0]);\n\
    \    long ans = 1;\n    int i;\n    for (i = 2; i <= n; i++) {\n        if (n\
    \ % primes[i] == 0) {\n            ans = primes[i];\n            break;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpna_d3g8n: /tmp/tmpna_d3g8n.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long max_prime_counter = 0;\n    long largest_prime_counter = 0;\n\
    \    // Store all prime numbers smaller than n\n    bool prime[100];\n    memset(prime,\
    \ 0, sizeof(prime));\n    for (int i = 0; i <= n; i++) {\n        if (prime[i])\
    \ {\n            prime[i] = false;\n        }\n    }\n    for (int i = 3; i <=\
    \ n; i++) {\n        // If no prime numbers in array, continue to the next iteration.\n\
    \        if (!prime[i]) {\n            continue;\n        }\n        prime[0]\
    \ = false;\n        for (int j = 2; j <= i; j++) {\n            if (i % j == 0)\
    \ {\n                prime[0] = false;\n                break;\n            }\n\
    \        }\n        // If a prime number is found, store its index.\n        if\
    \ (prime[0]) {\n            prime[0] = false;\n            max_prime_counter++;\n\
    \            // Find the largest prime number.\n            if (max_prime_counter\
    \ > largest_prime_counter) {\n                largest_prime_counter = max_prime_counter;\n\
    \            }\n        }\n    }\n    return largest_prime_counter;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpkn2nr22l: /tmp/tmpkn2nr22l.cpp:41: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\tif (n < 2)\n\t\treturn 2;\n\tlong max_fact = 1, max_f = 0;\n\tfor (long\
    \ f = 3; f <= n; f += 2)\n\t\tif (n % f == 0)\n\t\t\tmax_fact = f; else\n\t\t\t\
    max_fact = max_fact;\n\twhile (max_fact * max_fact <= n)\n\t\tmax_fact += max_fact\
    \ + 1;\n\tfor (long f = 3; f * f <= n; f += 2)\n\t\tif (n % f == 0)\n\t\t\tmax_f\
    \ = f; else\n\t\t\tmax_f = max_f;\n\treturn max_f;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpf9w4svmo: /tmp/tmpf9w4svmo.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n\t// write your code here\n\tint flag = 0;\n\tint count = 0;\n\tint result\
    \ = 1;\n\tfor (int i = 2; i * i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tresult++;\n\
    \t\t}\n\t}\n\tfor (int i = 2; i <= result; i++) {\n\t\tif (n / i == i) {\n\t\t\
    \tcount++;\n\t\t}\n\t\tif (count == flag) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqamwec7o: /tmp/tmpqamwec7o.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
    \ n) {\n    long k = n;\n    long i = 2;\n    while(i < k) {\n        k = k/i;\n\
    \        ++i;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpz1mjyy_z: /tmp/tmpz1mjyy_z.cpp:15: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143069
