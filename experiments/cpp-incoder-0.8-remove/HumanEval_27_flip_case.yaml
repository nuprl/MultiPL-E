name: HumanEval_27_flip_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
  \ lowercase characters to uppercase and uppercase to lowercase.\nstd::string flip_case(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
  These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    string copy = string;\n    for (auto &c : copy) {\n        if (std::tolower(c)\
    \ != c) {\n            std::swap(c, std::toupper(c));\n        }\n        if (std::toupper(c)\
    \ != c) {\n            std::swap(c, std::tolower(c));\n        }\n    }\n    return\
    \ copy;", "  for (char &c : string) {\n    if ((c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z')) {\n      c = toupper(c);\n    } else {\n      c = tolower(c);\n\
    \    }\n  }\n  return string;", "  string s(string);\n  for (auto &c : s) {\n\
    \    bool flag;\n    if (c == 'a') flag = true;\n    else if (c == 'A') flag =\
    \ false;\n    else if (c == 'b') flag = true;\n    else if (c == 'B') flag = false;\n\
    \    else if (c == 'c') flag = true;\n    else if (c == 'C') flag = false;\n \
    \   else if (c == 'd') flag = true;\n    else if (c == 'D') flag = false;\n  \
    \  else if (c == 'e') flag = true;\n    else if (c == 'E') flag = false;\n   \
    \ else if (c == 'f') flag = true;\n    else if (c == 'F') flag = false;\n    else\
    \ if (c == 'g') flag = true;\n    else if (c == 'G') flag = false;\n    else if\
    \ (c == 'h') flag = true;\n    else if (c == 'H') flag = false;\n    else if (c\
    \ == 'i') flag = true;\n    else if (c == 'I') flag = false;\n    else if (c ==\
    \ 'j') flag = true;\n    else if (c == 'J') flag = false;\n    else if (c == 'k')\
    \ flag = true;\n    else if (c == 'K') flag = false;\n    else if (c == 'l') flag\
    \ = true;\n    else if (c == 'L') flag = false;\n    else if (c == 'm') flag =\
    \ true;\n    else if (c == 'M') flag = false;\n    else if (c == 'n') flag = true;\n\
    \    else if (c == 'N') flag = false;\n    else if (c == 'o') flag = true;\n \
    \   else if (c == 'O') flag = false;\n    else if (c == 'p') flag = true;\n  \
    \  else if (c == 'P') flag = false;\n    else if (c == 'q') flag = true;\n   \
    \ else if (c == 'Q') flag = false;\n    else if (c == 'r') flag = true;\n    else\
    \ if (c == 'R') flag = false;\n    else if (c == 's') flag = true;\n    else if\
    \ (c == 'S') flag = false;\n    else if (c == 't') flag = true;\n    else if (c\
    \ == 'T') flag = false;\n    else if (c == 'u') flag = true;\n    else if (c ==\
    \ 'U') flag = false;\n    else if (c == 'v') flag = true;\n    else if (c == 'V')\
    \ flag = false;\n    else if (c == 'w') flag = true;\n    else if (c == 'W') flag\
    \ = false;\n    else if (c == 'x') flag = true;\n    else if (c == 'X') flag =\
    \ false;\n    else if (c == 'y') flag = true;\n    else if (c == 'Y') flag = false;\n\
    \    else if (c == 'z') flag = true;\n    else if (c == 'Z') flag = false;\n \
    \   else flag = false;\n    if (flag) c = tolower(c);\n    else c = toupper(c);\n\
    \  }\n  return s;", "    std::string outStr;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            outStr\
    \ += string[i] - 'A' + 'a';\n        }\n        else if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            outStr += string[i] - 'a' + 'A';\n        }\n       \
    \ else {\n            outStr += string[i];\n        }\n    }\n    return outStr;",
  "    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' &&\
    \ string[i] <= 'z')\n            string[i] = string[i] + 'A' - 'a';\n        else\
    \ if (string[i] >= 'A' && string[i] <= 'Z')\n            string[i] = string[i]\
    \ + 'a' - 'A';\n    }\n    return string;", "    int n = string.length();\n  \
    \  std::string result;\n    for (int i = 0; i < n; i++) {\n        char c = string[i];\n\
    \        if (c == 'a') {\n            c = 'A';\n        } else if (c == 'A') {\n\
    \            c = 'a';\n        }\n        result += c;\n    }\n    return result;",
  "    std::replace( string.begin(), string.end(), string::tolower(), string::toupper());\n\
    \    return string;", "    std::string res = string;\n    for (auto ch : string)\
    \ {\n        if (ch >= 'A' && ch <= 'Z') {\n            ch ^= 'a' - 'A';\n   \
    \     }\n        else if (ch >= 'a' && ch <= 'z') {\n            ch ^= 'A' - 'a';\n\
    \        }\n        else {\n            ch = ' ';\n        }\n        res += ch;\n\
    \    }\n    return res;", "  string s = string;\n  for (unsigned int i = 0; i\
    \ < s.size(); i++) {\n    if (s[i] != ' ') {\n      s[i] = toupper(s[i]);\n  \
    \  } else {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;", "    size_t\
    \ pos = 0;\n    std::string res = \"\";\n    while (string[pos] != '\\0') {\n\
    \        if (string[pos] >= 'a' && string[pos] <= 'z')\n            res += string[pos]\
    \ - 'a' + 'A';\n        if (string[pos] >= 'A' && string[pos] <= 'Z')\n      \
    \      res += string[pos] - 'A' + 'a';\n        pos++;\n    }\n    return res;",
  "  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      string[i] += 32;\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      string[i] -= 32;\n  }\n  return string;", "  // For each letter\
    \ in the string, if it is not uppercase, switch to uppercase\n  for (int i = 0;\
    \ i < string.length(); i++) {\n    char curr = string[i];\n    if (!(curr >= 'A'\
    \ && curr <= 'Z')) {\n      string[i] = toupper(curr);\n    }\n  }\n  // For each\
    \ letter in the string, if it is not lowercase, switch to lowercase\n  for (int\
    \ i = 0; i < string.length(); i++) {\n    char curr = string[i];\n    if (!(curr\
    \ >= 'a' && curr <= 'z')) {\n      string[i] = tolower(curr);\n    }\n  }\n  return\
    \ string;", "  std::string flipped = \"\";\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      flipped += string[i]\
    \ + ('A' - 'a');\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n   \
    \   flipped += string[i] + ('a' - 'A');\n    } else {\n      flipped += string[i];\n\
    \    }\n  }\n  return flipped;", "    std::string flip = string;\n    for (int\
    \ i = 0; i < flip.size(); i++) {\n        if (flip[i] >= 'a' && flip[i] <= 'z')\
    \ {\n            flip.at(i) = (flip[i] - 'a' + 'A');\n        }\n        if (flip[i]\
    \ >= 'A' && flip[i] <= 'Z') {\n            flip.at(i) = (flip[i] - 'A' + 'a');\n\
    \        }\n    }\n    return flip;", "  for (std::string::iterator it = string.begin();\
    \ it != string.end(); ++it)\n    if (*it >= 'a' && *it <= 'z')\n      *it += ('a'\
    \ - 'A');\n    else\n      *it += ('A' - 'a');\n  return string;", "    size_t\
    \ pos = 0;\n    std::string str_out;\n    while ((pos = string.find(\" \")) !=\
    \ std::string::npos) {\n        str_out += string.substr(0, pos) + string.substr(pos\
    \ + 1).toupper() + string.substr(pos + 2);\n        pos = string.find(\" \", pos\
    \ + 1);\n    }\n    str_out += string;\n    return str_out;", "    std::string\
    \ res;\n    for (std::size_t i = 0, size = string.size(); i < size; ++i) {\n \
    \       if (string[i] >= 'a' && string[i] <= 'z')\n            res += string[i]\
    \ - 'a' + 'A';\n        else if (string[i] >= 'A' && string[i] <= 'Z')\n     \
    \       res += string[i] - 'A' + 'a';\n        else\n            res += string[i];\n\
    \    }\n    return res;", "    std::string flipped = \"\";\n    for (auto c :\
    \ string) {\n        if ('A' <= c && c <= 'Z') {\n            flipped += string[string.length()\
    \ - 1] + c - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n            flipped\
    \ += string[string.length() - 1] + c + ('a' - 'A');\n        }\n    }\n    return\
    \ flipped;", "    for (std::string::iterator it = string.begin(); it != string.end();\
    \ ++it)\n        if (*it >= 'A' && *it <= 'Z')\n            *it = (*it - 'A')\
    \ + 'a';\n        else\n            *it = (*it - 'a') + 'A';\n    return string;",
  "  string s(string);\n  std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n\
    \  std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n  return s;", " \
    \  std::string out=\"\";\n   for(int i=0;i<string.length();i++){\n       if (islower(string[i]))\n\
    \       {\n           out+=toupper(string[i]);\n       }\n       else\n      \
    \ {\n           out+=tolower(string[i]);\n       }\n   }\n   return out;", " \
    \   std::map<char, char> mapping = {{'A','a'},{'B','b'},{'C','c'},{'D','d'},{'E','e'},{'F','f'},{'G','g'},{'H','h'},{'I','i'},{'J','j'},{'K','k'},{'L','l'},{'M','m'},{'N','n'},{'O','o'},{'P','p'},{'Q','q'},{'R','r'},{'S','s'},{'T','t'},{'U','u'},{'V','v'},{'W','w'},{'X','x'},{'Y','y'},{'Z','z'}};\n\
    \    for (char &c: string) {\n        c = mapping[c];\n    }\n    return string;",
  "  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      string[i] = string[i] - 32;\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      string[i] = string[i] + 32;\n  }\n  return string;", "    for(int\
    \ i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            string[i] += ('a' - 'A');\n        }\n        else if(string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] += ('A' - 'a');\n     \
    \   }\n    }\n    return string;", "    std::string result = string;\n    for\
    \ (std::size_t i = 0; i < result.size(); ++i) {\n        char ch = result[i];\n\
    \        result[i] = toupper(ch);\n        result[i] = tolower(ch);\n    }\n \
    \   return result;", "    std::string new_string;\n    // Iterate through the\
    \ string, flipping lowercase letters to uppercase and vice-versa.\n    for(char\
    \ c : string) {\n        char c_lower= std::tolower(c);\n        if( c_lower !=\
    \ c ) new_string += c_lower;\n        else new_string += c;\n    }\n    return\
    \ new_string;", "    std::string flip;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            flip.append(string[i]\
    \ + 32 - 'a');\n        } else {\n            flip.append(string[i]);\n      \
    \  }\n    }\n    return flip;", "  for (auto &letter : string) {\n    if (letter\
    \ >= 'a' && letter <= 'z') {\n      letter = 'A';\n    } else if (letter >= 'A'\
    \ && letter <= 'Z') {\n      letter = 'a';\n    }\n  }\n  return string;", " \
    \   string s = string.toLowerCase();\n    for (std::string::iterator it = s.begin();\
    \ it != s.end(); it++) *it = std::toupper(*it);\n    return s;", "    std::for_each(string.begin(),\
    \ string.end(), [](char c) {\n        if ('A' <= c && c <= 'Z') {\n          \
    \  c = toupper(c);\n        }\n        if ('a' <= c && c <= 'z') {\n         \
    \   c = tolower(c);\n        }\n    });\n    return string;", "    for (auto &c:\
    \ string) {\n        if (c == 'a' || c == 'A')\n            c = 'A';\n       \
    \ if (c == 'b' || c == 'B')\n            c = 'B';\n        if (c == 'c' || c ==\
    \ 'C')\n            c = 'C';\n        if (c == 'd' || c == 'D')\n            c\
    \ = 'D';\n        if (c == 'e' || c == 'E')\n            c = 'E';\n        if\
    \ (c == 'f' || c == 'F')\n            c = 'F';\n        if (c == 'g' || c == 'G')\n\
    \            c = 'G';\n        if (c == 'h' || c == 'H')\n            c = 'H';\n\
    \        if (c == 'i' || c == 'I')\n            c = 'I';\n        if (c == 'j'\
    \ || c == 'J')\n            c = 'J';\n        if (c == 'k' || c == 'K')\n    \
    \        c = 'K';\n        if (c == 'l' || c == 'L')\n            c = 'L';\n \
    \       if (c == 'm' || c == 'M')\n            c = 'M';\n        if (c == 'n'\
    \ || c == 'N')\n            c = 'N';\n        if (c == 'o' || c == 'O')\n    \
    \        c = 'O';\n        if (c == 'p' || c == 'P')\n            c = 'P';\n \
    \       if (c == 'q' || c == 'Q')\n            c = 'Q';\n        if (c == 'r'\
    \ || c == 'R')\n            c = 'R';\n        if (c == 's' || c == 'S')\n    \
    \        c = 'S';\n        if (c == 't' || c == 'T')\n            c = 'T';\n \
    \       if (c == 'u' || c == 'U')\n            c = 'U';\n        if (c == 'v'\
    \ || c == 'V')\n            c = 'V';\n        if (c == 'w' || c == 'W')\n    \
    \        c = 'W';\n        if (c == 'x' || c == 'X')\n            c = 'X';\n \
    \       if (c == 'y' || c == 'Y')\n            c = 'Y';\n        if (c == 'z'\
    \ || c == 'Z')\n            c = 'Z';\n    }\n    return string;", "\tstring s\
    \ = \"\";\n\tfor (size_t i = 0; i < string.size(); i++) {\n\t\tif (string[i] <\
    \ 'a' || string[i] > 'z') {\n\t\t\ts += string[i];\n\t\t} else {\n\t\t\ts += 'A'\
    \ + (string[i] - 'a');\n\t\t}\n\t}\n\treturn s;", "    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c = static_cast<char>(c\
    \ - ('a' - 'A'));\n        } else if (c >= 'A' && c <= 'Z') {\n            c =\
    \ static_cast<char>(c + ('A' - 'a'));\n        }\n    }\n    return string;",
  "    std::string output = \"\";\n    for(int i=0; i <= string.size(); i++) {\n \
    \       if((string[i] >= 'A') && (string[i] <= 'Z')) {\n            output +=\
    \ string[i] + 'A' - 'a';\n        } else {\n            output += string[i];\n\
    \        }\n    }\n    return output;", "    std::transform(string,string.begin(),\
    \ string.begin(), ::toupper);\n    std::transform(string,string.begin(), string.end(),\
    \ ::tolower);\n    return string;", "  for (std::string::size_type i = 0; i <\
    \ string.length(); i++) {\n    if ((string[i] >= 'a' && string[i] <= 'z') || (string[i]\
    \ >= 'A' && string[i] <= 'Z')) {\n      string[i] = string[i] - 32;\n    }\n \
    \ }\n  return string;", "  for (std::string::iterator it = string.begin(); it\
    \ != string.end(); ++it)\n  {\n    bool upcase = false;\n    if (*it == toupper(*it))\n\
    \    {\n      upcase = true;\n      *it = tolower(*it);\n    }\n    else\n   \
    \ {\n      upcase = false;\n    }\n    bool lcase = false;\n    if (*it == tolower(*it))\n\
    \    {\n      lcase = true;\n      *it = toupper(*it);\n    }\n    else\n    {\n\
    \      lcase = false;\n    }\n    if (!upcase && !lcase)\n    {\n      continue;\n\
    \    }\n    string += *it;\n  }\n  return string;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;", "    for (auto&\
    \ c : string)\n        if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n\
    \        else if (c >= 'a' && c <= 'z')\n            c += 'A' - 'a';\n       \
    \ else if (c >= '0' && c <= '9')\n            c += c - '0';\n        else\n  \
    \          c.toupper();\n    return string;", "  string new_string = string;\n\
    \  for (int i = 0; i < new_string.size(); i++) {\n    if (new_string[i] >= 'a'\
    \ && new_string[i] <= 'z') {\n      new_string[i] = new_string[i] + 32;\n    }\n\
    \  }\n  return new_string;", "    for (auto &c : string) {\n        c = toupper(c);\n\
    \    }\n    return string;", "    for (std::size_t i = 0; i < string.size(); ++i)\
    \ {\n        char c = string[i];\n        if (c >= 'a' && c <= 'z') {\n      \
    \      c += 'A' - 'a';\n        }\n        else if (c >= 'A' && c <= 'Z') {\n\
    \            c += 'a' - 'A';\n        }\n        string[i] = c;\n    }\n    return\
    \ string;", "    string res;\n    for (int i=0;i<string.length();i++) {\n    \
    \    char c = string[i];\n        if ( (c>='a' && c<='z') || (c>='A' && c<='Z')\
    \ )\n            res+=c;\n        else res+=tolower(c);\n    }\n    return res;",
  "\tstring res = string;\n\tfor (std::string::size_type i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == string[i][0]) {\n\t\t\tres[i] = toupper(string[i]);\n\
    \t\t} else {\n\t\t\tres[i] = tolower(string[i]);\n\t\t}\n\t}\n\treturn res;",
  "  string s = string;\n  for (int i = 0; i < s.length(); i++) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n      s[i] = 'A';\n    } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n      s[i] = 'a';\n    }\n  }\n  return s;", " \
    \ string result = string;\n  for(std::string::size_type i = 0; i < result.size();\
    \ i++) {\n    if(string[i] >= 'a' && string[i] <= 'z')\n      result[i] = string[i]\
    \ - 'a' + 'A';\n    else if(string[i] >= 'A' && string[i] <= 'Z')\n      result[i]\
    \ = string[i] - 'A' + 'a';\n    else if(string[i] >= '0' && string[i] <= '9')\n\
    \      result[i] = string[i] - '0' + '0';\n  }\n  return result;", "    int length\
    \ = string.length();\n    for (int i = 0; i < length; ++i) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            string[i] = 'A' - string[i] - 1;\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = 'a' - string[i] - 1;\n        }\n    }\n    return string;", "    \n    int\
    \ len = string.size();\n    \n    for(int i=0;i<len;i++) {\n        if(string[i]\
    \ == 'a') {\n            string[i] = 'A';\n        }\n        else if(string[i]\
    \ == 'b') {\n            string[i] = 'B';\n        }\n        else if(string[i]\
    \ == 'c') {\n            string[i] = 'C';\n        }\n        else if(string[i]\
    \ == 'd') {\n            string[i] = 'D';\n        }\n        else if(string[i]\
    \ == 'e') {\n            string[i] = 'E';\n        }\n        else if(string[i]\
    \ == 'f') {\n            string[i] = 'F';\n        }\n        else if(string[i]\
    \ == 'g') {\n            string[i] = 'G';\n        }\n        else if(string[i]\
    \ == 'h') {\n            string[i] = 'H';\n        }\n        else if(string[i]\
    \ == 'i') {\n            string[i] = 'I';\n        }\n        else if(string[i]\
    \ == 'j') {\n            string[i] = 'J';\n        }\n        else if(string[i]\
    \ == 'k') {\n            string[i] = 'K';\n        }\n        else if(string[i]\
    \ == 'l') {\n            string[i] = 'L';\n        }\n        else if(string[i]\
    \ == 'm') {\n            string[i] = 'M';\n        }\n        else if(string[i]\
    \ == 'n') {\n            string[i] = 'N';\n        }\n        else if(string[i]\
    \ == 'o') {\n            string[i] = 'O';\n        }\n        else if(string[i]\
    \ == 'p') {\n            string[i] = 'P';\n        }\n        else if(string[i]\
    \ == 'q') {\n            string[i] = 'Q';\n        }\n        else if(string[i]\
    \ == 'r') {\n            string[i] = 'R';\n        }\n        else if(string[i]\
    \ == 's') {\n            string[i] = 'S';\n        }\n        else if(string[i]\
    \ == 't') {\n            string[i] = 'T';\n        }\n        else if(string[i]\
    \ == 'u') {\n            string[i] = 'U';\n        }\n        else if(string[i]\
    \ == 'v') {\n            string[i] = 'V';\n        }\n        else if(string[i]\
    \ == 'w') {\n            string[i] = 'W';\n        }\n        else if(string[i]\
    \ == 'x') {\n            string[i] = 'X';\n        }\n        else if(string[i]\
    \ == 'y') {\n            string[i] = 'Y';\n        }\n        else if(string[i]\
    \ == 'z') {\n            string[i] = 'Z';\n        }\n    }\n    \n    return\
    \ string;", "  for (int i = 0; i <= string.length(); i++) {\n    if (string[i]\
    \ == string::toupper(string[i])) {\n      string[i] = string::tolower(string[i]);\n\
    \    }\n    if (string[i] == string::tolower(string[i])) {\n      string[i] =\
    \ string::toupper(string[i]);\n    }\n  }\n  return string;", "    for(int i =\
    \ 0; i < string.length(); ++i) {\n        if(string[i] >= 'a' && string[i] <=\
    \ 'z')\n            string[i] ^= ('A' ^ 'a');\n    }\n    return string;", " \
    \   std::transform(string[0].begin(), string[0].end(), string[0].begin(), ::toupper);\n\
    \    std::transform(string[string.length()-1].begin(), string[string.length()-1].end(),\
    \ string[string.length()-1].begin(), ::tolower);\n    return string;", "    std::string\
    \ result(\"\");\n    int i = 0;\n    int count = 0;\n    while (i < string.length())\
    \ {\n        // if the first character is a capital letter\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            result += string[i];\n          \
    \  ++i;\n        } else {\n            // if the first character is a lowercase\
    \ letter\n            if (string[i] >= 'a' && string[i] <= 'z') {\n          \
    \      result += string[i] - 'a' + 'A';\n                ++i;\n            } else\
    \ {\n                result += string[i];\n                ++i;\n            \
    \    ++count;\n            }\n        }\n    }\n    assert(i == string.length());\n\
    \    // reverse the string\n    while (count > 0) {\n        result += string[string.length()\
    \ - 1 - count];\n        --count;\n    }\n    return result;", "    for (std::size_t\
    \ i = 0; i < string.length(); ++i) {\n        std::string c = string[i];\n   \
    \     if ('A' <= c && c <= 'Z') {\n            string[i] = 'a' - ('a' - 'A');\n\
    \        } else if (('a' <= c && c <= 'z') || (A' <= c && c <= 'Z')) {\n     \
    \       string[i] = 'A' - ('A' - 'a');\n        }\n    }\n    return string;",
  "  // Declare variables.\n  std::string flip = \"\";\n  // For each character in\
    \ the string.\n  for (int i = 0; i < (int) string.size(); ++i) {\n    // If character\
    \ is in lowercase, add to front.\n    if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n      flip += string[i] + 'A' - 'a';\n    }\n    // If character is uppercase,\
    \ add to back.\n    else if (string[i] >= 'A' && string[i] <= 'Z') {\n      flip\
    \ += string[i] + 'a' - 'A';\n    }\n  }\n  return flip;", "    std::string temp\
    \ = string;\n    std::transform(temp.begin(), temp.end(), temp.begin(), ::toupper);\n\
    \    std::transform(temp.begin(), temp.end(), temp.begin(), ::tolower);\n    return\
    \ temp;", "    string s(string);\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::toupper);\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    return s;", "\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar chr\
    \ = string[i];\n\t\tif (chr >= 'A' && chr <= 'Z')\n\t\t\tstring[i] = chr + ('a'\
    \ - 'A');\n\t\telse if (chr >= 'a' && chr <= 'z')\n\t\t\tstring[i] = chr + ('A'\
    \ - 'a');\n\t}\n\treturn string;", "    std::for_each(string.begin(), string.end(),\
    \ [](char ch) {\n        if (std::tolower(ch) == 'a') ch = 'A';\n        if (std::tolower(ch)\
    \ == 'b') ch = 'B';\n        if (std::tolower(ch) == 'c') ch = 'C';\n        if\
    \ (std::tolower(ch) == 'd') ch = 'D';\n        if (std::tolower(ch) == 'e') ch\
    \ = 'E';\n        if (std::tolower(ch) == 'f') ch = 'F';\n        if (std::tolower(ch)\
    \ == 'g') ch = 'G';\n        if (std::tolower(ch) == 'h') ch = 'H';\n        if\
    \ (std::tolower(ch) == 'i') ch = 'I';\n        if (std::tolower(ch) == 'j') ch\
    \ = 'J';\n        if (std::tolower(ch) == 'k') ch = 'K';\n        if (std::tolower(ch)\
    \ == 'l') ch = 'L';\n        if (std::tolower(ch) == 'm') ch = 'M';\n        if\
    \ (std::tolower(ch) == 'n') ch = 'N';\n        if (std::tolower(ch) == 'o') ch\
    \ = 'O';\n        if (std::tolower(ch) == 'p') ch = 'P';\n        if (std::tolower(ch)\
    \ == 'q') ch = 'Q';\n        if (std::tolower(ch) == 'r') ch = 'R';\n        if\
    \ (std::tolower(ch) == 's') ch = 'S';\n        if (std::tolower(ch) == 't') ch\
    \ = 'T';\n        if (std::tolower(ch) == 'u') ch = 'U';\n        if (std::tolower(ch)\
    \ == 'v') ch = 'V';\n        if (std::tolower(ch) == 'w') ch = 'W';\n        if\
    \ (std::tolower(ch) == 'x') ch = 'X';\n        if (std::tolower(ch) == 'y') ch\
    \ = 'Y';\n        if (std::tolower(ch) == 'z') ch = 'Z';\n        if (std::toupper(ch)\
    \ == 'A') ch = 'a';\n        if (std::toupper(ch) == 'B') ch = 'b';\n        if\
    \ (std::toupper(ch) == 'C') ch = 'c';\n        if (std::toupper(ch) == 'D') ch\
    \ = 'd';\n        if (std::toupper(ch) == 'E') ch = 'e';\n        if (std::toupper(ch)\
    \ == 'F') ch = 'f';\n        if (std::toupper(ch) == 'G') ch = 'g';\n        if\
    \ (std::toupper(ch) == 'H') ch = 'h';\n        if (std::toupper(ch) == 'I') ch\
    \ = 'i';\n        if (std::toupper(ch) == 'J') ch = 'j';\n        if (std::toupper(ch)\
    \ == 'K') ch = 'k';\n        if (std::toupper(ch) == 'L') ch = 'l';\n        if\
    \ (std::to", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    return string;", "    for (auto &c : string) c = toupper(c);\n\
    \    return string;", "  for (std::size_t i = 0; i < string.length(); ++i) {\n\
    \    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] += 'A' - 'a';\n\
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i] += 'a'\
    \ - 'A';\n    }\n  }\n  return string;", "    std::string res;\n    for (auto\
    \ &c : string) {\n        c = toupper(c);\n    }\n    for (auto &c : string) {\n\
    \        c = tolower(c);\n    }\n    return res;", "    std::transform(string.cbegin(),\
    \ string.cend(), string.begin(),\n                   [](unsigned char c) { return\
    \ std::toupper(c); });\n    return std::string(string.begin(), string.end());",
  "    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == 'a')\
    \ {\n            string[i] = 'A';\n        } else if (string[i] == 'b') {\n  \
    \          string[i] = 'B';\n        } else if (string[i] == 'c') {\n        \
    \    string[i] = 'C';\n        } else if (string[i] == 'd') {\n            string[i]\
    \ = 'D';\n        } else if (string[i] == 'e') {\n            string[i] = 'E';\n\
    \        } else if (string[i] == 'f') {\n            string[i] = 'F';\n      \
    \  } else if (string[i] == 'g') {\n            string[i] = 'G';\n        } else\
    \ if (string[i] == 'h') {\n            string[i] = 'H';\n        } else if (string[i]\
    \ == 'i') {\n            string[i] = 'I';\n        } else if (string[i] == 'j')\
    \ {\n            string[i] = 'J';\n        } else if (string[i] == 'k') {\n  \
    \          string[i] = 'K';\n        } else if (string[i] == 'l') {\n        \
    \    string[i] = 'L';\n        } else if (string[i] == 'm') {\n            string[i]\
    \ = 'M';\n        } else if (string[i] == 'n') {\n            string[i] = 'N';\n\
    \        } else if (string[i] == 'o') {\n            string[i] = 'O';\n      \
    \  } else if (string[i] == 'p') {\n            string[i] = 'P';\n        } else\
    \ if (string[i] == 'q') {\n            string[i] = 'Q';\n        } else if (string[i]\
    \ == 'r') {\n            string[i] = 'R';\n        } else if (string[i] == 's')\
    \ {\n            string[i] = 'S';\n        } else if (string[i] == 't') {\n  \
    \          string[i] = 'T';\n        } else if (string[i] == 'u') {\n        \
    \    string[i] = 'U';\n        } else if (string[i] == 'v') {\n            string[i]\
    \ = 'V';\n        } else if (string[i] == 'w') {\n            string[i] = 'W';\n\
    \        } else if (string[i] == 'x') {\n            string[i] = 'X';\n      \
    \  } else if (string[i] == 'y') {\n            string[i] = 'Y';\n        } else\
    \ if (string[i] == 'z') {\n            string[i] = 'Z';\n        }\n    }\n  \
    \  return string;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    return string;", "  for (int i = 0; i < string.length(); i++)\
    \ {\n    if (islower(string[i])) {\n      string[i] = toupper(string[i]);\n  \
    \  }\n  }\n  return string;", "    std::string outString = \"\";\n    for (size_t\
    \ i = 0; i < string.size(); i++) {\n        char temp = string[i];\n        if\
    \ (temp >= 'a' && temp <= 'z') {\n            temp -= 32;\n        }\n       \
    \ else if (temp >= 'A' && temp <= 'Z') {\n            temp += 32;\n        }\n\
    \        outString += temp;\n    }\n    return outString;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;", "    // Iterate\
    \ over the string\n    for (std::string::iterator it = string.begin(); it != string.end();\
    \ ++it) {\n        // If current character is uppercase\n        if (std::isupper(*it))\
    \ {\n            // Replace the character with the character with lowercase equivalent\n\
    \            *it = std::tolower(*it);\n        }\n    }\n\n    return string;",
  "  for (size_t i = 0; i < string.length(); i++)\n    if (islower(string[i]))\n \
    \     string[i] = toupper(string[i]);\n    else\n      string[i] = tolower(string[i]);\n\
    \n  return string;", "  // Your code goes here\n  \n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  \n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  \n  return string;", "    int i\
    \ = 0, j = string.length() - 1;\n    while (i < j) {\n        if (string[i] >=\
    \ 'a' && string[i] <= 'z') {\n            string[i] = 'A';\n            i++;\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = 'a';\n            i++;\n        } else {\n            string[j] = string[i];\n\
    \            j--;\n        }\n    }\n    return string;", "  for (int i = 0; i\
    \ < string.length(); ++i) {\n    if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \      string[i] -= ('a' - 'A');\n    } else {\n      string[i] -= ('Z' - 'a'\
    \ + 1);\n    }\n  }\n  return string;", "    string s = string;\n    for (size_t\
    \ i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (islower(c))\
    \ {\n            s[i] = toupper(c);\n        }\n        else if (isupper(c)) {\n\
    \            s[i] = tolower(c);\n        }\n    }\n    return s;", "    std::string\
    \ upper;\n    std::string lower;\n    for (auto c: string) {\n        upper.append(toupper(c));\n\
    \        lower.append(tolower(c));\n    }\n    return lower + upper;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;", "  std::for_each(string.begin(),\
    \ string.end(), [](char c) {\n    if (std::tolower(c) != c) {\n      c = std::toupper(c);\n\
    \    }\n  });\n  return string;", "  assert(string.size() > 1);\n  std::string\
    \ output = string;\n  for (size_t i = 0; i < string.size(); i++) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n      output[i] = string[i] - ('a' - 'A');\n  \
    \  else if (string[i] >= 'A' && string[i] <= 'Z')\n      output[i] = string[i]\
    \ - ('A' - 'a');\n  }\n  return output;", "  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  return string;", "    for (auto &c : string)\
    \ {\n        c = toupper(c);\n    }\n    return string;", "  for (int i = 0; i\
    \ < string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n\
    \      string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;",
  "    string result = string;\n    for (int i = 0; i < result.length(); i++) {\n\
    \        if (result[i] >= 'a' && result[i] <= 'z') {\n            result[i] =\
    \ 'A' + (result[i] - 'a');\n        }\n        else if (result[i] >= 'A' && result[i]\
    \ <= 'Z') {\n            result[i] = 'a' + (result[i] - 'A');\n        }\n   \
    \ }\n    return result;", "    size_t len = string.length();\n    for (size_t\
    \ i = 0; i < len; i++) {\n        switch (string[i]) {\n            case 'a':\n\
    \                string[i] = 'A';\n                break;\n            case 'b':\n\
    \                string[i] = 'B';\n                break;\n            case 'c':\n\
    \                string[i] = 'C';\n                break;\n            case 'd':\n\
    \                string[i] = 'D';\n                break;\n            case 'e':\n\
    \                string[i] = 'E';\n                break;\n            case 'f':\n\
    \                string[i] = 'F';\n                break;\n            case 'g':\n\
    \                string[i] = 'G';\n                break;\n            case 'h':\n\
    \                string[i] = 'H';\n                break;\n            case 'i':\n\
    \                string[i] = 'I';\n                break;\n            case 'j':\n\
    \                string[i] = 'J';\n                break;\n            case 'k':\n\
    \                string[i] = 'K';\n                break;\n            case 'l':\n\
    \                string[i] = 'L';\n                break;\n            case 'm':\n\
    \                string[i] = 'M';\n                break;\n            case 'n':\n\
    \                string[i] = 'N';\n                break;\n            case 'o':\n\
    \                string[i] = 'O';\n                break;\n            case 'p':\n\
    \                string[i] = 'P';\n                break;\n            case 'q':\n\
    \                string[i] = 'Q';\n                break;\n            case 'r':\n\
    \                string[i] = 'R';\n                break;\n            case 's':\n\
    \                string[i] = 'S';\n                break;\n            case 't':\n\
    \                string[i] = 'T';\n                break;\n            case 'u':\n\
    \                string[i] = 'U';\n                break;\n            case 'v':\n\
    \                string[i] = 'V';\n                break;\n            case 'w':\n\
    \                string[i] = 'W';\n                break;\n            case 'x':\n\
    \                string[i] = 'X';\n                break;\n            case 'y':\n\
    \                string[i] = 'Y';\n                break;\n            case 'z':\n\
    \                string[i] = 'Z';\n                break;\n            case '0':\n\
    \                string[i] = '0';\n                break;\n            case '1':\n\
    \                string[i] = '1';\n                break;\n            case '2':\n\
    \                string[i] = '2';\n                break;\n            case '3':\n\
    \                string[i] = '3';\n                break;\n            case '4':\n\
    \                string[i] = '4';\n                break;\n            case '5':\n\
    \                string[i] = '5';\n                break;\n            case '6':\n\
    \                string[i] = '6';\n                break;\n            case '7':\n\
    \                string[i] = '7';\n                break;\n            case '8':\n\
    \                string[i] = '8';\n                break;\n            case '9':\n\
    \                string[i] = '9';\n                break;\n            case '\
    \ ':\n                break;\n            case '\\t':\n                break;\n\
    \            case '\\n':\n                break;\n            case '<':\n    \
    \        case '>':\n                break;\n            case '!':", "  string\
    \ flipped_string = string;\n  for (int i = 0; i < flipped_string.size(); i++)\
    \ {\n    if (flipped_string[i] >= 'a' && flipped_string[i] <= 'z') {\n      flipped_string[i]\
    \ -= 'a' - 'A';\n    } else if (flipped_string[i] >= 'A' && flipped_string[i]\
    \ <= 'Z') {\n      flipped_string[i] += 'a' - 'A';\n    }\n  }\n  return flipped_string;",
  "  std::transform(string::begin(), string::end(), string::begin(), ::toupper);\n\
    \  std::transform(string::begin(), string::end(), string::begin(), ::tolower);\n\
    \  return string;", "   std::string s = string;\n   for (auto &c: s)\n       if\
    \ (c >= 'A' && c <= 'Z')\n          c ^= 'a';\n       else if (c >= 'a' && c <=\
    \ 'z')\n          c ^= 'A';\n       else\n          c = c;\n   return s;", " \
    \   std::transform(string.toCharArray(), string.toCharArray() + string.size(),\n\
    \        string.toCharArray(),\n        [](char ch) {\n            if (ch >= 'A'\
    \ && ch <= 'Z') {\n                return (char)(ch + 0x20);\n            } else\
    \ if (ch >= 'a' && ch <= 'z') {\n                return (char)(ch - 0x20);\n \
    \           } else {\n                return ch;\n            }\n        });\n\
    \    return string;", "    string s = string;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        s[i] = toupper(s[i]);\n    }\n    return s;", "    std::transform(string,\n\
    \                   string.begin(),\n                   string.end(),\n      \
    \             [](unsigned char c){ return std::toupper(c); });\n    return string;",
  "  std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;", "    for(std::size_t\
    \ i = 0, len = string.length(); i < len; i++)\n        if(string[i] >= 'a' &&\
    \ string[i] <= 'z')\n            string[i] ^= 'A';\n        else if((string[i]\
    \ >= 'A' && string[i] <= 'Z'))\n            string[i] ^= 'a';\n    return string;",
  "  for (std::string::size_type i = 0; i < string.length(); ++i) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n      string[i] = 'A';\n    else if (string[i]\
    \ >= 'A' && string[i] <= 'Z')\n      string[i] = 'a';\n  }\n  return string;",
  "    string result = \"\";\n    for (char c : string)\n        c = toupper(c);\n\
    \    for (char c : string)\n        c = tolower(c);\n    return result;", "  \
    \  std::string new_string=\"\";\n    for(auto &c: string) {\n        c=((c<='Z'&&c>='a')||(c>='a'&&c<='Z'))?((c-='Z')+('a'+1):(c-='a')+('A'+1));\n\
    \        new_string.push_back(c);\n    }\n    return new_string;", "    string\
    \ res;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n            res += (char) string[i] - 32;\n   \
    \     else if (string[i] >= 'A' && string[i] <= 'Z')\n            res += (char)\
    \ string[i] + 32;\n        else\n            res += string[i];\n    }\n    return\
    \ res;", "    for (int i = 0; i < string.size(); i++)\n        if (string[i] >=\
    \ 'a' && string[i] <= 'z')\n            string[i] ^= ('A' ^ 'a');\n        else\
    \ if (string[i] >= 'A' && string[i] <= 'Z')\n            string[i] ^= ('a' ^ 'A');\n\
    \        else\n            string[i] = string[i]; // keep the current character\n\
    \    return string;", "    for (auto &i : string)\n        i = std::toupper(i);\n\
    \    return string;", "    for (std::string::iterator it = string.begin(); it\
    \ != string.end(); ++it) {\n        if ('A' <= *it && *it <= 'Z') {\n        \
    \    string.insert(it, 'a' -'A');\n        }\n        if ('a' <= *it && *it <=\
    \ 'z') {\n            string.insert(it, 'A' -'a');\n        }\n    }\n    return\
    \ string;", "    size_t length = string.length();\n    for (size_t i = 0; i <\
    \ length; ++i) {\n        if (string[i] >= 'a' && string[i] <= 'z')\n        \
    \    string[i] = 'A' + string[i] - 'a';\n        else if (string[i] >= 'A' &&\
    \ string[i] <= 'Z')\n            string[i] = 'a' + string[i] - 'A';\n    }\n \
    \   return string;", "    std::string s = string;\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::toupper);\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    return s;", "    std::map<char,char> mapping;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        if(mapping[string[i]] == 0) {\n\
    \            mapping[string[i]] = string[i];\n        }\n    }\n    for(auto &key\
    \ : mapping) {\n        string.replace(key.first, key.second,\n            mapping[key.first]);\n\
    \    }\n    return string;", "    // Make a new string that holds same characters\
    \ but flipped.\n    std::string new_string = \"\";\n    for (auto character :\
    \ string)\n        new_string.append(toupper(character));\n    return new_string;",
  "    std::transform(string::begin(), string::end(), string.begin(), [](int x){return\
    \ (x >= 'a' && x <= 'z') ? (x + ('a' - 'A')) : (x + ('A' - 'a'));});\n    return\
    \ string;", "    for (std::string::size_type i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ += 32;\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n       \
    \     string[i] -= 32;\n        }\n    }\n    return string;", "    string flipped_string\
    \ = \"\";\n    for(int i = 0; i<string.length(); i++) {\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            flipped_string += string[i]-'a' +\
    \ 'A';\n        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n \
    \           flipped_string += string[i]-'A' + 'a';\n        }\n        else if(string[i]\
    \ == '\\0' || string[i] == '\\n') {\n            break;\n        }\n        else\
    \ {\n            flipped_string += string[i];\n        }\n    }\n    return flipped_string;",
  "  for (auto &c : string) {\n    if (c >= 'A' && c <= 'Z') {\n      c -= ('A' -\
    \ 'a');\n    } else if (c >= 'a' && c <= 'z') {\n      c += 'A' - 'a';\n    }\n\
    \  }\n  return string;", "    std::string s(string);\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i]\
    \ = s[i] - ('a' - 'A');\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n  \
    \          s[i] = s[i] - ('A' - 'a');\n        }\n    }\n    return s;", "   \
    \ for(std::string::size_type i = 0; i < string.length(); ++i) {\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z')\n            string[i] += 32;\n    }\n    return\
    \ string;", "    string s = string;\n    for (auto &c : s) {\n        if ('a'\
    \ <= c && c <= 'z') c = c - 'a' + 'A';\n        if ('A' <= c && c <= 'Z') c =\
    \ c - 'A' + 'a';\n    }\n    return s;", "  for (int i = 0; i < (int) string.length();\
    \ ++i) {\n    if (string[i] == 'a') {\n      string[i] = 'A';\n    } else if (string[i]\
    \ == 'b') {\n      string[i] = 'B';\n    } else if (string[i] == 'c') {\n    \
    \  string[i] = 'C';\n    } else if (string[i] == 'd') {\n      string[i] = 'D';\n\
    \    } else if (string[i] == 'e') {\n      string[i] = 'E';\n    } else if (string[i]\
    \ == 'f') {\n      string[i] = 'F';\n    } else if (string[i] == 'g') {\n    \
    \  string[i] = 'G';\n    } else if (string[i] == 'h') {\n      string[i] = 'H';\n\
    \    } else if (string[i] == 'i') {\n      string[i] = 'I';\n    } else if (string[i]\
    \ == 'j') {\n      string[i] = 'J';\n    } else if (string[i] == 'k') {\n    \
    \  string[i] = 'K';\n    } else if (string[i] == 'l') {\n      string[i] = 'L';\n\
    \    } else if (string[i] == 'm') {\n      string[i] = 'M';\n    } else if (string[i]\
    \ == 'n') {\n      string[i] = 'N';\n    } else if (string[i] == 'o') {\n    \
    \  string[i] = 'O';\n    } else if (string[i] == 'p') {\n      string[i] = 'P';\n\
    \    } else if (string[i] == 'q') {\n      string[i] = 'Q';\n    } else if (string[i]\
    \ == 'r') {\n      string[i] = 'R';\n    } else if (string[i] == 's') {\n    \
    \  string[i] = 'S';\n    } else if (string[i] == 't') {\n      string[i] = 'T';\n\
    \    } else if (string[i] == 'u') {\n      string[i] = 'U';\n    } else if (string[i]\
    \ == 'v') {\n      string[i] = 'V';\n    } else if (string[i] == 'w') {\n    \
    \  string[i] = 'W';\n    } else if (string[i] == 'x') {\n      string[i] = 'X';\n\
    \    } else if (string[i] == 'y') {\n      string[i] = 'Y';\n    } else if (string[i]\
    \ == 'z') {\n      string[i] = 'Z';\n    }\n  }\n  return string;", "    std::string\
    \ s(string);\n    for (int i = 0; i < (int)(s.size() / 2); i++) {\n        if\
    \ (s[i] > 'z') {\n            s[i] += 32;\n        } else if (s[i] < 'a') {\n\
    \            s[i] += 'A' - 'a' + 1;\n        }\n    }\n    return s;", "    int\
    \ len = string.length();\n    std::string s = string;\n    for (int i = 0; i <\
    \ len; i++) {\n        if (s[i] == 'a')\n            s[i] = 'A';\n        if (s[i]\
    \ == 'A')\n            s[i] = 'a';\n    }\n    return s;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;", "  int len =\
    \ string.length();\n  for (int i = 0; i < len; ++i) {\n    char c = string[i];\n\
    \    if (c >= 'a' && c <= 'z') {\n      string[i] = c ^ 'A';\n    } else if (c\
    \ >= 'A' && c <= 'Z') {\n      string[i] = c ^ ('A' ^ 'a');\n    }\n  }\n  return\
    \ string;", "  for (auto &letter : string) {\n    if (letter == letter::toupper())\
    \ {\n      letter = letter::tolower();\n    } else {\n      letter = letter::toupper();\n\
    \    }\n  }\n  return string;", "    for(char c : string) {\n        if(islower(c))\n\
    \            swap(c, toupper(c));\n    }\n    return string;", "  for (int i =\
    \ 0; i < string.size(); i++) {\n    if (string[i] == 'a') {\n      string[i] =\
    \ 'A';\n    } else if (string[i] == 'b') {\n      string[i] = 'B';\n    } else\
    \ if (string[i] == 'c') {\n      string[i] = 'C';\n    } else if (string[i] ==\
    \ 'd') {\n      string[i] = 'D';\n    } else if (string[i] == 'e') {\n      string[i]\
    \ = 'E';\n    } else if (string[i] == 'f') {\n      string[i] = 'F';\n    } else\
    \ if (string[i] == 'g') {\n      string[i] = 'G';\n    } else if (string[i] ==\
    \ 'h') {\n      string[i] = 'H';\n    } else if (string[i] == 'i') {\n      string[i]\
    \ = 'I';\n    } else if (string[i] == 'j') {\n      string[i] = 'J';\n    } else\
    \ if (string[i] == 'k') {\n      string[i] = 'K';\n    } else if (string[i] ==\
    \ 'l') {\n      string[i] = 'L';\n    } else if (string[i] == 'm') {\n      string[i]\
    \ = 'M';\n    } else if (string[i] == 'n') {\n      string[i] = 'N';\n    } else\
    \ if (string[i] == 'o') {\n      string[i] = 'O';\n    } else if (string[i] ==\
    \ 'p') {\n      string[i] = 'P';\n    } else if (string[i] == 'q') {\n      string[i]\
    \ = 'Q';\n    } else if (string[i] == 'r') {\n      string[i] = 'R';\n    } else\
    \ if (string[i] == 's') {\n      string[i] = 'S';\n    } else if (string[i] ==\
    \ 't') {\n      string[i] = 'T';\n    } else if (string[i] == 'u') {\n      string[i]\
    \ = 'U';\n    } else if (string[i] == 'v') {\n      string[i] = 'V';\n    } else\
    \ if (string[i] == 'w') {\n      string[i] = 'W';\n    } else if (string[i] ==\
    \ 'x') {\n      string[i] = 'X';\n    } else if (string[i] == 'y') {\n      string[i]\
    \ = 'Y';\n    } else if (string[i] == 'z') {\n      string[i] = 'Z';\n    }\n\
    \  }\n  return string;", "   string result;\n   for (size_t i = 0; i < string.size();\
    \ ++i) {\n      if (string[i] >= 'a' && string[i] <= 'z') {\n         result +=\
    \ string[i];\n         result += string[i] >= 'A' && string[i] <= 'Z' ? 'A' :\
    \ 'a';\n      } else if (string[i] >= 'A' && string[i] <= 'Z') {\n         result\
    \ += string[i];\n         result += string[i] >= 'a' && string[i] <= 'z' ? 'a'\
    \ : 'A';\n      } else {\n         result += string[i];\n      }\n   }\n   return\
    \ result;", "  for (int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n      string[i] = string[i] + 'A' - 'a';\n  \
    \  } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i]\
    \ + 'a' - 'A';\n    }\n  }\n  return string;", "    std::string str = string;\n\
    \    for (auto &i : str) {\n        if (std::isupper(i))\n            i = std::tolower(i);\n\
    \    }\n    return str;", "    std::string new_string;\n    for(char c: string)\
    \ {\n        if(c >= 'a' && c <= 'z')\n            c += 'A' - 'a';\n        else\
    \ if(c == 'A' || c == 'a') \n            c += 'a';\n        new_string += c;\n\
    \    }\n    return new_string;", "  for (auto &c : string) {\n    if ((c >= 'A'\
    \ && c <= 'Z') || (c >= 'a' && c <= 'z'))\n      c = std::toupper(c);\n  }\n \
    \ return string;", "  std::reverse(string.begin(), string.end());\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  return string;", "    std::string\
    \ out;\n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            out += string[i]-'a'+('a'+1);\n \
    \       }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n    \
    \        out += string[i]-'A'+('A'+1);\n        }\n        else\n        {\n \
    \           out += string[i];\n        }\n    }\n    return out;", "  for (size_t\
    \ i = 0; i < string.size(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n\
    \      string[i] ^= ('A' - 'a');\n    else if (string[i] >= 'A' && string[i] <=\
    \ 'Z')\n      string[i] ^= ('a' - 'A');\n  }\n  return string;", "    for(auto\
    \ &ch : string) {\n        switch(ch) {\n            case ' ':\n             \
    \   ch = '\\n';\n                break;\n            case 'a':\n            case\
    \ 'A':\n                ch = 'A';\n                break;\n            case 'b':\n\
    \            case 'B':\n                ch = 'B';\n                break;\n  \
    \          case 'c':\n            case 'C':\n                ch = 'C';\n     \
    \           break;\n            case 'd':\n            case 'D':\n           \
    \     ch = 'D';\n                break;\n            case 'e':\n            case\
    \ 'E':\n                ch = 'E';\n                break;\n            case 'f':\n\
    \            case 'F':\n                ch = 'F';\n                break;\n  \
    \          case 'g':\n            case 'G':\n                ch = 'G';\n     \
    \           break;\n            case 'h':\n            case 'H':\n           \
    \     ch = 'H';\n                break;\n            case 'i':\n            case\
    \ 'I':\n                ch = 'I';\n                break;\n            case 'j':\n\
    \            case 'J':\n                ch = 'J';\n                break;\n  \
    \          case 'k':\n            case 'K':\n                ch = 'K';\n     \
    \           break;\n            case 'l':\n            case 'L':\n           \
    \     ch = 'L';\n                break;\n            case 'm':\n            case\
    \ 'M':\n                ch = 'M';\n                break;\n            case 'n':\n\
    \            case 'N':\n                ch = 'N';\n                break;\n  \
    \          case 'o':\n            case 'O':\n                ch = 'O';\n     \
    \           break;\n            case 'p':\n            case 'P':\n           \
    \     ch = 'P';\n                break;\n            case 'q':\n            case\
    \ 'Q':\n                ch = 'Q';\n                break;\n            case 'r':\n\
    \            case 'R':\n                ch = 'R';\n                break;\n  \
    \          case 's':\n            case 'S':\n                ch = 'S';\n     \
    \           break;\n            case 't':\n            case 'T':\n           \
    \     ch = 'T';\n                break;\n            case 'u':\n            case\
    \ 'U':\n                ch = 'U';\n                break;\n            case 'v':\n\
    \            case 'V':\n                ch = 'V';\n                break;\n  \
    \          case 'w':\n            case 'W':\n                ch = 'W';\n     \
    \           break;\n            case 'x':\n            case 'X':\n           \
    \     ch = 'X';\n                break;\n            case 'y':\n            case\
    \ 'Y':\n                ch = 'Y';\n                break;\n            case 'z':\n\
    \            case 'Z':\n                ch = 'Z';\n                break;\n  \
    \          default:\n                ch = ' ';\n                break;\n     \
    \   }\n    }\n    return string;", "    int len = string.length();\n    for (int\
    \ i = 0; i < len; i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\n\
    \            string[i] += 32;\n        else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n            string[i] += 32;\n    }\n    return string;", "  std::string\
    \ res = string;\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ == string[0]) {\n      for (int j = 1; j < string.length(); j++) {\n       \
    \ if (string[j] == string[i]) {\n          res[i] = res[j]; res[j] = res[i];\n\
    \        }\n      }\n    }\n  }\n  return res;", "    size_t pos = 0;\n    for\
    \ (size_t i = 0; i < string.size(); i++) {\n        pos = (i + 1) & 1;\n     \
    \   if (pos == 0) {\n            string[i] = string[i].toupper();\n        } else\
    \ {\n            string[i] = string[i].tolower();\n        }\n    }\n    return\
    \ string;", "  std::string flipped_string = string; // Use this to store the flipped\
    \ string.\n  for (int i = 0; i < string.size(); i++) {\n    if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n      flipped_string[i] = string[i] - 32;\n    }\n \
    \   else if (string[i] >= 'A' && string[i] <= 'Z') {\n      flipped_string[i]\
    \ = string[i] + 32;\n    }\n  }\n  return flipped_string;", "\tstring flippedString\
    \ = string;\n\tfor (size_t i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ < 'a' || string[i] > 'z') {\n\t\t\tflippedString[i] = toupper(string[i]);\n\t\
    \t} else {\n\t\t\tflippedString[i] = tolower(string[i]);\n\t\t}\n\t}\n\treturn\
    \ flippedString;", "   std::for_each(string.begin(), string.end(), [](char c)\n\
    \   {\n       if (std::isupper(c))\n           c = std::toupper(c);\n       else\
    \ if (std::islower(c))\n           c = std::tolower(c);\n       });\n   return\
    \ string;\n   }\n// Count number of times a character appears in a string.\nint\
    \ count(std::string str, char ch) {\n   int count = 0;\n   for (auto i : str)\
    \ {\n       if (i == ch)\n           count++;\n   }\n   return count;", "  std::reverse(string.begin(),\
    \ string.end());\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  return string;", "    for (auto c : string) {\n        bool flag\
    \ = false;\n        if (c == std::toupper(c)) {\n            flag = true;\n  \
    \      }\n        string += flag ? std::tolower(c) : std::toupper(c);\n    }\n\
    \    return string;", "  std::transform(string.cbegin(), string.cend(), string.begin(),\
    \ ::tolower);\n  std::transform(string.cbegin(), string.cend(), string.begin(),\
    \ ::toupper);\n  return string;", "  string s;\n  for(int i=0; i<string.length();\
    \ i++) {\n    if(string[i]=='a' || string[i]=='A') {\n      s += string[i]+'A';\n\
    \    } else {\n      s += string[i];\n    }\n  }\n  return s;", "    std::string\
    \ result = string;\n    for (std::string::iterator it = result.begin(); it !=\
    \ result.end(); it++) {\n        if (*it >= 'A' && *it <= 'Z') {\n           \
    \ *it = 'a';\n        } else if (*it >= 'a' && *it <= 'z') {\n            *it\
    \ = 'A';\n        }\n    }\n    return result;", "    for (size_t i = 0; i < string.size();\
    \ i++)\n    {\n        if (isupper(string[i]) == true)\n        {\n          \
    \  string[i] = toupper(string[i]);\n        }\n        if (islower(string[i])\
    \ == true)\n        {\n            string[i] = tolower(string[i]);\n        }\n\
    \    }\n    return string;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <=\
    \ 'Z') {\n            result += string[i] + ('a' - 'A');\n        } else {\n \
    \           result += string[i];\n        }\n    }\n    return result;", "   \
    \ for (auto &ch: string) {\n        if (ch >= 'a' && ch <= 'z') {\n          \
    \  ch ^= 0x20;\n        } else if (ch >= 'A' && ch <= 'Z') {\n            ch ^=\
    \ 0x21;\n        } else {\n            ch = ch & 0x20;\n        }\n    }\n   \
    \ return string;", "    for (char &ch : string) {\n        if (ch >= 'a' && ch\
    \ <= 'z') {\n            ch = ch - 'a' + 'A';\n        }\n        if (ch >= 'A'\
    \ && ch <= 'Z') {\n            ch = ch - 'A' + 'a';\n        }\n    }\n    return\
    \ string;", "    for (auto &c : string) {\n        if ('a' <= c && c <= 'z') {\n\
    \            string += toupper(c);\n        }\n        if ('A' <= c && c <= 'Z')\
    \ {\n            string += tolower(c);\n        }\n    }\n    return string;",
  "  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] += 'A' - 'a';\n    } else if (string[i] >= 'A' &&\
    \ string[i] <= 'Z') {\n      string[i] += 'a' - 'A';\n    }\n  }\n  return string;",
  "    for(std::string::size_type i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n   \
    \     }\n        else if (string[i] >= 'A' && string[i] <= 'Z') {\n          \
    \  string[i] = string[i] + 32;\n        }\n    }\n    return string;", "    std::string\
    \ new_string;\n    for (int i = 0; i < string.length(); i++) {\n        char ch\
    \ = string[i];\n        if (ch >= 'A' && ch <= 'Z') {\n            new_string\
    \ += (char) (ch - 'A' + 'a');\n        } else if (ch >= 'a' && ch <= 'z') {\n\
    \            new_string += (char) (ch - 'a' + 'A');\n        } else {\n      \
    \      new_string += ch;\n        }\n    }\n    return new_string;", "  std::reverse(string.begin(),\
    \ string.end());\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  return string;", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    return string;", "    std::string result =\
    \ string;\n    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c -= 'a' - 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         c += 'a' - 'A';\n        } else {\n            c += 1;\n        }\n\
    \    }\n    return result;", "    std::string output = string;\n    std::transform(output.begin(),\
    \ output.end(), output.begin(), [](char c){return c < 'a' ? c + ('a' - 'A') :\
    \ c - ('A' - 'a');});\n    return output;", "    for (auto &c : string) {\n  \
    \      switch (c) {\n        case 'a':\n            c = 'A';\n            break;\n\
    \        case 'b':\n            c = 'B';\n            break;\n        case 'c':\n\
    \            c = 'C';\n            break;\n        case 'd':\n            c =\
    \ 'D';\n            break;\n        case 'e':\n            c = 'E';\n        \
    \    break;\n        case 'f':\n            c = 'F';\n            break;\n   \
    \     case 'g':\n            c = 'G';\n            break;\n        case 'h':\n\
    \            c = 'H';\n            break;\n        case 'i':\n            c =\
    \ 'I';\n            break;\n        case 'j':\n            c = 'J';\n        \
    \    break;\n        case 'k':\n            c = 'K';\n            break;\n   \
    \     case 'l':\n            c = 'L';\n            break;\n        case 'm':\n\
    \            c = 'M';\n            break;\n        case 'n':\n            c =\
    \ 'N';\n            break;\n        case 'o':\n            c = 'O';\n        \
    \    break;\n        case 'p':\n            c = 'P';\n            break;\n   \
    \     case 'q':\n            c = 'Q';\n            break;\n        case 'r':\n\
    \            c = 'R';\n            break;\n        case 's':\n            c =\
    \ 'S';\n            break;\n        case 't':\n            c = 'T';\n        \
    \    break;\n        case 'u':\n            c = 'U';\n            break;\n   \
    \     case 'v':\n            c = 'V';\n            break;\n        case 'w':\n\
    \            c = 'W';\n            break;\n        case 'x':\n            c =\
    \ 'X';\n            break;\n        case 'y':\n            c = 'Y';\n        \
    \    break;\n        case 'z':\n            c = 'Z';\n            break;\n   \
    \     default:\n            break;\n        }\n    }\n    return string;", " \
    \ std::reverse(string.begin(), string.end());\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;", "    for (auto\
    \ &c: string) {\n        if (c >= 'a' && c <= 'z')\n            c = (c - 'a')\
    \ + 'A';\n        else if (c >= 'A' && c <= 'Z')\n            c = (c - 'A') +\
    \ 'a';\n    }\n    return string;", "  std::string temp = string;\n  for (char\
    \ c : temp) {\n    if (c >= 'a' && c <= 'z') c += 32;\n    else if (c >= 'A' &&\
    \ c <= 'Z') c -= 32;\n    temp += c;\n  }\n  return temp;", "  string flipped_string;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    char c = string[i];\n    if\
    \ (c == 'a')\n      c = 'A';\n    else if (c == 'b')\n      c = 'B';\n    else\
    \ if (c == 'c')\n      c = 'C';\n    else if (c == 'd')\n      c = 'D';\n    else\
    \ if (c == 'e')\n      c = 'E';\n    else if (c == 'f')\n      c = 'F';\n    else\
    \ if (c == 'g')\n      c = 'G';\n    else if (c == 'h')\n      c = 'H';\n    else\
    \ if (c == 'i')\n      c = 'I';\n    else if (c == 'j')\n      c = 'J';\n    else\
    \ if (c == 'k')\n      c = 'K';\n    else if (c == 'l')\n      c = 'L';\n    else\
    \ if (c == 'm')\n      c = 'M';\n    else if (c == 'n')\n      c = 'N';\n    else\
    \ if (c == 'o')\n      c = 'O';\n    else if (c == 'p')\n      c = 'P';\n    else\
    \ if (c == 'q')\n      c = 'Q';\n    else if (c == 'r')\n      c = 'R';\n    else\
    \ if (c == 's')\n      c = 'S';\n    else if (c == 't')\n      c = 'T';\n    else\
    \ if (c == 'u')\n      c = 'U';\n    else if (c == 'v')\n      c = 'V';\n    else\
    \ if (c == 'w')\n      c = 'W';\n    else if (c == 'x')\n      c = 'X';\n    else\
    \ if (c == 'y')\n      c = 'Y';\n    else if (c == 'z')\n      c = 'Z';\n    else\
    \ if (c == 'A')\n      c = 'a';\n    else if (c == 'B')\n      c = 'b';\n    else\
    \ if (c == 'C')\n      c = 'c';\n    else if (c == 'D')\n      c = 'd';\n    else\
    \ if (c == 'E')\n      c = 'e';\n    else if (c == 'F')\n      c = 'f';\n    else\
    \ if (c == 'G')\n      c = 'g';\n    else if (c == 'H')\n      c = 'h';\n    else\
    \ if (c == 'I')\n      c = 'i';\n    else if (c == 'J')\n      c = 'j';\n    else\
    \ if (c == 'K')\n      c = 'k';\n    else if (c == 'L')\n      c = 'l';\n    else\
    \ if (c == 'M')\n      c = 'm';\n    else if (c == 'N')\n      c = 'n';\n    else\
    \ if (c == 'O')\n      c = 'o';\n    else if (c == 'P')\n      c = 'p';\n    else\
    \ if (c == 'Q')\n      c = 'q';\n    else if (c == 'R')\n      c = 'r';\n    else\
    \ if (c == 'S')\n      c = 's';\n    else if (c == 'T')\n      c = '", "  std::transform(string.cbegin(),\
    \ string.cend(), string.begin(), ::toupper);\n  std::transform(string.cbegin(),\
    \ string.cend(), string.begin(), ::tolower);\n  return string;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    return std::string(string.begin(),\
    \ ::tolower(string.begin()));", "  for (int i = 0; i < string.length(); i++)\n\
    \    string[i] = tolower(string[i]);\n  return string;", "  for (int i = 0; i\
    \ < string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n\
    \      string[i] = string[i] - 32;\n    }\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;",
  "    for (std::string::size_type i = 0; i < string.length(); i++) {\n        if\
    \ (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = 'a' + (string[i]\
    \ - 'A');\n        }\n        if (string[i] >= 'a' && string[i] <= 'z') {\n  \
    \          string[i] = 'A' + (string[i] - 'a');\n        }\n    }\n    return\
    \ string;", "    std::string s = string;\n    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::toupper);\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    return s;", "    std::string result = string;\n    for (unsigned int i =\
    \ 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <=\
    \ 'z')\n            result[i] = string[i] - 32;\n        else if (string[i] >=\
    \ 'A' && string[i] <= 'Z')\n            result[i] = string[i] - 64;\n    }\n \
    \   return result;", "    for(unsigned int i = 0; i < string.length(); i++) {\n\
    \        switch(string[i]) {\n            case 'a':\n            case 'b':\n \
    \           case 'c':\n            case 'd':\n            case 'e':\n        \
    \    case 'f':\n            case 'g':\n            case 'h':\n            case\
    \ 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n\
    \            case 'm':\n            case 'n':\n            case 'o':\n       \
    \     case 'p':\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n            case 't':\n            case 'u':\n            case 'v':\n\
    \            case 'w':\n            case 'x':\n            case 'y':\n       \
    \     case 'z':\n                string[i] = string[i].toupper();\n          \
    \      break;\n            default:\n                string[i] = string[i].tolower();\n\
    \        }\n    }\n    return string;", "    std::reverse(string.begin(), string.end());\n\
    \    string s = \"\";\n    for (auto i : string)\n        s += (i ^ 32) < 95 ?\
    \ \"A\" : \"a\";\n    return s;", "    for (std::string::size_type i = 0; i !=\
    \ string.length(); ++i) {\n        if (string[i] == 'a') {\n            string[i]\
    \ = 'A';\n        } else if (string[i] == 'b') {\n            string[i] = 'B';\n\
    \        } else if (string[i] == 'c') {\n            string[i] = 'C';\n      \
    \  } else if (string[i] == 'd') {\n            string[i] = 'D';\n        } else\
    \ if (string[i] == 'e') {\n            string[i] = 'E';\n        } else if (string[i]\
    \ == 'f') {\n            string[i] = 'F';\n        } else if (string[i] == 'g')\
    \ {\n            string[i] = 'G';\n        } else if (string[i] == 'h') {\n  \
    \          string[i] = 'H';\n        } else if (string[i] == 'i') {\n        \
    \    string[i] = 'I';\n        } else if (string[i] == 'k') {\n            string[i]\
    \ = 'K';\n        } else if (string[i] == 'l') {\n            string[i] = 'L';\n\
    \        } else if (string[i] == 'm') {\n            string[i] = 'M';\n      \
    \  } else if (string[i] == 'n') {\n            string[i] = 'N';\n        } else\
    \ if (string[i] == 'o') {\n            string[i] = 'O';\n        } else if (string[i]\
    \ == 'p') {\n            string[i] = 'P';\n        } else if (string[i] == 'q')\
    \ {\n            string[i] = 'Q';\n        } else if (string[i] == 'r') {\n  \
    \          string[i] = 'R';\n        } else if (string[i] == 's') {\n        \
    \    string[i] = 'S';\n        } else if (string[i] == 't') {\n            string[i]\
    \ = 'T';\n        } else if (string[i] == 'u') {\n            string[i] = 'U';\n\
    \        } else if (string[i] == 'v') {\n            string[i] = 'V';\n      \
    \  } else if (string[i] == 'w') {\n            string[i] = 'W';\n        } else\
    \ if (string[i] == 'x') {\n            string[i] = 'X';\n        } else if (string[i]\
    \ == 'y') {\n            string[i] = 'Y';\n        } else if (string[i] == 'z')\
    \ {\n            string[i] = 'Z';\n        } else if (string[i] == 'A') {\n  \
    \          string[i] = 'a';\n        } else if (string[i] == 'B') {\n        \
    \    string[i] = 'b';\n        } else if (string[i] == 'C') {\n            string[i]\
    \ = 'c';\n        } else if (string[i] == 'D') {\n            string[i] = 'd';\n\
    \        } else if (string[i] == 'E') {\n            string[i] = 'e';\n      \
    \  } else if (string[i] == 'F') {\n            string[i] = 'f';\n        } else\
    \ if (string[i] == 'G') {\n            string[i] = 'g';\n        } else if (string[i]\
    \ == 'H') {\n            string[i] = 'h';\n        } else if (string[i] == 'I')\
    \ {\n            string[i] = 'i';\n        } else if (string[i] == 'J') {\n  \
    \          string[i] = 'j';\n        } else if (string[i] == 'K') {\n        \
    \    string", "    for (auto &ch: string) {\n        if (ch >= 'a' && ch <= 'z')\
    \ {\n            ch += 'A' - 'a';\n        }\n        else if (ch >= 'A' && ch\
    \ <= 'Z') {\n            ch += 'a' - 'A';\n        }\n        else if (ch >= '0'\
    \ && ch <= '9') {\n            ch += ch - '0';\n        }\n        else if (ch\
    \ == ' ' || ch == '\\t' || ch == '\\f') {\n            ch = ' ';\n        }\n\
    \        else if (ch == '\\n') {\n            ch = '\\n';\n        }\n    }\n\
    \    return string;", "    for (size_t i = 0; i < string.length(); ++i) {\n  \
    \      if (string[i] >= 'a' && string[i] <= 'z')\n            string[i] ^= ('A'\
    \ - 'a');\n        else if (string[i] >= 'A' && string[i] <= 'Z')\n          \
    \  string[i] ^= ('a' - 'A');\n    }\n    return string;", "    std::string ret\
    \ = string;\n    std::transform(string.cbegin(), string.cend(), string.cbegin(),\
    \ [](char ch) {\n        if (std::tolower(ch) == ch)\n            return std::toupper(ch);\n\
    \        return ch;\n    });\n    return ret;", "    for(std::string::iterator\
    \ it = string.begin(); it != string.end(); ++it)\n    {\n        if(*it >= 'a'\
    \ && *it <= 'z')\n            *it = *it - 32;\n        else if(*it >= 'A' && *it\
    \ <= 'Z')\n            *it = *it - 32;\n    }\n    return string;", "    std::string\
    \ retVal = string;\n    for (auto &character : string)\n    {\n        if (character\
    \ >= 'A' && character <= 'Z')\n        {\n            retVal = retVal.erase(retVal.find(character),\
    \ 1);\n            retVal = retVal.insert(retVal.begin(), character + ('A' - 'a'));\n\
    \        }\n        else if (character >= 'a' && character <= 'z')\n        {\n\
    \            retVal = retVal.erase(retVal.find(character), 1);\n            retVal\
    \ = retVal.insert(retVal.begin(), character + ('a' - 'A'));\n        }\n    }\n\
    \    return retVal;", "    for (int i = 0; i < string.length(); i++) {\n     \
    \   char ch = string[i];\n        if ('A' <= ch && ch <= 'Z') {\n            string[i]\
    \ = 'a' + ch - 'A';\n        } else {\n            string[i] = ch;\n        }\n\
    \    }\n    return string;", "    string result;\n    for (auto &c : string) {\n\
    \        c = toupper(c);\n    }\n    return result;", "  std::stack<char> st;\n\
    \  for (char c : string) {\n    if (std::toupper(c) != c)\n      st.push(c);\n\
    \    else if (std::tolower(c) != c)\n      st.push( std::toupper(c));\n    else\n\
    \      st.push( std::tolower(c));\n  }\n  return st.top();", "  for (int i = 0;\
    \ i < string.size(); i++) {\n    char c = string[i];\n    if (c >= 'a' && c <=\
    \ 'z') {\n      string[i] = c ^ ('A' + c - 'a');\n    } else {\n      string[i]\
    \ = c;\n    }\n  }\n  return string;", "  std::string out;\n  for(auto &c : string)\
    \ {\n    if(c == 'a') c = 'A';\n    if(c == 'b') c = 'B';\n    if(c == 'c') c\
    \ = 'C';\n    if(c == 'd') c = 'D';\n    if(c == 'e') c = 'E';\n    if(c == 'f')\
    \ c = 'F';\n    if(c == 'g') c = 'G';\n    if(c == 'h') c = 'H';\n    if(c ==\
    \ 'i') c = 'I';\n    if(c == 'j') c = 'J';\n    if(c == 'k') c = 'K';\n    if(c\
    \ == 'l') c = 'L';\n    if(c == 'm') c = 'M';\n    if(c == 'n') c = 'N';\n   \
    \ if(c == 'o') c = 'O';\n    if(c == 'p') c = 'P';\n    if(c == 'q') c = 'Q';\n\
    \    if(c == 'r') c = 'R';\n    if(c == 's') c = 'S';\n    if(c == 't') c = 'T';\n\
    \    if(c == 'u') c = 'U';\n    if(c == 'v') c = 'V';\n    if(c == 'w') c = 'W';\n\
    \    if(c == 'x') c = 'X';\n    if(c == 'y') c = 'Y';\n    if(c == 'z') c = 'Z';\n\
    \    if(c == 'A') c = 'a';\n    if(c == 'B') c = 'b';\n    if(c == 'C') c = 'c';\n\
    \    if(c == 'D') c = 'd';\n    if(c == 'E') c = 'e';\n    if(c == 'F') c = 'f';\n\
    \    if(c == 'G') c = 'g';\n    if(c == 'H') c = 'h';\n    if(c == 'I') c = 'i';\n\
    \    if(c == 'J') c = 'j';\n    if(c == 'K') c = 'k';\n    if(c == 'L') c = 'l';\n\
    \    if(c == 'M') c = 'm';\n    if(c == 'N') c = 'n';\n    if(c == 'O') c = 'o';\n\
    \    if(c == 'P') c = 'p';\n    if(c == 'Q') c = 'q';\n    if(c == 'R') c = 'r';\n\
    \    if(c == 'S') c = 's';\n    if(c == 'T') c = 't';\n    if(c == 'U') c = 'u';\n\
    \    if(c == 'V') c = 'v';\n    if(c == 'W') c = 'w';\n    if(c == 'X') c = 'x';\n\
    \    if", "    \n    for( int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string::tolower) {\n            string[i] = string::toupper;\n        }\n\
    \        else if (string[i] == string::toupper) {\n            string[i] = string::tolower;\n\
    \        }\n    }\n    return string;", "  string result = string;\n  for (int\
    \ i = 0; i < string.length(); i++)\n    if (string[i] >= 'a' && string[i] <= 'z')\n\
    \      result[string[i] - 'a' + 'A'] = string[i];\n    else if (string[i] >= 'A'\
    \ && string[i] <= 'Z')\n      result[string[i] - 'A' + 'a'] = string[i];\n   \
    \ else\n      result[i] = string[i];\n  return result;", "  std::string out;\n\
    \  for(size_t i = 0; i != string.length(); ++i) {\n    if(string[i] >= 'a' &&\
    \ string[i] <= 'z') {\n      out += string[i];\n    } else {\n      out += 'A'\
    \ + (string[i] - 'a');\n    }\n  }\n  return out;", "    string result = \"\"\
    ;\n    for ( int i = 0; i < string.length(); i++ ) {\n        if ( string[i] ==\
    \ string[i][0] ) {\n            result += string[i] + string[i][1];\n        }\n\
    \    }\n    return result;", "    string temp(string);\n    for (auto c : temp)\
    \ {\n        c = toupper(c);\n    }\n    return temp;", "    for(std::string::size_type\
    \ i = 0; i < string.size(); ++i) {\n        if(string[i] >= 'A' && string[i] <=\
    \ 'Z')\n            string[i] ^= 0x20;\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n            string[i] ^= 0x20;\n    }\n    return string;", "    for\
    \ (std::size_t i = 0; i < string.length(); i++) {\n        string[i] = std::toupper(string[i]);\n\
    \    }\n    return string;", "    string temp = string;\n    size_t length = string.length();\n\
    \    for (size_t i = 0; i < length; i++) {\n        char c = string[i];\n    \
    \    if (('A' <= c) && (c <= 'Z')) {\n            c = toupper(c);\n        } else\
    \ if (('a' <= c) && (c <= 'z')) {\n            c = tolower(c);\n        }\n  \
    \      temp[i] = c;\n    }\n    return temp;", "  std::transform(string.toLower(),\
    \ string.toUpper(), string.begin(), [](char c) {\n    return c == std::tolower(c)\
    \ ? std::toupper(c) : c;\n  });\n  return string;", "    string newString;\n \
    \   for (int i = 0; i < string.length(); i++) {\n        if (isupper(string[i]))\n\
    \            newString += string[i];\n        else\n            newString += tolower(string[i]);\n\
    \    }\n    return newString;", "    std::map<char, char> char_map;\n    for (auto\
    \ &it : string) {\n        char_map[tolower(it)] = toupper(it);\n        char_map[toupper(it)]\
    \ = tolower(it);\n    }\n    return std::string(char_map.begin(), char_map.end());",
  "    std::string uppercase_string;\n    std::string lowercase_string;\n\n    //\
    \ Loop through the string and save the original case\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        if (string[i] == string::toupper(string[i]))\
    \ {\n            uppercase_string = string;\n        }\n        else if (string[i]\
    \ == string::tolower(string[i])) {\n            lowercase_string = string;\n \
    \       }\n    }\n\n    // Loops through the string and replace all lowercase\
    \ with uppercase and vice versa\n    for (int i = 0; i < string.size(); i++) {\n\
    \        if (string[i] == string::toupper(string[i])) {\n            string[i]\
    \ = string[i];\n        }\n        else if (string[i] == string::tolower(string[i]))\
    \ {\n            string[i] = string[i];\n        }\n    }\n    return uppercase_string\
    \ + lowercase_string;", "    int size = string.size();\n    std::string ans =\
    \ string;\n    for (int i = 0; i < size; i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            ans[i] = string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            ans[i] = string[i]\
    \ + 32;\n        } else {\n            ans[i] = string[i];\n        }\n    }\n\
    \    return ans;", "    size_t end = string.size();\n    for (size_t i = 0; i\
    \ < end; i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\n         \
    \   string[i] = string[i] - 32;\n        else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n            string[i] = string[i] + 32;\n    }\n    return string;",
  "\tstd::string newString;\n\tstd::transform(string.cbegin(), string.cend(), newString.begin(),\n\
    \t\t[](char c) { return toupper(c); });\n\tstd::transform(flip_case(newString).cbegin(),\
    \ flip_case(newString).cend(), newString.begin(),\n\t\t[](char c) { return tolower(c);\
    \ });\n\treturn newString;", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    return string;", "    for (size_t i = 0; i\
    \ < string.size(); i++)\n    {\n        if (string[i] >= 'a' && string[i] <= 'z')\n\
    \        {\n            string[i] = string[i] - 32;\n        }\n        else if\
    \ (string[i] >= 'A' && string[i] <= 'Z')\n        {\n            string[i] = string[i]\
    \ + 32;\n        }\n    }\n    return string;", "  for (char c : string) {\n \
    \   if (c >= 'a' && c <= 'z')\n      c ^= 32;\n    if (c >= 'A' && c <= 'Z')\n\
    \      c ^= 32;\n  }\n  return string;", "  string new_string = \"\";\n  for (int\
    \ i = 0; i < string.length(); i++) {\n    char character = string[i];\n    if\
    \ (character >= 'A' && character <= 'Z') {\n      new_string += (character - 'A')\
    \ + 'a';\n    } else if (character >= 'a' && character <= 'z') {\n      new_string\
    \ += (character - 'a') + 'A';\n    } else {\n      new_string += character;\n\
    \    }\n  }\n  return new_string;", "    std::ostringstream os;\n    for (auto\
    \ &c : string) {\n        os << (c >= 'a' && c <= 'z' ? 'A' : 'a') << c << (c\
    \ >= 'A' && c <= 'Z' ? 'a' : 'A');\n    }\n    return os.str();", "    std::string\
    \ s = string;\n    for (int i = 0, n = s.size() - 1; i < n; ++i) {\n        char\
    \ c = s[i];\n        if (c >= 'A' && c <= 'Z') {\n            s[i] = c ^ ('A'\
    \ - 'A');\n        } else if (c >= 'a' && c <= 'z') {\n            s[i] = c ^\
    \ ('z' - 'a');\n        }\n    }\n    return s;", "  // Convert the string to\
    \ lower case.\n  string lower(string);\n  std::transform(lower.begin(), lower.end(),\
    \ lower.begin(), ::tolower);\n  // Convert the lower case string to a reverse\
    \ copy of the lower case string.\n  std::reverse(lower.begin(), lower.end());\n\
    \  // Convert the string back to lower case.\n  string upper(string);\n  std::transform(upper.begin(),\
    \ upper.end(), upper.begin(), ::toupper);\n  // Convert the upper case string\
    \ to a reverse copy of the upper case string.\n  std::reverse(upper.begin(), upper.end());\n\
    \  // Return the reverse string.\n  return lower;", "  // Your code here\n  if(string.length()==0)\
    \ return string;\n  bool flag=false;\n  for(auto i=0;i<string.length();i++){\n\
    \    if(string[i]>=65 && string[i]<=90){\n      string[i]=65-(i+1);\n      flag=true;\n\
    \    }\n    else if(flag==false){\n      string[i]=string[i]+32;\n    }\n  }\n\
    \  \n  return string;", "  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  return string;", "  string out = \"\";\n  for (int i = 0; i <\
    \ string.length(); ++i) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     out += string[i] - 'a' + 'A';\n    } else {\n      out += string[i];\n \
    \   }\n  }\n  return out;"]
stop_tokens:
- "\n}"
