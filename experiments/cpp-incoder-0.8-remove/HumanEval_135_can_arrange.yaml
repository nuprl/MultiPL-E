name: HumanEval_135_can_arrange
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns\
  \ the largest index of an element which\n// is not greater than or equal to the\
  \ element immediately preceding it. If\n// no such element exists then return -1.\
  \ The given array will not contain\n// duplicate values.\n// Examples:\nlong can_arrange(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7,\
  \ (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n\
  }\n"
completions: ["    long n = arr.size();\n    long result = -1LL;\n    for (int i =\
    \ 1; i < n; i++) {\n        if (arr[i] > arr[i - 1]) {\n            result = i;\n\
    \        }\n    }\n    return result;", "  int i, n;\n  long largest = 0;\n  n\
    \ = arr.size();\n  for (i = 1; i < n; i++) {\n    if (arr[i] > arr[largest])\n\
    \      largest = i;\n  }\n  if (arr[largest] == arr[n - 1]) {\n    largest = -1;\n\
    \  }\n  return largest;", "\tlong low=-1, high=-1, left=0, right=arr.size();\n\
    \tassert(arr.size() <= 10000);\n\twhile(right > left) {\n\t\tif(arr[left] > arr[right])\n\
    \t\t\tlow = right;\n\t\telse\n\t\t\thigh = left;\n\t\tassert(low < high);\n\t\t\
    if(high-low > 1)\n\t\t\treturn high;\n\t\tleft++;\n\t\tright--;\n\t}\n\treturn\
    \ -1;", "    int size = arr.size();\n    long max_val = INT_MIN;\n    // Find\
    \ max value\n    for(long i=0; i<size; ++i){\n        if(arr[i] > max_val){\n\
    \            max_val = arr[i];\n        }\n    }\n    // Find first not greater\
    \ or equal\n    long ans = -1;\n    for(long i=0; i<size; ++i){\n        if(arr[i]\
    \ <= max_val){\n            ans = i;\n            break;\n        }\n    }\n \
    \   return ans;", "    // Your code goes here\n    assert(arr.size() != 0);\n\
    \    std::set<long> s;\n    for (auto it : arr) {\n        if (s.find(it) == s.end())\
    \ {\n            s.insert(it);\n            if (it > arr[s.rbegin()]) {\n    \
    \            return it;\n            }\n        }\n    }\n    return -1;", " \
    \   // code here\n    long i = 0, j = 0, k = 0;\n    for (; i < arr.size() - 1;\
    \ i++) {\n        for (j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ < arr[j]) {\n                k = j;\n                break;\n            }\n\
    \        }\n        if (k != -1) {\n            break;\n        }\n    }\n   \
    \ if (k == -1) {\n        return -1;\n    }\n    long maxIndex = i + 1;\n    for\
    \ (; k < arr.size(); k++) {\n        if (arr[i] > arr[k]) {\n            k = arr.size();\n\
    \            break;\n        }\n    }\n    return maxIndex;", "  int size = arr.size();\n\
    \  assert(size >= 1);\n  long maxi = -1LL;\n  for (int i = 1; i < size; i++) {\n\
    \    if (arr[i] > arr[i - 1]) {\n      maxi = i;\n    }\n  }\n  return maxi;",
  '    // code here', '    // code goes here', "    // Code here\n    if(arr.size()\
    \ <= 1) return -1;\n    long result = 0;\n    long max = arr[0];\n    for(long\
    \ i = 1; i < arr.size(); i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            result = i;\n        }\n    }\n    return result;", "     long maxIndex\
    \ = -1;\n     for (auto i = 0LL; i < arr.size(); i++) {\n         if (i > 0) {\n\
    \             if (arr[i] <= arr[i - 1]) {\n                 return maxIndex;\n\
    \             }\n             maxIndex = i;\n         }\n     }\n     return maxIndex;\n\
    \ }\n \n long largest(std::vector<int> arr) {\n     long maxIndex = -1;\n    \
    \ for (auto i = 0LL; i < arr.size(); i++) {\n         if (i > 0) {\n         \
    \    if (arr[i] > arr[i - 1]) {\n                 return maxIndex;\n         \
    \    }\n             maxIndex = i;\n         }\n     }\n     return maxIndex;\n\
    \ }\n \n bool isSorted(std::vector<long> arr) {\n     // If it is already sorted\
    \ return true\n     if (arr.size() <= 1) {\n         return true;\n     }\n  \
    \   \n     long startIndex = 0, endIndex = arr.size() - 1;\n     while (endIndex\
    \ >= startIndex) {\n         long midIndex = startIndex + (endIndex - startIndex)\
    \ / 2;\n         if (arr[midIndex] > arr[endIndex]) {\n             endIndex =\
    \ midIndex - 1;\n         } else {\n             startIndex = midIndex + 1;\n\
    \         }\n     }\n     \n     return arr[endIndex] == arr[endIndex - 1];\n\
    \ }\n \n long largest(std::vector<int> arr) {\n     long maxIndex = -1;\n    \
    \ for (auto i = 0LL; i < arr.size(); i++) {\n         if (i > 0) {\n         \
    \    if (arr[i] > arr[i - 1]) {\n                 return maxIndex;\n         \
    \    }\n             maxIndex = i;\n         }\n     }\n     return maxIndex;\n\
    \ }\n \n bool isSorted(std::vector<long> arr) {\n     // If it is already sorted\
    \ return true\n     if (arr.size() <= 1) {\n         return true;\n     }\n  \
    \   \n     long startIndex = 0, endIndex = arr.size() - 1;\n     while (endIndex\
    \ >= startIndex) {\n         long midIndex = startIndex + (endIndex - startIndex)\
    \ / 2;\n         if (arr[midIndex] > arr[endIndex]) {\n             endIndex =\
    \ midIndex - 1;\n         } else {\n             startIndex = midIndex + 1;\n\
    \         }\n     }\n     \n     return arr[endIndex] == arr[endIndex - 1];\n\
    \ }\n \n // Your code here\n \nint main() {\n    std::ios_base::sync_with_stdio(false);\n\
    \    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int n;\n    cin >> n;\n  \
    \  std::vector<int> arr;\n    for (int i = 1; i <= n; i++) {\n        int x;\n\
    \        cin >> x;\n        arr.push_back(x);\n    }\n    ", "  // your code here\n\
    \    long largest = -1, temp;\n    for (long i=0; i<arr.size(); i++)\n    {\n\
    \        temp = arr[i];\n        for(int j=i; j>=0 && temp < arr[j-1]; j--)\n\
    \        {\n            arr[j-1] = arr[j];\n        }\n        arr[arr.size()]\
    \ = temp;\n        if(largest < arr.size())\n            largest = arr.size();\n\
    \    }\n    return largest;", "  // Code here\n  return 0;", "  // Code here\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int j = i - 1;\n    long first\
    \ = arr[i];\n    long last = arr[j];\n    while (j >= 0 && arr[j] > last) {\n\
    \      j--;\n    }\n    if (j < 0) return -1;\n    if (arr[j] < first) j = j +\
    \ 1;\n    if (i == j) return -1;\n    arr[i] = arr[j];\n    arr[j] = first;\n\
    \  }\n  return arr.size();", "    int n = arr.size();\n    // int min_index =\
    \  std::numeric_limits<int>::max();\n    int min_index = 0;\n    for (int i =\
    \ 1; i < n; i++) {\n        if (arr[i - 1] < arr[i]) {\n            min_index\
    \ = i;\n        }\n    }\n    if (min_index != 0) return min_index;\n    return\
    \ -1;", "    // code here\n    return 0;", "    auto it = std::prev(std::end(arr));\n\
    \    long max_index = *std::max_element(it, std::begin(arr));\n    if (max_index\
    \ >= arr.front())\n        return -1;\n    return max_index;", "    int n = arr.size();\n\
    \    std::vector<long> result;\n    // To store all element except the duplicates\n\
    \    long max_element = 0;\n    long min_element = 1;\n    long temp = 0;\n  \
    \  for (int i = 0; i < n; i++) {\n        // if current element is smaller than\
    \ min element\n        if (arr[i] < min_element) {\n            // then update\
    \ min\n            min_element = arr[i];\n        }\n        // if current element\
    \ is greater than max element\n        if (arr[i] > max_element) {\n         \
    \   // then update max\n            max_element = arr[i];\n        }\n       \
    \ // if the current element is not greater than max element and not\n        //\
    \ smaller than min element\n        else {\n            // then update temp\n\
    \            temp = arr[i];\n            // if temp is not greater than max element\n\
    \            if (temp > max_element) {\n                // then update max element\n\
    \                max_element = temp;\n            }\n            // if temp is\
    \ not smaller than min element\n            else {\n                // then update\
    \ min element\n                min_element = temp;\n            }\n        }\n\
    \    }\n    // if there are no duplicates\n    if (min_element == arr[0]) {\n\
    \        // then return -1\n        return -1;\n    }\n    // otherwise return\
    \ index of max element\n    else {\n        for (int i = 0; i < n; i++) {\n  \
    \          // if current element is greater than max element\n            if (arr[i]\
    \ > max_element) {\n                // then return i\n                return i;\n\
    \            }\n        }\n        // if loop has reached the end\n        return\
    \ -1;\n    }", "    int n = arr.size();\n    long max_index = 0;\n    for (int\
    \ i = 1; i < n; i++) {\n        if (arr[i] >= arr[max_index]) {\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;", "    //write your code here\n\
    \    int n = arr.size();\n    long largest_index = -1;\n    long largest_val =\
    \ arr[0];\n    for (int i = 1; i < n; i++) {\n        if(arr[i] < largest_val)\
    \ {\n            largest_index = i;\n            largest_val = arr[i];\n     \
    \   }\n    }\n    return largest_index;", "    int n = arr.size();\n    long max_idx\
    \ = -1;\n    // loop through the given array\n    for (int i = 0; i < n; i++)\
    \ {\n        // if max_idx is negative, that means there is no such element\n\
    \        if (max_idx < 0) {\n            return -1;\n        }\n\n        // if\
    \ max element is not less than current element then current element\n        //\
    \ is greater than max element\n        if (arr[i] >= arr[max_idx]) {\n       \
    \     // if current element is greater than max element then it will\n       \
    \     // be the max element\n            max_idx = i;\n        }\n    }\n    return\
    \ max_idx;", "    // code here\n    for (auto it=arr.begin();it!=arr.end();it++)\n\
    \    {\n        for(auto it2=it+1;it2!=arr.end();it2++)\n        {\n         \
    \   for(auto it3=it2+1;it3!=arr.end();it3++)\n            {\n                if(*it2>*it3)\n\
    \                {\n                    long val=*it2;\n                    *it2=(*it);\n\
    \                    *it=val;\n                }\n                if(*it3<*it2)\n\
    \                {\n                    long val=*it3;\n                    *it3=(*it2);\n\
    \                    *it2=val;\n                }\n            }\n        }\n\
    \    }\n    return *std::max_element(arr.begin(),arr.end());", "    long res =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        long elem = arr[i];\n\
    \        for (int j = i; j < arr.size(); j++) {\n            if (elem >= arr[j])\
    \ {\n                long temp = arr[j];\n                arr[j] = elem;\n   \
    \             elem = temp;\n            }\n        }\n        if (res < arr[i])\
    \ {\n            res = arr[i];\n        }\n    }\n    return res;", "    // Your\
    \ code goes here\n    int i=0;\n    int j=arr.size()-1;\n    long x=arr[i];\n\
    \    long y=arr[j];\n    i=j=0;\n    while (x<y){\n        i++;\n        j--;\n\
    \        if (j==-1)\n            return -1;\n        x=arr[i];\n        y=arr[j];\n\
    \    }\n    return j;", "    long low = std::numeric_limits<long>::max();\n  \
    \  long high = -1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ >= low) {\n            high = arr[i];\n            low = arr[i + 1];\n     \
    \   } else {\n            if (high == -1) {\n                high = arr[i];\n\
    \            } else {\n                assert(high == arr[i]);\n            }\n\
    \        }\n    }\n    return low;", "    // code here\n    return 0;", "    //\
    \ your code here\n    long max_idx = -1, ans = 0, idx;\n    for (size_t i = 0;\
    \ i < arr.size() - 1; i++) {\n        if (arr[i] >= arr[max_idx + 1]) {\n    \
    \        max_idx = i;\n        }\n    }\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        if (i != max_idx) {\n            if (arr[i] >= arr[idx + 1])\
    \ {\n                idx = i;\n            }\n        }\n    }\n    for (size_t\
    \ i = 0; i < arr.size(); i++) {\n        if (i != max_idx) {\n            if (arr[i]\
    \ > arr[idx + 1]) {\n                ans = i;\n            }\n        }\n    }\n\
    \    return ans;", '    // code here', "  // Write your code here\n  assert(arr.size()\
    \ >= 1);\n  long i = 0;\n  long currIndex = 0;\n  while (i < arr.size()) {\n \
    \   if (arr[i] >= arr[currIndex])\n      ++currIndex;\n    else\n      i = currIndex;\n\
    \  }\n  return -1;", "    long n = arr.size();\n    long max_idx = 0;\n    for\
    \ (long i = 1; i < n; ++i) {\n        if (arr[i] > arr[max_idx]) {\n         \
    \   max_idx = i;\n        }\n    }\n    if (max_idx == n - 1) return -1;\n   \
    \ return max_idx;", "    int n = arr.size();\n    // Index of an element which\
    \ is greater than or equal to its predecessor.\n    int predecessor_index = n\
    \ - 1;\n    // Initialize an int which tracks the largest index.\n    int max_index\
    \ = 0;\n    for (int i = 0; i <= n; i++) {\n        if (arr[i] >= arr[predecessor_index])\
    \ {\n            predecessor_index = i;\n        }\n        // The current element\
    \ index must be greater than or equal to the\n        // previous one.\n     \
    \   if (arr[i] >= arr[max_index]) {\n            max_index = i;\n        }\n \
    \   }\n    return max_index;", "    int largest_index = -1;\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] >= arr[i - 1]) {\n           \
    \ largest_index = i;\n            break;\n        }\n    }\n    return largest_index;",
  "    long ans = -1;\n    int len = (int) arr.size();\n    int count = 0;\n    //\
    \ O(n) - n is the length of the array\n    for (int i = 0; i < len; i++) {\n \
    \       // If i value is greater than or equal to the previous element i\n   \
    \     if (arr[i] > arr[i - 1]) {\n            count++;\n        }\n    }\n   \
    \ ans = arr[len - 1];\n    return count;", "  // Write your code here\n  long\
    \ maxIndex = -1;\n  long currentIndex = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] <= arr[currentIndex]) {\n      currentIndex = i;\n  \
    \  }\n    if (currentIndex != -1) {\n      maxIndex = currentIndex;\n    }\n \
    \ }\n  return maxIndex;", "        long n = arr.size();\n        if (n <= 0)\n\
    \                return -1;\n        long index[n];\n        for (long i = 0;\
    \ i < n; i++)\n                index[i] = i;\n        long largest = 0;\n    \
    \    for (long i = 0; i < n; i++) {\n                if (i != 0 && arr[largest]\
    \ < arr[i])\n                        largest = i;\n        }\n        return largest\
    \ != -1 ? index[largest] : -1;", "    int i, j, n = arr.size();\n    assert(n\
    \ > 1);\n    long max_idx = -1;\n    for (i = 1; i < n; i++) {\n        if (arr[i]\
    \ >= arr[i - 1]) {\n            for (j = i - 1; j >= 0; j--) {\n             \
    \   if (arr[j] >= arr[i]) {\n                    if (max_idx < j) max_idx = j;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return max_idx;", "    int n = arr.size();\n    long ans = -1;\n    for\
    \ (int i = 1; i < n; i++) {\n        if (arr[i] >= arr[i - 1]) {\n           \
    \ if (arr[ans] < arr[i]) ans = i;\n        } else {\n            if (arr[ans]\
    \ > arr[i]) ans = i;\n        }\n    }\n    return ans;", "    long ans = -1LL;\n\
    \    long max = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (max\
    \ == -1 || arr[i] > max) {\n            max = arr[i];\n            ans = i;\n\
    \        }\n    }\n    return ans;", "    long index = -1, val = arr[0];\n   \
    \ for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > val) {\n   \
    \         index = i;\n        }\n        val = arr[i];\n    }\n    return index;",
  '  // Write your code here.', "    int n = arr.size();\n    int largest = -1, ans\
    \ = -1;\n    for(int i = 0; i < (n-1); i++) {\n        if(arr[i] >= arr[i+1])\
    \ {\n            largest = i;\n        }\n    }\n    if(largest != -1) {\n   \
    \     for(int i = largest; i < n; i++) {\n            if(arr[i] > arr[i+1]) {\n\
    \                ans = i;\n                break;\n            }\n        }\n\
    \    }\n    return ans;", "        long maxIndex = -1;\n        long lastIndex\
    \ = -1;\n        for(int i = 0; i < arr.size()-1; i++) {\n            if(arr[i]\
    \ <= arr[lastIndex]) {\n                return -1;\n            }\n          \
    \  lastIndex = i;\n        }\n        maxIndex = arr[lastIndex];\n        return\
    \ maxIndex;\n    }\nint main()\n{\n    std::vector<long> arr;\n    std::cin >>\
    \ arr.size();\n    for(long i = 0; i < arr.size(); i++) {\n        std::cin >>\
    \ arr[i];\n    }\n    long index = can_arrange(arr);\n    if(index == -1) {\n\
    \        std::cout << \"-1\";\n    } else {\n        long res = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr[i] > index) {\n          \
    \      res++;\n            }\n        }\n        if(res == arr.size()) {\n   \
    \         std::cout << index << std::endl; \n        } else {\n            std::cout\
    \ << -1;\n        }\n    }\n    return 0;", "long ans = -1L;\nassert(arr.size()\
    \ == n);\nfor (int i = 1; i < n; ++i) {\n    if (arr[i] >= arr[i-1]) {\n     \
    \   if (ans == -1L) {\n            ans = i;\n        }\n        else if (ans >\
    \ i) {\n            ans = i;\n        }\n    }", "    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (i > 0 && (arr[i - 1] <= arr[i])) {\n            return -1;\n\
    \        }\n    }\n    return -1;", "    long retVal = -1;\n    int size = arr.size();\n\
    \    for (int i = 0; i < size - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n\
    \            retVal = i;\n            break;\n        }\n    }\n    return retVal;",
  "    long max_index = -1;\n    long index = -1;\n    int i = 0;\n    // iterate\
    \ over entire array\n    for (i = 0; i < arr.size(); i++) {\n        // set max\
    \ index if index not greater or equal to i\n        if (arr[i] <= arr[i + 1])\
    \ {\n            max_index = i;\n        }\n        // check if max_index is not\
    \ greater than i\n        // if yes break\n        if (max_index > i) {\n    \
    \        break;\n        }\n    }\n\n    return max_index;", "    // code goes\
    \ here\n    long l = 0, r = arr.size() - 1;\n    while (l <= r) {\n        long\
    \ mid = (l + r) / 2;\n        if (arr[mid] >= mid) {\n            l = mid + 1;\n\
    \        } else {\n            r = mid - 1;\n        }\n    }\n    if (r >= 0)\n\
    \        return r;\n    else\n        return -1;", "    int left = 0, right =\
    \ arr.size() - 1, mid = -1;\n    while (left < right) {\n        mid = (left +\
    \ right) / 2;\n        if (mid != left && mid != right) {\n            if (arr[mid]\
    \ > arr[mid-1]) {\n                left = mid + 1;\n            } else {\n   \
    \             right = mid - 1;\n            }\n        } else {\n            if\
    \ (arr[mid] <= arr[mid-1]) {\n                left = mid + 1;\n            } else\
    \ {\n                right = mid - 1;\n            }\n        }\n    }\n    return\
    \ mid < arr.size() - 1 ? mid + 1 : 0;", "  int n = arr.size();\n  long ans = -1;\n\
    \  for (int i = 0; i < n; ++i) {\n    if (arr[i] <= arr[i+1]) {\n      if (ans\
    \ == -1) {\n        ans = i;\n      } else {\n        ans = std::min(ans, i);\n\
    \      }\n    }\n  }\n  return ans;", "    long long res = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] > arr[j]) {\n                res = arr[i];\n     \
    \       }\n        }\n    }\n    return res;", "    // Your code here\n    long\
    \ ans = -1;\n    long i = 0;\n    for (i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] < arr[i-1]) {\n            break;\n        }\n    }\n    if (i ==\
    \ arr.size()) {\n        ans = i;\n    }\n    return ans;", "    long largest\
    \ = -1;\n    for (long i = 0; i < arr.size(); ++i) {\n        if (arr[i] >= 0\
    \ && arr[i] <= largest) {\n            continue;\n        }\n        if (largest\
    \ == -1) {\n            largest = i;\n        } else {\n            if (arr[i]\
    \ < arr[largest]) {\n                largest = i;\n            }\n        }\n\
    \    }\n    return largest;", "  int n = arr.size();\n  long long ans = INT_MIN;\n\
    \  for (int i = 0; i < n; i++) {\n    int left = i;\n    for (int j = i + 1; j\
    \ < n; j++) {\n      if (arr[j] <= arr[left]) {\n        left = j;\n      }\n\
    \    }\n    if (ans > arr[i]) {\n      ans = arr[i];\n    }\n    i = left;\n \
    \ }\n  return ans;", "    int m = arr.size()-1;\n    long ans = 0;\n    // If\
    \ element is not present then return -1\n    for (int i = 0; i < m; i++) {\n \
    \       if (arr[i] <= arr[i+1]) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;", "  long max_index = -1L;\n  for (long i =\
    \ 0; i < arr.size() - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      max_index\
    \ = i;\n    }\n  }\n  return max_index;", "    int n = arr.size();\n    // O(n)\n\
    \    for (int i = 0; i < n; i++) {\n        int j = i+1;\n        long max = arr[j];\n\
    \        while (j < n && arr[j] < max)\n            j++;\n        if (j < n &&\
    \ arr[j] == max)\n            return j;\n    }\n    return -1;", "    if (arr.empty())\n\
    \        return -1;\n    long largest = 0;\n    for (long i = 1; i < arr.size();\
    \ ++i) {\n        if (arr[i] > arr[largest])\n            largest = i;\n    }\n\
    \    return largest;", '    // code here', "  int size = arr.size();\n  long ans\
    \ = -1;\n  int k = 0;\n  int i;\n  int j;\n  for(i = 0; i < size - 1; i++) {\n\
    \    for(j = i + 1; j < size; j++) {\n      if(arr[i] < arr[j]) {\n        ans\
    \ = arr[i];\n        k = i;\n      }\n    }\n  }\n  if(k != -1) {\n    return\
    \ ans;\n  }\n  return -1;", "    long n = arr.size();\n    long largest = -1;\n\
    \    for (long i = 1; i < n; i++) {\n        if (arr[i - 1] < arr[i]) {\n    \
    \        largest = i;\n        }\n    }\n    return largest;", "    // your code\
    \ goes here\n    long largest = arr[0];\n    long smallest = arr[0];\n    for\
    \ (long i : arr){\n        if(i > largest){\n            largest = i;\n      \
    \  }\n        if(i < smallest){\n            smallest = i;\n        }\n    }\n\
    \    if (largest!=-1){\n        for (long i : arr){\n            if (i == largest\
    \ || i == smallest){\n                return -1;\n            }\n        }\n \
    \       return largest - 1;\n    }\n    return -1;", "  long maxIndex = -1;\n\
    \  for (size_t i = 0; i < arr.size(); i++) {\n    long j = i;\n    while (j <\
    \ arr.size() && arr[j] <= arr[j - 1]) {\n      j++;\n    }\n    if (maxIndex ==\
    \ -1 || maxIndex < j) {\n      maxIndex = j;\n    }\n  }\n  return maxIndex;",
  "    long ans = -1, n = 0;\n    for (long i = 0; i < arr.size(); i++)\n        if\
    \ (arr[i] >= arr[i + 1])\n            ++n;\n        else\n            ans = max(ans,\
    \ i);\n    return ans;", "    // Write your code here\n    long max_index = arr.size()\
    \ - 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= arr[max_index])\n\
    \            max_index = i;\n    }\n    return max_index;", "    long max_val\
    \ = arr[0];\n    long min_val = arr[0];\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] >= max_val) {\n            max_val = arr[i];\n       \
    \ } else if (arr[i] > max_val) {\n            return -1;\n        }\n        if\
    \ (arr[i] <= min_val) {\n            min_val = arr[i];\n        } else if (arr[i]\
    \ < min_val) {\n            return -1;\n        }\n    }\n    return -1;", "long\
    \ max = -1, index = -1;\nfor (int i = 0; i < arr.size() - 1; ++i) {\n\tif (arr[i]\
    \ >= arr[i + 1]) continue;\n\tindex = i;\n\tbreak;", "    long largest = INT_MIN;\n\
    \    for (long i = 0; i < arr.size(); i++)\n        if (arr[i] >= largest && !std::binary_search(arr.begin()\
    \ + 1, arr.begin() + i + 1))\n            largest = arr[i];\n    return largest;",
  '    // Complete this function', "  // Write your code here\n  long max_index =\
    \ 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if(arr[i] != arr[max_index])\
    \ {\n      max_index = i;\n    }\n  }\n  return max_index;", "  int n = arr.size();\n\
    \  for (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n    \
    \  if (arr[i] >= arr[j]) break;\n    }\n    if (j >= n && arr[i] >= arr[j - 1])\
    \ return i;\n  }\n  return -1;", "    // code here\n    long i = 0;\n    long\
    \ j = 0;\n    long max = -1;\n\n    while (i < arr.size()) {\n        if (arr[i]\
    \ <= arr[j]) {\n            j = i;\n        }\n        else {\n            i =\
    \ j + 1;\n        }\n    }\n    return max;", "    // Complete the function\n\
    \    return -1;", "  long largest = arr[0], l = 0;\n  for (int i = 1; i < arr.size();\
    \ i++) {\n    if (arr[i] <= arr[l]) {\n      largest = arr[i];\n      l = i;\n\
    \    }\n  }\n  return arr[l];", "    long max_val = arr[0];\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] >= max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    return max_val;", "    int size = arr.size();\n\
    \    long n = arr[0];\n    long k = arr[0];\n    for (int i = 1; i < size; i++)\
    \ {\n        if (arr[i] > arr[k]) {\n            k = i;\n        }\n    }\n  \
    \  return k;", "    // Code here \n    long largest = INT_MIN;\n    for(int i\
    \ = 0; i < arr.size()-1; i++){\n        if(arr[i] >= largest){\n            largest\
    \ = arr[i];\n        }\n    }\n    for(int i = arr.size()-2; i >= 0; i--){\n \
    \       if(arr[i] < largest){\n            return -1;\n        }\n    }\n    return\
    \ largest;", "    // code here\n    // write your code in C++11\n    long i =\
    \ 0;\n    long maxIndex = 0;\n    long largest = arr[0];\n    for (i = 0; i <\
    \ arr.size() - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n            if\
    \ (arr[i] > largest) {\n                largest = arr[i];\n                maxIndex\
    \ = i;\n            }\n        } else {\n            return -1;\n        }\n \
    \   }\n    return maxIndex;", "    //Your code goes here\n    std::vector<long>::iterator\
    \ it = arr.begin();\n    long index = 0;\n    for (; it != arr.end()-1; ++it)\n\
    \    {\n        if(*it != (*(it-1))+1)\n        {\n            index = it-1;\n\
    \            break;\n        }\n    }\n    return index;", "    long max = 0;\n\
    \    long maxIndex = 0;\n    long n = arr.size();\n\n    for (int i = 0; i < n;\
    \ i++) {\n        if (arr[i] >= arr[maxIndex]) {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n\n    return maxIndex;", "    long\
    \ ans = 0;\n    long largest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] <= arr[largest_index]) {\n            largest_index\
    \ = i;\n        }\n    }\n    if (largest_index != -1) {\n        for (long i\
    \ = largest_index; i >= 0; i--) {\n            if (arr[i] >= arr[largest_index])\
    \ {\n                ans = i;\n            }\n        }\n    }\n    return ans;",
  "  // your code goes here\n  long l = -1, r = arr.size() - 1;\n  long mid;\n  while\
    \ (l <= r) {\n    mid = (l + r) / 2;\n    if (arr[mid + 1] <= arr[mid + 2]) {\n\
    \      return mid;\n    } else if (arr[mid - 1] < arr[mid + 2]) {\n      l = mid\
    \ + 2;\n    } else {\n      r = mid - 1;\n    }\n  }\n  return -1;", "  // Write\
    \ your code here.\n  assert(arr.size() != 0);\n  auto itr = arr.begin();\n  long\
    \ lastIndex = *itr;\n  itr++;\n  for (; itr != arr.end(); itr++) {\n    if (*itr\
    \ > lastIndex) {\n      lastIndex = *itr;\n    }\n  }\n  return lastIndex < arr.size()\
    \ - 1 ? lastIndex : -1;", "\tint i,j;\n\tint flag=1;\n\tint maxi=-1;\n\tfor(i=0;i<arr.size()-1;i++)\n\
    \t{\n\t\tfor(j=i+1;j<arr.size();j++)\n\t\t{\n\t\t\tif(arr[i]+arr[j]>arr[i+1])\n\
    \t\t\t{\n\t\t\t\tflag=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(flag==1)\n\
    \t\t{\n\t\t\tmaxi=i;\n\t\t\tflag=1;\n\t\t}\n\t}\n\treturn maxi;", "    long max_index\
    \ = 0;\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] !=\
    \ arr[i + 1]) {\n            max_index = i;\n            break;\n        }\n \
    \   }\n    return max_index;", "    // code here\n    long ans = 0;\n    long\
    \ temp = 0;\n    long index = -1;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] >= arr[index + 1]) {\n            index = i;\n        }\n \
    \   }\n    if(index >= 0) {\n        temp = index;\n        while(arr[temp + 1]\
    \ < arr[index]) {\n            temp++;\n        }\n        ans = temp;\n    }\n\
    \    return ans;", "    // code here\n    long largest = INT_MIN, i;\n    for\
    \ (i = 0; i < (int) arr.size(); i++) {\n        if (arr[i] <= largest && arr[i]\
    \ >= arr[largest-1]) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;", "    for (auto it = arr.begin(); it != arr.end(); ++it)\n       \
    \ if (*it == *it - 1) return *it;\n    return -1;", "    int m = arr.size();\n\
    \    long long maxIndex = m-1;\n    long long largestIndex = maxIndex;\n    long\
    \ long temp = 0;\n    for (int i = 1; i < m; i++) {\n        if (arr[i] >= arr[i-1])\
    \ {\n            temp = arr[i-1];\n            arr[i-1] = arr[i];\n          \
    \  arr[i] = temp;\n        }\n        maxIndex = max(maxIndex, arr[i]);\n    }\n\
    \    return largestIndex;", "    // your code here\n    int left = 0;\n    int\
    \ right = arr.size() - 1;\n    long mid = arr.size() / 2;\n    while (left < right)\
    \ {\n        if (arr[left] <= arr[mid])\n            left++;\n        else if\
    \ (arr[right] <= arr[mid])\n            right--;\n        else\n            return\
    \ mid;\n    }\n    return -1;", '    // code here', "    // your code here\n \
    \   long first = 0, last = -1;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > arr[first]) {\n            last = i;\n        } else {\n\
    \            if (i != last)\n                return -1;\n        }\n    }\n  \
    \  return last;", "    // code here\n    int n = arr.size();\n    // cout<<arr[n-1];\n\
    \    // cout<<arr[n-2];\n    // cout<<arr[n-3];\n    return -1;", "    long n\
    \ = arr.size();\n    if (n == 0) {\n        return -1;\n    }\n    long largest_index\
    \ = 0;\n    long first_non_lt = arr[0];\n    for (long i = 1; i < n; i++) {\n\
    \        if (arr[i] < first_non_lt) {\n            largest_index = i;\n      \
    \      first_non_lt = arr[i];\n        }\n    }\n    if (largest_index == 0) {\n\
    \        return -1;\n    }\n    if (largest_index == n - 1) {\n        return\
    \ -1;\n    }\n    long first_non_gt;\n    for (long i = largest_index; i < n -\
    \ 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            first_non_gt = arr[i];\n\
    \            break;\n        }\n    }\n    return first_non_gt;", "    long result\
    \ = 0;\n    if (arr.size() == 1) return -1;\n    for (auto x : arr) if (!(x >\
    \ 0)) result = std::max(result, x - 1);\n    return result;", "    long n = arr.size();\n\
    \    if(n <= 0)\n        return -1;\n    std::vector<long> a(n), b(n);\n    std::iota(a.begin(),\
    \ a.end(), 0);\n    std::rotate(std::next(a.begin(), 1), a.end(), 0);\n    for(long\
    \ i = 0; i < n; i++)\n        b[i] = arr[i];\n    for(int i = 0; i < n; i++) {\n\
    \        if(a[i] < b[i])\n            return i;\n    }\n    return n;", "    long\
    \ x = arr.at(0);\n    long y = arr.at(0);\n    long l = 0, h = 0;\n    while (l\
    \ < arr.size() && x <= arr.at(l)) {\n        x += arr.at(l);\n        l++;\n \
    \   }\n    if (x > y) y = x;\n    while (l < arr.size() && y <= arr.at(l - 1))\
    \ {\n        h += arr.at(l - 1);\n        l++;\n    }\n    if (y > h) h = y;\n\
    \    long ans = -1;\n    if (h > l) {\n        ans = h;\n    } else if (l > h)\
    \ {\n        ans = l;\n    } else {\n        ans = -1;\n    }\n    return ans;",
  "    long n = arr.size();\n    long ans = 0;\n    // Loop through all elements and\
    \ find the largest number not greater than\n    // the current number in the loop.\n\
    \    for (long i = 0; i < n; i++) {\n        // If current element is smaller\
    \ than the previous element then we\n        // found the element to be at the\
    \ end. Return this number.\n        if (arr[i] <= arr[ans]) {\n            ans\
    \ = i;\n        }\n    }\n    return ans;", "    for (long i = 0; i < arr.size();\
    \ i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]\
    \ && arr[i] != arr[j + 1]) {\n                return i;\n            }\n     \
    \   }\n    }\n    return -1;", "    // Your code here\n    int i = 0, j = 0, k\
    \ = 0;\n    for (; i < arr.size(); i++) {\n        if (arr[i] != (arr[j - 1] +\
    \ 1)) {\n            return -1;\n        }\n    }\n    return i;", "    long n\
    \ = arr.size();\n    long curr = 0;\n    long res = -1;\n    for(long i = 1; i\
    \ < n; i++){\n        if(arr[i - 1] >= arr[i]) {\n            res++;\n       \
    \ }\n        else {\n            curr++;\n            res = max(res, curr);\n\
    \        }\n    }\n    return res;", "    // code here\n    assert(arr.size()\
    \ > 0);\n    for (long i = arr.size()-2; i >= 0; i--) {\n        if (arr[i] >\
    \ arr[i+1])\n            return i;\n    }\n    return -1;", "    long n1=-1, n2=-1;\n\
    \    // Find the first greater element than the previous one\n    for (int i=0;i<arr.size();i++)\
    \ {\n        if (arr[i]>=arr[n1]) {\n            n1=arr[i];\n        }\n    }\n\
    \    // Find the first greater element than the previous one\n    for (int i=0;i<arr.size();i++)\
    \ {\n        if (arr[i]>=arr[n2]) {\n            n2=arr[i];\n        }\n    }\n\
    \    // If neither has greater element than the previous one, return -1\n    if\
    \ (n1==-1 && n2==-1) {\n        return -1;\n    }\n    // If we found both first\
    \ greater elements then return the greatest index\n    if (n1==n2) {\n       \
    \ return arr.size()-1;\n    }\n    // If we found n1 first greater elements then\
    \ return n1, and vice versa for\n    // n2\n    if (n1<n2) {\n        return n1;\n\
    \    }\n    return n2;", "    if(arr.size()<1)\n        return -1;\n    long index\
    \ = -1;\n    for(long i=0 ; i<arr.size() ; i++) {\n        if(arr[i] <= arr[index])\
    \ {\n            index = i;\n        }\n    }\n    return index;", '    // code
    here', "    long largest = std::numeric_limits<long>::min();\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++)\n    {\n        if (arr[i] >=\
    \ largest)\n        {\n            largest = arr[i];\n            index = i;\n\
    \        }\n    }\n    return index;", "    int left = 0, right = arr.size() -\
    \ 1;\n    long largest = -1;\n    while (left < right) {\n        long mid = (left\
    \ + right) / 2;\n        if (arr[mid] < arr[mid-1]) {\n            right = mid\
    \ - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return\
    \ right;", "  int nr = arr.size();\n  if (nr == 0 || nr == 1) {\n    return -1;\n\
    \  }\n  long largest = arr[0];\n  for (int i = 1; i < nr; i++) {\n    if (arr[i]\
    \ > largest) {\n      largest = arr[i];\n    }\n  }\n  int left = 0;\n  int right\
    \ = 0;\n  while (left < nr) {\n    while (left < nr && arr[left] == largest) {\n\
    \      left++;\n    }\n    while (right < nr && arr[right] == largest) {\n   \
    \   right++;\n    }\n    if (left < right) {\n      std::swap(arr[left], arr[right]);\n\
    \    }\n  }\n  return left;", "    long ans = -1;\n    long curr = arr.size();\n\
    \    long iCurr = -1;\n    long iPrev = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] != curr + 1) {\n            iPrev = iCurr;\n    \
    \        iCurr = i;\n        }\n        if (arr[i] > arr[curr]) {\n          \
    \  curr++;\n        }\n    }\n    if (iPrev != -1) {\n        long idx = iCurr\
    \ + 1;\n        while (idx < curr && arr[idx] == arr[iPrev]) {\n            idx++;\n\
    \            iPrev++;\n        }\n        ans = max(idx, ans);\n    }\n    return\
    \ ans;", "    long maxElem = -1;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] >= arr[i - 1]) {\n            maxElem = i;\n        }\n  \
    \  }\n    return maxElem;", "    int n = arr.size();\n    int cur = 0;\n    for\
    \ (int i = 0; i < n; ++i) {\n        if (arr[i] >= arr[cur]) {\n            cur\
    \ = i;\n        }\n    }\n    return cur;", "    int max_index=-1, i=0;\n    //\
    \ Write your code here\n    for(long j=0; j < arr.size(); j++)\n    {\n      \
    \  if(arr[j] > max_index)\n        {\n            max_index = arr[j];\n      \
    \  }\n    }\n    return max_index;", "    // Do not write main() function.\n \
    \   // Do not read input, instead use the arguments to the function.\n    // Do\
    \ not print the output, instead return values as specified\n    // Still have\
    \ a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n\
    \    long l=arr.size();\n    long i,j;\n    long minl=INT_MAX;\n    long maxl=INT_MIN;\n\
    \    bool minlfound=false;\n    bool maxlfound=false;\n    long minr=INT_MAX;\n\
    \    long maxr=INT_MIN;\n    long x=INT_MIN;\n    long y=INT_MAX;\n    long z=0;\n\
    \    for(i=0;i<l;i++)\n    {\n        if(arr[i]>=minl && arr[i]<=maxl)\n     \
    \   {\n            minlfound=true;\n            minr=arr[i];\n        }\n    \
    \    if(arr[i]<=minl && arr[i]>=minr)\n        {\n            maxlfound=true;\n\
    \            maxr=arr[i];\n        }\n    }\n    if((minr==INT_MAX) || (maxl==INT_MIN))\n\
    \        return -1;\n    if(minlfound==true)\n    {\n        if(maxr==INT_MAX)\n\
    \        {\n            return -1;\n        }\n        for(i=0;i<l;i++)\n    \
    \    {\n            if((minr<arr[i]) || (maxr>arr[i]))\n            {\n      \
    \          x=minr;\n                y=maxr;\n                z=arr[i];\n     \
    \           break;\n            }\n            else\n            {\n         \
    \       if(arr[i]<=minr)\n                {\n                    x=arr[i];\n \
    \                   y=minr;\n                    z=minl;\n                }\n\
    \                else\n                {\n                    x=arr[i];\n    \
    \                y=maxr;\n                    z=maxl;\n                }\n   \
    \         }\n        }\n    }\n    if(maxlfound==true)\n    {\n        if(minr==INT_MIN)\n\
    \        {\n            return -1;\n        }\n        for(i=0;i<l;i++)\n    \
    \    {\n            if((minl<arr[i]) || (maxl>arr[i]))\n            {\n      \
    \          x=minl;\n                y=maxl;\n                z=arr[i];\n     \
    \           break;\n            }\n            else\n            {\n         \
    \       if(arr[i]<=minl)\n                {\n                    x=arr[i];\n \
    \                   y=minl;\n                    z=minr;\n                }\n\
    \                else\n                {\n                    x=arr[i];\n    \
    \                y=maxl;\n                    z=maxr;\n                }\n   \
    \         }\n        }\n    }\n    return z;", "    long ln = arr.size();\n  \
    \  long index = 0;\n    for(long i = 1; i < ln; i++) {\n        if(arr[i] >= arr[index])\
    \ {\n            index = i;\n        } else {\n            return -1;\n      \
    \  }\n    }\n    return index;", "    long max = arr[0];\n    for (size_t i =\
    \ 1; i < arr.size(); ++i) {\n        if (arr[i] >= max) {\n            max = arr[i];\n\
    \        }\n    }\n    return max;", "    long i, max = -1, min = 0;\n    for\
    \ (i = 0; i < arr.size(); i++) {\n        if (max < arr[i]) max = arr[i];\n  \
    \      if (min > arr[i]) min = arr[i];\n    }\n    if (max != min) {\n       \
    \ i = max - min;\n        if (arr[min] >= arr[i - 1])\n            arr[i] = 0;\n\
    \        else\n            arr[min] += arr[i - 1];\n    }\n    return max;", " \
    \   long long int max = INT_MIN;\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (max < arr[i]) {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;", "    long result=-1;\n\
    \    long n=arr.size();\n    long i=1;\n    long j=n-1;\n    while(i<=n){\n  \
    \      for(;i<n;i++){\n            if(arr[j]>=arr[i]){\n                j--;\n\
    \                assert(arr[j]>=arr[i]);\n                break;\n           \
    \ }\n        }\n        for(;i>0;i--){\n            if(arr[j]<=arr[i]){\n    \
    \            j++;\n                assert(arr[j]<=arr[i]);\n                break;\n\
    \            }\n        }\n        if(j==n){\n            result=i;\n        \
    \    break;\n        }\n    }\n    return result;", "    // your code goes here\n\
    \    \n    return -1;", "    long ans = -1; // to check that the given array does\
    \ not contain duplicate\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i - 1] >= arr[i]) {\n            ans = i;\n        }\n    }\n    return\
    \ ans;", "    int n = arr.size();\n    long max_index = -1;\n    // Search for\
    \ the largest index and store it\n    for (int i = 0; i < n; ++i) {\n        if\
    \ (arr[i] > max_index) {\n            max_index = arr[i];\n        }\n    }\n\
    \    if (max_index > -1) {\n        // The next element should be greater than\
    \ the previous element\n        int min_val = max_index;\n        for (int i =\
    \ 0; i < n; ++i) {\n            if (arr[i] < min_val) {\n                min_val\
    \ = arr[i];\n            }\n        }\n        // Now that the next element is\
    \ greater than the previous element,\n        // the index must be the smallest\n\
    \        if (min_val == max_index) {\n            return -1;\n        } else {\n\
    \            return min_val;\n        }\n    } else {\n        return -1;\n  \
    \  }", "    long ans = -1; // if there is no such element\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (ans == -1 && arr[i] <= arr[i + 1]) {\n \
    \           ans = i;\n        }\n    }\n    return ans;", "    // code here\n\
    \    for(int i = 0; i < arr.size(); i++)\n    {\n        if(arr[i] >= arr[i-1])\n\
    \        {\n            return i;\n        }\n    }\n    return -1;", "    long\
    \ n = arr.size();\n    int largest = -1;\n    \n    for (int i = 1; i < n; ++i)\
    \ {\n        if(arr[i] > arr[largest]) {\n            largest = i;\n        }\n\
    \    }\n    return largest;", "long max_idx = -1;\nlong current_idx = 0;\nfor(long\
    \ idx = 0; idx < arr.size() - 1; ++idx) {\n    if(arr[idx] >= arr[idx+1]) {\n\
    \        if(arr[idx] > max_idx)\n            max_idx = idx;\n        current_idx++;\n\
    \    } else {\n        current_idx = 0;\n    }", "    long low = 0;\n    long\
    \ high = arr.size() - 1;\n    long mid = 0;\n    long largest = -1;\n    bool\
    \ found = false;\n    while (!found) {\n        while (low <= high) {\n      \
    \      mid = (low + high) / 2;\n            if (arr[mid] < mid) {\n          \
    \      low = mid + 1;\n            } else {\n                high = mid - 1;\n\
    \            }\n        }\n        if (arr[low] >= mid) {\n            low = mid\
    \ + 1;\n        } else {\n            largest = low;\n            found = true;\n\
    \        }\n    }\n    return largest;", "    long max_index = 0;\n    long index\
    \ = -1L;\n    // traverse through all indexes\n    for (int i = 0; i < arr.size();\
    \ ++i) {\n        if (i != arr.size() - 1) {\n            // if index is greater\
    \ than or equal to last index, set index\n            // to the last index.\n\
    \            if (arr[i] >= arr[i + 1]) {\n                index = arr[i + 1];\n\
    \            }\n            // If not, compare the given index with the index\n\
    \            // immediately before the given index, and if they are\n        \
    \    // the same, set the max index to that index.\n            // Else, set the\
    \ max index to -1\n            if (arr[i] > arr[i + 1]) {\n                if\
    \ (i == 0) {\n                    max_index = arr[i + 1];\n                } else\
    \ {\n                    max_index = arr[i + 1];\n                }\n        \
    \    } else if (arr[i] == arr[i + 1]) {\n                if (i == 0) {\n     \
    \               max_index = arr[i + 1];\n                } else {\n          \
    \          max_index = -1;\n                }\n            }\n        }\n    }\n\
    \    return max_index;", "    // your code here\n    long largest = -1, l = 0,\
    \ r = arr.size() - 1;\n    while (r >= l) {\n        if (r - l >= 2) {\n     \
    \       if (arr[r] > arr[l - 1] && arr[r] > arr[l + 1]) {\n                largest\
    \ = r;\n            }\n            if (arr[r] > arr[l] && arr[r] > arr[l + 1])\
    \ {\n                largest = r;\n            }\n            if (arr[r] > arr[l]\
    \ && arr[r] > arr[l - 1]) {\n                largest = r;\n            }\n   \
    \     }\n        else if (arr[r] > arr[l]) {\n            largest = r;\n     \
    \   }\n        else {\n            largest = l;\n        }\n        ++l;\n   \
    \     --r;\n    }\n    return largest;", // code here, "    long largest = -1;\n\
    \    long left = 0, right = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] >= arr[left])\n            left = i;\n        else\n     \
    \       right = i;\n    }\n    if (right < left)\n        return -1;\n    while\
    \ (left < right) {\n        long temp = arr[left];\n        arr[left++] = arr[right];\n\
    \        arr[right--] = temp;\n    }\n    largest = arr[left - 1];\n    return\
    \ largest;", "  // code here\n  return 0;", '  // Your code here', "    // Your\
    \ code here\n    int left = 1;\n    int right = -1;\n    int leftmax = -1;\n \
    \   long leftmaxval = -1;\n    long rightmaxval = -1;\n    long rightval = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > rightmaxval)\
    \ {\n            rightmaxval = arr[i];\n            right = i;\n        }\n  \
    \      if (arr[i] > leftmaxval) {\n            leftmaxval = arr[i];\n        \
    \    left = i;\n        }\n    }\n    return leftmaxval > rightmaxval ? right\
    \ : left;", "  // Your code here\n  assert(arr.size() > 0);\n  long result = -1;\n\
    \  for (auto i : arr) {\n    if (i > result) result = i;\n  }\n  return result;",
  "    int n = (int) arr.size();\n    long max_index = -1;\n    for (int i = 1; i\
    \ < n; ++i) {\n        if (arr[i] < arr[0]) {\n            max_index = i;\n  \
    \          break;\n        }\n    }\n    return max_index;", "    // Code here\n\
    \    int n = arr.size();\n    long long int max = INT_MIN;\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n    \
    \    }\n    }\n    return max;", "    long res = -1;\n    long i = arr.size()\
    \ - 1;\n    while (i >= 0) {\n        if (arr[i] >= arr[i + 1]) {\n          \
    \  i = i - 1;\n        }\n        else {\n            res = arr[i];\n        \
    \    break;\n        }\n    }\n    return res;", "  int n = arr.size();\n  //\
    \ Return largest index of an element which is not greater than or equal\n  //\
    \ to the element immediately preceding it.\n  for (int i = 0; i < n; i++) {\n\
    \    if (arr[i] <= arr[i + 1]) {\n      return i;\n    }\n  }\n  return -1;",
  "  // code here\n  return 0;", "    // Your code goes here\n    long i = -1, max\
    \ = -1, flag = 0;\n    for (long j = 0; j < arr.size(); j++) {\n        if (arr[j]\
    \ <= max) {\n            flag = 1;\n            max = arr[j];\n            i =\
    \ j;\n        }\n    }\n    if (flag == 1) {\n        return i;\n    } else {\n\
    \        return -1;\n    }", "    int i = arr.size()-1;\n    long max_val = -1;\n\
    \    long min_val = arr[0];\n\n    while(i != 0) {\n        if(arr[i] <= min_val\
    \ && arr[i] > max_val)\n            max_val = arr[i];\n        if(arr[i] >= min_val\
    \ && !(arr[i] == max_val && min_val > max_val))\n            break;\n        i--;\n\
    \    }\n    return max_val == -1 ? -1 : max_val+1;", "    // code goes here\n\t\
    long ans = 0;\n    long max_val = arr[0];\n\tfor (int i = 0; i < arr.size(); i++)\
    \ {\n\t\tif(arr[i] >= max_val) {\n\t\t\tans = i;\n\t\t\tmax_val = arr[i];\n\t\t\
    }\n\t}\n    return ans;", "\t// your code goes here\n\tlong maxIndex = 0;\n\t\
    long largestElement = INT_MIN;\n\tbool found = false;\n\n\t// Traverse the array\n\
    \tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (found) {\n\t\t\tbreak;\n\t\t\
    }\n\t\tfound = true;\n\t\tif (arr[i] > largestElement) {\n\t\t\tlargestElement\
    \ = arr[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\n\treturn maxIndex;", "    // your\
    \ code here\n    return -1;", "     assert(arr.size() > 0);\n     long first_index\
    \ = arr[0];\n     long second_index = 0;\n     long max_index = -1;\n     long\
    \ min_index = arr[0];\n     for (size_t i = 1; i < arr.size(); i++) {\n      \
    \   if (arr[i] < min_index) {\n             min_index = arr[i];\n         }\n\
    \         if (arr[i] > max_index) {\n             second_index = arr[i];\n   \
    \      }\n     }\n     if (second_index >= first_index) {\n         return -1;\n\
    \     } else {\n         max_index = min_index;\n         second_index = first_index;\n\
    \         for (size_t i = 1; i < arr.size(); i++) {\n             if (arr[i] ==\
    \ max_index) {\n                 max_index = arr[i];\n             }\n       \
    \      if (arr[i] > second_index) {\n                 second_index = arr[i];\n\
    \             }\n         }\n     }\n     return max_index;", "    if (arr.size()\
    \ == 0) return -1;\n    long index = 0;\n    long largest_value = arr[0];\n  \
    \  long first_value = arr[0];\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] >= largest_value) {\n            largest_value = arr[i];\n\
    \            index = i;\n        }\n        else if (arr[i] != first_value) {\n\
    \            index = -1;\n        }\n    }\n    return index;", "  int n = arr.size();\n\
    \  long index = 0;\n  long largest = arr[0];\n  for (int i = 1; i < n; i++) {\n\
    \    if (arr[i] <= largest)\n      return -1;\n    if (arr[i] > largest)\n   \
    \   index = i;\n    largest = arr[i];\n  }\n  return index;", "    if(arr.size()\
    \ == 0)\n        return -1;\n    long first_index = std::find_if(arr.begin(),\
    \ arr.end(), [&](long element){\n        return element > arr[0];\n    }) - arr.begin();\n\
    \    return std::max(first_index, 0);", "    int n = arr.size();\n    long ans\
    \ = -1;\n    int pos = 0;\n    long minpos = arr[0];\n    for(int i = 0; i < n;\
    \ i++) {\n        if(arr[i] <= minpos) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    return 0;", '  //
    Your code here', '    // Your code goes here', "    long max = arr[0];\n    long\
    \ idx = 1;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i]\
    \ <= max) {\n            if (arr[idx] == arr[i-1]) {\n                return i;\n\
    \            }\n            idx = i;\n            max = arr[i];\n        }\n \
    \   }\n    return -1;", "    // code here\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i+1]>arr[i]){\n            return i+1;\n        }\n    }\n   \
    \ return -1;", "    assert(arr.size() != 0);\n    long lastIndex = -1, i = -1,\
    \ j = -1, num = 1;\n    std::vector<long>::iterator itr = arr.begin();\n    for\
    \ (; i < arr.size(); i++) {\n        if (arr[i] > arr[i + 1])\n            lastIndex\
    \ = i;\n    }\n    for (j = 0; j < i; j++) {\n        if (arr[j] > arr[lastIndex])\n\
    \            lastIndex = j;\n    }\n    if (lastIndex == -1)\n        return -1;\n\
    \    for (; i < arr.size(); i++) {\n        if (arr[i] > arr[lastIndex + 1])\n\
    \            arr.insert(arr.begin() + lastIndex, arr[i]);\n        else\n    \
    \        num = arr[i + 1] - arr[i];\n    }\n    return num;", "    // write your\
    \ code here\n    long m = arr.size();\n    long k = 0;\n    long max_index = -1;\n\
    \    long max_arrange = 0;\n    long j = 0;\n    for (int i = 0; i < m; i++) {\n\
    \        long arrange = 0;\n        if (arr[i] > arr[j]) {\n            arrange\
    \ = arr[i] - arr[j];\n            j = i;\n        }\n        else if (arr[i] ==\
    \ arr[j]) {\n            arrange = 1;\n        }\n        if (arrange > max_arrange)\
    \ {\n            max_arrange = arrange;\n            max_index = j;\n        }\n\
    \    }\n    if (max_arrange > 1) {\n        return -1;\n    }\n    return max_index;",
  "    long n = arr.size();\n    long largest = arr[0];\n    for (int i = 1; i < n;\
    \ i++) {\n        if (arr[i] >= largest) {\n            largest = arr[i];\n  \
    \      }\n    }\n    return largest;", '    // code here', "    // Code here\n\
    \    int n = arr.size();\n    long maxIndex = 0;\n    for (int i = 1; i < n; i++)\
    \ {\n        if (arr[i] >= arr[maxIndex])\n            ++maxIndex;\n    }\n  \
    \  return maxIndex;", "    long i = 0;\n    long largest = -1;\n    while (i <\
    \ arr.size()) {\n        if (arr[i] <= arr[largest]) {\n            largest =\
    \ i;\n            i++;\n        }\n        else {\n            break;\n      \
    \  }\n    }\n    return largest;", "    // code here\n    int n = arr.size();\n\
    \    long low = INT_MAX;\n    long high = INT_MIN;\n    int index = -1;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (arr[i] <= low) low = arr[i];\n      \
    \  if (arr[i] >= high) high = arr[i];\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (arr[i] == high - low + 1) {\n            index = i;\n       \
    \     high = arr[i];\n        }\n    }\n    return index;", '    // code here',
  "    auto first = arr.begin();\n    long i = first;\n    long ans = -1;\n    while\
    \ (i+1 < arr.end() && arr[i+1] >= arr[i]) {\n        ans = i;\n        ++i;\n\
    \    }\n    return ans;", "    // Complete this function\n    \n    int n = arr.size();\n\
    \    long largest = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (largest\
    \ < arr[i]) {\n            largest = arr[i];\n        }\n    }\n    return -1;",
  '  // your code here', "    // Your code here\n    int max = INT_MIN;\n    int max_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] <= max)\
    \ {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_index;", "\tint size = (int) arr.size();\n\tint max = -1;\n\t\
    for (int i = 0; i < size - 1; i++) {\n\t\tif (arr[i] >= arr[i + 1]) {\n\t\t\t\
    max = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn max;", "    // Write your code here\n\
    \    long n = arr.size();\n    long largestIndex = 0;\n    long ans = -1;\n  \
    \  for(long i = 1; i < n; i++){\n        if(arr[i] > arr[largestIndex]){\n   \
    \         largestIndex = i;\n        }\n    }\n    for(long i = 0; i < n; i++){\n\
    \        if(arr[i] > arr[largestIndex]){\n            largestIndex = i;\n    \
    \    }\n    }\n    return largestIndex;", "    assert(arr.size() > 0);\n    long\
    \ maxIdx = -1;\n    long prevIdx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] >= arr[prevIdx]) {\n            maxIdx = i;\n        \
    \    prevIdx = i;\n        }\n    }\n    return maxIdx;", "    long ans = -1;\n\
    \    int i = 0;\n    while ((i + 1) < arr.size() && arr[i] <= arr[i + 1]) {\n\
    \        i++;\n    }\n    if (i == arr.size()) {\n        return -1;\n    }\n\
    \    if (arr[i] > arr[i + 1]) {\n        return -1;\n    }\n    while (i < arr.size())\
    \ {\n        if (arr[i] < arr[i + 1]) {\n            break;\n        }\n     \
    \   i++;\n    }\n    ans = i;\n    return ans;", "    long ans = -1;\n    for\
    \ (auto i = 0; i < arr.size() - 1; ++i) {\n        long temp = arr[i];\n     \
    \   for (auto j = i + 1; j < arr.size(); ++j) {\n            if (arr[j] <= temp)\
    \ {\n                ans = i;\n                i = j;\n                break;\n\
    \            }\n        }\n    }\n    return ans;", "\tassert(arr.size() == 7);\n\
    \tstd::vector<long> temp;\n\tint ans = -1;\n\tlong max_idx = -1;\n\tlong tmp;\n\
    \tfor (int i = 0; i < arr.size() - 1; i++) {\n\t\tfor (int j = i + 1; j < arr.size();\
    \ j++) {\n\t\t\ttmp = arr[i];\n\t\t\tif (tmp <= arr[j]) {\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif (max_idx == -1 || tmp > arr[max_idx]) {\n\t\t\tmax_idx = i;\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (i > max_idx) {\n\
    \t\t\tans = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;", "    int m = arr.size();\n\
    \    // n is how many numbers we're looking for.\n    int n = m - 1;\n    long\
    \ largest = -1;\n    for (int i = 1; i < n; i++) {\n        // If arr[0] <= arr[i]\n\
    \        // and arr[i] <= arr[n]\n        // then\n        // if arr[i] >= arr[n],\
    \ arr[n] >= arr[m]\n        // then largest is arr[i]\n        // else if arr[n]\
    \ >= arr[m], arr[n] >= arr[i]\n        // then largest is arr[n]\n        // else\
    \ if arr[i] >= arr[n], arr[i] >= arr[m]\n        // then largest is arr[m]\n \
    \       if (arr[i] >= arr[largest]) {\n            largest = i;\n        }\n \
    \   }\n    return largest;", "    // Your code here\n    long maxidx = -1, maxval\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >=\
    \ maxval)\n            maxidx = i;\n        maxval = arr[i];\n    }\n    return\
    \ maxidx;", "    long maxval = arr[0];\n    long last = 0;\n    for(long i = 1;\
    \ i < arr.size(); ++i) {\n        if(arr[i] < maxval) {\n            last = i;\n\
    \        }\n        if(arr[i] >= maxval) {\n            maxval = arr[i];\n   \
    \         last = i;\n        }\n    }\n    return last;", "    // Your Code Here\n\
    \    return 0;", "\tint n = arr.size();\n\tif (n <= 1) {\n\t\treturn -1;\n\t}\n\
    \tlong max_index = arr[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tif (arr[i] >\
    \ max_index) {\n\t\t\tmax_index = arr[i];\n\t\t}\n\t}\n\treturn max_index;", " \
    \ // Write your code here\n  \n  long n = arr.size();\n  long max = 0;\n  long\
    \ m = 0;\n  for (long i = 0; i < n; i++) {\n    if (arr[i] > max) {\n      max\
    \ = arr[i];\n      m = i;\n    }\n  }\n  if (m == 0)\n    return -1;\n  else\n\
    \    return m; //Return the maximum number", "    long n = arr.size();\n    //\
    \ Step 1: Iterate over all elements and check if their value is not less than\n\
    \    // arr[i-1] except the last element which will have no previous element.\n\
    \    for (long i = 1; i < n; ++i) {\n        if (arr[i] > arr[i - 1]) {\n    \
    \        return -1;\n        }\n    }\n    // Step 2: If all elements have the\
    \ same value then all elements are in\n    // the right place.\n    long i = 0;\n\
    \    while (i < n) {\n        if (arr[i] == arr[i + 1]) {\n            ++i;\n\
    \        } else {\n            return i;\n        }\n    }\n    // Step 3: Otherwise\
    \ no element exists in the right place so we return -1.\n    return -1;", "  \
    \  int ans = -1; // no such index exists\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        // Check if arr[i] is greater than or equal to the previous\
    \ element\n        if (arr[i] >= arr[ans]) {\n            ans = i;\n        }\n\
    \    }\n    return ans;", "    // Write your code here.\n    long long result=-2;\n\
    \    long long last=arr[0]-1;\n    long long prev=arr[0]-1;\n    for(long long\
    \ i=1;i<arr.size();i++){\n        if(arr[i]>prev){\n            result=i;\n  \
    \          last=i;\n        }\n        if(arr[i]==prev){\n            if(arr[i]>last){\n\
    \                result=i;\n                last=i;\n            }\n        }\n\
    \        prev=arr[i];\n    }\n    return result;", "  // Write your code here\n\
    \  long largest = 0;\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i]\
    \ > arr[largest])\n      largest = i;\n  }\n  return largest;", "    int n = arr.size();\n\
    \    assert(n >= 0);\n    for (int i = 0; i < n - 1; i++) {\n        // For each\
    \ subarray, find the maximum element in the subarray.\n        int max = -1, min;\n\
    \        for (int j = i; j < n; j++) {\n            if (max < arr[j]) {\n    \
    \            max = arr[j];\n            }\n            if (min > arr[j]) {\n \
    \               min = arr[j];\n            }\n        }\n        // Check if max\
    \ is greater than or equal to the element before max.\n        if (max <= min)\
    \ {\n            min = max;\n        }\n        // If min is equal to or greater\
    \ than the element before max then\n        // return -1\n        if (min == max)\
    \ {\n            return -1;\n        }\n        // Otherwise the max element is\
    \ greater or equal to the element before\n        // max so return the index of\
    \ the first element which is not greater than\n        // or equal to the element\
    \ before max.\n    }\n    return i;", "    // Write your code here.\n    long\
    \ i=0;\n    long long int max=arr[0];\n    long long int mins=arr[0];\n    long\
    \ long int k=1;\n    for(long long int j=0;j<arr.size();j++) {\n        if(arr[j]<min)\n\
    \            min=arr[j];\n        else if(arr[j]>max)\n            max=arr[j];\n\
    \        else if(arr[j]==max)\n            k++;\n    }\n    if(max!=arr[0])\n\
    \        return -1;\n    for(int j=0;j<k;j++) {\n        if(arr[j]==min)\n   \
    \         return -1;\n    }\n    return i;", "    int n = arr.size();\n    int\
    \ max_arrangement_idx = -1;\n    for (int i = 0; i < n - 1; i++) {\n        if\
    \ (arr[i] <= arr[i + 1]) {\n            if (max_arrangement_idx == -1) {\n   \
    \             max_arrangement_idx = i;\n            } else if (arr[i] > arr[i\
    \ + 1]) {\n                max_arrangement_idx = i;\n            }\n        }\n\
    \    }\n    return max_arrangement_idx;", "    long max_index = -1;\n    long\
    \ left_most_element = *std::max_element(arr.begin(),arr.end());\n    for(auto\
    \ itr = arr.begin();itr!=arr.end();itr++){\n        if(*itr != left_most_element){\n\
    \            if(max_index == -1){\n                max_index = *itr;\n       \
    \     }\n            else{\n                if(*itr > max_index){\n          \
    \          max_index = *itr;\n                }\n            }\n        }\n  \
    \  }\n    return max_index;", "    long max_idx = -1;\n    for (int i = 0; i <\
    \ arr.size() - 1; i++) {\n        if (arr[i] != arr[i + 1]) {\n            max_idx\
    \ = i;\n            break;\n        }\n    }\n    return max_idx;", "    assert(arr.size()\
    \ != 0);\n    long ans = -1;\n    for (long i = 1; i < arr.size(); ++i) {\n  \
    \      if (arr[i] > arr[i - 1]) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;", "    int n = arr.size();\n    for (int i\
    \ = 0; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            return\
    \ i;\n        }\n    }\n    return -1;", "  long n = arr.size();\n  long prev\
    \ = 0;\n  long ans = -1;\n  for (long i = 0; i < n; i++) {\n    if (arr[i] >=\
    \ arr[prev]) {\n      ans = i;\n      prev = i;\n    }\n  }\n  return ans;", " \
    \   // your code goes here\n    long left = 0;\n    long right = 0;\n    long\
    \ res = -1;\n    for (long i = 0; i < arr.size(); i++)\n    {\n        if (arr[i]\
    \ < arr[left])\n        {\n            left++;\n        }\n        else\n    \
    \    {\n            right += right - left + 1;\n            res = arr[right];\n\
    \            break;\n        }\n    }\n    return res;", "    // code here\n \
    \   long n = arr.size();\n    if (n == 0)\n        return -1;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (long i = 1; i < n; ++i)\n        if (arr[i-1] > arr[i])\n\
    \            return i;\n    return -1;", '    // code here', "    assert(arr.size()\
    \ > 1);\n    long max_index = -1;\n    long prev_val = arr[0];\n    for (size_t\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] >= prev_val) {\n         \
    \   max_index = i;\n        }\n    }\n    return max_index;", "  // code here\n\
    \  return -1;", "    long max_index = 0;\n    long max_val = arr[0];\n    for\
    \ (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n     \
    \       max_index = i;\n            max_val = arr[i];\n        }\n    }\n    return\
    \ max_index;", "    long long maxIndex = -1;\n    for (long long i = 0; i < arr.size();\
    \ ++i) {\n        if (arr[i] != i + 1) {\n            int index = i;\n       \
    \     for (long long j = i + 1; j < arr.size(); ++j) {\n                if (arr[j]\
    \ < arr[index])\n                    index = j;\n            }\n            if\
    \ (maxIndex < index)\n                maxIndex = index;\n        }\n    }\n  \
    \  return maxIndex;", "    // Code here\n    assert(arr.size() >= 2);\n    std::set<long>\
    \ st;\n    for (auto i : arr) {\n        long val = i;\n        while (st.find(val)\
    \ != st.end()) {\n            val += 1l;\n        }\n        st.insert(val);\n\
    \    }\n    for (auto i : arr) {\n        long val = i;\n        while (st.find(val)\
    \ != st.end()) {\n            val = val - 1;\n        }\n        st.insert(val);\n\
    \    }\n    for (auto i : arr) {\n        long val = i;\n        while (st.find(val)\
    \ != st.end()) {\n            val = val + 1;\n        }\n        st.insert(val);\n\
    \    }\n    long ans = -1l;\n    for (auto i : arr) {\n        if (!st.contains(i))\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;",
  "    // your code here\n    long largest = arr[0];\n    long last_index = 0;\n \
    \   for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] <= largest) {\n\
    \            largest = arr[i];\n            last_index = i;\n        }\n    }\n\
    \    return last_index;", "    // code here\n    return -1;", "  for (int i =\
    \ 1; i < arr.size(); i++) {\n    if (arr[i] < arr[i-1]) {\n      return i;\n \
    \   }\n  }\n  return -1;"]
stop_tokens:
- "\n}"
