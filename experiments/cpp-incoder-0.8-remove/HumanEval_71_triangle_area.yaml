name: HumanEval_71_triangle_area
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n// Otherwise return -1\n//\
  \ Three sides make a valid triangle when the sum of any two sides is greater \n\
  // than the third side.\n// Example:\nfloat triangle_area(long a, long b, long c)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3),\
  \ (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n\
  \    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2),\
  \ (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10),\
  \ (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n\
  \    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2),\
  \ (10)) == (float(-1)));\n}\n"
completions: ["  float area_of_triangle = (a + b + c) / 2;\n  if (area_of_triangle\
    \ > c) {\n    return area_of_triangle;\n  } else {\n    return -1;\n  }", "  \
    \  if (a + b > c && b + c > a && c + a > b) \n        return 0.5*(a + b + c);\n\
    \    else if (a + c > b && b + c > a && c + a > b) \n        return 0.5*(a + c\
    \ + b);\n    else \n        return -1;", "    assert(a+b > c && c+b > a);\n  \
    \  long s = a + b + c;\n    if (s == a+b || s == c+b) \n        return s/2;\n\
    \    else\n        return -1;", "    float perimeter;\n    float area_of_triangle;\n\
    \    float s;\n    float area;\n    if (a + b > c && b + c > a && c + a > b) {\n\
    \        perimeter = (a + b + c) / 2;\n        area_of_triangle = (sqrt(pow(perimeter,\
    \ 2) + (pow(perimeter, 2) / 2)) * 2.0f);\n        area = sqrt(area_of_triangle\
    \ * area_of_triangle / 2);\n        return round(area, 2); // if area > 100 return\
    \ 100 else return area\n    }\n    else {\n        return -1;\n    }", "    float\
    \ s1 = (a + b + c) / 2;\n    float s2 = (a + b) / 2;\n    float s3 = (b + c) /\
    \ 2;\n    if (s1 > s2) {\n        float temp = s1;\n        s1 = s2;\n       \
    \ s2 = temp;\n    }\n    if (s1 > s3) {\n        float temp = s1;\n        s1\
    \ = s3;\n        s3 = temp;\n    }\n    if (s2 > s3) {\n        float temp = s2;\n\
    \        s2 = s3;\n        s3 = temp;\n    }\n    if (s1 > s2 && s2 > s3) {\n\
    \        float temp = s1;\n        s1 = s2;\n        s2 = temp;\n        s3 =\
    \ s3;\n    }\n    return s1 * s2 * s3;", "    float area = a * b * c;\n    long\
    \ d = a + b + c;\n    if (d == 2 * a + b) return area;\n    if (d == 2 * b + c)\
    \ return area;\n    if (d == 2 * a + c) return area;\n    return -1;", "  if (a\
    \ > b && a > c && b > c) return (a+b+c)/2;\n  else return -1;", "\tassert (b >\
    \ a);\n\tassert (b > c);\n\tassert (c > a);\n\tfloat area = (a + b + c) / 2;\n\
    \treturn (area > b && area > c && area > a && area > 0) ? area : -1;", "    float\
    \ s, area;\n    float d = 3.14159 * float(a + b + c);\n    if (d < 0)\n      \
    \  return -1;\n    s = 2.0 * float(a) * float(b) * float(c);\n    area = abs(s\
    \ * s - d);\n    if (area < 0.00000001) {\n        area = 0;\n    }\n    return\
    \ round(area, 2);", "    if (a+b>c && b+c>a && c+a>b) return static_cast<float>(sqrt(pow(b,2)+pow(c,2)))/2;\n\
    \    else return -1;", "\tif (a == 0)\n\t\treturn b;\n\tif (b == 0)\n\t\treturn\
    \ c;\n\tif (c == 0)\n\t\treturn a;\n\tif (a + b > c)\n\t\treturn -1;\n\tif (a\
    \ + c > b)\n\t\treturn -1;\n\tif (b + c > a)\n\t\treturn -1;\n\treturn (a + b\
    \ + c) * 0.5f;", "  assert((a>b)&&(b>c));\n  float s = (a+b+c)/2;\n  if(((b+c)\
    \ <= s)&&((a+c) <= s)&&((b+a) <= s)){\n    return s;\n  }\n  return -1;", "\t\
    float area;\n\tlong x,y,z;\n\tx = a+b;\n\ty = b+c;\n\tz = c+a;\n\tif(x>y && x>z){\n\
    \t\tarea=(x*y)/(z*2);\n\t\tcout<<area;\n\t}\n\telse {\n\t\tarea=-1;\n\t\tcout<<area;\n\
    \t}\n\treturn area;", "    if (a + b <= c || a + c <= b || b + c <= a) {\n   \
    \     return -1;\n    }\n    return (float)(a * b * 0.33333333f);", "    // Only\
    \ valid if all sides are valid\n    if(a>b && a>c) \n        return -1;\n    else\
    \ if(b>c && b>a)\n        return -1;\n    else\n    {\n        float area_sum\
    \ = a*b + b*c + c*a;\n        return sqrt(area_sum);\n    }", "    assert((a +\
    \ b >= c) && (a + c >= b) && (b + c >= a));\n    return ((a + b + c) / 2) * 0.5;",
  "    assert(a < b);\n    assert(b < c);\n    assert(c < a + b);\n    assert(a <\
    \ c);\n    if (a + b < c) {\n        return -1; // no area found\n    }\n    return\
    \ static_cast<float>(((a * b) * c) / (a + b + c));", "    int sum = a+b+c;\n \
    \   long long aa = a+a;\n    long long bb = b+b;\n    long long cc = sum-(aa+bb);\n\
    \    if(cc > 0){\n        return (aa*(bb+cc)/2.0f);\n    }else{\n        return\
    \ -1;\n    }", "    if (b > c) return (float)(a * b) / 2;\n    else if (c > b)\
    \ return (float)(a * c) / 2;\n    else return 0.0f;", "  float a = float(a);\n\
    \  float b = float(b);\n  float c = float(c);\n  assert (a>0 && b>0 && c>0);\n\
    \  if (a + b + c >= (float)a * b) {\n    return ((a * b) / c) * 100;\n  } else\
    \ {\n    return -1;\n  }", "    float s = a + b + c;\n    if (s == (a + b)) {\n\
    \        return 0;\n    }\n    if (s > b) {\n        s = b;\n    }\n    if (s\
    \ > c) {\n        s = c;\n    }\n    if (s > a + b) {\n        s = a + b;\n  \
    \  }\n    return s * (s - a) * (s - b) * (s - c);", "  if((a + b + c) > 0)\n \
    \   return (float)(a * b * c / (a + b + c));\n  else\n    return -1;", "   assert(a\
    \ >= 0 && b >= 0 && c >= 0);\n   long ab = a + b;\n   long ac = a + c;\n   long\
    \ bc = b + c;\n   return (float)ab*bc / (float)ac;", "    long d1 = (b + c) /\
    \ 2;\n    long d2 = (a + c) / 2;\n    long d3 = (a + b) / 2;\n    // Make sure\
    \ the sides are valid triangles\n    if(a > d1 && b > d2 && c > d3) {\n      \
    \  float area;\n        // The area can be computed by computing the difference\
    \ of the sums of the three sides\n        // divided by 2 and rounding the result\
    \ to 2 decimal places.\n        area = (float)(d1 - d2 - d3) / (2 * 0.2);\n  \
    \      return area;\n    }\n    return -1;", "    if((a+b>=c)){\n    return (a*b*1.0)/2.0;\
    \ // If triangle\n    }\n    return -1;", "    float area = 0;\n    // Add two\
    \ sides together to get third side\n    area = a + b + c;\n    // If area is greater\
    \ than the third side\n    if (area > c) {\n        // The two sides are not valid\
    \ triangles\n        return -1;\n    }\n    // Calculate area to 2 decimal points\n\
    \    area = ((float)(area / 3)) * 0.5;\n    return area;", "    float area;\n\
    \    long sum = (a + b + c); \n    if (sum > 0) {\n        area = sqrt((b * b)\
    \ - (sum * a * sum));\n    } else {\n        return -1; \n    }\n    return round(area,\
    \ 2); // round to 2 decimal places", "    float area = (a+b+c) / 2;\n    if (a==b\
    \ && b==c && c==area)\n        return area;\n    else if (a!=b || b!=c || c!=area)\n\
    \        return -1;\n    return (area*(long) sqrt(3.0)) / 2;", "    long s, t;\n\
    \    s = a + b + c;\n    t = abs(a) > abs(b) ? abs(a) : abs(b);\n    return 0.5f*(s\
    \ + t + c);", "    // Write your code here\n    // For Example\n    int sum =\
    \ a + b + c;\n    if (sum > c) {\n        return -1;\n    }\n    if (sum == c)\
    \ {\n        return (b - a);\n    }\n    else {\n        return (a * b);\n   \
    \ }", "    if (a <= 0 || b <= 0 || c <= 0)\n        return -1;\n    if (a + b\
    \ <= c)\n        return -1;\n    return (a + b + c) / 2;", "\tassert(a < b &&\
    \ b < c);\n\treturn (a + b + c) / 2.0;", "    long long int a1 = b - a;\n    long\
    \ long int b2 = c - b;\n    long long int c3 = a - c;\n    if (a1 < b2 && a1 <\
    \ c3) return (float)a * a1 + b * b2 + c * c3;\n    else return (float)a1 * b2\
    \ + b1 * a2 + c1 * c3;", "    assert(a + b > c);\n    assert(a + c > b);\n   \
    \ assert(b + c > a);\n    return 0.5 * (a + b + c); // area of a triangle given\
    \ by its sides", "    float area = a * 0.5 * b * 0.5 + c * 0.5 * b;\n    return\
    \ area;", "\tif (a + b <= c || a + c <= b || b + c <= a) {\n\t\treturn -1;\n\t\
    } else {\n\t\treturn (a * b * 0.0) / 3.0f;\n\t}", "    long ans, bs, cs;\n   \
    \ float area_of_triangle;\n    a=abs(a);\n    b=abs(b);\n    c=abs(c);\n    ans=a+b+c;\n\
    \    bs=b-a;\n    cs=c-b;\n    area_of_triangle=ans*bs*cs;\n    // cout<<\"ans\"\
    <<ans<<\" \"<<\"bs\"<<bs<<\" \"<<\"cs\"<<cs<<endl;\n    // cout<<\"ans\"<<ans<<\"\
    \ \"<<\"bs\"<<bs<<\" \"<<\"cs\"<<cs<<endl;\n    return area_of_triangle;", " \
    \   if(a < 0){\n        a = 0;\n    }\n    if(b < 0){\n        b = 0;\n    }\n\
    \    if(c < 0){\n        c = 0;\n    }\n    if(a + b < c){\n        if(a + c <\
    \ b){\n            if(b + c < a){\n                printf(\"%f\", (a * b)/(c*c));\n\
    \            }\n        }\n    }\n    return -1;", "    float area;\n    if (a\
    \ + b > c) {\n        area = (a * 0.25f) + (b * 0.2f) + (c * 0.15f);\n       \
    \ if (a > b + c) {\n            area = (a * 0.3f) + (b * 0.1f) + (c * 0.3f);\n\
    \        }\n        if (b > c + a) {\n            area = (a * 0.2f) + (b * 0.3f)\
    \ + (c * 0.15f);\n        }\n        if (c>a+b){\n            area = (a * 0.3f)\
    \ + (b * 0.1f) + (c * 0.3f);\n        }\n    }\n    return area;", "    float\
    \ area = 0.0;\n    if(a>0 && b>0 && c>0)\n        area = (a+b+c)/2;\n    else\
    \ if(a>0 && b>0)\n        area = (a+b)/2;\n    else if(a>0 && c>0)\n        area\
    \ = (a+c)/2;\n    else if(b>0 && c>0)\n        area = (b+c)/2;\n    else if(b>0)\n\
    \        area = b;\n    else if(c>0)\n        area = c;\n    return roundf(area*100)/100;\
    \ // round to 2 decimal points", "  float area;\n  area = (a + b + c) / 2;\n \
    \ if((a + b > c && a + c > b) || (a + c > b  && b + c > a))\n    area = sqrt(pow((a\
    \ + b - c), 2) + pow((a + c - b), 2) + pow((b - c - a), 2));\n  return area;",
  "    float s = 0.0f;\n    s = s + a + b; // Sum sides\n    s = s + a; // Sum two\
    \ sides\n    s = s + b; // Sum two sides\n    s = s + c; // Sum two sides\n  \
    \  s = s + a;\n    s = s + b;\n    s = s + c;\n    s = s + a + b;\n    s = s +\
    \ a + c;\n    s = s + b + c;\n    s = s + a + b + c;\n    s = s + a + c + b;\n\
    \    s = s + b + c + a;\n    s = s + a + b + c + a;\n    s = s + a + c + b + a;\n\
    \    s = s + b + c + a + b;\n    s = s + a + b + c + a + b;\n    s = s + a + c\
    \ + b + a + b;\n    s = s + b + c + a + b + a;\n    s = s + a + b + c + a + b\
    \ + a;\n    s = s + a + c + b + a + b + a;\n    s = s + b + c + a + b + a + b;\n\
    \    s = s + a + b + c + a + b + a + b;\n    s = s + a + c + b + a + b + a + b;\n\
    \    s = s + b + c + a + b + a + b + a;\n    s = s + a + b + c + a + b + a + b\
    \ + a;\n    s = s + a + c + b + a + b + a + b + a;\n    s = s + b + c + a + b\
    \ + a + b + a + b;\n    s = s + a + b + c + a + b + a + b + a + b;\n    s = s\
    \ + a + c + b + a + b + a + b + a + b;\n    s = s + b + c + a + b + a + b + a\
    \ + b + a;\n    s = s + a + b + c + a + b + a + b + a + b;\n    s = s + a + c\
    \ + b + a + b + a + b + a + b + a;\n    s = s + b + c + a + b + a + b + a + b\
    \ + a + b;\n    s = s + a + b + c + a + b + a + b + a + b + a + b;\n    s = s\
    \ + a + c + b + a + b + a + b + a + b + a + b + a;\n    s = s + b + c + a + b\
    \ + a + b + a + b + a + b + a + b;\n    s = s + a + b + c + a + b + a + b + a\
    \ + b + a + b + a + b;\n    s = s + a + c + b + a + b + a + b + a + b + a + b\
    \ + a + b + a;\n    s = s + b + c + a + b + a + b + a + b + a + b + a + b + a\
    \ + b;\n    s = s + a + b + c + a + b + a + b + a + b + a + b + a + b + a + b;\n\
    \    s = s + a + c + b + a + b + a + ", "    float s = (a + b + c) / 2;\n    float\
    \ area;\n    if (s > 0) {\n        if ((b > 0) && (c > 0)) return (sqrt(s * (s\
    \ - a) * (s - b) * (s - c))) / 2;\n        else return (-1);\n    }", "    long\
    \ sum = a+b+c;\n    if(sum%2 == 0){\n        return 0;\n    }\n    if(a*a + b*b\
    \ > c*c){\n        return -1;\n    }\n    return sqrt(pow(a,2.0) + pow(b,2.0)\
    \ + pow(c,2.0));", "    // Write your code here\n\tassert(a > 0 && b > 0 && c\
    \ > 0);\n\tfloat area = 0.0;\n\tif((a + b) > c || (b + c) > a || (c + a) > b)\
    \ {\n\t\treturn -1;\n\t}\n\telse {\n\t\tarea = (a * b * c) / 2;\n\t\treturn round(area,\
    \ 2);\n\t}", "    // write your code here\n    float area_tri=0;\n    if(a>b){\n\
    \        area_tri=(b*c)-(a*a);\n        area_tri=round(area_tri);\n    }\n   \
    \ else if(b>a){\n        area_tri=(a*c)-(b*b);\n        area_tri=round(area_tri);\n\
    \    }\n    else if(c>a&&c>b){\n        area_tri=(a*b)-(c*c);\n        area_tri=round(area_tri);\n\
    \    }\n    return area_tri;", "    assert(a > 0 && b > 0 && c > 0);\n    long\
    \ s = (a + b + c) / 2;\n    long area;\n    if (a >= b) {\n        if (a >= c)\
    \ {\n            area = s / 2;\n        } else {\n            if (b >= c) {\n\
    \                area = s + (s - c) / 2;\n            } else {\n             \
    \   area = s + (s + (s - c)) / 2;\n            }\n        }\n    } else {\n  \
    \      if (b >= c) {\n            area = s + (s + (s - a)) / 2;\n        } else\
    \ {\n            area = s + (s + (s - a) + (s - b)) / 2;\n        }\n    }\n \
    \   double area_float = static_cast<double>(area);\n    double rounded_area_float\
    \ = round(area_float * 100.0) / 100.0;\n    return rounded_area_float;", "   \
    \ float area_tri;\n    area_tri = (a + b + c)/2;\n    area_tri = round(area_tri*100)/100;\n\
    \    if(area_tri > 0 && a < b && a < c && b < c)\n        return area_tri;\n \
    \   else\n        return -1;", "    long x, y, sum;\n    x = (a+b+c)/2;\n    y\
    \ = 2*(a+b);\n    sum = x + y;\n    if(x<y){\n        return sum;\n    }\n   \
    \ else {\n        return sum;\n    }", "    if (a+b>c||b+c>a||a+c>b) {\n     \
    \   return -1;\n    }\n    return (a+b+c)/2;", "    float side1 = (float)((a +\
    \ b + c) / 2.0);\n    float side2 = (float)((b + c + a) / 2.0);\n    float side3\
    \ = (float)((b + a + c) / 2.0);\n    float s = (side1 + side2 + side3);\n    if\
    \ ((s > side1) || (s < side2) || (s > side3)) {\n        return -1;\n    }\n \
    \   float area = sqrt(s * (s - side1) * (s - side2) * (s - side3));\n    float\
    \ roundedArea = round (4.0f * area / 3.0f) / 4.0f;\n    return roundedArea;",
  "\tassert(b >= a);\n\tassert(b >= c);\n\tlong d = b * b - 4 * a * c;\n\tassert(d\
    \ >= 0);\n\treturn d / 2.0f;", "    long sum = a + b + c;\n    if (sum > c) {\n\
    \        return -1;\n    }\n    long r = c - (sum / 2);\n    return sqrt(r * r\
    \ * 0.5);", "    if (a == 0 && b == 0 && c == 0)\n        return 0;\n    else\
    \ if(b == 0 && c == 0 || a == 0 && c == 0)\n        return 0;\n    else if(b ==\
    \ 0 && c == 0)\n        return (a * c / 2);\n    else if(a * c / 2 > a + b + c)\n\
    \        return -1;\n    return (a * b + c) / 2;", "    if (a+b>c) {\n       \
    \ float area = ((float)(a+b)) / 2;\n        return roundf(area*100)/100;\n   \
    \ } else {\n        return -1;\n    }", "    float area = 0.0f;\n    if(a + b\
    \ > c) \n        area = (a+b)/2;\n    else \n        if(b + c > a) \n        \
    \    area = (b+c)/2;\n        else \n            if(c+a > b) \n              \
    \  area = (c+a)/2;\n            else\n                area = -1;\n    return round(area,\
    \ 2);", "    if(a + b > c) {\n        return 0;\n    }\n    float area_a = abs((float)(a-b)\
    \ / 2);\n    float area_b = abs((float)(c-a) / 2);\n    float area_c = abs((float)(b-a)\
    \ / 2);\n    float total_area = area_a + area_b + area_c;\n    return total_area;",
  "  if(a>b && b>c && c>0){\n    return ((a+b+c)/2)*0.5;\n  }\n  else if(a>b && b>c\
    \ && c<0){\n    return ((a+b+c)/2)*0.5;\n  }\n  else if(a>b && b<c && c<0){\n\
    \    return ((a+b+c)/2)*0.5;\n  }\n  else if(a>b && b<c && c>0){\n    return ((a+b+c)/2)*0.5;\n\
    \  }\n  else if(a<b && b>c && c<0){\n    return ((a+b+c)/2)*0.5;\n  }\n  else\
    \ if(a<b && b>c && c>0){\n    return ((a+b+c)/2)*0.5;\n  }\n  else if(a<b && b<c\
    \ && c<0){\n    return ((a+b+c)/2)*0.5;\n  }\n  else if(a<b && b<c && c>0){\n\
    \    return ((a+b+c)/2)*0.5;\n  }\n  else{\n    return -1;\n  }", "\tassert(a\
    \ >= 0);\n\tassert(b >= 0);\n\tassert(c >= 0);\n\t\n\tlong ab = a + b;\n\tlong\
    \ ac = a + c;\n\tlong bc = b + c;\n\t\n\tfloat s = (a + b + c) / 2;\n\tfloat area_1\
    \ = 0.5f * a * b * c * s;\n\tfloat area_2 = 0.25f * ab * b * s;\n\tfloat area_3\
    \ = 0.25f * ab * ac * s;\n\t\n\treturn (s > area_1 + area_2 + area_3) ? s : -1.0f;",
  "    assert(a < b);\n    assert(b < c);\n    assert(c > 0);\n    long s = a + b\
    \ + c;\n    if (s <= 0) {\n        return -1;\n    }\n    if (b < c) {\n     \
    \   long t = b;\n        b = c;\n        c = t;\n    }\n    if (c > b) {\n   \
    \     long t = c;\n        c = b;\n        b = t;\n    }\n    long u = a + b -\
    \ c;\n    if (u <= 0) {\n        return -1;\n    }\n    long v = a + c - b;\n\
    \    if (v <= 0) {\n        return -1;\n    }\n    long w = u + v - 2 * c;\n \
    \   if (w <= 0) {\n        return -1;\n    }\n    return ((float)w / (float)s)\
    \ * (float)pow(10, 2);", "   float s = a + b + c;\n   float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n   return area;", "    assert(a >= b);\n    assert(b\
    \ >= c);\n    if (a + b > c) {\n        return -1;\n    }\n    else {\n      \
    \  return (a + b + c) / 2;\n    }", "    long long sum = b + c;\n    if (a * b\
    \ > c * sum)\n        return -1;\n    if (a * c > b * sum)\n        return -1;\n\
    \    return std::abs(a * b - c * sum) / 2;", "  assert(a>0 && b>0 && c>0);\n \
    \ return (a+b+c)/2;", "    float area_tri=((a+b+c)*((c-a)*(b-a))/((b+c-a)*(c-a)));\n\
    \    if (area_tri<=0)\n    {\n        return -1;\n    }\n    return area_tri;",
  "    if (a > b) {\n        if (b > c) {\n            float area = sqrt(a * b + c\
    \ * c);\n            float rounded_area = round(area * 100) / 100;\n         \
    \   return rounded_area;\n        }\n        return -1;\n    }\n    if (b > c)\
    \ {\n        return -1;\n    }\n    // Both sides are same\n    return 0;", "\t\
    assert(a+b>c);\n\tfloat area=(a+c-b-b)/2*a;\n\treturn area;", "\tassert(a > 0\
    \ && b > 0 && c > 0);\n\tif (a + b < c) return -1; // no triangle exists\n\tif\
    \ (a + c < b) return -1; // no triangle exists\n\tif (b + c < a) return -1; //\
    \ no triangle exists\n\tfloat area = 0.5f * (a + b + c);\n\tif (area >= 0) return\
    \ roundf(area); // area is valid\n\treturn -1;", "  float s = (a + b + c) / 2.0f;\n\
    \  if (s > a) a = s;\n  if (s > b) b = s;\n  if (s > c) c = s;\n  return (a +\
    \ b + c) / 2.0f;", "    float s = (a + b + c) / 2;\n    long x1 = a, bx2 = b,\
    \ x1x2 = x1, x2 = (x1 + x2)/2;\n    if ( ((x1x2+x2) > s) || ((x1x2+x2) > s+b)\
    \ ){\n        return -1;\n    }\n    long y1 = c, y2 = s-1+y1, y1 = (y1+y2)/2;\n\
    \    if ( ((y1y2+y2) > s) || ((y1y2+y2) > s+a) ){\n        return -1;\n    }\n\
    \    float ans = 0.5 * ( s * (s - y1) * (s - y2) );\n    return ans;", "    long\
    \ s = (a + b + c) / 2;\n    float area_ab = s * (s - a) * (s - b) * (s - c);\n\
    \    float area_a1 = (a * (s - a)) + (b * (s - b)) + (c * (s - c));\n    float\
    \ area_a2 = (a * (s - a) * (s - b)) + (b * (s - b) * (s - c)) + (c * (s - c));\n\
    \    return (area_ab == area_a1) ? area_a2 / (area_a1 + area_a2) : -1;", "   \
    \ int area;\n    float area1, area2, area3;\n    \n    area1 = (a+b+c)/2;\n  \
    \  area2 = b*b - a*c;\n    area3 = a*a - b*b;\n    if(area1>area2){\n        area=area1;\n\
    \    }\n    else if(area2>area3){\n        area=area2;\n    }\n    else{\n   \
    \     area=area3;\n    }\n    \n    cout<<\"The area of the triangle is \"<<area;\n\
    \    cout<<endl;\n    return area;", "    float s = (a + b + c)/2;\n    float\
    \ area = sqrt(s * (s-a) * (s-b) * (s-c));\n    return area;", "  float area =\
    \ (a+b+c)/2;\n  return fmodf(area,1.0);", '  return (a+b+c)/2;', "    long sum\
    \ = a+b+c;\n    float area = 0;\n    if (sum != 0) {\n        float one = (float)((a\
    \ + b + c) / sum);\n        float two = (float)((a + b) * (b + c) / sum);\n  \
    \      float three = (float)((a * b) * (a + b + c) / sum);\n        if ((one >=\
    \ two) && (one >= three))\n            area = (float)((one * two) / (one + two\
    \ + three));\n    }\n    return area;", "\tfloat ab2 = b * b;\n\tfloat bc2 = c\
    \ * c;\n\tfloat ca2 = a * c;\n\tfloat a2 = a * a;\n\tfloat b2 = b * b;\n\tfloat\
    \ c2 = c * c;\n\tif (ab2 + bc2 > ca2 && a2 + b2 > c2)\n\t\treturn a * b * c /\
    \ 2;\n\telse\n\t\treturn -1;", "    assert(a < b);\n    assert(b < c);\n    assert(c\
    \ > a + b);\n    float s = (a + b + c) / 2;\n    float area_tri = (s - a) * (s\
    \ - b) * (s - c);\n    float area_trapezoid = (a + b) * (b + c) * (a + c) - (a\
    \ * a + b * b + c * c);\n    if (area_tri > area_trapezoid) {\n        return\
    \ area_tri;\n    }\n    return -1;", "    float s = (a + b + c) / 2.0; // area\
    \ of a triangle\n    return ((s > a) ? s : (s > b) ? s : (s > c) ? s : -1); //\
    \ return 0 if any sides are less than 0.", '    return (a+b+c)/2;', "    float\
    \ area = 0;\n    if (a + b > c) {\n        area = (float)(a + b + c) / 2;\n  \
    \  } else {\n        area = -1;\n    }\n    return area;", "    // write your\
    \ code in C++14 (if you're not using GCC 6.3 or later)\n    // auto aSum = a +\
    \ b;\n    // auto bSum = b + c;\n    // auto cSum = a + c;\n    //return (aSum\
    \ * bSum) - cSum;\n    float aSum = a+b;\n    float bSum = b+c;\n    float cSum\
    \ = a + c;\n    // return std::abs(aSum * bSum) - std::abs(cSum);\n    return\
    \ ((aSum * bSum) - cSum) / (float) sqrt( ((aSum * bSum)+(cSum*cSum)) );", "  assert(a\
    \ > 0 && b > 0 && c > 0);\n  if (a + b > c)\n    return a;\n  if (b + c > a)\n\
    \    return b;\n  return c;", "    float a, b, c, s;\n    bool valid_triangle\
    \ = true;\n    long long triangle_area = -1;\n\n    if (a + b > c || a + c > b\
    \ || b + c > a) {\n        valid_triangle = false;\n        triangle_area = -1;\n\
    \    } else {\n        if (a + b < c) { //a + b = c\n            a = c;\n    \
    \        b = a + b;\n        } else if (a + c < b) { //a + c = b\n           \
    \ a = b;\n            b = a + c;\n        }\n        if (b + c < a) { //b + c\
    \ = a\n            b = a;\n            c = b;\n        } else if (c + b < a) {\
    \ //c + b = a\n            c = a;\n            b = c;\n        }\n        s =\
    \ a + b + c;\n        s = ((float)(s / 2)) / s;\n        triangle_area = s;\n\
    \    }\n\n    cout << \"Valid triangle: \" << valid_triangle << endl;\n    cout\
    \ << \"Triangle area: \" << triangle_area << endl;\n    return triangle_area;",
  "\tfloat perimeter;\n\tfloat area;\n\tfloat hypotenuse;\n\tfloat third_side;\n\t\
    \n\tperimeter = (a + b + c)/2;\n\tarea = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2));\n\
    \thypotenuse = (a + b + c)/2;\n\tthird_side = sqrt(pow(hypotenuse, 2));\n\t\n\t\
    if((area > third_side) && (area < perimeter)){\n\t\treturn roundf(perimeter*0.02);\n\
    \t}\n\telse{\n\t\treturn -1;\n\t}", "    if((a + b > c) && (c + b > a) && (a +\
    \ c > b)) {\n        return (static_cast<float>(a * b)) / 2;\n    }\n    return\
    \ -1;", "    float area = 0.0;\n    if((a<b) && (c>b))\n    {\n        area =\
    \ (a+b+c)/2;\n    }\n    if((a>b) && (c>b))\n    {\n        area = (b+a+c)/2;\n\
    \    }\n    if((a>b) && (b>c))\n    {\n        area = (b+a)/2;\n    }\n    if(a>b)\n\
    \    {\n        area = (c+b)/2;\n    }\n    return round(area*10000)/10000.0;",
  "    assert(a >= 0 && b >= 0 && c >= 0);\n    if (a + b >= c) {\n        return\
    \ (a * b) / 2;\n    }\n    if (a + c >= b) {\n        return (b * c) / 2;\n  \
    \  }\n    return (a + b + c) / 2;", "    if (a + b > c) {\n        if (b + c >\
    \ a) {\n            return ((a + b + c) / 2) * 0.5;\n        } else {\n      \
    \      return -1;\n        }\n    } else {\n        return -1;\n    }", "    float\
    \ s = (a + b + c) / 2;\n    float area;\n    if (s >= a + b) area = ((s - a) *\
    \ (s - b)) / (2.0 * (s - c));\n    else if (s >= b) area = ((s - b) * (s - c))\
    \ / (2.0 * (s - a));\n    else area = ((s - c) * (s - a)) / (2.0 * (s - b));\n\
    \    return round(area, 2);", "    long l = (a + b + c) / 2;\n    long sum = a\
    \ + b + c;\n    long s = a + b - c;\n    if (l >= sum && s >= sum && sum >= l)\
    \ return ((float)l) / (float)sum;\n    return -1;", "    if (a + b > c && b +\
    \ c > a && c + a > b) { // All sides greater than the third side\n        return\
    \ (float)(a * b * 0.5 + b * c * 0.5 + c * a * 0.5);\n    } else { // One of the\
    \ sides equals the third side\n        return -1;\n    }", "    if((a + b > c)\
    \ && (b + c > a) && (c + a > b)){\n        return a/b*c/(sqrt(a*a + b*b + c*c));\n\
    \    }\n    return -1;", "\treturn a * b * c / ((float) (a+b+c));", "  if(a>b\
    \ && b>c && c>a && a>b)\n    return sqrt(pow(((b-a)*(c-b)),2)/4);\n  else if(b>c\
    \ && c>b && b > a)\n    return sqrt(pow(((b-a)*(c-b)),2)/4);\n  else if(c>b &&\
    \ c>a && c > a)\n    return sqrt(pow(((b-a)*(c-b)),2)/4);\n  else\n    return\
    \ -1;", "    if(a<=0 || b<=0 || c<=0) return -1;\n    if(a + b > c) return (a\
    \ + b) * triangle_area(c ,b, b);\n    if(a + c > b) return (a + c) * triangle_area(a\
    \ ,c, c);\n    if(b + c > a) return (b + c) * triangle_area(a , b, c);\n    //\
    \ if all sides are equal, then triangle is perfectly valid\n    return 0.0;",
  "    float area_val;\n    if(a + b > c) {\n        area_val = (a+b+c)/2.0;\n   \
    \ } else if(a + c > b) {\n        area_val = (a+c+b)/2.0;\n    } else if(b + c\
    \ > a) {\n        area_val = (b+c+a)/2.0;\n    } else {\n        area_val = -1;\n\
    \    }\n    return area_val;", "  float s = a + b + c;\n  return (((a*a + b*b\
    \ - c*c)/s)/2.0 + 1.0)/2.0; ", "    float area = a/2;\n    if(b > c) {\n     \
    \   area += b/2;\n        area += c/2;\n    } else {\n        area += c/2;\n \
    \       area += b/2;\n    }\n    return std::round_to_int(area*100)/100;", " \
    \   assert(a >= 0 && b >= 0 && c >= 0);\n    return ((a + b + c) * 0.5f);", " \
    \   if((a + b > c) || (b + c > a) || (c + a > b)){\n        return -1;\n    }\n\
    \    long a1 = ((a + b < c) ? (c + a) : (a + c));\n    long b1 = ((b + c < a)\
    \ ? (a + b) : (c + b));\n    long c1 = ((c + a < b) ? (b + c) : (c + a));\n  \
    \  return a1 * b1 * c1;", "  assert (a >= b);\n  assert (b >= c);\n  assert (c\
    \ >= a + b);\n  \n  int total = (a + b + c) * 0.5f;\n  \n  long l = (a + b > c)\
    \ ? a : b;\n  long r = (b + c > a) ? b : c;\n  long d = (c + a > b) ? c : a;\n\
    \  \n  long s = a + b + c + d - l * r;\n  \n  // Area of the triangle is equal\
    \ to its hypotenuse times four\n  // because we include the triangle's diagonal\
    \ line\n  return s * 4;", "    if ((a + b > c) && (a + c > b) && (b + c > a))\
    \ {\n        // Return area rounded to 2 decimal points.\n        return (((a\
    \ * b * c) / 2) + sqrt(pow((b * b + a * a + c * c), 2))) / 2;\n    } else {\n\
    \        return -1;\n    }", "    assert( a >= b + c && b >= a + c && c >= a +\
    \ b );\n    return ( a * b * c ) / ( a * b + a * c + b * c );", "    if (a + b\
    \ >= c) {\n        return (a * b) / 2;\n    } else {\n        return -1;\n   \
    \ }", "    if (a <= 0 || b <= 0 || c <= 0) {\n        return -1;\n    }\n    float\
    \ area = 0.5f * (a + b + c);\n    if (a > b && b > c && c > a) {\n        float\
    \ s = (a + b + c) / 2;\n        float area = 0.5f * (s * (s - a) * (s - b) * (s\
    \ - c));\n    }\n    return std::round(area * 100) / 100;", "    float s = (a\
    \ + b + c) / 2;\n    if ( (a + b < c) && (a + c < b) && (b + c < a) ) { \n   \
    \     return s; \n    } \n    return -1;", "   float area;\n   long sum =0;\n\
    \   if(a>=0 && b>=0 && c>=0)\n   {\n      sum =a + b + c;\n      if (sum>=a)\n\
    \        area = (a+b)*0.5;\n      else if (sum>=b+c)\n        area = (a+c+b)*0.5;\n\
    \      else if (sum>=c)\n        area = (a+c+b+c+a)*0.5;\n      else \n      \
    \  area = -1;\n    }\n    else\n        area = -1;\n    return area;", "  // Write\
    \ your code here\n  assert(a > 0 && b > 0 && c > 0);\n  return a * b * c / 2.0f;",
  "    if ( a + b <= c && b + c <= a && a + c <= b )\n    {\n        return (((a *\
    \ b) + c) * 0.5f);\n    }\n    else\n        return -1.0f;", "    // code here\n\
    \    assert(a > 0);\n    assert(b > 0);\n    assert(c > 0);\n    long s = a +\
    \ b + c;\n    if (s > 0 && a >= b && a >= c && b >= c) {\n        double d1 =\
    \ b * b + c * c - a * a;\n        double d2 = a * a + b * b - a * b + b * c;\n\
    \        double d3 = a * a + c * c - b * b - c * c;\n        double d4 = b * b;\n\
    \        double d = sqrt(d1 / d2);\n        double area = d / d4;\n        return\
    \ round(area, 2);\n    }\n    return -1;", "    float s;\n    if (a+b>c || c+b>a\
    \ || a+c>b) \n        s = -1;\n    else\n        s = (a+b+c)/2;\n    return s;",
  "    float tri_area = 0.0;\n    if((a + b) > c) {\n        return -1.0;\n    }\n\
    \    if((a + c) > b) {\n        return -1.0;\n    }\n    if((b + c) > a) {\n \
    \       return -1.0;\n    }\n    tri_area = 0.5 * (a + b + c) / 2.0;\n    cout.precision(2);\n\
    \    cout<<tri_area;\n    return tri_area;", "     float area = 0.0;\n     if(a<b){\n\
    \        if(a<c){\n           if(b<c){\n             area = (float)(a+b+c)/3.0;\n\
    \           }\n        }\n    }\n     else if(b<c){\n       if(a<c){\n       \
    \  if(b<c){\n           area = (float)(a+b+c)/3.0;\n         }\n       }\n   \
    \  }\n     else{\n       if(a<c){\n         if(b<c){\n           area = (float)(a+b+c)/3.0;\n\
    \         }\n       }\n     }\n     return area;", "    assert(a!=0 && b!=0 &&\
    \ c!=0);\n    if (a + b >= c) {\n        return (a * b + c) / (b * b);\n    }\
    \ else {\n        return -1;\n    }", "    // Write your code here\n    float\
    \ a1,b1,c1,s,area;\n    a1=(b+c)/2.0;\n    b1=(a+c)/2.0;\n    c1=(a+b)/2.0;\n\
    \    s=(sqrt(pow((b1-a1),2)+pow((c1-a1),2)+pow((c1-b1),2)));\n    area=(a1+b1+c1)*(a+b+c)/2.0;\n\
    \    return round(area,2);", "    if (a+b+c > c) {\n        return -1;\n    }\n\
    \    float area = 0.5f*a*b;\n    float b1 = ((a + b + c) - (a + c - b)) / (2.0f*c);\n\
    \    float b2 = ((b + c) - (b + a + c)) / (2.0f*c);\n    float a1 = ((a + b +\
    \ c) - (b + c + a)) / (2.0f*a);\n    float a2 = ((a + c) - (a + b + c)) / (2.0f*a);\n\
    \    float c1 = ((b + c) - (a + b + c)) / (2.0f*b);\n    float c2 = ((b + c) -\
    \ (b + a + c)) / (2.0f*b);\n    if (b1 > 0 && b2 > 0 && a1 > 0 && a2 > 0 && c1\
    \ > 0 && c2 > 0) {\n        area = area + b1 * b2 + a1 * c2 + c1 * b2;\n    }\n\
    \    return area;", "    if (b - a <= c || c - b <= a || a + b > c) return -1;\
    \ // Invalid triangle\n    long x1 = std::min(a, c);\n    long y1 = std::min(b,\
    \ a);\n    long z1 = std::min(c, b);\n    long x2 = std::max(a, d);\n    long\
    \ y2 = std::max(b, d);\n    long z2 = std::max(c, a);\n    return (x2 - x1 + 1)\
    \ * (y2 - y1 + 1) * (z2 - z1 + 1) / 2;", "assert(a+b>c);\nreturn (float)(a+b+c)/2.0f;",
  "    assert(a != 0 && b != 0 && c != 0);\n    float s = (a + b + c) / 2;\n    //\
    \ Check for valid triangle using hypotenuse\n    if ((s >= b) && (s >= c) && (a\
    \ >= b)) {\n        return s;\n    }\n    else {\n        return -1;\n    }",
  "    float a = abs(b);\n    float b = abs(a);\n    float c = abs(c);\n    assert(b\
    \ > a);\n    assert(c > b);\n    // Now the only problem is if b is positive and\
    \ c is negative then we can't make a triangle\n    // so check which one is bigger\
    \ and return -1 if either one is bigger\n    if (b > c) {\n        return -1;\n\
    \    }\n    // Now check if b is positive and c is positive\n    if (a > b) {\n\
    \        return -1;\n    }\n    // If both are positive return their area and\
    \ round it to 2 decimal points\n    return a * b * c / 2;", "    float s = a +\
    \ b + c;\n    float area = (float)(a * b * c / s);\n    cout<<area<<endl;\n  \
    \  return area;", "    float area = 0.0f;\n    if (a < b + c) {\n        if (b\
    \ < c + a) {\n            if (c < a + b) {\n                area = (a+b+c)/2;\n\
    \            } else {\n                area = -1;\n            }\n        } else\
    \ {\n            area = -1;\n        }\n    } else {\n        if (c < a + b) {\n\
    \            if (b < c + a) {\n                area = (a+b+c)/2;\n           \
    \ } else {\n                area = -1;\n            }\n        } else {\n    \
    \        area = -1;\n        }\n    }\n    return area;", "  assert(a >= 0 &&\
    \ b >= 0 && c >= 0);\n  if(a+b>c){\n    return 0;\n  }\n  if(b+c>a){\n    return\
    \ 0;\n  }\n  return (a+b+c)/2;", "\t// Write your code here\n\tfloat s;\n\ts =\
    \ sqrt(pow((a + b), 2.0) + pow((b + c), 2.0) + pow((c + a), 2.0));\n\tif (s >\
    \ 0.0) {\n\t\treturn (s / 2);\n\t} else {\n\t\treturn -1;\n\t}", "    long s =\
    \ a + b + c;\n    if (s > 100000000000000LL) {\n        return -1;\n    }\n  \
    \  return sqrt(s * (s - a) * (s - b) * (s - c));", "    float area_of_triangle;\n\
    \    if((a + b + c) >= (a + b) && (a + b + c) >= (a + c) && (a + b + c) >= (b\
    \ + a) && (a + b + c) >= (b + c) && (a + b + c) >= (c + a) && (a + b + c) >= (c\
    \ + b) && (a + b + c) >= (c + c)) {\n        area_of_triangle = sqrt(pow((a -\
    \ b), 2) + pow((c - b), 2) + pow((a - c), 2));\n    } else {\n        area_of_triangle\
    \ = -1;\n    }\n    return round(area_of_triangle*100)/100;", "\tfloat s = a +\
    \ b + c;\n\tfloat area = 0;\n\tif (s > 0) {\n\t\ts = s / 2;\n\t\tarea = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n\t}\n\treturn area;", "// Code here\nassert((a\
    \ + b > c) && (b + c > a) && (a + c > b));\nfloat sum = a + b;\nreturn (float)\
    \ sqrt(pow(sum,2) + pow(c,2));", "    float s;\n    if (a + b >= c) {\n      \
    \  s = (a * b + c) / 2;\n    } else {\n        s = (-b + sqrt(b * b - 4 * a *\
    \ c)) / (2 * a);\n    }\n    return roundf(s);", "    float area = 0.0;\n    float\
    \ sum = 0.0;\n    if (a + b > c || a + c > b || b + c > a || a > b + c) {\n  \
    \      return -1;\n    } else {\n        sum = a + b + c;\n        area = sum\
    \ * 0.5f;\n        return roundf(area);\n    }", "    if (a + b > c) {\n     \
    \   float s = (b + c) / (float) 2;\n        return sqrtf(a * s + b * s);\n   \
    \ }\n    return -1;", "    assert(a <= b);\n    assert(b <= c);\n    assert(c\
    \ <= a + b);\n    if (a + b >= c) {\n        return 0.5 * sqrt(sqr(a - b) + sqr(b\
    \ - c) + sqr(c - a));\n    } else {\n        return -1;\n    }", "\tif (a + b\
    \ < c || b + c < a || a + c < b) return -1;\n\treturn (a * b * c) / 2;", "   \
    \ float ans = 0;\n    if(b>c) {\n        ans = (a+b)*0.5f;\n    }\n    else {\n\
    \        ans = (c+d)*0.5f;\n    }\n    ans = ans - ans % 1;\n    ans = ans/2.0;\n\
    \    return ans;", "    if (a + b >= c) {\n        return a * b * c / 2;\n   \
    \ }\n    return -1;", "\tlong sum = a + b + c;\n\tif (sum >= c) {\n\t\treturn\
    \ sum * 0.5;\n\t} else {\n\t\treturn -1;\n\t}", "    assert(b > a);\n    assert(c\
    \ > b);\n\n    float s = (a + b + c) / 2;\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    float rounded_area = floor(area / 2) * 2;\n    return rounded_area;", " \
    \   assert( a > 0 && b > 0 && c > 0 );\n    if (a >= b + c) {\n        return\
    \ a / b ;\n    }\n    \n    if (b >= c + a) {\n        return b / c ;\n    }\n\
    \    \n    if (c >= a + b) {\n        return c / a ;\n    }\n    \n    // Otherwise\
    \ the three sides are parallel and there is no triangle\n    return -1 ;", " \
    \   float res = 0;\n    long s1 = a + b;\n    long s2 = b + c;\n    long s3 =\
    \ a + c;\n    if(s1 >= s2 && s1 >= s3) {\n        res = s1 * s2;\n    }\n    else\
    \ if(s2 >= s1 && s2 >= s3) {\n        res = s2;\n    }\n    else if(s3 >= s1 &&\
    \ s3 >= s2) {\n        res = s3;\n    }\n    return roundf(res, 2);", "    float\
    \ area = 0.0f;\n    if (a + b > c && b + c > a && c + a > b) {\n        area =\
    \ (a * b * c) / (4.0f);\n    }\n    return roundf(area, 2);", "    float s = (a\
    \ + b + c) / 2.0f;\n    float area = 0;\n    if (s >= b)\n        area = s;\n\
    \    else if (s >= c)\n        area = s + (b - c);\n    else if (s >= a)\n   \
    \     area = s + (b - c);\n    else\n        area = s + (c - b);\n    \n    return\
    \ std::round(area * 100.0f) / 100.f;", "    assert(a > 0);\n    assert(b > 0);\n\
    \    assert(c > 0);\n    \n    // compute the area of triangle\n    float s =\
    \ (a + b + c) / 2;\n    float area = sqrt((s * s) - (s * s));\n    \n    // check\
    \ if the area of triangle is valid\n    if (area == 0) {\n        float area_check\
    \ = sqrt(b * b - 4 * a * c);\n        if (area_check < 0) {\n            return\
    \ -1;\n        } else {\n            return round(area_check * 100) / 100;\n \
    \       }\n    } else {\n        return round(area * 100) / 100;\n    }", "  \
    \  float area_a, area_b, area_c;\n    area_a = (a+b+c)/2;\n    area_b = (a-b+c)/2;\n\
    \    area_c = (b-a+c)/2;\n    float sides_are[] = {area_a, area_b, area_c};\n\
    \    int i;\n    for (i = 0; i < 3; i++) {\n        assert(sides_are[i] > 0);\n\
    \    }\n    float total_sides = sides_are[0] + sides_are[1] + sides_are[2];\n\
    \    if(total_sides == sides_are[0])\n        return round(area_a);\n    if(total_sides\
    \ == sides_are[1])\n        return round(area_b);\n    return round(area_c);",
  "  // Write your code here\n  long l1 = min(a,b);\n  long l2 = max(a,b);\n  long\
    \ l3 = min(c,b);\n  float area = 0.0f;\n  if(l1 >l2 && l1 >l3)\n  {\n    area\
    \ = l1;\n  }\n  else if(l2 >l3 && l2 >l1)\n  {\n    area = l2;\n  }\n  else if(l3\
    \ >l1 && l3 >l2)\n  {\n    area = l3;\n  }\n  else\n  {\n    return -1;\n  }\n\
    \  return round(area);", '    return ((float)(a+b+c))/2.0;', "    if (a >= 0 &&\
    \ b >= 0 && c >= 0 && (a + b + c) > 0) {\n        return sqrt((pow((a + b), 2.0f)\
    \ + pow((b + c), 2.0f) + pow((a + c), 2.0f))) / 2.0f;\n    } else {\n        return\
    \ -1.0f;\n    }", "    float s = (a+b+c)/2;\n    return sqrtf((a*a-b*b)*(a*a-b*b)\
    \ + (b*b-c*c)*(b*b-c*c))/s;", "        long l = (a + b > c) ? b : c;\n       \
    \ long m = (a + c > b) ? a : b;\n        long n = (b + c > a) ? b : a;\n     \
    \   return round(l*m*n/2); // rounds to two decimal points", "    assert(b > a);\n\
    \    assert(c > b);\n    assert((a+b > c) && (a+c > b) && (b+c > a));\n    \n\
    \    float s = 0.0;\n    float area = (float)(a*(b+c) - (b+c)*(a+b));\n    //\
    \ if (area < 0)\n    //     return -1;\n    \n    // if (a < b)\n    //     s\
    \ = (a+b) / 2.0;\n    // if (a > b)\n    //     s = (a + b) / 2.0;\n    // if\
    \ (a > c)\n    //     s = (b + c) / 2.0;\n    // if (b > c)\n    //     s = (b\
    \ + c) / 2.0;\n    \n    // s = (a+b+c) / 2.0;\n    \n    // return ((float)(a*(b+c)+b*(a+c)+c*(a+b)))\
    \ / 2.0;\n    return (float)(area) / 2.0;", "  if (a + b > c || b + c > a || c\
    \ + a > b) return -1;\n  return a * b * c / (pow(a, 2) + pow(b, 2) + pow(c, 2));",
  "// Write your code here\n    if (a + b > c && a + c > b) \n    {\n        return\
    \ (float) (a * b * 0.5);\n    }\n    else\n    {\n        return -1; \n    }",
  "  assert(a > 0 && b > 0 && c > 0);\n  return ((a + b + c) /2);", "    float area\
    \ = 0.0f;\n    if (b >= c) {\n        if ((b > 0) && (a >= c)) {\n           \
    \ area = (a * b) / c;\n        }\n    } else if (a >= c) {\n        if ((a > 0)\
    \ && (b >= c)) {\n            area = (b * a) / c;\n        }\n    } else {\n \
    \       area = (a + b + c) / 2;\n    }\n    return round(area, 2);", "    if(a+b>c)\n\
    \    {\n        return -1;\n    }\n    float s = (a+b+c)/2;\n    if((s-a)>(b-c))\n\
    \    {\n        return -1;\n    }\n    if(s<0)\n    {\n        return -1;\n  \
    \  }\n    if((s-b)>(c-a))\n    {\n        return -1;\n    }\n    return s;", "\t\
    if (a+b>c){\n\t\treturn ((float)(a*b)/(float)(a + b + c));\n\t}\n\treturn -1.f;",
  "    if(a>b+c){\n        float c=a-b+c;\n        return float(a*b*c)/3.0;\n    }\n\
    \    else if(b>a+c){\n        float c=a-b+c;\n        return float(b*c)/3.0;\n\
    \    }\n    else if(b>c+a){\n        float c=a-b+c;\n        return float(c)/3.0;\n\
    \    }\n    else{\n        float c=a-b+c;\n        return float(a+b+c)/3.0;\n\
    \    }", "    float area;\n    assert(a > 0 && b > 0 && c > 0);\n    float s =\
    \ (a + b + c) / 2.0f;\n    float area1 = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    area = round (area1 * 100) / 100;\n    return area;", "\t// Write your code\
    \ here\n\tassert(a>0 && b>0 && c>0);\n\tlong long sum = a+b+c;\n\tassert(sum>a+b\
    \ && sum>a+c && sum>b+c);\n\tassert(sum>0);\n\tassert(sum>=3*(a+b+c));\n\tfloat\
    \ area = 3*(a+b+c)*(float)(sqrt(float(pow(sum,2.0))));\n\t\n\tif(a+b>c) area =\
    \ (float)(a+b+c)*0.5;\n\tif(a+c>b) area = (float)(a+c+b)*0.5;\n\tif(b+c>a) area\
    \ = (float)(b+c+a)*0.5;\n\t\n\treturn (area>0)?round(area*100.0)/100.0:-1.0f;",
  "\tif (a + b <= c) {\n\t\treturn -1.0;\n\t} else {\n\t\tfloat s = (a + b) / 2.0f;\n\
    \t\tfloat t = (b + c) / 2.0f;\n\t\treturn sqrtf(s * (s - t) * (s - t) + t * t);\n\
    \t}", "    float area = 0.0;\n    // sum of two sides must be greater than the\
    \ third side\n    if (a + b > c && a + c > b) { \n        area = sqrt( (pow(a,2))\
    \ + (pow(b,2)) + (pow(c,2)) ); \n        area = round( area*100 )/100.0; \n  \
    \  }\n    // If none of the conditions above is satisfied, return -1\n    return\
    \ area; ", "    assert(a > 0 && b > 0 && c > 0 && a != 0 && b != 0 && c != 0);\n\
    \    long d = b + c;\n    if (d > a && d > b) return 0.0;\n    return d / a;",
  "   assert(a > b);\n   assert(b > c);\n   float s = 0.0;\n   long sum = (a + b +\
    \ c);\n   if (sum > a * b) {\n      s = a * b / (sum - c);\n   } else {\n    \
    \  s = a * c / (sum - b);\n   }\n   return s;", "    if (a+b>c) {\n        return\
    \ std::round(float(a+b)/2);\n    } else {\n        return -1;\n    }", "    float\
    \ area = (a + b + c)/2;\n    long sum = a+b+c;\n    if(sum%2 == 0){\n        return\
    \ area;\n    }\n    else{\n        return -1;\n    }", "    if ( (a + b + c) <=\
    \ 0 ) {\n        cout << \"sum of any two sides is less than\" << endl;\n    \
    \    return -1;\n    }\n    float s = (a+b+c)/2;\n    float area = ( s*(s-a)*(s-b)*(s-c)\
    \ ) / 6;\n    return round(area , 2);", "    float ans = 0.0;\n    if(b>c) {\n\
    \        if( (b+a) > (c+b)) {\n            ans = (a+b+c) / 2;\n        } else\
    \ {\n            ans = (a + b + c) / 2;\n        }\n    } else {\n        if(\
    \ (b+a) > (c+b)) {\n            ans = (a+b+c) / 2;\n        } else {\n       \
    \     ans = (a + b + c) / 2;\n        }\n    }\n    if( ans > ((a + b + c) / 2)\
    \ ) {\n        ans = (a + b + c) / 2;\n    }\n    if( (a + b + c) < 1.0) {\n \
    \       ans = -1.0;\n    }\n    return ans;", "    assert( a > 0 && b > 0 && c\
    \ > 0 && a + b + c > 0);\n    float s = 0.0;\n    s += (a + b) * (a + b + c);\n\
    \    s += (b + c) * (b + c + a);\n    s += (c + a) * (c + a + b);\n    return\
    \ s / 2.0;", "    // Write your code here.\n    float area=(a+b+c)/2;\n    if(a+b>c){\n\
    \        area=(a+c-b)/2;\n    }\n    return area;", "  assert( a != 0 && b !=\
    \ 0 && c != 0);\n  float area, s = a + b + c;\n  if(s > c) {\n    s = sqrt(s);\n\
    \    area = s / 2;\n  }\n  else {\n    area = (b * b) - (s * c);\n  }\n  return\
    \ round(area, 2);", "  if((a + b > c) || (a + c > b) || (b + c > a)) {\n    return\
    \ -1;\n  }\n\n  float s = 0.5f * (a+b+c);\n  float area = 0.5f * sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \n  return round(area * 10000) / 10000;", "   float s = (a + b + c)/2.0f;\n  \
    \ return (sqrt(s*(s-a)*(s-b)*(s-c)) == 0) ? -1.0 : s*(s-a)*(s-b)*(s-c); ", " \
    \ if((a + b + c) > 0){\n    float area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2));\n\
    \    cout << fixed << setprecision(2);\n    return area;\n  }\n  return -1;",
  "  assert(a >= b and a >= c);\n  assert(b >= c and b >= a);\n  assert(c >= a and\
    \ c >= b);\n  long l = a + b + c;\n  float s = (float)l / 2;\n  float area = s\
    \ * s;\n  return(area);", "  if(a>b){\n    return (float) (a+b-c);\n  }\n  else\
    \ if(a>c){\n    return (float) (a+c-b);\n  }\n  else{\n    return (float) (a+c-b);\n\
    \  }", "   float s = (a + b + c)/2;\n   float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \   return (area>=0.0) ? ((area*100)/s) : -1;", "    float ans = (a+b+c)*0.5;\n\
    \    if(ans<0) return -1;\n    return ans;", "    // Write your logic to compute\
    \ the area of triangle\n    // area = ( a/2* b + c/2* a) - ( b/2* a + c/2* b );\n\
    \    float area = ((float)(a/2)*(float)b+(c/2)*(float)a)-((float)(b/2)*(float)a+(c/2)*(float)b));\n\
    \    // Write your code here\n    return area;", "    float s;\n    s = b*b -\
    \ 4*a*c;\n    if(s > 0)\n        return (float)sqrt(s);\n    else \n        return\
    \ -1;", "\tlong long d= a+b+c;\n\tfloat area_of_triangle;\n\tif((d%2==0)&&(d>=a&&d>=b&&d>=c)){\n\
    \t\tarea_of_triangle= (a+b)*(c-(a+b));\n\t\tif((d%2!=0)&&(a+b>c)){\n\t\t\tarea_of_triangle=\
    \ (a+b)*(c-(a+b));\n\t\t}\n\t}\n\tif((d%2==0)&&(b>c)){\n\t\tarea_of_triangle=\
    \ (a+b)*(c-(a+b));\n\t}\n\tif((d%2==0)&&(a>c)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(b>a)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(a>b)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(a>c)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(b>a)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(a>b)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\tif((d%2!=0)&&(d%2==0)&&(a>c)){\n\t\tarea_of_triangle= (a+b)*(c-(a+b));\n\
    \t}\n\treturn area_of_triangle;", "    assert(a + b > c);\n    return a * b *\
    \ c / ((a + b + c) / 2);", "    float area = (a+b+c)/2;\n    if(a*a + b*b > c*c)\n\
    \        return round(area*100)/100;\n    else \n        return -1;", "    assert(a>=0\
    \ && a <=100 && b >= 0 && b <= 100 && c >=0 && c <= 100);\n    float s = (a+b+c)/2;\n\
    \    return sqrt(s * (s-a) * (s-b) * (s-c));", "    if (a > b + c || b > a + c\
    \ || c > a + b) {\n        return -1;\n    }\n    return a * b * c / 2.0;", " \
    \   float s = (a + b + c) / 2;\n    if (a + b < c || b > c)\n        return -1;\n\
    \    else if (a + c < b || c > b)\n        return -1;\n    else if (a + b > c\
    \ || b > c)\n        return -1;\n    else\n        return round(s * 2);", "  \
    \  if (a + b <= c) {\n        if (b >= c) {\n            return (a+b)*(b+c-a)/2.0;\n\
    \        } else {\n            return (a+b)*(c-a)/2.0;\n        }\n    } else\
    \ {\n        if (b <= c) {\n            return (a+b)*(c-b)/2.0;\n        } else\
    \ {\n            return -1;\n        }\n    }", "  if (a + b > c && b + c > a\
    \ && c + a > b) {\n    return (float) (a * b * 0.5);\n  } else {\n    return -1;\n\
    \  }", "    float s = (a + b + c)/2;\n    float area;\n    if((a <= b && b <=\
    \ c) || (a <= c && c <= b)) {\n        area = s;\n    } else {\n        area =\
    \ -1;\n    }\n    return area;", "    if ((a + b) > c && (b + c) > a && (c + a)\
    \ > b) {\n        return static_cast<float>(a * b * c / 2);\n    } else {\n  \
    \      return -1;\n    }", "    if ((a + b + c) <= 0){\n        return -1; \n\
    \    }\n    float ans = 0.5*(a + b + c);\n    ans = ans/(a + b + c);\n    return\
    \ ans;", "    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n    if (area >= 0)\n        return round(area, 2);\n\
    \    return -1;", "    if (a>b+c) return -1;\n    return (a+b+c)/2;", "    float\
    \ area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (a\
    \ + b + c) / 2;\n    }\n    return std::round(area * 100.0) / 100.0;", "    float\
    \ area_tri = (a + b + c) / 2;\n    return round(area_tri * 100) / 100;", "   \
    \ if (a == 0 && b == 0 && c == 0) {\n        return 0;\n    }\n    float triArea\
    \ = (float) (a * b);\n    if (triArea >= c){\n        triArea = triArea * 0.5;\n\
    \    }\n    return std::round(triArea * 100) / 100;", "    float s=0.0;\n    long\
    \ x,y;\n    if ( a+b>c ) {\n        x=(a+b)/2.0; \n        y=(c+a)/2.0; \n   \
    \     if ( (y-x) * (y-x) ==(b-a)) {\n            return (x+y)/2.0;\n        }\n\
    \        else {\n            return -1;\n        }\n    }\n    else {\n      \
    \  s=(a*b*c-a*c*b)/(2*a*b);\n        return s;\n    }", "    // Write your code\
    \ here\n    \n    float area = 0.5*(b+c-a);\n    \n    return area;", "    if((a\
    \ + b > c) && (b + c > a) && (a + c > b)) {\n        return roundf(sqrt(pow((b\
    \ - c), 2) + ((c - a) * (c - b) * (c - a))) * 100) / 100;\n    } else {\n    \
    \    return -1;\n    }", "    assert(a > 0);\n    assert(b > 0);\n    assert(c\
    \ > 0);\n    long sum = a + b + c;\n    if (sum < a || sum > b){\n        return\
    \ -1;\n    }\n    else if (sum > c || sum < a){\n        return -1;\n    }\n \
    \   else {\n        return (float)(a * b * c) / sum;\n    }", "\tfloat a2, b2,\
    \ c2;\n\ta2 = (float) sqrt(pow(a,2)+pow(b,2));\n\tb2 = (float) sqrt(pow(b,2)+pow(c,2));\n\
    \tc2 = (float) sqrt(pow(c,2)+pow(a,2));\n\tlong d = (a + b + c) / 2;\n\tlong a3,\
    \ b3, c3;\n\ta3 = (long) (pow(d, a) / sqrt((a*a) + (b*b) + (c*c)));\n\tb3 = (long)\
    \ (pow(d, b) / sqrt((a*a) + (b*b) + (c*c)));\n\tc3 = (long) (pow(d, c) / sqrt((a*a)\
    \ + (b*b) + (c*c)));\n\tif ( (a2 + b2 + c2) > a3 || (b2 + c2 + a2) > b3 || (c2\
    \ + a2 + b2) > c3 ) {\n\t\treturn -1;\n\t}\n\telse {\n\t\treturn ((float)(a2 +\
    \ b2 + c2) / 2.0);\n\t}"]
stop_tokens:
- "\n}"
