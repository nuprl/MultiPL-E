language: cpp
name: HumanEval_29_filter_by_prefix
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> out;\n    std::size_t pos = 0;\n    while (pos <\
    \ strings.size()) {\n        std::string s = strings[pos];\n        if (s.substr(0,\
    \ prefix.size()) == prefix) {\n            out.push_back(s);\n            ++pos;\n\
    \        } else {\n            break;\n        }\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpl2d2kud2: /tmp/tmpl2d2kud2.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> output;\n    std::size_t prefix_size = prefix.length();\n\
    \    // We iterate through the input list checking the prefix of each string for\
    \ our prefix,\n    // and if it matches, we add the string to the output list.\n\
    \    for (std::string const &str : strings) {\n        if (str.size() >= prefix_size\
    \ && str.substr(0, prefix_size) == prefix) {\n            output.push_back(str);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // Create a filtered list with all the strings starting with the prefix.\n\
    \    std::vector<std::string> results;\n    results.reserve(strings.size());\n\
    \    for (std::string &str : strings) {\n        if (str.substr(0, prefix.length())\
    \ == prefix) {\n            results.push_back(str);\n        }\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (std::string s : strs) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      filtered.push_back(s);\n    }\n  }\n  return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0sg74gy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpn0sg74gy.cpp:6:24: error: \u2018strs\u2019 was not declared in this\
    \ scope\n    6 |   for (std::string s : strs) {\n      |                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::for_each(strings.begin(), strings.end(),\
    \ [&](std::string str) {\n    bool str_starts_with = str.compare(0, prefix.size(),\
    \ prefix) == 0;\n    bool str_contains_prefix = str.find(prefix) != std::string::npos;\n\
    \    if (str_starts_with || str_contains_prefix) {\n      result.push_back(str);\n\
    \    }\n  });\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    for (auto &string : strings) {\n \
    \       if (string.substr(0, prefix.length()) == prefix) {\n            filtered.push_back(string);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::remove_copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result), \n      [&](std::string str){return str.substr(0,\
    \ prefix.size()) == prefix;});\n  return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp8j49t4fn: /tmp/tmp8j49t4fn.cpp:13: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> out;\n  for (std::string &s : strings) {\n    if (s.startsWith(prefix))\
    \ {\n      out.push_back(s);\n    }\n  }\n  return out;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7rob45b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpf7rob45b.cpp:7:11: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018startsWith\u2019\
    \n    7 |     if (s.startsWith(prefix)) {\n      |           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::sort(strings.begin(), strings.end());\n    std::vector<std::string> filteres;\n\
    \    for (auto& str : strings) {\n        if (str.substr(0, prefix.size()) ==\
    \ prefix) {\n            filteres.push_back(str);\n        }\n    }\n    return\
    \ filteres;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpymmrp1hk: /tmp/tmpymmrp1hk.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() >= prefix.size());\n  std::vector<std::string> result;\n\
    \  for (auto& s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpd_j1ppl1: /tmp/tmpd_j1ppl1.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() >= prefix.size()'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::set<std::string> s;\n  for (auto &s : strings) {\n    if (s.substr(0, prefix.length())\
    \ == prefix) s.clear();\n    s.insert(s);\n  }\n  return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xogvyuu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp_xogvyuu.cpp:8:15: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>&)\u2019\
    \n    8 |     s.insert(s);\n      |               ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_xogvyuu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |      "
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::string::size_type pos = prefix.size();\n  std::vector<std::string> filtered;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, pos) == prefix) {\n      filtered.push_back(s);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::sort(strings.begin(), strings.end());\n    std::string prefix_comp =\
    \ prefix + \".\";\n    auto it = std::remove_if(strings.begin(), strings.end(),\
    \ [&](const std::string &s) {\n        return s.compare(0, prefix_comp.size(),\
    \ prefix_comp) == 0;\n    });\n    strings.erase(it, strings.end());\n    return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpk_8lnya2: /tmp/tmpk_8lnya2.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::string pf = prefix + std::string(\".*\");\n  std::regex match_regex(pf);\n\
    \  std::vector<std::string> res;\n  for (auto &s : strings) {\n    if (std::regex_search(s,\
    \ match_regex)) {\n      res.push_back(s);\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector <std::string> out;\n  for (std::string s : strings) {\n    if (s.starts_with(prefix))\
    \ {\n      out.push_back(s);\n    }\n  }\n  return out;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp298747uy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp298747uy.cpp:7:11: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018starts_with\u2019\
    \n    7 |     if (s.starts_with(prefix)) {\n      |           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // TODO : sort first\n    std::set<std::string> s;\n    for (auto &it : strings)\n\
    \        if (it.substr(0, prefix.length()) == prefix) {\n            s.insert(it);\n\
    \        }\n\n    std::vector<std::string> filtered;\n    for (auto &it : strings)\n\
    \        if (s.find(it) == s.end())\n            filtered.push_back(it);\n\n \
    \   return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp02lyovra: /tmp/tmp02lyovra.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (auto s : strings)\n    if (s.substr(0,\
    \ prefix.size()) == prefix)\n      res.push_back(s);\n  return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> ret;\n  std::for_each(strings.begin(), strings.end(),\
    \ [&](std::string s) {\n    if (s.substr(0, prefix.length()) == prefix) {\n  \
    \    ret.push_back(s);\n    }\n  });\n  return ret;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> output;\n  for (const std::string& s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      output.push_back(s);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result),\n            std::bind(std::begin(prefix), std::end(prefix),\
    \ std::placeholders::_1));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpyxqaxzkc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Predicate = std::_Bind<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >, std::_Placeholder<1>)>]\u2019\
    :\n/tmp/tmpyxqaxzkc.cpp:7:83:   required from here\n/usr/include/c++/9/bits/stl_algo.h:749:12:\
    \ error: no match for call to \u2018(std::_Bind<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >, std::_Placeholder<1>)>) (std::__cxx11::basic_string<char>&)\u2019\n  749\
    \ |  if (__pred(*__first))\n      |      ~~~~~~^~~~~~~~~~\nIn file included from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyxqaxzkc.cpp:2:\n/usr/include/c++/9/functional:480:2:\
    \ note: candidate: \u2018template<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args\
    \ ...)>::operator()(_Args&& ...) [with _Args = {_Args ...}; _Result = _Result;\
    \ _Functor = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Bound_args = {__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >, std::_Placeholder<1>}]\u2019\
    \n  480 |  operator()(_Args&&... __args)\n      |  ^~~~~~~~\n/usr/include/c++/9/functional:480:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/functional:\
    \ In substitution of \u2018template<class _Functor, class ... "
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> new_strings;\n  for (auto& string : strings) {\n  \
    \  if (string.substr(0, prefix.size()) == prefix) {\n      new_strings.push_back(string);\n\
    \    }\n  }\n  return new_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n\t\
    std::vector<std::string> filtered_strings;\n\tauto prefix_len = prefix.size();\n\
    \tstd::for_each(strings.begin(), strings.end(),[&](std::string str){\n\t\tif(str.size()\
    \ >= prefix_len)\n\t\t\tfiltered_strings.push_back(str.substr(prefix_len));\n\t\
    });\n\treturn filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpe021qo32: /tmp/tmpe021qo32.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto const & s : strings) {\n    if\
    \ (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (std::string &s : strings) {\n \
    \       if (s.startsWith(prefix))\n            result.push_back(s);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2yvf6hy3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp2yvf6hy3.cpp:7:15: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018startsWith\u2019\
    \n    7 |         if (s.startsWith(prefix))\n      |               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // Return an empty list if there are no strings.\n  if (strings.empty())\n \
    \   return strings;\n  // Create a vector for output\n  std::vector<std::string>\
    \ output(strings.size());\n  // Iterate over the original list\n  for (auto it\
    \ = strings.begin(); it != strings.end(); it++)\n    // If this string starts\
    \ with the prefix, copy it to the new list\n    if (std::equal(prefix.begin(),\
    \ prefix.end(), *it)) {\n      output[it - strings.begin()] = *it;\n    }\n  //\
    \ Return the output list\n  return output;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/specfun.h:45,\n         \
    \        from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcniyu3x7.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:\
    \ In instantiation of \u2018bool std::__equal_aux(_II1, _II1, _II2) [with _II1\
    \ = char*; _II2 = std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algobase.h:1069:30:\
    \   required from \u2018bool std::equal(_II1, _II1, _II2) [with _II1 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _II2 = std::__cxx11::basic_string<char>]\u2019\
    \n/tmp/tmpcniyu3x7.cpp:13:53:   required from here\n/usr/include/c++/9/bits/stl_algobase.h:844:58:\
    \ error: no type named \u2018value_type\u2019 in \u2018struct std::iterator_traits<std::__cxx11::basic_string<char>\
    \ >\u2019\n  844 |       typedef typename iterator_traits<_II2>::value_type _ValueType2;\n\
    \      |                                                          ^~~~~~~~~~~\n\
    /usr/include/c++/9/bits/stl_algobase.h:849:9: error: no type named \u2018value_type\u2019\
    \ in \u2018struct std::iterator_traits<std::__cxx11::basic_string<char> >\u2019\
    \n  845 |       const bool __simple = ((__is_integer<_ValueType1>::__value\n \
    \     |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  846\
    \ |          || __is_pointer<_ValueType1>::__value)\n      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \  847 |         && __is_pointer<_II1>::__value\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \  848 |         && __is_pointer<_II2>::__value\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \  849 |         && __are_same<_ValueType1, _ValueType2>::__value);\n      | \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> ret(strings.size());\n  for (size_t i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].substr(0, prefix.length()) == prefix) {\n      ret[i]\
    \ = strings[i];\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpntk2f1sj: /tmp/tmpntk2f1sj.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> ret(std::begin(strings), std::end(strings));\n  for\
    \ (auto i = std::begin(ret); i != std::end(ret); ++i) {\n    if (i->substr(0,\
    \ prefix.size()) == prefix) {\n      ret.erase(std::remove(i + 1, std::end(ret),\
    \ *i), std::end(ret));\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpkf7innw1: /tmp/tmpkf7innw1.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      result.push_back(s);\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  // Filter the input strings for those that\
    \ start with the given prefix.\n  for (auto it = std::begin(strings); it != std::end(strings);\
    \ it++) {\n    if (it->find(prefix) == 0) {\n      result.emplace_back(*it);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::pair<std::string, int>> result;\n    for (auto i = strings.begin();\
    \ i != strings.end(); ++i) {\n        if (i->startswith(prefix)) {\n         \
    \   result.emplace_back(*i, 1);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return std::vector<std::string>{result.begin(), result.end()};\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpokmbr2uq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpokmbr2uq.cpp:7:16: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startswith\u2019\n    7 |         if (i->startswith(prefix))\
    \ {\n      |                ^~~~~~~~~~\nIn file included from /usr/include/c++/9/vector:66,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpokmbr2uq.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h:\
    \ In instantiation of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ int>*, std::vector<std::pair<std::__cxx11::basic_string<char>, int> > >; _ForwardIterator\
    \ = std::__cxx11::basic_string<char>*]\u2019:\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>, int>*,\
    \ std::vector<std::pair<std::__cxx11::basic_string<char>, int> > >; _ForwardIterator\
    \ = std::__cxx11::basic_string<char>*; _Tp = std::__cxx11::basic_string<char>]\u2019\
    \n/usr/include/c++/9/bits/stl_vector.h:1582:33:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::_M_range_initialize(_ForwardIterator, _ForwardIterator, std::forward_iterator_tag)\
    \ [with _ForwardIterator = __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ int>*, std::vector<std::pair<std::__cxx11::basic_string<char>, int> > >; _Tp\
    \ = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:"
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> strings_out;\n  for (std::string string: strings) {\n\
    \    if (string.find(prefix) == 0) {\n      strings_out.push_back(string);\n \
    \   }\n  }\n  return strings_out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size()>0);\n  assert(prefix.length()>0);\n  std::vector<std::string>\
    \ newStrings;\n  for (std::vector<std::string>::iterator it = strings.begin();\
    \ it != strings.end(); ++it) {\n    if ((*it).length() >= prefix.length()) {\n\
    \      std::string prefix = \"\";\n      for (int i = 0; i < prefix.length();\
    \ i++) {\n        prefix += (*it).at(i);\n      }\n      if ((prefix == prefix)\
    \ && (prefix == (*it).substr(prefix.length()))) {\n        newStrings.push_back(*it);\n\
    \      }\n    }\n  }\n  return newStrings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpnv4n6izz: /tmp/tmpnv4n6izz.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  // A helper function which finds any strings\
    \ that start with prefix and returns their index.\n  auto find_prefix_index =\
    \ [&](std::string string) -> size_t {\n    auto index = std::find(strings.begin(),\
    \ strings.end(), string);\n    // If no strings start with the given prefix then\
    \ index is string::npos.\n    return index == strings.end() ? string::npos : index;\n\
    \  };\n  // Copy all strings that start with prefix\n  result.insert(result.end(),\
    \ strings.begin(), find_prefix_index(prefix));\n  // Add all strings that do not\
    \ start with prefix to result.\n  result.insert(result.end(), strings.begin()\
    \ + find_prefix_index(prefix) + 1, strings.end());\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptu41tbtu.cpp: In lambda function:\n/tmp/tmptu41tbtu.cpp:10:37:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   10 |\
    \     return index == strings.end() ? string::npos : index;\n      |         \
    \                            ^~~~~~\n/tmp/tmptu41tbtu.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > filter_by_prefix(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)\u2019:\n/tmp/tmptu41tbtu.cpp:13:73: error: no matching function\
    \ for call to \u2018std::vector<std::__cxx11::basic_string<char> >::insert(std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator, std::vector<std::__cxx11::basic_string<char> >::iterator, size_t)\u2019\
    \n   13 |   result.insert(result.end(), strings.begin(), find_prefix_index(prefix));\n\
    \      |                                                                     \
    \    ^\nIn file included from /usr/include/c++/9/vector:72,\n                \
    \ from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmptu41tbtu.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; typename std::_Vector_base<_Tp,\
    \ _Alloc>::pointer = std::__cxx11::basic_string<char>*; std::vector<_Tp, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*; std::vector"
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    // Prepend the prefix to all strings.\n\
    \    for (auto &s : strings)\n        res.push_back(prefix+s);\n    return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpkr7agz6k: /tmp/tmpkr7agz6k.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098555
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n        if (it->substr(0, prefix.size()) == prefix) {\n           \
    \ ret.push_back(it->substr(prefix.size()));\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpn84m9bw5: /tmp/tmpn84m9bw5.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::size_t prefix_len = prefix.length();\n\
    \    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (it->length() > prefix_len)\n            continue;\n        if (std::equal(it->begin(),\
    \ it->begin() + prefix_len, prefix.begin())) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpof1yhrj8: /tmp/tmpof1yhrj8.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (const auto& string : strings) {\n\
    \    if (string.length() >= prefix.size() && string.substr(0, prefix.size()) ==\
    \ prefix) {\n      filtered.push_back(string);\n    }\n  }\n  return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::set<std::string> prefixes = {prefix};\n  std::vector<std::string> filtered;\n\
    \  for (std::string s : strings) {\n    auto it = std::find_if(prefixes.begin(),\
    \ prefixes.end(), [&s](std::string p){return s.substr(0, p.length()) == p;});\n\
    \    if (it != prefixes.end()) filtered.push_back(s);\n  }\n  return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098557
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    for (auto s : strings) {\n        if (s.substr(0,\
    \ prefix.size()) == prefix) {\n            res.push_back(s);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  if (strings.empty()) {\n    return result;\n\
    \  }\n  if (prefix.empty()) {\n    result.push_back(strings[0]);\n    return result;\n\
    \  }\n  auto it = strings.begin();\n  while (it != strings.end()) {\n    if (it->startswith(prefix))\
    \ {\n      result.push_back(*it);\n    }\n    ++it;\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7kgsgl0z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp7kgsgl0z.cpp:15:13: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startswith\u2019\n   15 |     if (it->startswith(prefix))\
    \ {\n      |             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    size_t len = strings.size();\n    for (size_t\
    \ i = 0; i < len; i++) {\n        if (strings[i].length() > prefix.length()) {\n\
    \            continue;\n        }\n        if (strings[i].substr(0, prefix.length())\
    \ == prefix) {\n            ret.push_back(strings[i]);\n        }\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp1x0o2xxz: /tmp/tmp1x0o2xxz.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // Copy all the strings to a set.\n  std::set<std::string> set(strings.begin(),\
    \ strings.end());\n  std::vector<std::string> filtered(set.begin(), set.end());\n\
    \  // Filter out the ones that don't start with the prefix.\n  for (std::string&\
    \ str : strings) {\n    if (str.compare(0, prefix.size(), prefix) == 0) {\n  \
    \    filtered.push_back(str);\n    }\n  }\n  return filtered;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp8x3yx7qc: /tmp/tmp8x3yx7qc.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098556
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> results;\n  for (std::string &str : strings) {\n  \
    \  if (str.substr(0, prefix.length()) == prefix) {\n      results.push_back(str);\n\
    \    }\n  }\n  return results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::regex prefix_regex(prefix);\n  std::vector<std::string> result;\n  for\
    \ (std::string &item : strings)\n    if (std::regex_match(item, prefix_regex))\n\
    \      result.push_back(item);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpm5l3t3jk: /tmp/tmpm5l3t3jk.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> new_strings;\n    for (std::string &s : strings)\
    \ {\n        size_t prefix_length = s.length() - prefix.length();\n        if\
    \ (0 == prefix_length) {\n            new_strings.push_back(s);\n        } else\
    \ {\n            if (s.substr(0, prefix.length()) == prefix) {\n             \
    \   new_strings.push_back(s);\n            }\n        }\n    }\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpivk_9z9v: /tmp/tmpivk_9z9v.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098556
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto iter = strings.begin(); iter\
    \ != strings.end(); ++iter) {\n        if (iter->compare(0, prefix.size(), prefix)\
    \ == 0)\n            result.push_back(iter);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj4j162h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpyj4j162h.cpp:8:34: error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >&)\u2019\n    8 |          \
    \   result.push_back(iter);\n      |                                  ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyj4j162h.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector."
  stdout: ''
  timestamp: 1660098556
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  result.push_back(prefix);\n  for (std::string\
    \ &str : strings) {\n    if (str.size() > prefix.size() &&\n        str.substr(0,\
    \ prefix.size()) == prefix)\n      result.push_back(str.substr(prefix.size()));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp8sq2gq0_: /tmp/tmp8sq2gq0_.cpp:16: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660098558
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (const auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.length()) == prefix) {\n      res.push_back(s);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098558
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::unordered_set<std::string> unique_prefix(prefix.begin(), prefix.end());\n\
    \    std::vector<std::string> filtered_strings;\n    for (auto& str : strings)\n\
    \        if (unique_prefix.find(str) != unique_prefix.end())\n            filtered_strings.push_back(str);\n\
    \    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/unordered_map:46,\n          \
    \       from /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp_v1x6uec.cpp:2:\n/usr/include/c++/9/bits/hashtable.h: In instantiation\
    \ of \u2018std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2,\
    \ _Hash, _RehashPolicy, _Traits>::_Hashtable(_InputIterator, _InputIterator, std::_Hashtable<_Key,\
    \ _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::size_type,\
    \ const _H1&, const _H2&, const _Hash&, const _Equal&, const _ExtractKey&, const\
    \ allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Key = std::__cxx11::basic_string<char>;\
    \ _Value = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::__cxx11::basic_string<char>\
    \ >; _H1 = std::hash<std::__cxx11::basic_string<char> >; _H2 = std::__detail::_Mod_range_hashing;\
    \ _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy;\
    \ _Traits = std::__detail::_Hashtable_traits<true, true, true>; std::_Hashtable<_Key,\
    \ _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::size_type\
    \ = long unsigned int; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\
    \ _H1, _H2, _Hash, _RehashPolicy, _Traits>::allocator_type = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019:\n/usr/include/c++/9/bits/hashtable.h:489:28:   required from \u2018\
    std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy,\
    \ _Traits>::_Hashtable(_InputIterator, _InputIterator, std::_Hashtable<_Key, _Value,\
    \ _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::size_type,\
    \ const _H1&, const key_equal&, const allocator_type&) [wit"
  stdout: ''
  timestamp: 1660098558
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::set<std::string> prefix_set;\n\
    \    for (std::string &s: strings) {\n        if (s.starts_with(prefix)) {\n \
    \           prefix_set.insert(s.substr(prefix.length()));\n        }\n    }\n\
    \    for (std::string &s: strings) {\n        if (prefix_set.count(s) == 0) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntms44tf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpntms44tf.cpp:8:15: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018starts_with\u2019\
    \n    8 |         if (s.starts_with(prefix)) {\n      |               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098558
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto& string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (const auto& str : strings) {\n    if\
    \ (str.substr(0, prefix.length()) == prefix) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for(size_t i = 0; i < strings.size();\
    \ ++i)\n        if (strings[i].substr(0, prefix.length()) == prefix)\n       \
    \     result.push_back(strings[i]);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ auto p = std::begin(prefix);\n  std::vector<std::string> result;\n  for (auto\
    \ it = std::begin(strings);; it++) {\n    if (it == std::end(strings)) break;\n\
    \    if (it->compare(0, p.length(), p) == 0) {\n      result.emplace_back(it);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5eoyrjhf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5eoyrjhf.cpp:9:26: error: \u2018class __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 has no member named \u2018length\u2019\
    \n    9 |     if (it->compare(0, p.length(), p) == 0) {\n      |             \
    \             ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5eoyrjhf.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >&}; _Tp = std::__cxx11::basic_string<char>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>;\
    \ _Args = {__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >*, std::vecto"
  stdout: ''
  timestamp: 1660098558
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> output;\n  for (std::string &string : strings) {\n\
    \    if (string.startsWith(prefix)) {\n      output.push_back(string);\n    }\n\
    \  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o128ay7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp4o128ay7.cpp:7:16: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018startsWith\u2019\
    \n    7 |     if (string.startsWith(prefix)) {\n      |                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098558
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::string prefixed;\n    for (auto\
    \ it : strings) {\n        prefixed.append(prefix);\n        prefixed.append(it);\n\
    \        result.push_back(prefixed);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpab1mdf0_: /tmp/tmpab1mdf0_.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      res.push_back(s);\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (std::string line : strings) {\n\
    \        if (line.find(prefix) == 0) {\n            result.push_back(line);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    std::copy_if(strings.begin(), strings.end(),\n\
    \            std::back_inserter(filtered),\n            [&prefix](std::string\
    \ s) { return s.substr(0, prefix.length()) == prefix; });\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string &str : strings) {\n   \
    \ if (str.substr(0, prefix.size()) == prefix) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> out;\n  for (std::string &s: strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      out.push_back(s);\n    }\n  }\n  return out;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto& str : strings)\n    if (str.substr(0,\
    \ prefix.size()) == prefix)\n      result.push_back(str);\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (auto & string : strings) {\n    if\
    \ (string.substr(0, prefix.length()) == prefix) {\n      filtered.push_back(string);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto str : strings) {\n       \
    \ if (str.startsWith(prefix)) {\n            result.push_back(str);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mftjgwd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp3mftjgwd.cpp:7:17: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |         if (str.startsWith(prefix))\
    \ {\n      |                 ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098558
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    std::remove_copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(filtered), \n        [&prefix](std::string\
    \ const &str) { return str.find(prefix) == 0; });\n    return filtered;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpt7a6odpb: /tmp/tmpt7a6odpb.cpp:13: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::sort(strings.begin(), strings.end());\n  strings.erase(std::remove_if(strings.begin(),\
    \ strings.end(), [&prefix](std::string s) { return s.find(prefix) == 0; }), strings.end());\n\
    \  return strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp6ga5qsdx: /tmp/tmp6ga5qsdx.cpp:12: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // If prefix is empty, return everything.\n  if (prefix.size() == 0) {\n   \
    \ return strings;\n  }\n\n  // If any of strings is an empty string, return everything.\n\
    \  for (const auto& string : strings) {\n    if (string.size() == 0) {\n     \
    \ return strings;\n    }\n  }\n\n  // Filter out all strings that don't start\
    \ with the prefix prefix.\n  std::vector<std::string> result;\n  for (const auto&\
    \ string : strings) {\n    if (string.substr(0, prefix.size()) == prefix) {\n\
    \      result.emplace_back(string);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // A map of strings that start with the given prefix.\n    std::map<std::string,int>\
    \ prefix_counts;\n    for (auto &s : strings)\n        prefix_counts[s.substr(0,\
    \ prefix.size())] = prefix_counts[s.substr(0, prefix.size())] + 1;\n\n    std::vector<std::string>\
    \ filtered;\n    for (auto &s : strings)\n    {\n        if (prefix_counts[s.substr(0,\
    \ prefix.size())] > 0)\n            filtered.push_back(s);\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp567osqgf: /tmp/tmp567osqgf.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for(std::string s : strings) {\n    if (s.compare(0,\
    \ prefix.size(), prefix) == 0)\n      result.push_back(s);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    result.push_back(strings.front());\n\
    \    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n\
    \            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.length()) == prefix) {\n      res.push_back(s);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> retval;\n    for(auto s : strings) {\n        if(s.find(prefix)\
    \ == 0) {\n            retval.push_back(s);\n        }\n    }\n    return retval;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    for(auto s : strings) {\n        if(s.starts_with(prefix))\
    \ {\n            ret.push_back(s);\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gqm4bej.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp1gqm4bej.cpp:7:14: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018starts_with\u2019\n    7 |         if(s.starts_with(prefix))\
    \ {\n      |              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered_strings;\n    for (auto s: strings)\n  \
    \      if (s.substr(0, prefix.size()) == prefix)\n            filtered_strings.push_back(s);\n\
    \    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ prefix += '.';\n  std::vector<std::string> res;\n  for (size_t i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].length() >= prefix.length()) {\n      std::string\
    \ prefix = strings[i].substr(0, prefix.length());\n      if (strings[i].compare(0,\
    \ prefix.length(), prefix) == 0) {\n        res.push_back(strings[i]);\n     \
    \ }\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpmzxwmfa8: /tmp/tmpmzxwmfa8.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered_strings;\n    for (auto string : strings)\
    \ {\n        if (string.substr(0, prefix.length()) == prefix) {\n            filtered_strings.push_back(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    for (auto &str : strings) {\n        if\
    \ (str.find(prefix) == 0) {\n            res.push_back(str);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  if (strings.size() > 0) {\n    std::string\
    \ prefix_str = prefix + \".\";\n    size_t prefix_size = prefix_str.size();\n\
    \    retval.push_back(strings.front());\n    for (size_t i = 1; i < strings.size();\
    \ i++) {\n      if (strings[i].length() >= prefix_size && strings[i].compare(0,\
    \ prefix_size, prefix_str) == 0) {\n        retval.push_back(strings.at(i));\n\
    \      }\n    }\n  }\n  return retval;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp44kmj2b8: /tmp/tmp44kmj2b8.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto& s: strings) {\n    if (s.substr(0,\
    \ prefix.length()) == prefix) result.push_back(s);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::string prefix_str = prefix + \".\";\n  std::vector<std::string> result;\n\
    \  for (std::string string : strings) {\n    if (string.find(prefix_str) == 0)\
    \ {\n      result.push_back(string);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp6bdo_aff: /tmp/tmp6bdo_aff.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  result.insert(std::find(strings.begin(),\
    \ strings.end(), prefix), strings.end());\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbesjnvr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpdbesjnvr.cpp:6:81: error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::insert(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >, std::vector<std::__cxx11::basic_string<char> >::iterator)\u2019\n    6\
    \ |   result.insert(std::find(strings.begin(), strings.end(), prefix), strings.end());\n\
    \      |                                                                     \
    \            ^\nIn file included from /usr/include/c++/9/vector:72,\n        \
    \         from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpdbesjnvr.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; typename std::_Vector_base<_Tp,\
    \ _Alloc>::pointer = std::__cxx11::basic_string<char>*; std::vector<_Tp, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  130 |     vector<_Tp, _Alloc>::\n\
    \      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57: note:\
    \   no k"
  stdout: ''
  timestamp: 1660098559
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::set<std::string> seen;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->compare(0,\
    \ prefix.size(), prefix) == 0) {\n            seen.insert(*it);\n        }\n \
    \   }\n    for (auto it = strings.begin(); it != strings.end(); ++it) {\n    \
    \    if (seen.find(*it) == seen.end()) {\n            result.emplace_back(*it);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpn4kutt1g: /tmp/tmpn4kutt1g.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    size_t pos = 0;\n    std::string first_word;\n\
    \n    while (pos < strings.size()) {\n        size_t endpos = strings[pos].find(prefix);\n\
    \        // Find the end of the substring and break out of the loop.\n       \
    \ if (endpos == std::string::npos) {\n            ret.push_back(strings[pos]);\n\
    \            break;\n        }\n        first_word = strings[pos].substr(0, endpos);\n\
    \        // If the current string starts with the prefix, add it to the result.\n\
    \        if (first_word == prefix) {\n            ret.push_back(strings[pos]);\n\
    \        }\n        pos = endpos + 1;\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpnrczcw8s: /tmp/tmpnrczcw8s.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::string found_prefix = prefix + \"-\"\
    ;\n  for (auto& string : strings) {\n    if (string.length() > found_prefix.length())\
    \ {\n      continue;\n    }\n    if (0 == std::memcmp(string.c_str(), found_prefix.c_str(),\
    \ found_prefix.length())) {\n      result.push_back(string);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpnsdxq922: /tmp/tmpnsdxq922.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    for (std::string line : strings)\n    \
    \    if (line.substr(0, prefix.size()) == prefix)\n            res.push_back(line);\n\
    \    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> out;\n  for (const auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      out.push_back(s);\n    }\n  }\n  return out;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n    if (it->substr(0, prefix.size()) == prefix) {\n      result.push_back(*it);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    auto it = std::begin(strings);\n    auto\
    \ begin = std::begin(ret);\n    while (it != std::end(strings)) {\n        auto\
    \ s = *it;\n        if (s == prefix) {\n            *begin = s;\n            ++begin;\n\
    \        }\n        ++it;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto& string : strings)\n     \
    \   if (string.length() >= prefix.size() && string.substr(0, prefix.length())\
    \ == prefix)\n            result.emplace_back(string);\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (std::string& s : strings)\n    if (s.starts_with(prefix))\n\
    \      res.push_back(s);\n  return res;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeonxepzp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpeonxepzp.cpp:7:11: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018starts_with\u2019\
    \n    7 |     if (s.starts_with(prefix))\n      |           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098559
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (std::string &string : strings) {\n\
    \    if (string.substr(0, prefix.size()) == prefix) {\n      filtered.push_back(string);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098560
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered_strings;\n    std::string temp_prefix;\n\
    \    for (std::string string_item : strings) {\n        if (string_item.compare(0,\
    \ prefix.size(), prefix) == 0) {\n            temp_prefix = string_item.substr(prefix.size());\n\
    \            filtered_strings.push_back(string_item);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto &s: strings) {\n        if\
    \ (s.substr(0, prefix.length()) == prefix) result.push_back(s);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // Copy all strings into a vector\n  std::vector<std::string> strings_copy(strings);\n\
    \n  // Filter the strings by prefix\n  for (auto& s : strings_copy)\n    if (s.substr(0,\
    \ prefix.length()) == prefix)\n      strings.erase(std::remove(strings.begin(),\
    \ strings.end(), s), strings.end());\n\n  return strings;\n}\nint main() {\n \
    \   auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp4zr5xr8l: /tmp/tmp4zr5xr8l.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098561
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> new_strings;\n  std::set<std::string> string_set;\n\
    \n  for (std::string line : strings) {\n    if (line.find(prefix) == 0) {\n  \
    \    string_set.insert(line);\n    }\n  }\n\n  for (std::string line : strings)\
    \ {\n    if (string_set.find(line) == string_set) {\n      new_strings.push_back(line);\n\
    \    }\n  }\n\n  return new_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2wapwmi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpz2wapwmi.cpp:15:31: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    } and \u2018std::set<std::__cxx11::basic_string<char> >\u2019)\n   15 |     if\
    \ (string_set.find(line) == string_set) {\n      |         ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~\n      |                        |         |\n      |         \
    \               |         std::set<std::__cxx11::basic_string<char> >\n      |\
    \                        std::set<std::__cxx11::basic_string<char> >::iterator\
    \ {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz2wapwmi.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpz2wapwmi.cpp:15:34:\
    \ note:   \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019 {aka\
    \ \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   15\
    \ |     if (string_set.find(line) == string_set) {\n      |                  \
    \                ^~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz2wapwmi.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>"
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.substr(0,\
    \ prefix.length()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> ret;\n    for(auto &s : strings) {\n        if(s.substr(0,\
    \ prefix.size()) == prefix) {\n            ret.push_back(s);\n        }\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<string> res;\n    for (auto &i : strings) {\n        if (i.compare(0,\
    \ prefix.size(), prefix) == 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3e628na9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp3e628na9.cpp:5:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n    5 |     std::vector<string> res;\n      |                 ^~~~~~\n\
    /tmp/tmp3e628na9.cpp:5:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3e628na9.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3e628na9.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp3e628na9.cpp:5:23: error: template argument 1 is invalid\n    5 |    \
    \ std::vector<string> res;\n      |                       ^\n/tmp/tmp3e628na9.cpp:5:23:\
    \ error: template argument 2 is invalid\n/tmp/tmp3e628na9.cpp:8:17: error: request\
    \ for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n    8 |             res.push_back(i);\n      |            \
    \     ^~~~~~~~~\n/tmp/tmp3e628na9.cpp:11:12: error: co"
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (const auto& string : strings)\n \
    \   if (string.substr(0, prefix.size()) == prefix)\n      filtered.push_back(string);\n\
    \  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered(strings.begin(), strings.end());\n    std::remove_copy_if(filtered.begin(),\
    \ filtered.end(), std::back_inserter(filtered), \n            [&](std::string\
    \ s) { return s.find(prefix) == 0; });\n    return filtered;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpum7j5yp1: /tmp/tmpum7j5yp1.cpp:13: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098561
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  std::vector<std::string> results;\n  for (std::string\
    \ &s : strings) {\n    if (s.starts_with(prefix)) {\n      results.push_back(s);\n\
    \    }\n  }\n  return results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_y018d21.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp_y018d21.cpp:8:11: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018starts_with\u2019\
    \n    8 |     if (s.starts_with(prefix)) {\n      |           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result), [&prefix](const std::string &s) {\n        return\
    \ s.substr(0, prefix.size()) == prefix;\n    });\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::remove_copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](const std::string &s) {\
    \ return s.find(prefix) == 0; });\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpalzgulk1: /tmp/tmpalzgulk1.cpp:12: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (std::string s: strings) {\n    if\
    \ (s.substr(0, prefix.size()) == prefix) {\n      filtered.push_back(s);\n   \
    \ }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    for(unsigned int i=0; i<strings.size();\
    \ i++) {\n        if(strings[i].substr(0, prefix.size()) == prefix) {\n      \
    \      filtered.push_back(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (int i = 0; i < strings.size(); i++)\
    \ {\n    if (strings[i].find(prefix) == 0)\n      filtered.push_back(strings[i]);\n\
    \  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // Return a copy of strings containing only strings starting with the prefix.\n\
    \    std::vector<std::string> output;\n    std::remove_copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(output),\n        [&prefix](std::string s)\
    \ { return s.substr(0, prefix.size()) == prefix; });\n    return output;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpl6fbw54b: /tmp/tmpl6fbw54b.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto &s: strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> results;\n    for (std::string word : strings) {\n\
    \        if (word.find(prefix) == 0) {\n            results.push_back(word);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098561
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  res.reserve(strings.size());\n  for (auto &\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      res.push_back(s);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  for (auto s: strings) {\n    if (s.length()\
    \ >= prefix.size() && s.substr(0, prefix.size()) == prefix) {\n      retval.push_back(s);\n\
    \    }\n  }\n  return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    // Filter the given strings starting with\
    \ the given prefix\n    for(size_t i = 0; i < strings.size(); ++i) {\n       \
    \ if(strings[i].substr(0, prefix.length()) == prefix) {\n            res.push_back(strings[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  for (std::string s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      retval.push_back(s);\n   \
    \ }\n  }\n  return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  std::vector<std::string> result;\n  for (std::string\
    \ str : strings) {\n    if (str.substr(0, prefix.size()) == prefix) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpe88exgli: /tmp/tmpe88exgli.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for(auto& s : strings) {\n        if(s.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(s);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::copy_if(strings.begin(), strings.end(), std::back_inserter(filter), \n\
    \        [](std::string s) { return s.startsWith(prefix); });\n    return filter;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_4mbjr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpch_4mbjr.cpp:5:69: error: \u2018filter\u2019 was not declared in this\
    \ scope\n    5 |     std::copy_if(strings.begin(), strings.end(), std::back_inserter(filter),\n\
    \      |                                                                     ^~~~~~\n\
    /tmp/tmpch_4mbjr.cpp: In lambda function:\n/tmp/tmpch_4mbjr.cpp:6:38: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018startsWith\u2019\n    6 |         [](std::string s) {\
    \ return s.startsWith(prefix); });\n      |                                  \
    \    ^~~~~~~~~~\n/tmp/tmpch_4mbjr.cpp:6:49: error: \u2018prefix\u2019 is not captured\n\
    \    6 |         [](std::string s) { return s.startsWith(prefix); });\n      |\
    \                                                 ^~~~~~\n/tmp/tmpch_4mbjr.cpp:6:10:\
    \ note: the lambda has no capture-default\n    6 |         [](std::string s) {\
    \ return s.startsWith(prefix); });\n      |          ^\n/tmp/tmpch_4mbjr.cpp:4:89:\
    \ note: \u2018std::string prefix\u2019 declared here\n    4 | std::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \     |                                                                      \
    \       ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660098561
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (const auto& string : strings) {\n    if\
    \ (string.substr(0, prefix.length()) == prefix) {\n      res.emplace_back(string.substr(prefix.length()));\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp15okzcnd: /tmp/tmp15okzcnd.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::set<std::string> s;\n    for (std::string &s: strings) {\n        if\
    \ (s.compare(0, prefix.size(), prefix) == 0) {\n            s.erase(0, prefix.size());\n\
    \        }\n    }\n    return strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp7_btjhex: /tmp/tmp7_btjhex.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string name : strings) {\n   \
    \ if (name.substr(0, prefix.length()) == prefix) {\n      result.push_back(name);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ prefix = std::move(prefix);\n  std::vector<std::string> result;\n  std::copy_if(strings.begin(),\
    \ strings.end(),\n               std::back_inserter(result),\n               [&prefix](std::string\
    \ str) { return str.find(prefix) == 0; });\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmppc_ttefo: /tmp/tmppc_ttefo.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // Keep the filtered output by copying it to a new vector.\n    std::vector<std::string>\
    \ filtered;\n    // For each input string, see if it's starts with the prefix.\n\
    \    for (auto& str : strings) {\n        if (str.substr(0, prefix.length()) ==\
    \ prefix) {\n            // Add the string to the filtered output.\n         \
    \   filtered.push_back(str);\n        }\n    }\n    return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(retval), \n      [&prefix](std::string s) { return s.front()\
    \ == prefix; });\n  return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj12s32us.cpp: In lambda function:\n/tmp/tmpj12s32us.cpp:7:51: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019})\n    7 |       [&prefix](std::string\
    \ s) { return s.front() == prefix; });\n      |                              \
    \           ~~~~~~~~~ ^~ ~~~~~~\n      |                                     \
    \           |     |\n      |                                                |\
    \     std::string {aka std::__cxx11::basic_string<char>}\n      |            \
    \                                    __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj12s32us.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpj12s32us.cpp:7:54:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n    7 |       [&prefix](std::string s) { return s.front()\
    \ == prefix; });\n      |                                                    \
    \  ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n            \
    \     from /tmp/tmpj12s32us.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cx"
  stdout: ''
  timestamp: 1660098562
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> output;\n    std::set_intersection(strings.begin(),\
    \ strings.end(),\n                         prefix.begin(), prefix.end(),\n   \
    \                      std::back_inserter(output));\n    return output;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwsdh4o30.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Iterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5258:12:\
    \   required from \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\n/usr/include/c++/9/bits/stl_algo.h:5313:48:\
    \   required from \u2018_OIter std::set_intersection(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmpwsdh4o30.cpp:8:52:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |  \
    \              ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \             "
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  for (std::string &s : strings)\n    if (s.compare(0,\
    \ prefix.size(), prefix) == 0)\n      retval.push_back(s);\n  return retval;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  // Iterate over the input strings.\n  for\
    \ (size_t i = 0; i < strings.size(); ++i) {\n    // If the current string starts\
    \ with the given prefix.\n    if (strings.at(i).substr(0, prefix.size()) == prefix)\
    \ {\n      // Add it to the result list.\n      result.push_back(strings.at(i));\n\
    \    }\n  }\n  // Return the filtered result.\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::size_t prefix_length = prefix.size();\n\
    \  for (std::size_t i = 0; i < strings.size(); ++i) {\n    if (strings[i].size()\
    \ >= prefix_length) {\n      std::size_t matched = strings[i].substr(0, prefix_length).rfind(prefix);\n\
    \      if (matched != std::string::npos) {\n        result.push_back(strings[i]);\n\
    \      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> retval;\n    for (auto &it : strings)\n        if\
    \ (it.substr(0, prefix.size()) == prefix)\n            retval.push_back(it);\n\
    \    return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ prefix = prefix.substr(0, prefix.length() - 1);\n  std::set<std::string> filtered_strings;\n\
    \  for (std::string string : strings) {\n    if (string.substr(0, prefix.length())\
    \ == prefix) {\n      filtered_strings.insert(string);\n    }\n  }\n  return std::vector<std::string>(filtered_strings.begin(),\
    \ filtered_strings.end());\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpneb2kvpm: /tmp/tmpneb2kvpm.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098563
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto s = strings.begin(); s != strings.end();\
    \ ++s) {\n    if ((*s).compare(0, prefix.size(), prefix) == 0) {\n      result.emplace_back(*s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> retval;\n    for(std::string s : strings) {\n   \
    \     if(s.substr(0, prefix.length()) == prefix) {\n            retval.push_back(s);\n\
    \        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    std::for_each(strings.begin(), strings.end(),\
    \ [&](std::string s) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            filtered.push_back(s);\n        }\n    });\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::map<std::string, std::string> map;\n  for (std::string s : strings)\n \
    \   if (s[0] == prefix[0])\n      map[s.size()] = s;\n  std::vector<std::string>\
    \ ret;\n  for (auto &item : map) {\n    ret.push_back(item.second);\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3hh7_s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpyz3hh7_s.cpp:8:10: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019})\n    8 |       map[s.size()] = s;\n      |         \
    \ ^\nIn file included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpyz3hh7_s.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34: note:\
    \   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const key_type&\u2019 {aka \u2018\
    const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pai"
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string s : strings) {\n    if\
    \ (s.compare(0, prefix.size(), prefix) == 0)\n      result.push_back(s);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    std::set<std::string> stringset;\n\
    \    for(auto const &s : strings) {\n        if(s.startsWith(prefix)) {\n    \
    \        filtered.push_back(s);\n            stringset.insert(s);\n        }\n\
    \    }\n    return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkuc39wd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgkuc39wd.cpp:8:14: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    8 |         if(s.startsWith(prefix))\
    \ {\n      |              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098562
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::sort(strings.begin(), strings.end());\n  // Find a prefix that starts exactly\
    \ at the first element of the sorted list.\n  auto it = std::find(strings.begin(),\
    \ strings.end(), prefix);\n  // If there is no such prefix, return the original\
    \ input list.\n  if (it == strings.end()) {\n    return strings;\n  }\n  // Construct\
    \ a new list of strings consisting of all the elements before the\n  // prefix\
    \ and all the elements after the prefix.\n  std::vector<std::string> result;\n\
    \  result.reserve(strings.size() - 1);\n  result.push_back(std::move(*it));\n\
    \  for (; it != strings.end(); ++it) {\n    if (it->length() < prefix.size())\
    \ {\n      result.push_back(std::move(*it));\n    } else {\n      auto prefix\
    \ = std::move(*it);\n      it--;\n      // Keep searching for a prefix that starts\
    \ at \"it\" using std::search.\n      while (std::find(std::next(it), strings.end(),\
    \ prefix) != strings.end()) {\n        prefix += std::move(*it);\n        it--;\n\
    \      }\n      if (it != strings.begin()) {\n        result.push_back(std::move(*it));\n\
    \      }\n      result.push_back(std::move(prefix));\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpowzr9pnd: /tmp/tmpowzr9pnd.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098563
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (const auto& i : strings) {\n    if (i.substr(0,\
    \ prefix.size()) == prefix) res.push_back(i);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098562
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (std::string str : strings) {\n\
    \        if (str.compare(0, prefix.size(), prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098563
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n    if (it->find(prefix) == 0)\n      result.push_back(*it);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098563
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  assert(prefix.size() > 0);\n  // We only want\
    \ to include strings that start with the given prefix.\n  std::vector<std::string>\
    \ result;\n  std::size_t pos = 0;\n  while (pos < strings.size()) {\n    if (strings[pos].compare(0,\
    \ prefix.size(), prefix) == 0) {\n      result.push_back(strings[pos]);\n    }\n\
    \    pos++;\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpgdgwdati: /tmp/tmpgdgwdati.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  retval.reserve(strings.size());\n  for (std::string\
    \ word : strings) {\n    if (word.substr(0, prefix.size()) == prefix) {\n    \
    \  retval.push_back(word);\n    }\n  }\n  return retval;\n}\nint main() {\n  \
    \  auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098563
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (std::string &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.emplace_back(string);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(!prefix.empty());\n  assert(!strings.empty());\n  std::vector<std::string>\
    \ output;\n  for (const auto& string : strings) {\n    if (string.substr(0, prefix.size())\
    \ == prefix) {\n      output.push_back(string);\n    }\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp1c9sx6fk: /tmp/tmp1c9sx6fk.cpp:6: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `!strings.empty()'' failed.

    '
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (const auto &str : strings)\n    if\
    \ (str.startsWith(prefix))\n      result.push_back(str);\n  return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1mu8nv6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpe1mu8nv6.cpp:7:13: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |     if (str.startsWith(prefix))\n\
    \      |             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098563
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::string prefix = std::move(prefix);\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(std::move(string));\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrd8x0fr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpbrd8x0fr.cpp:6:15: error: declaration of \u2018std::string prefix\u2019\
    \ shadows a parameter\n    6 |   std::string prefix = std::move(prefix);\n   \
    \   |               ^~~~~~\n"
  stdout: ''
  timestamp: 1660098563
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   // Create a map for O(1) lookup\n    std::unordered_map<std::string,int> map;\n\
    \    for (std::string &s : strings) {\n        map[s.substr(0,prefix.size())]++;\n\
    \    }\n    std::vector<std::string> result;\n    for (auto &p : map) {\n    \
    \    if (p.second > 0) {\n            result.push_back(p.first);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpkmxf1g99: /tmp/tmpkmxf1g99.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(!prefix.empty());\n  std::cout << \"Filter by prefix: \" << prefix <<\
    \ std::endl;\n  std::vector<std::string> ret;\n  for (auto& s : strings) {\n \
    \   if (s.substr(0, prefix.size()) == prefix) {\n      ret.push_back(s);\n   \
    \ }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: 'Filter by prefix: john

    Filter by prefix: xxx

    '
  timestamp: 1660098564
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  assert(strings.size() == prefix.length());\n\
    \  \n  std::vector<std::string> out;\n  for (std::string str : strings) {\n  \
    \  if (str.substr(0, prefix.length()) == prefix) {\n      out.push_back(str);\n\
    \    }\n  }\n  return out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp_b90rnb_: /tmp/tmp_b90rnb_.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.starts_with(prefix))\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvqgdrwe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpbvqgdrwe.cpp:7:11: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018starts_with\u2019\n    7 |     if (s.starts_with(prefix))\
    \ {\n      |           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (const auto& str : strings) {\n\
    \        if (str.substr(0, prefix.length()) == prefix) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for(std::string s : strs) {\n      \
    \  if(s.compare(0, prefix.size(), prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ixd7unl.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp_ixd7unl.cpp:6:25: error: \u2018strs\u2019 was not declared in this\
    \ scope\n    6 |     for(std::string s : strs) {\n      |                    \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::set<std::string> s;\n  for (auto i = strings.begin(); i != strings.end();\
    \ ++i) {\n    if (s.find(*i) != s.end()) {\n      s.insert(*i);\n    } else {\n\
    \      s.insert(prefix + strings[i]);\n    }\n  }\n  return std::vector<std::string>(s.begin(),\
    \ s.end());\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ki34p94.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp2ki34p94.cpp:10:32: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >\u2019 and \u2018\
    __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019)\n   10 |       s.insert(prefix + strings[i]);\n      |          \
    \                      ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ki34p94.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::reference = std::__cxx11::basic_string<char>&; std::vector<_Tp, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1040:28: note: \
    \  no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type\u2019 {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type\
    \ __n) _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic"
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ auto it = std::begin(strings);\n  while (it != std::end(strings)) {\n    auto\
    \ pos = prefix.find(it->begin(), 0);\n    if (pos != std::string::npos) {\n  \
    \    it = std::erase(it, std::next(it), pos);\n    } else {\n      ++it;\n   \
    \ }\n  }\n  return strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqbknuen.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpiqbknuen.cpp:7:42: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find(std::__cxx11::basic_string<char>::iterator,\
    \ int)\u2019\n    7 |     auto pos = prefix.find(it->begin(), 0);\n      |   \
    \                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpiqbknuen.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std"
  stdout: ''
  timestamp: 1660098564
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto i : strings) {\n    if (i.startsWith(prefix))\
    \ {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdkq92dn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpmdkq92dn.cpp:7:11: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |     if (i.startsWith(prefix))\
    \ {\n      |           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> output;\n  // We loop over all the strings in the given\
    \ list and compare them to the prefix.\n  for (std::string string : strings) {\n\
    \    if (string.substr(0, prefix.length()) == prefix) {\n      // We add the string\
    \ to the output list.\n      output.push_back(string);\n    }\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (const auto& string : strings) {\n\
    \        if (string.substr(0, prefix.length()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  retval.push_back(strings[0]);\n  for (size_t\
    \ i = 1; i < strings.size(); i++) {\n    if (strings[i].compare(0, prefix.size(),\
    \ prefix) == 0) {\n      retval.push_back(strings[i]);\n    }\n  }\n  return retval;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::string prefix_copy = prefix;\n\n\
    \    for (size_t i = 0; i < (int) strings.size(); i++) {\n        size_t pos =\
    \ strings[i].find(prefix_copy);\n        if (pos == 0) // If it starts with the\
    \ prefix\n            result.push_back(strings[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> results;\n  for (auto string : strings) {\n    if (string.substr(0,\
    \ prefix.length()) == prefix) {\n      results.push_back(string);\n    }\n  }\n\
    \  return results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> out;\n  for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n    if (it->substr(0, prefix.size()) == prefix) {\n      out.emplace_back(*it);\n\
    \    }\n  }\n  return out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> out;\n    // Loop through the strings and see if\
    \ they match the prefix, if so, keep it.\n    for (std::string & str : strings)\
    \ {\n        if (str.substr(0, prefix.size()) == prefix) {\n            out.push_back(str);\n\
    \        }\n    }\n    // Return the result.\n    return out;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      result.push_back(s);\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered;\n  for (auto & string : strings) {\n    if\
    \ (string.length() >= prefix.size() && string.substr(0, prefix.size()) == prefix)\
    \ {\n      filtered.push_back(string);\n    }\n  }\n  return filtered;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098564
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.empty() || strings.front() == prefix);\n  \n  // If the string\
    \ is not empty, then we return an empty vector.\n  if (strings.size()) return\
    \ strings;\n\n  // We are going to return a vector of strings.\n  std::vector<std::string>\
    \ result;\n  result.push_back(prefix);\n  return result;\n}\nint main() {\n  \
    \  auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp5xqn75qc: /tmp/tmp5xqn75qc.cpp:17: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660098565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto s: strings) {\n    if (s.startsWith(prefix))\n\
    \      result.push_back(s);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpni_0fvx6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpni_0fvx6.cpp:7:11: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |     if (s.startsWith(prefix))\n\
    \      |           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      res.push_back(s);\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // Initialize the list of filtered strings.\n  std::vector<std::string> filtered_strings;\n\
    \  // If the prefix is empty, we're done.\n  if (prefix.empty()) {\n    return\
    \ filtered_strings;\n  }\n  // Add the first string to the list if the prefix\
    \ does not match it.\n  if (strings.find(prefix) == strings.end()) {\n    filtered_strings.push_back(strings.at(0));\n\
    \  }\n  // Otherwise, keep iterating through the strings and adding strings that\
    \ match the prefix\n  // until we get to the end of our list.\n  int prefix_length\
    \ = prefix.length();\n  for (auto it = strings.begin(); it != strings.end(); it++)\
    \ {\n    // If the current string matches the prefix, add the string to the list\
    \ of filtered strings.\n    if (std::find(prefix.begin(), prefix.end(), *it) !=\
    \ prefix.end()) {\n      filtered_strings.push_back(*it);\n    } else {\n    \
    \  // If we are at the end of our list and our prefix is longer than the string\
    \ we are on of\n      // the list, the prefix has been found and we are done.\n\
    \      if ((it == strings.end()) && prefix_length != 0) {\n        break;\n  \
    \    }\n      // Otherwise, keep iterating through the list of strings adding\
    \ strings that match the prefix\n      // until the end of our list or the current\
    \ string does not match the prefix any longer.\n      prefix_length--;\n    }\n\
    \  }\n  // Return the filtered list of strings.\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoe535k0a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpoe535k0a.cpp:12:15: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018find\u2019\n   12 |   if (strings.find(prefix)\
    \ == strings.end()) {\n      |               ^~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpoe535k0a.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpoe535k0a.cpp:20:52:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and "
  stdout: ''
  timestamp: 1660098564
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (std::string str : strings) {\n    if\
    \ (str.find(prefix) == 0) {\n      result.push_back(str);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  assert(strings[0].find(prefix) == 0);\n  std::regex\
    \ prefix_regex(prefix);\n  std::vector<std::string> ret;\n  for (std::string &s\
    \ : strings)\n    if (regex_search(s, prefix_regex))\n      ret.push_back(s);\n\
    \  return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp5qkq39g7: /tmp/tmp5qkq39g7.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660098566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> results;\n  for (const auto &s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      results.push_back(s);\n  \
    \  }\n  }\n  return results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> out;\n    for (auto& s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            out.push_back(s);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_j1xnc1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp1_j1xnc1.cpp:7:15: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |         if (s.startsWith(prefix))\
    \ {\n      |               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098564
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    for (auto& string : strings) {\n   \
    \     if (string.length() > prefix.length() && string.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpzcppwehl: /tmp/tmpzcppwehl.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> result;\n    std::string prefix_with_leading_space\
    \ = prefix + std::string(\"  \");\n    \n    for (const auto& string : strings)\
    \ {\n        if (string.find(prefix) == 0) {\n            result.push_back(prefix_with_leading_space\
    \ + string);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp0educi_3: /tmp/tmp0educi_3.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size() > 0);\n  std::vector<std::string> result;\n  result.push_back(strings[0]);\n\
    \  for (size_t i = 1; i < strings.size(); i++) {\n    std::string suffix = strings[i];\n\
    \    if (suffix.find(prefix) == 0) {\n      result.push_back(suffix);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpj3u5lvo7: /tmp/tmpj3u5lvo7.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660098565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ assert(strings.size()>0);\n  std::vector<std::string> filtered;\n  for (std::vector<std::string>::const_iterator\
    \ it = strings.begin(); it != strings.end(); ++it)\n    {\n      if (it->find(prefix)\
    \ == 0)\n        filtered.push_back(*it);\n    }\n  return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpmb39thry: /tmp/tmpmb39thry.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660098565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::string prefixStr(prefix);\n  std::regex\
    \ pattern(prefixStr + \"([a-zA-Z]+)\");\n  for (std::string s : strings)\n   \
    \ if (std::regex_search(s, pattern))\n      result.push_back(s);\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp3xa31ftd: /tmp/tmp3xa31ftd.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    for (std::string s : strings)\n  \
    \      if (s.substr(0, prefix.length()) == prefix)\n            filtered.push_back(s);\n\
    \    return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> filtered;\n    std::copy(std::begin(strings), std::end(strings),\
    \ std::back_inserter(filtered));\n    return std::remove_if(filtered.begin(),\
    \ filtered.end(), [&prefix](const std::string &s) { return s.find(prefix) == 0;\
    \ });\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb7_3t0e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmptb7_3t0e.cpp:7:26: error: could not convert \u2018std::remove_if<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >, filter_by_prefix(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)> >(filtered.std::vector<std::__cxx11::basic_string<char>\
    \ >::begin(), filtered.std::vector<std::__cxx11::basic_string<char> >::end(),\
    \ <lambda closure object>filter_by_prefix(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>{prefix})\u2019 from \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019\n    7 |     return std::remove_if(filtered.begin(), filtered.end(),\
    \ [&prefix](const std::string &s) { return s.find(prefix) == 0; });\n      | \
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\n"
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (int i = 0; i < strings.size(); i++)\
    \ {\n    if (strings[i].substr(0, prefix.length()) == prefix) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> res;\n  for (const auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      res.push_back(s);\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> new_strings;\n    new_strings.reserve(strings.size());\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.length())\
    \ == prefix) {\n            new_strings.push_back(string);\n        }\n    }\n\
    \    return new_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> retval;\n  for (std::string s : strings) {\n    if\
    \ (s.substr(0, prefix.size()) == prefix) {\n      retval.push_back(s);\n    }\n\
    \  }\n  return retval;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> ret;\n  for (std::string &str : strings) {\n    if\
    \ (str.compare(0, prefix.size(), prefix) == 0) {\n      ret.push_back(str);\n\
    \    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector <std::string> result;\n  for (int i = 0; i < strings.size(); ++i)\
    \ {\n    if (strings[i].substr(0, prefix.size()) == prefix) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  result.reserve(strings.size());\n  for (std::string&\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filteres;\n  for(auto &s : strings) {\n    if(s.substr(0,\
    \ prefix.length()) == prefix) {\n      filteres.push_back(s);\n    }\n  }\n  return\
    \ filteres;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.length()) == prefix) {\n      result.push_back(string);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ // Store prefix in a set for faster lookups\n  std::set<std::string> prefixes;\n\
    \  for (const auto &string : strings) {\n    auto pos = string.find(prefix);\n\
    \    if (pos != std::string::npos) {\n      // Add prefix to the set and remove\
    \ it from string\n      prefixes.insert(string.substr(0, pos));\n      strings.erase(std::remove(strings.begin(),\
    \ strings.end(), string), strings.end());\n    }\n  }\n  return strings;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpz3x0vlp8: /tmp/tmpz3x0vlp8.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> res;\n    std::remove_copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(res), [&prefix](const std::string &s) {\n        return s.find(prefix)\
    \ == 0;\n    });\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpf85wwns3: /tmp/tmpf85wwns3.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098566
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<string> ans;\n    // for each string\n    for(auto &it: strings)\
    \ {\n        // if its prefix matches our prefix filter\n        if(it.find(prefix)\
    \ == 0) {\n            ans.push_back(it);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tj0gkuu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp8tj0gkuu.cpp:5:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n    5 |     std::vector<string> ans;\n      |                 ^~~~~~\n\
    /tmp/tmp8tj0gkuu.cpp:5:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8tj0gkuu.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8tj0gkuu.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp8tj0gkuu.cpp:5:23: error: template argument 1 is invalid\n    5 |    \
    \ std::vector<string> ans;\n      |                       ^\n/tmp/tmp8tj0gkuu.cpp:5:23:\
    \ error: template argument 2 is invalid\n/tmp/tmp8tj0gkuu.cpp:10:17: error: request\
    \ for member \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type\
    \ \u2018int\u2019\n   10 |             ans.push_back(it);\n      |           \
    \      ^~~~~~~~~\n/tmp/tmp8tj0gkuu.cpp:13:12: error: "
  stdout: ''
  timestamp: 1660098565
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  std::string prefix_stripped = prefix;\n\
    \  while (!prefix_stripped.empty()) {\n    prefix_stripped.erase(std::remove(prefix_stripped.begin(),\
    \ prefix_stripped.end(), '-'), prefix_stripped.end());\n    if (prefix_stripped.empty())\n\
    \      break;\n  }\n  for (auto& str : strings)\n    if (str.substr(0, prefix_stripped.size())\
    \ == prefix_stripped)\n      result.push_back(str);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098570
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.startsWith(prefix))\
    \ {\n      result.emplace_back(string);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocwoqwtz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpocwoqwtz.cpp:7:16: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018startsWith\u2019\n    7 |     if (string.startsWith(prefix))\
    \ {\n      |                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> output;\n  for (auto const &s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      output.push_back(s);\n   \
    \ }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> filtered_strings;\n  for (std::string &string : strings)\
    \ {\n    if (string.substr(0, prefix.length()) == prefix) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \   std::vector<std::string> out;\n    for (auto &string : strings) {\n      \
    \  if (string.length() >= prefix.size() &&\n            string.substr(0, prefix.size())\
    \ == prefix) {\n            out.push_back(string);\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098566
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> results;\n  std::transform(strings.begin(), strings.end(),\
    \ std::back_inserter(results),\n      [](const std::string& s) { return s.substr(0,\
    \ prefix.length()); });\n  return results;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmqh7mk_.cpp: In lambda function:\n/tmp/tmpjmqh7mk_.cpp:7:53: error:\
    \ \u2018prefix\u2019 is not captured\n    7 |       [](const std::string& s) {\
    \ return s.substr(0, prefix.length()); });\n      |                          \
    \                           ^~~~~~\n/tmp/tmpjmqh7mk_.cpp:7:8: note: the lambda\
    \ has no capture-default\n    7 |       [](const std::string& s) { return s.substr(0,\
    \ prefix.length()); });\n      |        ^\n/tmp/tmpjmqh7mk_.cpp:4:89: note: \u2018\
    std::string prefix\u2019 declared here\n    4 | std::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n      |                                    \
    \                                         ~~~~~~~~~~~~^~~~~~\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjmqh7mk_.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _UnaryOperation = filter_by_prefix(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>]\u2019:\n/tmp/tmpjmqh7mk_.cpp:7:72:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:4343:12: error: no\
    \ match for \u2018operator=\u2019 (operand types are \u2018std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019 and \u2018void\u2019)\n 4343 |  *__result = __unary_op(*__first);\n\
    \      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjmqh7mk_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:513:7:\
    \ note: candidate: \u2018std::back_inse"
  stdout: ''
  timestamp: 1660098565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> output;\n  for (std::string curString : strings) {\n\
    \    if (curString.substr(0, prefix.size()) == prefix) {\n      output.push_back(curString);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\nstd::vector<std::string>\
    \ filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n \
    \ std::vector<std::string> result;\n  if (strings.size() == 0)\n    return result;\n\
    \n  for (size_t i = 0; i < strings.size(); ++i) {\n    if (strings[i].substr(0,\
    \ prefix.length()) == prefix) {\n      result.push_back(strings[i]);\n    }\n\
    \  }\n\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098566
