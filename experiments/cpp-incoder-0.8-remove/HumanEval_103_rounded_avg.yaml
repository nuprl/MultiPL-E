name: HumanEval_103_rounded_avg
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
  \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0)\
  \ {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
  \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
  \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and\
  \ your task is to compute the\n// average of the integers from n through m (including\
  \ n and m). \n// Round the answer to the nearest integer and convert that to binary.\n\
  // If n is greater than m, return -1.\n// Example:\nUnion_std_string_long rounded_avg(long\
  \ n, long m) {\n"
tests: "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
  \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) ==\
  \ (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
  0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
  0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
  0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
  0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
  0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
  0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
  0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
  \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
  \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
completions: ["    long sum = 0;\n    for (long i = n; i <= m; i++) sum += i;\n  \
    \  if (sum % 2 != 0) return -1;\n    else return static_cast<Union_std_string_long>(sum\
    \ / 2);", "    if (n > m) {\n        return Union_std_string_long(-1.0);\n   \
    \ }\n    std::bitset<64> bits = std::bitset<64>(n);\n    std::bitset<64> bits1(m+1);\n\
    \    bits.flip(bits1);\n    union Union_std_string_long u;\n    u.f0 = std::bitset<64>(bits.to_ullong()).to_string();\n\
    \    u.f1 = std::bitset<64>(bits1.to_ullong()).to_string();\n    return u;", " \
    \   double avg = ((double)n)/((double)m);\n    avg = (int)(avg);\n    std::string\
    \ str = (avg==0)?\"0\":std::to_string(avg);\n    Union_std_string_long u0(str);\n\
    \    long n1 = n/10;\n    long n2 = n%10;\n    str = ((n1+n2)/2)+\"0\";\n    u0.f0\
    \ = str;\n    Union_std_string_long u1(avg);\n    return u0==u1? u0 :u1;", " \
    \   assert(n > m && \"invalid range\");\n    Union_std_string_long avg;\n    if(n>=m){\n\
    \        avg.f1 = -1;\n        return avg;\n    }\n    long low=n;\n    long high=m;\n\
    \    while(low<high){\n        long mid = (low+high)/2;\n        if((mid % 2)==0){\n\
    \            if(mid<=m){\n                low = mid+1;\n                continue;\n\
    \            }\n            avg.f1 += mid;\n            high = mid-1;\n      \
    \  }\n        if(mid<=m){\n            low = mid+1;\n        }\n        if(mid>m){\n\
    \            high = mid-1;\n        }\n    }\n    avg.f1 = (low+high)/2;\n   \
    \ return avg;", "    assert(n <= m);\n    if (n >= m) return Union_std_string_long(-1);\n\
    \    union  Union_std_string_long u;\n    u.f0 = to_binary(n);\n    u.f1 = to_binary(m);\n\
    \    std::string a = u.f0;\n    std::string b = u.f1;\n    int len = (a.size()\
    \ + b.size()) / 2;\n    std::string a1 = a.substr(0, len);\n    std::string a2\
    \ = a.substr(len);\n    std::string b1 = b.substr(0, len);\n    std::string b2\
    \ = b.substr(len);\n    \n    std::string a1b = a1+\"1\"+b1;\n    std::string\
    \ a2b = a2+\"0\"+b2;\n    std::string a_sum = to_string(a1b);\n    std::string\
    \ b_sum = to_string(b_sum);\n    std::string sum = to_string(sum);\n    return\
    \ a_sum + b_sum + sum;", "    if(n>m) return Union_std_string_long(-1);\n    long\
    \ avg=(long)((double)m/(double)n+0.5);\n    long rem=(n-avg)*2;\n    if(rem>m)\
    \ return Union_std_string_long(-1);\n    return Union_std_string_long(avg, rem);",
  "    long sum = 0, sum1=0, sum2=0, sum3=0;\n    long diff = n - m;\n    long mod\
    \ = pow(10, (int) log10(diff));\n    long avg1 = n / mod, avg2 = m / mod, avg3\
    \ = avg1 + avg2;\n    sum1 = sum2 = sum3 = 0; // sum1=sum2=0,sum3=0 \n    sum1\
    \ = sum2 = sum3 = m; // sum1=sum2=sum3=1\n    if (avg1 == 0) {\n        return\
    \ -1;\n    }\n    while (true) {\n        sum += avg1;\n        sum1 += avg1;\n\
    \        sum2 += avg2;\n        sum3 += avg3;\n        if (sum == diff) {\n  \
    \          break;\n        }\n        avg1 = avg1 + avg2;\n        avg2 = avg3\
    \ + avg2;\n        avg3 /= 2;\n        sum1 = sum2 = sum3 = 0; // sum1=sum2=0,sum3=0\
    \ \n        sum1 = sum2 = sum3 = m; // sum1=sum2=sum3=1\n    }\n    long avg4\
    \ = sum3 / 4;\n    long avg5 = sum2 / 4;\n    long avg6 = sum1 / 4;\n    long\
    \ avg7 = ((sum1 + sum2) / 2 + sum3) / 4;\n    long avg8 = avg7 + avg6 + avg5 +\
    \ avg4;\n    if (sum2 == 0) {\n        return -1;\n    }\n    if (sum1 == 0) {\n\
    \        return -1;\n    }\n    Union_std_string_long s0, s1;\n    s0.f0 = std::to_string(avg8);\n\
    \    s1.f0 = std::to_string(avg7);\n    long res = (avg8 / avg7) * 2;\n    res\
    \ = res + avg6;\n    res = res + avg5;\n    res = res + avg4;\n    res = res /\
    \ 2;\n    res = res + avg8;\n    if (res % 2 == 0) {\n        return -1;\n   \
    \ }\n    s0.f1 = res;\n    s1.f1 = res;\n    return s0 | s1;", "  assert(n <=\
    \ m);\n  assert(n >= 0);\n  assert(m >= 0);\n  if (n == 0 || m == 0) return \"\
    \";\n  Union_std_string_long u1 = Union_std_string_long(n);\n  Union_std_string_long\
    \ u2 = Union_std_string_long(m);\n  // TODO: Write your code here.\n  \n  return\
    \ u1;", "    // write your code here\n    long avg = (n*(n+1))/2;\n    return\
    \ Union_std_string_long(avg);", "    long sum = n;\n    for (int i = m + 1; i\
    \ < n; i++) {\n        sum += i;\n    }\n    if (n > m) {\n        return -1;\n\
    \    }\n    long temp = sum / m;\n    Union_std_string_long a{std::to_string(temp)};\n\
    \    return a;", "    Union_std_string_long res(-1L);\n    if(n>=m){\n       \
    \ return res;\n    }\n    if(n<=0 || m<=0){\n        return res;\n    }\n    if(n>m){\n\
    \        while(m<n){\n            res=res+Union_std_string_long(-1);\n       \
    \     m++;\n        }\n        return res;\n    }\n    long long ans=0;\n    long\
    \ long rem1=n;\n    long long rem2=m;\n    while(rem2>0){\n        rem1 /=2;\n\
    \        rem2-=1;\n        ans++;\n    }\n    ans=ans*2+rem1;\n    while(ans<n){\n\
    \        res=res+Union_std_string_long(-1);\n        ans++;\n    }\n    return\
    \ res;", "    Union_std_string_long u1 = n - m;\n    Union_std_string_long u2\
    \ = m + (n+1);\n    if (u1 > u2) {\n        std::swap(u1, u2);\n    }\n    long\
    \ diff = u2 - u1;\n    if (diff == 0) {\n        return -1;\n    }\n    return\
    \ Union_std_string_long(diff);", "    assert(n >= 0 && m >= 0 && n < m && n <=\
    \ m);\n    long result = (n + m)/2;\n    if (n % 2 == 0) {\n        if (result\
    \ % 2 != 0)\n            return -1;\n        else\n            return (int)result;\n\
    \    } else {\n        if (result % 2 != 0)\n            return (int)result;\n\
    \        else\n            return (int)result + 1;\n    }", "    long int_part\
    \ = 0;\n    long frac_part = 0;\n    if(n>m)\n        return -1;\n    for(long\
    \ i=n; i<=m; i++)\n        int_part += i;\n    for(long j=1; j<=n-m; j++){\n \
    \       frac_part += j;\n        for(long i=n; i<=j; i++)\n            int_part\
    \ += i;\n        frac_part -= j;\n    }\n    long round_off = int_part;\n    if(round_off\
    \ == 0)\n        round_off = 1;\n    std::string s = std::to_string(round_off);\n\
    \    while(s.size() % 4 == 0)\n        s = \"0\" + s;\n    return Union_std_string_long(s);",
  "    if(n>m){\n        return Union_std_string_long(-1);\n    }\n    int sum = 0,\
    \ len = 0;\n    while(n <= m) {\n        sum += n;\n        ++len;\n        n\
    \ ++;\n    }\n    sum = (sum + len - 1)/len;\n    std::vector<int> binary(len\
    \ + 1);\n    for(int i = len; i > 0; i--){\n        binary[i] = sum % 2;\n   \
    \     sum = (sum - binary[i]) / 2;\n    }\n    Union_std_string_long res(std::to_string(binary[0]));\n\
    \    for(int i = 1; i < len; i++){\n        if(binary[i] > 0){\n            res\
    \ += '1' + std::to_string(binary[i]);\n        }\n    }\n    return res;", " \
    \   if(n > m){\n        return -1;\n    }\n    long l1 = n, l2 = m;\n    for(;;){\n\
    \        if(l1 > l2){\n            return Union_std_string_long(l1);\n       \
    \ }\n        long mid = (l1 + l2) / 2;\n        if(mid % 2 == 1){\n          \
    \  l1 = mid;\n        }\n        else{\n            l2 = mid;\n        }\n   \
    \ }", "    if (n > m) {\n        return Union_std_string_long(-1);\n    }\n  \
    \  int x = (int)((double)n / (double)m);\n    int y = x % 2;\n    int z = x /\
    \ 2;\n    int result = 0;\n    while (n <= m) {\n        result += pow(2.0, z);\n\
    \        n++;\n    }\n    if (n == m) {\n        return Union_std_string_long((y\
    \ ? \"1\" : \"0\") + result);\n    }\n    Union_std_string_long r1 = rounded_avg(n\
    \ - 1, m);\n    Union_std_string_long r2 = rounded_avg(n, m);\n    return Union_std_string_long((y\
    \ ? \"1\" : \"0\") + result + (r1.f1 == r2.f1 ? r1.f0 : r2.f1));", "    long sum\
    \ = 0;\n    long curr = n;\n    while (curr < m) {\n        sum += curr;\n   \
    \     curr++;\n    }\n    return sum / 2 != n ? -1 : union_std_string_long(to_string(round(sum\
    \ / 2)));", "    Union_std_string_long u(n, -1);\n    if (m <= n) {\n        u.f1\
    \ = n;\n        return u;\n    }\n    if (m > n) {\n        u.f1 = m;\n      \
    \  return u;\n    }\n    long sum = n - m + 1;\n    u.f1 = sum / 2;\n    long\
    \ temp = sum % 2;\n    if (temp == 0)\n        return u;\n    if (temp == 1)\n\
    \        return u + Union_std_string_long(\"1\");\n    return u + Union_std_string_long(\"\
    0\");", "    if (n>m) return -1;\n    long long nsum = n;\n    long long msum\
    \ = m;\n    long long diff = nsum - msum;\n    long long rounded;\n    long long\
    \ ones = 1;\n    while(diff > 0) {\n        diff = diff - ones;\n        rounded\
    \ = diff;\n        ones = ones + 1;\n    }\n    Union_std_string_long ret(nsum%ones);\n\
    \    rounded = rounded + (nsum - rounded) % ones;\n    return ret;", "    Union_std_string_long\
    \ a = std::to_string(n);\n    Union_std_string_long b = std::to_string(m);\n \
    \   Union_std_string_long c = std::to_string(n + m);\n    Union_std_string_long\
    \ d = std::to_string((n + m) / 2.0);\n    Union_std_string_long e = std::to_string(n\
    \ * m);\n    Union_std_string_long f = std::to_string((n + m) / n);\n    Union_std_string_long\
    \ g = std::to_string(n / m);\n    Union_std_string_long h;\n    Union_std_string_long\
    \ i;\n    Union_std_string_long j;\n    Union_std_string_long k;\n    Union_std_string_long\
    \ l;\n    Union_std_string_long m;\n    Union_std_string_long n;\n    Union_std_string_long\
    \ o;\n    Union_std_string_long p;\n    Union_std_string_long q;\n    Union_std_string_long\
    \ r;\n    Union_std_string_long s;\n    Union_std_string_long t;\n    Union_std_string_long\
    \ u;\n    Union_std_string_long v;\n    Union_std_string_long w;\n    Union_std_string_long\
    \ x;\n    Union_std_string_long y;\n    Union_std_string_long z;\n    Union_std_string_long\
    \ aa;\n    Union_std_string_long ab;\n    Union_std_string_long ac;\n    Union_std_string_long\
    \ ad;\n    Union_std_string_long ae;\n    Union_std_string_long af;\n    Union_std_string_long\
    \ ag;\n    Union_std_string_long ah;\n    Union_std_string_long ai;\n    Union_std_string_long\
    \ aj;\n    Union_std_string_long ak;\n    Union_std_string_long al;\n    Union_std_string_long\
    \ am;\n    Union_std_string_long an;\n    Union_std_string_long ao;\n    Union_std_string_long\
    \ ap;\n    Union_std_string_long aq;\n    Union_std_string_long ar;\n    Union_std_string_long\
    \ as;\n    Union_std_string_long at;\n    Union_std_string_long au;\n    Union_std_string_long\
    \ av;\n    Union_std_string_long aw;\n    Union_std_string_long ax;\n    Union_std_string_long\
    \ ay;\n    Union_std_string_long az;\n    Union_std_string_long ba;\n    Union_std_string_long\
    \ bb;\n    Union_std_string_long bc;", "    union Union_std_string_long u;\n \
    \   if(n <= m){\n        u.f1 = n;\n        return u;\n    }\n    u.f1 = m;\n\
    \    return u;", "    Union_std_string_long num(n);\n    Union_std_string_long\
    \ num2(m);\n    assert(m>=n) << \"Invalid input. n should be more than m\";\n\
    \    if(n<m)\n        return -1;\n    long i=1;\n    while(i<=m){\n        if(n<=i){\n\
    \            num2.f1=i;\n            break;\n        }\n        i+=2;\n    }\n\
    \    while(num2<=num){\n        num2+=num2;\n    }\n    long temp=num2.f1;\n \
    \   num2.f1=num2.f1-temp;\n    num2.f0=num2.f1-temp;\n    return num2;", "   \
    \ if(n <= m){\n        if(m+1 == n){\n            return Union_std_string_long(n);\n\
    \        }\n        else if(n > n+1){\n            return -1;\n        }\n   \
    \     else{\n            return Union_std_string_long(n);\n        }\n    }\n\
    \    else if(m+1 == n){\n        return Union_std_string_long(n);\n    }\n   \
    \ else if(n > m){\n        return Union_std_string_long(m);\n    }\n    else{\n\
    \        if(n > n+m){\n            return -1;\n        }\n        else{\n    \
    \        return Union_std_string_long(n);\n        }\n    }", "    // Write your\
    \ code here.\n    int ans = -1;\n    if(n>m){\n        return -1;\n    }\n   \
    \ long int avg_start = n+1;\n    long int avg_end = m;\n    long int cnt = 0;\n\
    \    while(avg_start<avg_end){\n        cnt++;\n        avg_start++;\n    }\n\
    \    ans = avg_start*cnt/(n-m);\n    Union_std_string_long ans_str = std::to_string(ans);\n\
    \    std::reverse(ans_str.f0.begin(),ans_str.f0.end());\n    return ans_str;",
  "    // write your code here\n    if (n >= m){\n        return -1;\n    }\n    int\
    \ x = n; \n    int y = m;\n    int count = 0;\n    long avg = 0;\n    int sum\
    \ = 0;\n    long temp = 0;\n    long temp1 = 0.0000001;\n    long temp2 = 0.0000001;\n\
    \    long temp3 = 0.0000001;\n    long temp4 = 0.0000001;\n    long temp5 = 0.0000001;\n\
    \    while(x <= y){\n        temp = (int) (x*temp1+temp2);\n        temp2 = temp;\n\
    \        sum+=temp;\n        sum=sum+temp;\n        sum=sum+temp;\n        count++;\n\
    \        x++;\n    }\n    avg = (sum*temp3)/(count);\n    temp= 0;\n    temp1\
    \ = 0.0000001;\n    temp2 = 0.0000001;\n    temp3 = 0.0000001;\n    temp4 = 0.0000001;\n\
    \    temp5 = 0.0000001;\n    while(y >= x){\n        temp = (int)(y*temp1+temp2);\n\
    \        temp2 = temp;\n        sum+=temp;\n        sum=sum+temp;\n        sum=sum+temp;\n\
    \        count++;\n        y--;\n    }\n    avg = (sum*temp3)/(count);\n    int\
    \ res = (avg + 0.5) % 2;\n    Union_std_string_long u_res;\n    u_res.f0 = std::to_string(res);\n\
    \    return u_res ;", "    if (n > m) return -1;\n    long sum = 0;\n    for (int\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average = sum / m;\n\
    \    int remainder = average % 10;\n    if (remainder >= 5) return -1;\n    long\
    \ base = 10;\n    long decimal = average - remainder;\n    if (decimal >= base)\
    \ \n        return (Union_std_string_long(\"0\" + decimal).f0);\n    else \n \
    \       return (Union_std_string_long(decimal).f0);", "    Union_std_string_long\
    \ a(n), b(m);\n    if(n >= m) return -1;\n    while(a <= b){\n        if(a.f0\
    \ == \"1\") return a;\n        else if(a.f1 > a.f0) return a;\n        else a.f1--;\n\
    \    }\n    return a;", "    // Your code goes here\n    long a,b;\n    if(n>m){\n\
    \        return -1;\n    }\n    for(long i=0;i<m;i++){\n        long count=0;\n\
    \        for(long j=n;j>=i;j--){\n            a+=j;\n            count+=j;\n \
    \       }\n        a+=i;\n        b=a/count;\n    }\n    long a1=b,a2=a1;\n  \
    \  long avg=a1;\n    while(true){\n        long sum=0;\n        for(long i=0;i<m;i++){\n\
    \            sum+=a*i;\n            a+=1;\n        }\n        long c=0;\n    \
    \    for(long i=0;i<m;i++){\n            if(a>=2){\n                c+=a*i;\n\
    \                a+=1;\n            }\n        }\n        long m=sum/c+avg*a2;\n\
    \        if(m==0){\n            return avg;\n        }\n        if(m==1){\n  \
    \          return 1;\n        }\n        if(m==-1){\n            return -1;\n\
    \        }\n        a1=m*a1+a2;\n        a2=m;\n    }", "    long long sum = 0;\n\
    \    long long n;\n    long long m;\n    long long ans = 0;\n    long long i;\n\
    \    for (i = n; i <= m; i++) {\n        sum += i;\n    }\n    if (n >= m) {\n\
    \        ans = -1;\n    } else {\n        n = n;\n        m = m;\n    }\n    ans\
    \ = (long long) sum / n;\n    ans = ans % 2;\n    ans = ans * 10 + ans >> 1;\n\
    \    ans *= (long long) pow(10, ceil(log10(n)));\n    ans = ans * pow(10, ceil(log10(m)));\n\
    \    return Union_std_string_long(ans);", "    assert(n>=m);\n    long sum = 0,\
    \ diff = m, mid;\n    for (mid = n , mid<=m; mid++) {\n        sum += mid;\n \
    \       if (mid>m) return -1;\n    }\n    return sum / diff;", "    long sum =\
    \ n + m;\n    long avg = sum / 2;\n    long int_sum = 0;\n    long int_avg = 0;\n\
    \    Union_std_string_long int_avg1(\"\");\n    Union_std_string_long int_avg2(\"\
    \");\n    for(int i = n; i >= m; i--) {\n        int_sum += i;\n        int_avg\
    \ += i;\n        if(i == 0) {\n            int_avg1 = int_avg;\n        }\n  \
    \      else {\n            int_avg2 = int_avg;\n            int_avg = int_avg\
    \ - int_avg1;\n            int_avg1 = int_avg;\n        }\n    }\n    return int_sum\
    \ ? int_sum / int_sum * int_avg : -1;", "    // Write your code here\n    if(n>m)\
    \ return -1;\n    long ans=0,i,j;\n    for(i=n;i<=m;i++)\n        ans+=i;\n  \
    \  ans=ans/(n-(n%2)+1);\n    Union_std_string_long u;\n    u.f1=static_cast<long>(ans);\n\
    \    return u;", "    Union_std_string_long u(n);\n    if (n == m) return u;\n\
    \    while (n<m){\n        long mid = n+m/2;\n        u=rounded_avg(mid,m);\n\
    \        if (u==Union_std_string_long(-1)) return u;\n    }\n    long mid = n+m/2;\n\
    \    u = rounded_avg(mid,m);\n    if (u==Union_std_string_long(-1)) return u;\n\
    \    u.f1=floor(u.f1);\n    u.f0 = to_string(u.f1).substr(0, u.f0.length()-1);\n\
    \    return u;", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    // To print a long number as binary, start by zero-extending it\n\
    \    long long x = 0;\n    for (long i = n; i <= m; i += 1) {\n        x |= (long\
    \ long) i << (i - n);\n    }\n    // Divide the number by 2\n    x /= 2;\n   \
    \ // Multiply by 10\n    long long_long digits = x * 10;\n    std::string res\
    \ = \"0\";\n    while (digits) {\n        res.push_back('0' + (digits % 2));\n\
    \        digits /= 2;\n    }\n    // Print the number in reverse order\n    res\
    \ = res + rev.f0;\n    return Union_std_string_long(res);", "    if(m>=n)\n  \
    \      return -1; // m should be greater than n\n    long mid = (n+m)>>1;\n  \
    \  Union_std_string_long ua = rounded_avg(n,mid);\n    Union_std_string_long ub\
    \ = rounded_avg(mid+1,m);\n    Union_std_string_long us = ua + ub;\n    return\
    \ us;", "    Union_std_string_long ans;\n    long max_val = (long)pow(10, 9) +\
    \ 1;\n    if (n >= m) {\n        ans = Union_std_string_long(-1);\n        return\
    \ ans;\n    }\n    // Round down first:\n    long i = n - (m-1);\n    if (i <=\
    \ max_val) {\n        ans = Union_std_string_long(i);\n        return ans;\n \
    \   }\n    // Round up:\n    ans = Union_std_string_long(m);\n    while ((m-1)\
    \ - i >= max_val) {\n        ans = Union_std_string_long(max_val);\n        return\
    \ ans;\n    }\n    i = i + (m-1);\n    ans = Union_std_string_long(i);\n    return\
    \ ans;", "    assert(n >= 0 && m >= 0);\n    assert(n <= m);\n    Union_std_string_long\
    \ u1 = Union_std_string_long(n);\n    Union_std_string_long u2 = Union_std_string_long(m);\n\
    \    long mid = (n + m) / 2;\n    if (u2 == u1) {\n        assert(mid > 0 && mid\
    \ < n);\n        return mid;\n    }\n    if (u2 < u1) {\n        u1.f0 = mid +\
    \ \",\" + u2.f0;\n        u2 = u1;\n    }\n    long half = (mid + 1) / 2;\n  \
    \  if (u2 == u1)\n        half = half + 1;\n    long res = rounded_avg(half, n)\
    \ + rounded_avg(half, m);\n    if (mid > n || mid < m) {\n        res = -1;\n\
    \    }\n    return res;", "    Union_std_string_long ans;\n    long min_n = 0;\n\
    \    long max_n = m;\n    if (n > m) {\n        min_n = max_n = n;\n    }\n  \
    \  // compute average of numbers in range\n    double avg_n = ((double)n - min_n)\
    \ / (max_n - min_n);\n    // round the avg to nearest integer\n    long avg_round_n\
    \ = (long) avg_n;\n    \n    // compute average of numbers in range\n    double\
    \ avg_m = ((double)m - min_n) / (max_n - min_n);\n    // round the avg to nearest\
    \ integer\n    long avg_round_m = (long) avg_m;\n    \n    ans.f0 = std::to_string(avg_round_n);\n\
    \    ans.f1 = avg_round_m;\n    \n    // if n is greater than m\n    if (n > m)\
    \ {\n        return Union_std_string_long(-1.0);\n    }\n    return ans;", " \
    \   if(m >= n)\n        return Union_std_string_long(n);\n    union  Union_std_string_long\
    \ u1,u2;\n    u1.f1 = n;\n    u2.f1 = m;\n    long x = u1.f1;\n    if(u1.f0 <\
    \ u2.f0) {\n        x = u2.f0;\n    }\n    long y = u2.f1;\n    long sum = 0;\n\
    \    while(x != y){\n        sum += x;\n        y >>= 1;\n    }\n    long avg\
    \ = (sum / 2);\n    return Union_std_string_long(avg);", "    Union_std_string_long\
    \ avg;\n    if( n > m )\n        return avg;\n    \n    long l = n;\n    long\
    \ r = m;\n    long mid = (l + r)/2;\n    \n    while( mid != l && mid != r &&\
    \ mid>0) {\n        avg.f0 += \"1\" + (mid%2);\n        mid /= 2;\n    }\n   \
    \ \n    while( mid != l) {\n        avg.f0 += \"0\" + 1;\n        mid /= 2;\n\
    \    }\n    \n    while( mid != r) {\n        avg.f0 += \"0\" + 1;\n        mid\
    \ /= 2;\n    }\n    \n    avg.f1 += m;\n    \n    if( mid == 0 )\n        avg.f0\
    \ += \"1\";\n    \n    avg.f1 /= 2;\n    \n    return avg;", "    Union_std_string_long\
    \ ans;\n    long i= n;\n    long j = m;\n    while(i<j){\n        if(i%2==1){\n\
    \            ans.f0 += \"1\";\n            i += 1;\n        }\n        else{\n\
    \            ans.f0 += \"0\";\n            i += 1;\n        }\n    }\n    while(j>0){\n\
    \        if(j%2==1){\n            ans.f1 += \"1\";\n            j -= 1;\n    \
    \    }\n        else{\n            ans.f1 += \"0\";\n            j -= 1;\n   \
    \     }\n    }\n    if(j==0){\n        ans.f0 += \"1\";\n        ans.f1 += \"\
    0\";\n    }\n    return ans;", "    Union_std_string_long u(n);\n    assert(n\
    \ <= m);\n    for(long i = n; i <= m; i++){\n        u.f1 = i;\n        if(n ==\
    \ m) return u;\n    }\n    for(long i = n; i >= m; i--){\n        u.f1 = i;\n\
    \        if(n == m) return u;\n    }", "    Union_std_string_long avg;\n    long\
    \ r = n;\n    while ((r != 0) || (r != m))\n    {\n        if (r > m)\n      \
    \      return -1;\n        long new_r = r / 2;\n        avg.f1 += new_r;\n   \
    \     r = new_r;\n    }\n    avg.f1 /= 2;\n    avg.f0 += n;\n    avg.f0 += m;\n\
    \    return avg;", "    if (n >= m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / 2;\n    Union_std_string_long av = Union_std_string_long(avg);\n\
    \    std::cout << av;\n    return av;", "    // Complete this function\n    if(n\
    \ >= m ) {\n        return -1;\n    } else {\n        std::string s = \"\";\n\
    \        long sum = 0;\n        for(int i = n; i <= m; i++) {\n            sum\
    \ += i;\n            s += std::to_string(i) + \"\\n\";\n        }\n        \n\
    \        Union_std_string_long result = Union_std_string_long(s);\n        std::string\
    \ binary = 0;\n        long remain = sum;\n        while(remain > 0) {\n     \
    \       std::stringstream ss;\n            ss << std::hex << remain;\n       \
    \     remain -= (int)ss.str().c_str()[0] - '0';\n            binary += ss.str().c_str()[0];\n\
    \        }\n        if(remain==0) return result;\n        \n        result +=\
    \ Union_std_string_long(binary);\n        return result;\n    }", "    // Write\
    \ your code here.\n    if(n>m){\n        std::cout << \"-1\" << std::endl;\n \
    \       return -1;\n    }\n    Union_std_string_long u1;\n    if(n%2 == 0){\n\
    \        for(int i=n;i>=m;i--){\n            u1.f0 += std::to_string(i);\n   \
    \     }\n        for(int i=m;i<=n;i--){\n            u1.f1 += std::to_string(i);\n\
    \        }\n    }\n    else{\n        for(int i=n;i>=m;i--){\n            u1.f0\
    \ += std::to_string(i);\n        }\n        for(int i=n;i<=m;i++){\n         \
    \   u1.f1 += std::to_string(i);\n        }\n    }\n    long long avg = u1.f1/2;\n\
    \    Union_std_string_long u2;\n    u2.f0 = std::to_string(avg);\n    return u2;",
  "    std::string res=\"-1\";\n    if(n > m){\n        return Union_std_string_long(res);\n\
    \    }\n    long sum = (n+m)*(n-m)/2+n;\n    long a= sum % 10;\n    if(a != 0)\n\
    \        res = std::to_string(a);\n    return Union_std_string_long(res);", " \
    \   if(n<=m){\n        long k = (n>m)?m:n;\n        if(k > 0){\n            long\
    \ r = k/2;\n            long r2 = r+r;\n            long r3 = r2+r;\n        \
    \    long r4 = r3+r;\n            long r5 = r4+r;\n            long r6 = r5+r;\n\
    \            long r7 = r6+r;\n            long r8 = r7+r;\n            long r9\
    \ = r8+r;\n            long r10 = r9+r;\n            long r11 = r10+r;\n     \
    \       long r12 = r11+r;\n            long r13 = r12+r;\n            long r14\
    \ = r13+r;\n            long r15 = r14+r;\n            long r16 = r15+r;\n   \
    \         long r17 = r16+r;\n            long r18 = r17+r;\n            long r19\
    \ = r18+r;\n            long r20 = r19+r;\n            long r21 = r20+r;\n   \
    \         long r22 = r21+r;\n            long r23 = r22+r;\n            long r24\
    \ = r23+r;\n            long r25 = r24+r;\n            long r26 = r25+r;\n   \
    \         long r27 = r26+r;\n            long r28 = r27+r;\n            long r29\
    \ = r28+r;\n            long r30 = r29+r;\n            long r31 = r30+r;\n   \
    \         long r32 = r31+r;\n            long r33 = r32+r;\n            long r34\
    \ = r33+r;\n            long r35 = r34+r;\n            long r36 = r35+r;\n   \
    \         long r37 = r36+r;\n            long r38 = r37+r;\n            long r39\
    \ = r38+r;\n            long r40 = r39+r;\n            long r41 = r40+r;\n   \
    \         long r42 = r41+r;\n            long r43 = r42+r;\n            long r44\
    \ = r43+r;\n            long r45 = r44+r;\n            long r46 = r45+r;\n   \
    \         long r47 = r46+r;\n            long r48 = r47+r;\n            long r49\
    \ = r48+r;\n            long r50 = r49+r;\n            long r51 = r50+r;\n   \
    \         long r52 = r51+r;\n            long r53 = r52+r;\n            long r54\
    \ = r53+r;\n            long r55", "    assert(n >= 0);\n    assert(m >= 0);\n\
    \    long sum = 0;\n    if (n <= m) {\n        for (int i = n; i <= m; i++) {\n\
    \            sum = sum + i;\n        }\n    }\n    else {\n        for (int i\
    \ = n; i <= m; i++) {\n            sum = sum + i + 1;\n        }\n    }\n    Union_std_string_long\
    \ avg = sum / 2;\n    // Round up to a multiple of 2 \n    long ans = avg.f1 /\
    \ 2;\n    // Convert back to binary\n    std::bitset<sizeof(Union_std_string_long::f1)\
    \ * 8> ans1{ans}; \n    return ans1;", "    assert( n > m) ;\n    Union_std_string_long\
    \ ans = 0 ;\n    long i ;\n    for (i =  n ; i <= m; i++){\n        ans += i/2;\n\
    \    }\n    if ( n > m )\n        ans = -1 ;\n    return ans;", "    Union_std_string_long\
    \ avg;\n    if (n == m) \n        return n ; // m is equal to n\n    // You will\
    \ need a for loop for this.\n    // Example, consider n = 2 and m = 5\n    //\
    \ The loop would be\n    //     avg = 0\n    //     avg = 0\n    //     avg =\
    \ 0\n    //     avg = 1\n    //     avg = 0\n    //     avg = 0\n    //     avg\
    \ = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //    \
    \ avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //\
    \     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 1\n  \
    \  //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n\
    \    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg =\
    \ 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg\
    \ = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //    \
    \ avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //\
    \     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n  \
    \  //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n\
    \    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg =\
    \ 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg\
    \ = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //    \
    \ avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //\
    \     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n  \
    \  //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n\
    \    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg =\
    \ 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg\
    \ = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //    \
    \ avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //\
    \     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n  \
    \  //     avg = 0\n    //     avg = 0\n    //     avg = 0\n    //     avg = 0\n\
    \    //     avg = 0\n    //     avg = 0\n", "    Union_std_string_long u1;\n \
    \   if (n > m)\n    {\n        return -1;\n    }\n    int i;\n    long count =\
    \ 0;\n    for (i = n ; i <= m; i++)\n    {\n        count += i;\n    }\n    long\
    \ mid = (n + m) / 2;\n    long total = 0;\n    long num_pos = 0;\n    long num_neg\
    \ = 0;\n    long num_zero = 0;\n    long num_pos = 1;\n    long num_neg = 1;\n\
    \    long num_zero = 1;\n    Union_std_string_long u2;\n    std::string f0;\n\
    \    long f1;\n    total += count;\n    std::string f2;\n    long f3;\n    long\
    \ f4;\n    if (total < 2)\n    {\n        u2.f1 = -1;\n    }\n    else\n    {\n\
    \        f0 = std::to_string(total);\n        u2.f1 = total;\n    }\n    for (i\
    \ = n ; i <= m; i++)\n    {\n        if (total >= 2)\n        {\n            u2.f0\
    \ = std::to_string(i) + \" \";\n        }\n        else if (total < 1)\n     \
    \   {\n            u2.f0 = std::to_string(i) + \" 0 \";\n        }\n        else\n\
    \        {\n            u2.f0 = std::to_string(i);\n        }\n        std::istringstream\
    \ ss(u2.f0);\n        ss >> f1;\n        Union_std_string_long u3;\n        u3.f1\
    \ = f1;\n        f4 = f3 - mid;\n        f3 = f3;\n        ss >> f2;\n       \
    \ ss >> f3;\n        if (f2 != \"0\")\n        {\n            total += i;\n  \
    \          num_pos++;\n        }\n        else\n        {\n            total -=\
    \ i;\n            num_neg++;\n        }\n        if (f4 < 0)\n        {\n    \
    \        num_zero++;\n        }\n        Union_std_string_long u4;\n        u4.f0\
    \ = std::to_string(total);\n        std::ostringstream oss;\n        oss << std::hex\
    \ << std::uppercase << std::setw(8) << std::setfill('0') << std::setprecision(2);\n\
    \        oss << u4.f1;\n        oss << u2.f0;\n        u4.f1 = u3.f1;\n      \
    \  f2 = u4.f0.substr(0, u4.f0.size() - 4);\n        f3 = u4.f0.size() - 4;\n \
    \       oss << f2 << \" \" << f3 << u4.f0.substr(u4.f0.size() - 4, u4.f0.size()\
    \ - 2);\n        u4.f1 = u3.f1;\n        Union_std_string_long u5;\n        u5.f1\
    \ = f1;\n        std::ostringstream ", "    assert(n > m);\n    int count = 0;\n\
    \    int mid = (n + m) / 2;\n    for (int i = n; i <= m; i++) {\n        if (i\
    \ == mid) {\n            count++;\n            mid = (n + m) / 2;\n        } else\
    \ if (i <= mid) {\n            mid = (n + m) / 2;\n        } else {\n        \
    \    mid = count / 2;\n        }\n    }\n    if (count == 0) {\n        mid =\
    \ (n + m) / 2;\n    }\n    Union_std_string_long res = Union_std_string_long(std::string(\"\
    1\"), mid);\n    return res;", "    // write your code here\n    return Union_std_string_long(-1,\
    \ -1);", "    Union_std_string_long u0(n), u1(m);\n    return u0.f1 <= u1.f1 ?\
    \ u0 : u1;", "    assert(n >= 0);\n    assert(m >= 0);\n    assert(n < m);\n \
    \   if (n == m) return -1;\n    long n = n - 1;\n    long m = m - 1;\n    int\
    \ i = 1;\n    int d = 1;\n    int sum = 0;\n    int count = (n + m) / 2;\n   \
    \ for ( ; i <= count; i++) {\n        d = d * 10;\n        sum += d;\n    }\n\
    \    sum += i;\n    sum *= 10;\n    sum -= n;\n    sum /= count;\n    Union_std_string_long\
    \ ans;\n    ans.f0 = std::to_string(sum);\n    if (sum < 0) {\n        ans.f1\
    \ = -1;\n    } else {\n        ans.f1 = std::to_string(sum);\n    }\n    return\
    \ ans;", "    Union_std_string_long u(n, 0);\n    if(n>=m){\n        return Union_std_string_long(-1);\n\
    \    }\n    // Round up\n    while(n>0){\n        u.f0+=(n%10);\n        n/=10;\n\
    \    }\n    // Round down\n    while(m>0){\n        u.f1+=(m%10);\n        m/=10;\n\
    \    }\n    // Round up\n    while(n>0){\n        u.f0+=(n%10);\n        n/=10;\n\
    \    }\n    // Round down\n    while(m>0){\n        u.f1+=(m%10);\n        m/=10;\n\
    \    }\n    // Round up\n    while(n>0){\n        u.f0+=(n%10);\n        n/=10;\n\
    \    }\n    // Round down\n    while(m>0){\n        u.f1+=(m%10);\n        m/=10;\n\
    \    }\n    return u;", "    if (n < m) {\n        std::cout << \"n is greater\
    \ than m\";\n        return -1;\n    }\n    int counter = n - m + 1;\n    int\
    \ avg = 0;\n    int sum = 0;\n    while (counter-- > 0) {\n        avg += counter;\n\
    \        sum += counter;\n    }\n    if (sum != 0) {\n        avg = avg / sum;\n\
    \    }\n    else {\n        avg = -1;\n    }\n    std::cout << \"sum is \" <<\
    \ sum << \" and avg is \" << avg;\n    Union_std_string_long uavg = avg;\n   \
    \ std::cout << \"uavg is \" << uavg;\n    return uavg;", "    assert(n <= m);\n\
    \    Union_std_string_long avg = Union_std_string_long(n);\n    long i = n;\n\
    \    long sum = 0;\n    while (i++ <= m) {\n        sum += i;\n    }\n    avg\
    \ = Union_std_string_long(sum);\n    return avg;", "    Union_std_string_long\
    \ u(n);\n    Union_std_string_long v(m);\n    Union_std_string_long w(n - m +\
    \ 1);\n    u = Union_std_string_long(n);\n    v = Union_std_string_long(m);\n\
    \    if (u == v && u == w)\n        return Union_std_string_long(n);\n    else\
    \ {\n        if (u.f0 > v.f0)\n            return -1;\n        if (u.f0 >= v.f0)\n\
    \            return Union_std_string_long(u.f0 / v.f0);\n    }", "    Union_std_string_long\
    \ u1 = Union_std_string_long(n);\n    Union_std_string_long u2 = Union_std_string_long(m);\n\
    \    if (u1.f1 == u2.f1) {\n        u1.f1 += u2.f1;\n        return u1;\n    }\n\
    \    if (u2.f1 >= n && u2.f1 >=m) {\n        u2.f1 += m - n;\n        return u1;\n\
    \    }\n    u2.f1 += n - m;\n    u2.f1 += m;\n    return u2;", "    double avg_num\
    \ = n/m;\n    long avg_int = 0;\n    long i = 1;\n    long j;\n    for(; avg_int\
    \ <= n; avg_int+=i){\n        if(avg_int%2 ==0){\n            avg_int=avg_int+m;\n\
    \        }\n        for(j=avg_int;j>0;j/=2){\n            if(j%2 ==1)\n      \
    \          avg_int=j;\n        }\n    }\n    avg_int = avg_int+m;\n    Union_std_string_long\
    \ u;\n    u.f0 = std::to_string(avg_int);\n    return u;", "    \n    \n    Union_std_string_long\
    \ us = Union_std_string_long(n);\n    us = Union_std_string_long(m);\n    if(us.f1\
    \ > us.f0){\n        return -1;\n    }\n    return us.f1/2;", "    long mid =\
    \ (n + m) / 2;\n    Union_std_string_long midval(n);\n    Union_std_string_long\
    \ mval(m);\n    Union_std_string_long rmidval = rounded_avg(mid, m);\n    return\
    \ midval == rmidval ? midval : Union_std_string_long(mval) + Union_std_string_long(rmidval);",
  "    // base case\n    if(n == 0){\n        return Union_std_string_long(0);\n \
    \   }\n    // left case\n    if(n == 1){\n        return Union_std_string_long(10);\n\
    \    }\n    // right case\n    if(m == 1){\n        return Union_std_string_long(20);\n\
    \    }\n    Union_std_string_long a = rounded_avg(n-1, m);\n    Union_std_string_long\
    \ b = rounded_avg(n, m-1);\n    Union_std_string_long c = a + b + 10;\n    Union_std_string_long\
    \ d = rounded_avg(n-1, m-1)+ 10;\n    Union_std_string_long e = d - c;\n    return\
    \ Union_std_string_long(c.f1 + d.f1 + e.f1 + e.f1 + e.f1);", "    union{\n   \
    \     long f0;\n        long f1;\n        std::string f2;\n    }u;\n    u.f0 =\
    \ n;\n    u.f1 = m;\n    std::string f = to_binary(u.f0);\n    if (f.size() <\
    \ u.f1.size()) {\n        return -1;\n    }\n    u.f2 = f;\n    u.f1 -= f.size();\n\
    \    if (u.f1 == 0) {\n        return to_binary(u.f0);\n    }\n    std::string\
    \ result = to_binary(u.f0);\n    result += to_binary(u.f1);\n    result += to_binary(u.f2);\n\
    \    std::string res = result + to_binary(u.f1);\n    if (res.size() < u.f1.size())\
    \ {\n        return -1;\n    }\n    return to_binary(u.f1);", "    long sum =\
    \ 0;\n    for (int i = n; i <= m; i++)\n        sum += i;\n    long average =\
    \ sum/(n+m);\n    \n    return Union_std_string_long(average);", "    Union_std_string_long\
    \ u(n);\n    long count = 1 ;\n    for(long i=n;i<=m;i++){\n        if(i!=n&&i!=m)\n\
    \        count = count + 1;\n        u.f1 = i;\n    }\n    long sum = 0;\n   \
    \ for(int i = n; i <=m; i++){\n        if(i !=n && i !=m){\n            sum =\
    \ sum + i;\n        }\n    }\n    union Union_std_string_long uu;\n    uu = u;\n\
    \    long ans = sum / count;\n    if(ans==0)\n        return 0;\n    else if(ans<0)\n\
    \        return -1;\n    else\n        return uu;", "    long i, sum, avg = 0,\
    \ len;\n    long mid = n + (m - n) / 2;\n    Union_std_string_long midVal(mid);\n\
    \    if(n == m) return midVal;\n    // Sort the array\n    std::sort(std::begin(nums),\
    \ std::end(nums));\n    // Find average of the array\n    for(long i = 0; i <\
    \ m; ++i) {\n        sum += nums[i];\n    }\n    len = m - (sum - sum%m);\n  \
    \  avg = sum / len;\n    // Find the nearest integer and return it\n    i = avg;\n\
    \    i = std::round(avg);\n    Union_std_string_long ans;\n    if(i == avg) ans\
    \ = midVal;\n    else ans = Union_std_string_long(std::to_string(i));\n    return\
    \ ans;", "    long start = n;\n    long end = m;\n    Union_std_string_long sum;\n\
    \    long count = (end - start) + 1;\n    if (count >= 1000000000) \n        return\
    \ Union_std_string_long(\"-1\");\n    long sum = 0;\n    while (start < end) {\n\
    \        sum += start;\n        ++start;\n    }\n    sum = (sum / count);\n  \
    \  long temp = 0;\n    while (temp < sum) {\n        temp = sum;\n        sum\
    \ = sum / 2;\n    }\n    while (temp > sum) {\n        temp = sum;\n        sum\
    \ = sum * 2;\n    }\n    Union_std_string_long ans;\n    while (temp > 1) {\n\
    \        temp = temp / 2;\n        if (temp > 1) {\n            ans += '1';\n\
    \            temp = temp * 2;\n        }\n    }\n    while (temp == 1) {\n   \
    \     ans += '0';\n        temp = temp / 2;\n    }\n    return ans;", "    int\
    \ a = (n <= m) ? n : m;\n    a = (a%2 == 0) ? a : a/2;\n    a = (a%2 == 0) ? a\
    \ : a/2;\n    return Union_std_string_long(\"0b\" + std::to_string(a));", "  \
    \  assert(n <= m && m>=0);\n    if(n>=m)\n        return -1;\n    if(n>0)\n  \
    \      return Union_std_string_long(round((double)n + (double)m)/2);\n    return\
    \ Union_std_string_long(round((double)n+(double)m)/2);", "    if (n >= m) {\n\
    \        return -1;\n    }\n    // find the number of integers between n and m\n\
    \    long num = (n - m) / 2;\n    long sum = 0;\n    long count = 0;\n    // calculate\
    \ the sum\n    for (long i = n; i <= m; i++) {\n        sum = sum + i;\n     \
    \   if (i == n) {\n            count++;\n        }\n    }\n    Union_std_string_long\
    \ u(std::to_string(sum / count));\n    return u;", "    Union_std_string_long\
    \ u;\n    u.f0 = to_string(n);\n    u.f1 = to_string(m);\n    if (n >= m) {\n\
    \        return Union_std_string_long(-1, \"-1\");\n    }\n    long mid = n +\
    \ m / 2;\n    long sum = 0;\n    for (long i = mid; i <= m; i++) {\n        sum\
    \ += i;\n    }\n    long new_sum = sum / mid;\n    if (new_sum >= n) {\n     \
    \   return new_sum;\n    }\n    return -1;", "    assert(n >= 0);\n    assert(m\
    \ >= n);\n    if(n <= m){\n        if(n == m){\n            return n;\n      \
    \  }\n        long result = (m + n) / 2;\n        char digits[8];\n        std::sprintf(digits,\
    \ \"%lld%lld\", n, result);\n        Union_std_string_long u(digits);\n      \
    \  return u;\n    }\n    long result = ((n + m) / 2);\n    Union_std_string_long\
    \ u(result);\n    return u;", "    long long avg_long = n;\n    if(n > m) avg_long\
    \ = -1;\n    return Union_std_string_long(avg_long);", "    if (m > n) {\n   \
    \     return -1;\n    }\n    Union_std_string_long avg;\n    long m1 = n - 1;\n\
    \    long m2 = m - 1;\n    for (long i = 0; i <= n; i++) {\n        for (long\
    \ j = 0; j <= m; j++) {\n            Union_std_string_long num = (j == 0) ?\n\
    \                Union_std_string_long(\"0\") :\n                Union_std_string_long((j\
    \ == 1) ? \"1\" : std::to_string(j));\n            Union_std_string_long div =\
    \ (j == 0) ?\n                Union_std_string_long(\"0\") :\n               \
    \ Union_std_string_long((j == 1) ? \"1\" : std::to_string(j));\n            Union_std_string_long\
    \ mul = (i == 0) ?\n                Union_std_string_long(\"0\") :\n         \
    \       Union_std_string_long((i == 1) ? \"1\" : std::to_string(i));\n       \
    \     Union_std_string_long result = \"\";\n            int cnt = 0;\n       \
    \     if (i <= n+m2) {\n                for (long k = m1; k <= m2; k++) {\n  \
    \                  Union_std_string_long sum = (k == 0) ?\n                  \
    \      Union_std_string_long(\"0\") :\n                        Union_std_string_long((k\
    \ == 1) ? \"1\" : std::to_string(k));\n                    Union_std_string_long\
    \ product = sum * num;\n                    Union_std_string_long rem = product\
    \ % div;\n                    if (rem == 0) {\n                        cnt +=\
    \ 1;\n                        result += (std::to_string(k) + \"1\");\n       \
    \                 sum += product;\n                        product /= div;\n \
    \                   }\n                }\n                Union_std_string_long\
    \ avg = sum / cnt;\n            } else {\n                for (long k = m1; k\
    \ <= m2; k++) {\n                    Union_std_string_long sum = (k == 0) ?\n\
    \                        Union_std_string_long(\"0\") :\n                    \
    \    Union_std_string_long((k == 1) ? \"1\" : std::to_string(k));\n          \
    \          Union_std_string_long product = sum * num;\n                    Union_std_string_long\
    \ rem = product % div;\n                    if (rem == 0) {\n                \
    \        result += std::to_string(k) + \"1\";\n                        sum +=\
    \ product;\n                        product /= div;\n                    }\n \
    \               }\n                Union_std_string_long avg = sum / cnt;\n  \
    \          }\n            avg.f0 += result;\n            avg.f1 += i;\n      \
    \  }\n    }\n    // round and convert to binary\n    Union_std_string_long temp\
    \ = Union_std_string_long(\"\");\n    long f0 = avg.f0 / 2;\n    long f1 = av",
  "    int n1 = n % 2 == 0 ? n : n + 1;\n    int n2 = n % 2 == 0 ? n - 1 : n - 2;\n\
    \    int m1 = m % 2 == 0 ? m : m + 1;\n    int m2 = m % 2 == 0 ? m - 1 : m - 2;\n\
    \    long sum = 0;\n    if (n1 <= m2) sum += n1;\n    if (n2 <= m2) sum += n2;\n\
    \    if (m1 <= n2) sum += m1;\n    if (m2 <= n2) sum += m2;\n    if (n1 <= m1\
    \ && n2 <= m1 && m1 <= m2 && m2 <= m2) return sum / 2;\n    if (n1 <= m1 && n2\
    \ <= m1 && m1 <= m2 && m2 <= m2) return -1;\n    if (n1 <= m1 && n2 <= m1 && m1\
    \ <= m2 && m2 <= m2) return sum + 1;\n    return sum;", "    if (n < m) {\n  \
    \      return Union_std_string_long(\"-1\");\n    }\n    if (n == m) {\n     \
    \   return Union_std_string_long(std::to_string(n));\n    }\n    auto n2 = n%1000;\n\
    \    auto m2 = m%1000;\n    auto n1 = n/1000;\n    auto m1 = m/1000;\n    auto\
    \ n3 = n2/100;\n    auto m3 = m2/100;\n    auto n4 = n1/10;\n    auto m4 = m1/10;\n\
    \    auto n5 = n4/5;\n    auto m5 = m4/5;\n    auto n6 = n3/4;\n    auto m6 =\
    \ m3/4;\n    auto n7 = n6/3;\n    auto m7 = m6/3;\n    auto n8 = n7;\n    auto\
    \ m8 = m7;\n    Union_std_string_long avg = Union_std_string_long(n8+m8); \n \
    \   avg = Union_std_string_long(n8+m8); \n    avg = Union_std_string_long(n8+m8);\n\
    \    avg = Union_std_string_long(n8+m8);\n    avg = Union_std_string_long(n8+m8);\n\
    \    return avg ;", "    long avg =0, sum =0;\n    if(n<m){\n        return -1;\n\
    \    }\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    avg=(double)sum/(n+m);\n\
    \    return Union_std_string_long(round(avg));", "  assert(n > 0);\n  assert(m\
    \ > 0);\n  if (n > m) {\n    return -1L;\n  }\n  long long int n1 = n * 10;\n\
    \  long long int m1 = m * 10;\n  long long int sum = (n1 + m1) >> 1;\n  long long\
    \ int avg = (sum - n1) >> 1;\n  Union_std_string_long avg_string = Union_std_string_long(std::to_string(avg));\n\
    \  return avg_string;", "    assert(n >= 0 && m >= 0);\n    Union_std_string_long\
    \ sum;\n    if (n <= m) {\n        sum.f0 = std::to_string(n);\n        sum.f1\
    \ = n;\n    } else {\n        sum.f0 = std::to_string(m);\n        sum.f1 = m;\n\
    \    }\n    return sum;", "    if (n == 0 && m == 0){\n        return 0;\n   \
    \ }\n    else if (n == 0 && m > 0){\n        return -1;\n    }\n    else if (n\
    \ > m ){\n        return -1;\n    }\n    // Rounded\n    union{\n        long\
    \ intval;\n        long doubleval;\n        std::string s;\n    }u;\n    u.intval\
    \ = ((double)n) / ((double)m);\n    u.s = std::to_string(u.intval);\n    long\
    \ double a = u.intval;\n    u.intval = std::round(a);\n    u.s = std::to_string(u.intval);\n\
    \    std::string b = u.s;\n    // Reversing and converting to binary.\n    std::string\
    \ c = b;\n    int l = 0;\n    int h = 1;\n    while(h < 26){\n        if(c[l]\
    \ != '0'){\n            int temp = h;\n            h *= 10;\n            l +=\
    \ temp;\n        }\n        else{\n            break;\n        }\n    }\n    //\
    \ Converting binary to decimal\n    int temp = l;\n    l = h / 10;\n    h = h\
    \ - l * 10;\n    std::string temp2 = std::to_string(temp);\n    std::string temp3\
    \ = temp2;\n    Union_std_string_long answer;\n    std::string answer2 = temp3;\n\
    \    answer =  answer2;\n    return answer;", "    long l1 = n + m;\n    long\
    \ l2 = m - n;\n    if (l1 == l2) {\n        return Union_std_string_long(l1);\
    \ \n    }\n    long mid = l1 + l2;\n    long mid1 = mid >> 1;\n    long mid2 =\
    \ mid & 1;\n    long a1 = rounded_avg(n, mid1);\n    long a2 = rounded_avg(mid,\
    \ m);\n    return Union_std_string_long(a1 + a2);", "    if(n>m) return -1;\n\
    \    if(n==m) return n;\n    long mid = n/2;\n    Union_std_string_long s = rounded_avg(mid,m);\n\
    \    Union_std_string_long t = rounded_avg(n,mid);\n    Union_std_string_long\
    \ u = Union_std_string_long(s.f0)+Union_std_string_long(t.f0);\n    return u;",
  "    Union_std_string_long u;\n    if(n > m){\n        return -1;\n    }\n    long\
    \ sum=0;\n    long i=n;\n    while(i>=0){\n        sum += i;\n        i /= 2;\n\
    \    }\n    i = m;\n    while(i>0){\n        sum += i;\n        i /= 2;\n    }\n\
    \    u.f0 = std::to_string(sum);\n    return u;", "    if (n >= m) {\n       \
    \ return -1;\n    }\n    auto total = (long) (n - m);\n    float avg = (float)\
    \ total / n;\n    long tmp = (long) (avg * 2.0);\n    char res = 0;\n    while\
    \ (1) {\n        res = (res >> 1) | ((avg < 0) << 63);\n        if (tmp & 0x8000000000000000LL)\
    \ {\n            return Union_std_string_long(res);\n        }\n        tmp =\
    \ tmp >> 1;\n    }", "    long avg = n/2 + m/2;\n    long result = (avg + avg)%2;\n\
    \    long answer = 0;\n    if(n>=m){\n        result = -1;\n    }\n    for(int\
    \ i=result;i>0;i--){\n        if(i == 1) answer = 1;\n        else answer = 0;\n\
    \    }\n    Union_std_string_long s1(answer);\n    return s1;", "    assert(n\
    \ >= m);\n    long mid = n + (n - m) / 2;\n    if (n == m) return Union_std_string_long(mid);\n\
    \    if (n < m) return rounded_avg(n, mid);\n    else return rounded_avg(mid,\
    \ m); ", "    Union_std_string_long u1 = Union_std_string_long(n);\n    Union_std_string_long\
    \ u2 = Union_std_string_long(m);\n    if(u1.f1 != u2.f1) return -1;\n    double\
    \ r = static_cast<double>(m) - static_cast<double>(n);\n    double x = static_cast<double>(r);\n\
    \    double div = x / static_cast<double>(10);\n    r = r - div;\n    std::string\
    \ res;\n    if(res.length() == 1) res = \"0\" + res;\n    for(long i = 1; i <\
    \ 10; i++) {\n        long mod = i * div;\n        if(mod < 10) {\n          \
    \  res += \"0\" + mod;\n        } else {\n            res += \"1\" + mod;\n  \
    \      }\n    }\n    return u1.f0 + res;", "    assert(n >= 0);\n    assert(m\
    \ >= 0);\n    int avg = (m + n) / 2;\n    int avb_s = avg * 10;\n    long ans_s\
    \ = (avb_s % 2);\n    long ans_m = avb_s / 2;\n    Union_std_string_long ans{ans_m,\
    \ ans_s};\n    return ans;", "    if (n > m) {\n        return -1;\n    }\n  \
    \  Union_std_string_long ans = Union_std_string_long(n);\n    long k = m - n +\
    \ 1;\n    for (int i = 0; i < k; i++) {\n        ans.f1 = ans.f1 + (n - i);\n\
    \    }\n    for (int i = k; i < m; i++) {\n        ans.f1 = ans.f1 + (i - k);\n\
    \    }\n    long sum = (ans.f1 - 1) / 2;\n    if (ans.f1 == 0) {\n        sum\
    \ = -sum;\n    }\n    ans.f0 = std::to_string(sum);\n    return ans;", "    Union_std_string_long\
    \ u(\"\");\n    if(n > m) \n        return -1;\n    if(n==0 && m==0) return \"\
    \";\n    long sum = 0;\n    int count = 0;\n    for(int i=n; i>m; i--) {\n   \
    \     count++;\n        sum += i;\n    }\n    long avg = sum / count;\n    long\
    \ temp = avg;\n    temp = temp % 10;\n    u.f0 = std::to_string(temp);\n    return\
    \ u;", "    long sum = 0;\n    for (long i = n; i < m; ++i) sum += i;\n    return\
    \ sum / 2 ;", "    if (n > m) {\n        return -1;\n    }\n    long avg_i = n\
    \ + (m - n) / 2;\n    long avg_f = avg_i / 10; \n    Union_std_string_long avg_f0\
    \ = avg_f.f0;\n    long avg_f1 = avg_f.f1;\n    Union_std_string_long avg_i1 =\
    \ avg_i1.f0;\n    Union_std_string_long avg_i2 = avg_i1.f1;\n    Union_std_string_long\
    \ avg_f2 = avg_i2.f0;\n    Union_std_string_long avg_f3 = avg_i2.f1;\n    Union_std_string_long\
    \ avg_i3 = avg_f3.f0;\n    Union_std_string_long avg_i4 = avg_f3.f1;\n    Union_std_string_long\
    \ avg_f4 = avg_i4.f0;\n    Union_std_string_long avg_f5 = avg_i4.f1;\n    Union_std_string_long\
    \ avg_i5 = avg_f5.f0;\n    Union_std_string_long avg_i6 = avg_f5.f1;\n    Union_std_string_long\
    \ avg_f6 = avg_i6.f0;\n    Union_std_string_long avg_f7 = avg_i6.f1;\n    Union_std_string_long\
    \ avg_i7 = avg_f7.f0;\n    Union_std_string_long avg_i8 = avg_f7.f1;\n    Union_std_string_long\
    \ avg_f8 = avg_i8.f0;\n    Union_std_string_long avg_f9 = avg_i8.f1;\n    Union_std_string_long\
    \ avg_i9 = avg_f9.f0;\n    Union_std_string_long avg_i10 = avg_f9.f1;\n    Union_std_string_long\
    \ avg_i11 = avg_i10.f0;\n    Union_std_string_long avg_i12 = avg_i10.f1;\n   \
    \ Union_std_string_long avg_i13 = avg_i12.f0;\n    Union_std_string_long avg_i14\
    \ = avg_i12.f1;\n    Union_std_string_long avg_f15 = avg_i14.f0;\n    Union_std_string_long\
    \ avg_f16 = avg_i14.f1;\n    Union_std_string_long avg_i15 = avg_f15.f0;\n   \
    \ Union_std_string_long avg_f17 = avg_f15.f1;\n    Union_std_string_long avg_f18\
    \ = avg_i15.f0;\n    Union_std_string_long avg_f19 = avg_i15.f1;\n    Union_std_string_long\
    \ avg_i16 = avg_f16.f0;\n    Union_std_string_long avg_f20 = avg_f16.f", "   \
    \ long avg = n/m;\n    avg = std::round(avg);\n    Union_std_string_long u(std::to_string(avg));\n\
    \    if (n >m)\n        return Union_std_string_long(\"-1\");\n    else\n    \
    \    return u;", "    assert(n >= 0);\n    assert(m > n);\n    if (n > m) {\n\
    \        return -1;\n    }\n    if (n == m) {\n        return std::to_string(n);\n\
    \    }\n    long mid = n + (m + 1) / 2;\n    if (mid < n) {\n        return std::to_string(mid)\
    \ + rounded_avg(mid, n);\n    }\n    return rounded_avg(n, m) - mid;", "    if\
    \ (n < m) {\n        long temp = n;\n        n = m;\n        m = temp;\n    }\n\
    \    Union_std_string_long u1 = Union_std_string_long(to_binary(n));\n    Union_std_string_long\
    \ u2 = Union_std_string_long(to_binary(m));\n    Union_std_string_long u3 = Union_std_string_long(to_binary(n+m));\n\
    \    if (u1 == u2){\n        if (u3 == u2){\n            return to_string_long(u3.f0);\n\
    \        }\n        return to_string_long(u3.f1);\n    }\n    return -1;", " \
    \   Union_std_string_long rv = Union_std_string_long(\"0\");\n    long m = m+1;\n\
    \    long sum = 0;\n    for(long i=n; i<=m; i++){\n        sum += i;\n       \
    \ rv.f0 += (long long)std::to_string(i).c_str();\n    }\n    rv.f1 =  sum;\n \
    \   assert(rv.f1 > 0);\n    if(rv.f1 < 2){\n        return -1;\n    }\n    rv.f0\
    \ = rv.f0.substr(0, rv.f0.size()-1);\n    return rv;", "    Union_std_string_long\
    \ res(n);\n    long sum = 0;\n    long cnt = 0;\n    while(n>0 || m>0){\n    \
    \    if(n>0){\n            sum += n;\n            cnt += 1;\n            n -=\
    \ 1;\n        }\n        if(m>0){\n            sum += m;\n            cnt += 1;\n\
    \            m -= 1;\n        }\n    }\n    if (sum > 0 && cnt > 0){\n       \
    \ res.f1 = sum / cnt;\n        union_std_string_long u2 = res.f0;\n        res.f0\
    \ = reinterpret_cast<char *>(&u2);\n    }\n    else{\n        res.f0 = reinterpret_cast<char\
    \ *>(&(-1));\n    }\n    return res;", "    long sum = 0;\n    for (long i = n;\
    \ i <= m; ++i) {\n        sum += i;\n    }\n    if (sum == 0) {\n        return\
    \ -1L;\n    }\n    double avg = static_cast<double>(sum) / static_cast<double>(n+m);\n\
    \    Union_std_string_long res = Union_std_string_long(round(avg));\n    res.f1\
    \ += 1;\n    return res;", "    Union_std_string_long rv = Union_std_string_long(\"\
    -1\");\n    long average = ((n+m)+1)/2;\n    if(n > m)\n        return rv;\n \
    \   if(n == 0)\n        return Union_std_string_long(\"1\");\n    if(m == 0)\n\
    \        return Union_std_string_long(\"0\");\n    if(n == m)\n        return\
    \ Union_std_string_long(average);\n    long l = (long)average;\n    long r = (long)average-1;\n\
    \    long m = (average-1)/2;\n    long a = round((double)m/n);\n    if(r == 0)\n\
    \        return Union_std_string_long(to_binary_string(l));\n    long a1 = n -\
    \ r;\n    long a2 = m - l;\n    a1 = a1*a1;\n    a2 = a2*a2;\n    rv = Union_std_string_long(a1\
    \ + a2);\n    return rv;", "    if (n == m) return std::to_string(n);\n    long\
    \ mid = (n + m) / 2;\n    Union_std_string_long u(rounded_avg(n, mid));\n    if\
    \ (m > n) u += std::to_string(mid);\n    return u;", "    assert(n >= m);\n  \
    \  Union_std_string_long a(n);\n    Union_std_string_long b(m);\n    long sum\
    \ = 0;\n    long counter = 0;\n    while (b) {\n        sum = sum + b.f1;\n  \
    \      counter = counter + 1;\n        b = b.f1;\n    }\n    sum = sum / counter;\n\
    \    if (sum - floor(sum) == 0 && sum < n)\n        return sum;\n    return -1;",
  "    Union_std_string_long u0(n);\n    Union_std_string_long u1(m);\n    Union_std_string_long\
    \ u0m1 = u0 + u1;\n    return u0m1 == u0m1 + u0 ? u0m1.f0 : -1;", "    if (n >\
    \ m) \n        return -1;\n    long sum = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    long average = sum / 2;\n    int decimal =\
    \ average % 2;\n    \n    if (decimal >= 0 && average >= 0){\n        long temp\
    \ = average;\n        average /= 2;\n        decimal %= 2;\n        \n       \
    \ Union_std_string_long temp2;\n        temp2.f0 = to_string(temp) + to_string(decimal);\n\
    \        \n        return temp2;\n    }\n    Union_std_string_long temp3;\n  \
    \  temp3.f0 = to_string(average);\n    return temp3;", "    long count = (n +\
    \ m) / 2;\n    long sum = 0;\n    long avg = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long avg1 = 0;\n    long avg2 = 0;\n    for (long i = n; i <\
    \ m; i++) {\n        sum += i;\n        if (sum == count) {\n            avg1\
    \ = avg;\n            avg2 = count;\n        }\n        sum1 += i;\n        if\
    \ (sum1 == count) {\n            avg1 = avg;\n            avg2 = count;\n    \
    \    }\n        sum2 += i;\n        if (sum2 == count) {\n            avg1 = avg;\n\
    \            avg2 = count;\n        }\n    }\n    if (n >= m) return -1;\n   \
    \ avg = sum / avg2;\n    long long sum1 = sum / avg1;\n    long long sum2 = sum\
    \ / avg2;\n    long long sum3 = sum1 / avg1;\n    long long sum4 = sum2 / avg2;\n\
    \    long long sum5 = sum3 / avg1;\n    long long sum6 = sum4 / avg2;\n    long\
    \ long sum7 = sum5 / avg1;\n    long long sum8 = sum6 / avg2;\n    long long sum9\
    \ = sum7 / avg1;\n    long long sum10 = sum8 / avg2;\n    long long sum11 = sum9\
    \ / avg1;\n    long long sum12 = sum10 / avg2;\n    long long sum13 = sum11 /\
    \ avg1;\n    long long sum14 = sum12 / avg2;\n    long long sum15 = sum13 / avg1;\n\
    \    long long sum16 = sum14 / avg2;\n    long long sum17 = sum15 / avg1;\n  \
    \  long long sum18 = sum16 / avg2;\n    long long sum19 = sum17 / avg1;\n    long\
    \ long sum20 = sum18 / avg2;\n    long long sum21 = sum19 / avg1;\n    long long\
    \ sum22 = sum20 / avg2;\n    long long sum23 = sum21 / avg1;\n    long long sum24\
    \ = sum22 / avg2;\n    long long sum25 = sum23 / avg1;\n    long long sum26 =\
    \ sum24 / avg2;\n    long long sum27 = sum25 / avg1;\n    long long sum28 = sum26\
    \ / avg2;\n    long long sum29 = sum27 / avg1;\n    long long sum30 = sum28 /\
    \ avg2;\n    long long sum31 = sum29 / avg1;\n    long long sum32 = sum30 / avg2;\n\
    \    long long sum33 = sum", "    std::pair<Union_std_string_long, long> p(n,m);\n\
    \    Union_std_string_long a(n);\n    std::iota(a.begin(), a.end(), p.f1);\n \
    \   std::sort(a.begin(), a.end());\n    int length = a.size();\n    // Find the\
    \ average of n through m\n    if(n>m) return -1;\n    long sum = 0;\n    for(int\
    \ i=0; i<length; i++){\n        sum += a[i];\n    }\n    int avg = (int)sum /\
    \ length;\n    int remainder;\n    int temp;\n    if(avg % 2 != 0){\n        return\
    \ -1;\n    }\n    temp = avg/2;\n    avg = avg%2;\n    while(temp != 0){\n   \
    \     remainder = temp % 2;\n        temp = temp / 2;\n        sum += remainder*(int)pow(2,\
    \ length-1);\n    }\n    Union_std_string_long b(remainder);\n    return a + b;",
  "    long count = (n+m) /2 ;\n    if(n > m) count++;\n    Union_std_string_long\
    \ sum{n};\n    for(int i = 2; i <= count; i++){\n        sum.f0+=(long)pow(2,i-1)*(count-i)\
    \ ;\n    }\n    return sum ;", "    assert(n >= 0 && m < n );\n    if(n == m){\n\
    \        return Union_std_string_long(n);\n    }\n    long mid = n/2 + m/2;\n\
    \    long sum =0;\n    long remainder = 0;\n    for(int i = mid; i >= 0; --i){\n\
    \        sum += i & 1 ? n : m;\n        remainder  = i % 2;\n        n /= 2;\n\
    \        m /= 2;\n    }\n    if(n == m){\n        return Union_std_string_long(sum);\n\
    \    }\n    if((remainder == 0) && (sum < m)){\n        return Union_std_string_long(sum\
    \ + n + 1);\n    }\n    if((remainder == 1) && (sum > m)){\n        return Union_std_string_long(sum\
    \ - m + 1);\n    }\n    return Union_std_string_long(0);", "    // Write your\
    \ code here.\n    long sum = 0;\n    long temp = 0;\n    if(n>m){\n        temp\
    \ = -1;\n    }\n    else{\n        for(int i=n;i<=m;i++){\n            sum = sum\
    \ + i;\n        }\n        temp = sum/(n-(m+1));\n        temp = ceil(((float)temp*100)/100.0);\n\
    \    }\n    Union_std_string_long avg;\n    avg.f0 = to_string(temp);\n    avg.f1\
    \ = temp;\n    return avg;", "    if(n < m){\n        Union_std_string_long u1(rounded_avg(n,m));\n\
    \        Union_std_string_long u2(rounded_avg(n-1,m));\n        Union_std_string_long\
    \ u3(rounded_avg(n-1,m-1));\n        Union_std_string_long u4(m);\n        if(u1\
    \ != u2 && u2 != u3 && u3 != u4)\n            return u1;\n        else\n     \
    \       return u4;\n    }\n    Union_std_string_long u1(n);\n    Union_std_string_long\
    \ u2(m);\n    Union_std_string_long u3(m);\n    Union_std_string_long u4(rounded_avg(n+1,m));\n\
    \    if(u1 != u2 && u2 != u3 && u3 != u4)\n        return u1;\n    else\n    \
    \    return u4;", "    // Write your code here\n    Union_std_string_long sum,\
    \ sum1, sum2, sum3;\n    long avg = 0, sum1a = 0, sum2a = 0, sum3a = 0;\n    for(int\
    \ i = n; i <= m; ++i){\n        sum.f0+=i;\n        sum1.f1+=i;\n        sum2.f1+=i;\n\
    \        sum3.f1+=i;\n    }\n    avg = sum.f1/sum3.f1;\n    sum.f0 = (int)avg;\n\
    \    sum.f0+=(avg/10);\n    sum.f0/=10;\n    return sum;", "    union Union_std_string_long\
    \ u;\n    u.f0 = to_string(n);\n    u.f1 = to_string(m);\n    std::string s =\
    \ u.f0;\n    long l = 0;\n    for(auto i : s){\n        l += std::stoi(i);\n \
    \   }\n    if(l < m){\n        std::string s0 = to_string(-l);\n        u.f0 =\
    \ u.f0.append(s0);\n        return u;\n    }\n    return -1;", "    assert(n >=\
    \ 0 && m >= 0);\n    if (n > m) {\n        return -1;\n    }\n    long mid = (n\
    \ + m) / 2;\n    long avg = (mid + n) / 2;\n    long ans = 0;\n    ans = avg;\n\
    \    while (mid < n) {\n        ans += mid;\n        mid = (mid + mid) / 2;\n\
    \    }\n    Union_std_string_long ansv = Union_std_string_long(ans);\n    return\
    \ ansv;", "    Union_std_string_long u(n);\n    u.f1 = m;\n    if (n > m) \n \
    \       return -1;\n    else {\n        Union_std_string_long v(m);\n        v.f1\
    \ = n;\n        Union_std_string_long w((Union_std_string_long(n.to_string() +\
    \ '0') << 1) + (Union_std_string_long(m >> 1).to_string() + '0'));\n        Union_std_string_long\
    \ x = u - v;\n        Union_std_string_long y = w - x;\n        Union_std_string_long\
    \ z = v + w;\n        Union_std_string_long z1 = z + z;\n        Union_std_string_long\
    \ z2 = z1 + z;\n        Union_std_string_long z3 = z2 + z;\n        Union_std_string_long\
    \ z4 = z3 + z;\n        Union_std_string_long z5 = z4 + z;\n        Union_std_string_long\
    \ z6 = z5 + z;\n        Union_std_string_long z7 = z6 + z;\n        Union_std_string_long\
    \ z8 = z7 + z;\n        Union_std_string_long z9 = z8 + z;\n        Union_std_string_long\
    \ z10 = z9 + z;\n        Union_std_string_long z11 = z10 + z;\n        Union_std_string_long\
    \ z12 = z11 + z;\n        Union_std_string_long z13 = z12 + z;\n        Union_std_string_long\
    \ z14 = z13 + z;\n        Union_std_string_long z15 = z14 + z;\n        Union_std_string_long\
    \ z16 = z15 + z;\n        Union_std_string_long z17 = z16 + z;\n        Union_std_string_long\
    \ z18 = z17 + z;\n        Union_std_string_long z19 = z18 + z;\n        Union_std_string_long\
    \ z20 = z19 + z;\n        Union_std_string_long z21 = z20 + z;\n        Union_std_string_long\
    \ z22 = z21 + z;\n        Union_std_string_long z23 = z22 + z;\n        Union_std_string_long\
    \ z24 = z23 + z;\n        Union_std_string_long z25 = z24 + z;\n        Union_std_string_long\
    \ z26 = z25 + z;\n        Union_std_string_long z27 = z26 + z;\n        Union_std_string_long\
    \ z28 = z27 + z;\n        Union_std_string_long z29 = z28 + z;\n        Union_std_string_long\
    \ z30 = z29", "    Union_std_string_long u;\n    long i = n;\n    long j = m;\n\
    \    long avg = ((i - j) + 1) / (i + j);\n    for( ; i > j; i--, j--){\n     \
    \   u.f0 += std::to_string(i);\n        u.f1 += avg;\n    }\n    for( ; j < i;\
    \ i--, j++){\n        u.f0 += std::to_string(i);\n        u.f1 += avg;\n    }\n\
    \    for( ; i > j; i--){\n        u.f0 += std::to_string(i);\n        u.f1 +=\
    \ avg;\n    }\n    return u;", "    long long sum = 0;\n    for (long i = n; i\
    \ <= m; i++) {\n        sum += i;\n    }\n    long long avg = sum/2;\n    Union_std_string_long\
    \ round = avg;\n    union Union_std_string_long result = {round};\n    union_bool\
    \ flag = (round(result) == round(avg));\n    if (!flag) {\n        flag = round\
    \ == round(result.f1);\n    }\n    return flag;", "    assert(m >= n && n >= 0);\n\
    \    Union_std_string_long u0 = Union_std_string_long(\"\");\n    Union_std_string_long\
    \ u1 = Union_std_string_long(\"\");\n    Union_std_string_long u2 = Union_std_string_long(\"\
    \");\n    long avg = ((n + m) / 2) * 2;\n    long remainder = ((n + m) % 2);\n\
    \    Union_std_string_long temp;\n    if (remainder){\n        u0.f1 = n - avg;\n\
    \        u1.f1 = avg;\n        u2.f1 = remainder;\n        return u2;\n    }\n\
    \    u0.f1 = avg;\n    u1.f1 = n + m - avg;\n    return u1;", "    // write your\
    \ code in C\n    int i = n;\n    int j = m;\n    int total = 0;\n    int sum =\
    \ 0;\n    for (int k = i; k <= j; k++) {\n        total += k;\n        sum +=\
    \ k;\n    }\n    if (i == j) {\n        if (n+m == 0) {\n            return Union_std_string_long(\"\
    \");\n        }\n        if (n==0) {\n            return Union_std_string_long(\"\
    1\");\n        }\n        if (m==0) {\n            return Union_std_string_long(\"\
    0\");\n        }\n        Union_std_string_long a1 = rounded_avg(n-1, m);\n  \
    \      Union_std_string_long a2 = rounded_avg(n, m);\n        Union_std_string_long\
    \ a3 = rounded_avg(n+1, m);\n        Union_std_string_long a4 = rounded_avg(n,\
    \ n+m);\n        return Union_std_string_long(to_binary(a1) + to_binary(a2) +\
    \ to_binary(a3) + to_binary(a4));\n    } else {\n        Union_std_string_long\
    \ a1 = rounded_avg(i, j-1);\n        Union_std_string_long a2 = rounded_avg(i,\
    \ j);\n        Union_std_string_long a3 = rounded_avg(i+1, j);\n        Union_std_string_long\
    \ a4 = rounded_avg(i, j+1);\n        Union_std_string_long a5 = rounded_avg(i,\
    \ j+2);\n        Union_std_string_long a6 = rounded_avg(i, j+3);\n        return\
    \ Union_std_string_long(to_binary(a1) + to_binary(a2) + to_binary(a3) + to_binary(a4)\
    \ + to_binary(a5) + to_binary(a6));\n    }", "    assert(n<m && n>=0);\n    Union_std_string_long\
    \ avg(std::to_string(n)+std::to_string(m));\n    if (n<m){\n        return -1;\n\
    \    }\n    union_std_string_long rounded_avg;\n    long i = n;\n    while(i <\
    \ m){\n        rounded_avg.f0 += i;\n        i++;\n    }\n    rounded_avg.f0 /=\
    \ (m-n);\n    union_std_string_long ans = rounded_avg.f1;\n    ans.f1 = std::to_string(ans.f0);\n\
    \    ans.f0 = std::to_string(ans.f1);\n    return ans;", "    // your code goes\
    \ here\n    assert(n >= 0 && m >=0 && n <= m);\n    union_std_string_long u(n);\n\
    \    long temp = (long) ceil(log2((double) (n + m)));\n    for(long i = n; i <=\
    \ m; i++){\n        u.f1 = temp * ((double) i + (double) 0.5);\n        if(u.f1\
    \ < 0){\n            u.f1 = u.f1 + 1 - (double) u.f1;\n        }\n        u.f0\
    \ = u.f0 + std::to_string(i).substr(0, std::to_string(i).length());\n    }\n \
    \   Union_std_string_long us = u;\n    return us;", "    if (m > n)\n        return\
    \ -1; \n    std::string f0;\n    long f1;\n    if (m == 0 || n == 0)\n       \
    \ return -1; \n    while (n-- > m) {\n        f0 += '.';\n        f1 = n - m;\n\
    \        while (f1 > 0) {\n            f1 /= 2;\n            f0 += '0';\n    \
    \    }\n        std::reverse(f0.begin(), f0.end());\n        f1 = std::to_string(f1);\n\
    \        f1 += '.';\n        f1 += f0;\n    }\n    long l = f1.find_first_not_of('.');\n\
    \    f1 = f1.substr(0, l);\n    f1 = std::to_string(f1);\n    return Union_std_string_long(f1);",
  "    if (n > m) {\n        return -1;\n    }\n    long long mid = n + (m-1);\n \
    \   long long avg = (mid + ((long long) -1)/2) / 2;\n    Union_std_string_long\
    \ res = rounded_avg(n,mid);\n    Union_std_string_long res2 = rounded_avg(mid,m);\n\
    \    return (avg == res.f0) ? res2.f0 : avg;", "    if (n > m)\n        return\
    \ -1;\n    auto n = std::max(n, m);\n    long sum = 0;\n    for (long i = n; i\
    \ <= m; ++i)\n        sum += i;\n    return sum / n & std::numeric_limits<long>::max()\
    \ ? std::to_string(sum / n) : -1;", "    if (n == m || n > m) {\n        return\
    \ Union_std_string_long(\"-1\");\n    }\n    long sum = 0;\n    while (n <= m)\
    \ {\n        sum += n;\n        n++;\n    }\n    long avg = (sum / m) * 100;\n\
    \    long rounded = avg + round(avg);\n    Union_std_string_long ans = Union_std_string_long(std::to_string(rounded));\n\
    \    return ans;", "    assert(n >= 0 && m >= 0 && n <= m);\n    Union_std_string_long\
    \ sum;\n    long sum1=0,sum2=0;\n    sum1.n=n-n%m;\n    sum1.m=m%n;\n    sum2.n=m%n;\n\
    \    sum2.m=n-m%n;\n    sum.f0=std::to_string(sum1.n+sum2.n).substr(1);\n    sum.f1=sum1.n+sum2.n;\n\
    \    return sum;", "    if (n > m) {\n        return -1;\n    }\n    std::string\
    \ res = std::string();\n    for (long i = n; i <= m; ++i) {\n        res += std::to_string(i);\n\
    \    }\n    Union_std_string_long u2 = Union_std_string_long(res);\n    long ans\
    \ = u2.f1 / 10;\n    std::string str1 = std::to_string(ans);\n    std::string\
    \ str2 = std::to_string((long)(ans * 2));\n    std::string str3 = std::to_string((long)(ans\
    \ * 3));\n    std::string str4 = std::to_string((long)(ans * 4));\n    std::string\
    \ str5 = std::to_string((long)(ans * 5));\n    std::string str6 = std::to_string((long)(ans\
    \ * 6));\n    std::string str7 = std::to_string((long)(ans * 7));\n    std::string\
    \ str8 = std::to_string((long)(ans * 8));\n    std::string str9 = std::to_string((long)(ans\
    \ * 9));\n    std::string str10 = std::to_string((long)(ans * 10));\n    return\
    \ Union_std_string_long(str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8\
    \ + str9 + str10);", "    assert(n > m);\n    if (n > m) {\n        return -1;\n\
    \    }\n    long i = n;\n    long sum = 0;\n    long j = m;\n    while (i <= j)\
    \ {\n        sum += i;\n        i++;\n    }\n    return (sum + (j - n)) / 2;",
  "    if(n>m) return -1;\n    int k = (m/2)+1;\n    long sum=n;\n    for(int i=0;i<k;i++)\n\
    \        sum+=m;\n    return Union_std_string_long(sum/2);", "    if (n > m) return\
    \ -1;\n    union Union_std_string_long u1, u2;\n    u1.f0 = to_string(n);\n  \
    \  u1.f1 = m(std::numeric_limits<long>::max());\n    u2.f0 = to_string(m);\n \
    \   u2.f1 = std::numeric_limits<long>::max();\n    u1.f1 = std::floor(std::chrono::duration_cast<std::chrono::nanoseconds>(\n\
    \        std::chrono::duration_cast<std::chrono::microseconds>(\n            std::chrono::duration_cast<std::chrono::milliseconds>(\n\
    \                std::chrono::duration_cast<std::chrono::seconds>(\n         \
    \           std::chrono::duration_cast<std::chrono::minutes>(\n              \
    \          u1.f1)\n                ).count()\n            ).count()\n        ).count()\n\
    \    ).count();\n    return u2 == u1 ? u1 : -1;", "    Union_std_string_long avg\
    \ = Union_std_string_long(n);\n    if (n == m) return avg;\n    for (long i =\
    \ n; i <= m; ++i) {\n        avg = avg + Union_std_string_long(i);\n    }\n  \
    \  avg /= (m+1);\n    avg = avg % 10;\n    return avg;", "    assert(n >= 0 &&\
    \ m < n);\n    return n <= m ? Union_std_string_long(n) : Union_std_string_long(-1);",
  "    if(n>=m){\n        std::cout<<-1<<std::endl;\n        return Union_std_string_long(-1);\n\
    \    }\n    Union_std_string_long avg = Union_std_string_long(n);\n    long i=0;\n\
    \    while(i<m){\n        if(i+1>m){\n            std::cout<<-1<<std::endl;\n\
    \            return Union_std_string_long(-1);\n        }\n        if(i+1>=n){\n\
    \            std::cout<<-1<<std::endl;\n            return Union_std_string_long(-1);\n\
    \        }\n        if(n/(i+1)>m){\n            ++i;\n            continue;\n\
    \        }\n        long k = (n-1)/(i+1);\n        avg = avg + (Union_std_string_long(i)*Union_std_string_long(k));\n\
    \        i = i+1;\n    }\n    long k=1;\n    while(k<m){\n        long l=m;\n\
    \        k+=1;\n        if((m-k)*(i+1)<m){\n            l = ((m-k)*(i+1))+k;\n\
    \        }\n        Union_std_string_long d = Union_std_string_long(l);\n    \
    \    avg = avg + (Union_std_string_long(i)*d);\n        i = i+1;\n    }\n    Union_std_string_long\
    \ d = Union_std_string_long((m+2)/2);\n    avg = avg + (Union_std_string_long(i)*d);\n\
    \    return avg;", "    assert(m > 0 && n >= 0);\n    long r = n - m;\n    \n\
    \    long long avg = (r + (m - 1)) / 2.0 + m;\n    \n    return Union_std_string_long(std::to_string(avg));",
  "    if(n>m)\n        return -1;\n    long long avg;\n    avg = (n + m) / 2;\n \
    \   long long res = avg;\n    if(n%2 == 0)\n        res = res * 2;\n    return\
    \ Union_std_string_long(std::to_string((long long)res));", "    if (n >= m) {\n\
    \        return Union_std_string_long(-1);\n    }\n    union{long l, u;} u1, u2;\n\
    \    u1.l = n;\n    u2.l = m;\n    long long diff = u2.l - u1.l;\n    if (diff\
    \ < 0) {\n        diff = u1.l - u2.l;\n    }\n    if (diff == 0) {\n        if\
    \ (u1.l > u2.l) {\n            return Union_std_string_long(u1.l);\n        }\n\
    \        return Union_std_string_long(u2.l);\n    }\n    if (diff > 0) {\n   \
    \     long long newL = (diff % 2 == 1) ? (u1.l + u2.l) / 2 : ((u1.l + u2.l) /\
    \ 2) + 1;\n        u1.l = newL;\n        u2.l = newL;\n        return Union_std_string_long(newL);\n\
    \    }\n    return Union_std_string_long(-1);", "    if(n>m){\n        return\
    \ -1;\n    }\n    long n_to_m = n-m;\n    long avg = ((n*m)+m)/2;\n    long div\
    \ = round(avg);\n    long mod = avg - div;\n    long f1 = div;\n    long f2 =\
    \ mod;\n    Union_std_string_long union_std_string_long_f0 = std::string(f1)+std::string(f2);\n\
    \    Union_std_string_long union_std_string_long_f1 = union_std_string_long_f0.find(union_std_string_long_f0);\n\
    \    return union_std_string_long_f1;", "    Union_std_string_long res = (n ==\
    \ m ? Union_std_string_long(m) : Union_std_string_long(n));\n    if(n > m) {\n\
    \        res = Union_std_string_long(-1);\n    }\n    else if(n == m) {\n    \
    \    if(n >= 0 && m >= 0) {\n            res = Union_std_string_long(n);\n   \
    \     }\n        else if(n == 0 && m > 0) {\n            res = Union_std_string_long(m);\n\
    \        }\n        else if(n == 0 && m == 0) {\n            res = Union_std_string_long(-1);\n\
    \        }\n    }\n    return res;", "    Union_std_string_long x = Union_std_string_long(n);\n\
    \    Union_std_string_long y = Union_std_string_long(m);\n    if (n == m) \n \
    \   {\n        if (n == 0) \n        {\n            return Union_std_string_long(\"\
    0\");\n        }\n        else if (n == 1) \n        {\n            return Union_std_string_long(\"\
    1\");\n        }\n    }\n    if (n > m)\n    {\n        if (n > 0 && m > 1)\n\
    \        {\n            return Union_std_string_long(\"-1\");\n        }\n   \
    \ }\n    if (n == 0 && m == 0) \n    {\n        return Union_std_string_long(\"\
    0\");\n    }\n    if (n == 1)\n    {\n        return Union_std_string_long(\"\
    1\");\n    }\n    if (n == 2)\n    {\n        return Union_std_string_long(\"\
    10\");\n    }\n    if (n == 3)\n    {\n        return Union_std_string_long(\"\
    11\");\n    }\n    if (n == 4)\n    {\n        return Union_std_string_long(\"\
    100\");\n    }\n    if (n == 5)\n    {\n        return Union_std_string_long(\"\
    101\");\n    }\n    if (n == 6)\n    {\n        return Union_std_string_long(\"\
    110\");\n    }\n    if (n == 7)\n    {\n        return Union_std_string_long(\"\
    111\");\n    }\n    if (n == 8)\n    {\n        return Union_std_string_long(\"\
    1000\");\n    }\n    if (n == 9)\n    {\n        return Union_std_string_long(\"\
    1001\");\n    }\n    if (n == 11)\n    {\n        return Union_std_string_long(\"\
    1010\");\n    }\n    if (n == 12)\n    {\n        return Union_std_string_long(\"\
    1011\");\n    }\n    if (n == 13)\n    {\n        return Union_std_string_long(\"\
    1100\");\n    }\n    if (n == 14)\n    {\n        return Union_std_string_long(\"\
    1101\");\n    }\n    if (n == 15)\n    {\n        return Union_std_string_long(\"\
    1110\");\n    }\n    if (n == 16)\n    {\n        return Union_std_string_long(\"\
    1111\");\n    }\n    if (n >= 0)\n    {\n        long temp = (n+m)/2;\n      \
    \  return Union_std_string_long(temp);\n    }\n    return Union_std_string_long(\"\
    -1\");", "    Union_std_string_long result;\n    if(n>=m)\n    {\n        return\
    \ -1;\n    }\n    for(long i=n;i<=m;i++)\n    {\n        result.f1 += i;\n   \
    \ }\n    result.f1/=m;\n    std::stringstream ss;\n    ss << result.f0;\n    ss\
    \ >> result.f0;\n    return Union_std_string_long(result.f0);", "    assert(n\
    \ <= m);\n    if (n >= m) {\n        return Union_std_string_long(-1, -1);\n \
    \   }\n    Union_std_string_long avg = Union_std_string_long(-1, -1);\n    for\
    \ (int i = n; i <= m; ++i) {\n        avg += Union_std_string_long(i, i);\n  \
    \  }\n    avg /= (m+1);\n    return avg;", "    Union_std_string_long rv = Union_std_string_long(-1);\n\
    \    if(n<m)\n        rv.f0 = std::to_string(n);\n    else rv.f1 = std::to_string(m);\n\
    \    return rv;", "    double avg = (double) n + (double) m ;\n    avg = (avg-((double)n/2))*2\
    \ + (avg-((double)m/2))*1 ;\n    avg *= 0.5 ;\n    Union_std_string_long us =\
    \ (Union_std_string_long) avg ;\n    return us ;", "    union Union_std_string_long\
    \ u;\n    if (n > m) {\n        return -1;\n    }\n    u.f1 = m; //set the final\
    \ value of f1\n    u.f1 = n; //set the initial value of f1\n    long long int\
    \ sum = 0; //set up the sum variable\n    while (u.f1 > 0) {\n        sum += u.f1\
    \ % 10; //add the first digit\n        u.f1 = (u.f1 / 10); //remove the first\
    \ digit\n    }\n    if (sum >= 9) {\n        return sum;\n    }\n    else {\n\
    \        return sum + 9; //add the extra digit\n    }", "    if (n >= m) {\n \
    \       return -1;\n    }\n    long div = n;\n    long mod = m;\n    bool round_up\
    \ = true;\n    while (div > mod) {\n        div--;\n        mod += div;\n    \
    \    if (mod >= m) {\n            round_up = false;\n        }\n    }\n    std::uint64_t\
    \ res = div * std::uint64_t{10} + mod * std::uint64_t{10} - n * (n - 1) / 2;\n\
    \    if (round_up) {\n        res += std::uint64_t{10};\n    }\n    return Union_std_string_long(res);",
  "    Union_std_string_long u(n), v(m), w;\n    long l = std::max(u.getf1(), v.getf1());\n\
    \    long r = std::min(u.getf1(), v.getf1());\n    long x = n - r;\n    long y\
    \ = u.getf1() - r;\n    if (x > y) {\n        w = Union_std_string_long(u.getf1()-x);\n\
    \    }\n    else {\n        w = Union_std_string_long(v.getf1()-y);\n    }\n \
    \   long ans = (l+r)/2;\n    if (ans == (r+1)/2)\n        return Union_std_string_long(r);\n\
    \    else return Union_std_string_long(ans);", "    long int_avg = n*m/2+n/2;\n\
    \    Union_std_string_long avg = Union_std_string_long(int_avg);\n    if (n>m){\n\
    \        return -1;\n    }\n    long remaining = m-n;\n    return avg;", "   \
    \ Union_std_string_long u;\n    if(n>m) \n    {\n        std::cerr << \"Input\
    \ error: n=\" << n << \" m=\" << m << \"\\n\";\n        return u;\n    }\n   \
    \ for(int i=n; i<=m; i++) {\n        u.f0 += to_binary_string_long(i);\n    }\n\
    \    double avg;\n    avg = u.f0 / std::max((long)std::min(n, m), 1);\n    avg\
    \ = round(avg);\n    u = Union_std_string_long(avg);\n    return u;", "    if\
    \ (n <= m) return n + (n - 1) / 2;\n    return -1;", "    union Union_std_string_long\
    \ u;\n    std::string s = std::to_string(n);\n    u.f0 = s;\n    if (m >= n) return\
    \ u;\n    std::string ms = std::to_string(m);\n    u.f1 = ms;\n    if (n >= m)\
    \ return u;\n    \n    if (n % 2 == 0)\n    {\n        if (m % 2 == 0)\n     \
    \   {\n            u.f1 /= 2;\n            return u;\n        }\n        else\n\
    \        {\n            long mid = n / 2;\n            u.f0 = std::to_string(mid);\n\
    \            long left = mid % 2;\n            u.f1 = left;\n            return\
    \ u;\n        }\n    }\n    else\n    {\n        if (m % 2 == 0)\n        {\n\
    \            long mid = m / 2;\n            u.f0 = std::to_string(mid);\n    \
    \        long left = (mid + 1) % 2;\n            u.f1 = left;\n            return\
    \ u;\n        }\n        else\n        {\n            long mid = n / 2;\n    \
    \        u.f0 = std::to_string(mid);\n            long left = n - (mid + 1) %\
    \ 2;\n            u.f1 = left;\n            return u;\n        }\n    }", "  \
    \  Union_std_string_long f1(-1);\n    Union_std_string_long f2(-2);\n    Union_std_string_long\
    \ f3(-3);\n    if (n == m) {\n        return f1;\n    }\n    if (n > m) {\n  \
    \      return f2;\n    }\n    long mid = (n + m) / 2;\n    Union_std_string_long\
    \ f4(rounded_avg(n, mid));\n    Union_std_string_long f5(rounded_avg(mid, m));\n\
    \    if (f4 == f5) {\n        return f4;\n    }\n    return f3;", "    Union_std_string_long\
    \ us(0);\n    if(n>=m){\n        return -1;\n    }\n    for(int i=n;i<=m;i++){\n\
    \        us.f0 += to_string(i);\n    }\n    double avg = double(us.f0) / (double(n+m));\n\
    \    \n    int x = static_cast<int>(avg);\n    us.f1 = x;\n    return us;", " \
    \   if (m > n) return -1;\n    Union_std_string_long u(n);\n    for (long i =\
    \ n+1; i <= m; i++) {\n        u.f1 += i;\n    }\n    u.f1 /= (n+1);\n    return\
    \ u;", "    if (n >= m) {\n        return Union_std_string_long(n);\n    }\n \
    \   long int_avg = (n + (m - 1)) / m;\n    return Union_std_string_long(int_avg);",
  "    if (n >= m)\n        return -1;\n    Union_std_string_long sum = (Union_std_string_long)\
    \ n;\n    sum = sum + Union_std_string_long (m);\n    sum.f1--;\n    sum.f1/=2;\n\
    \    sum.f1 = sum.f1%2;\n    sum.f1 = sum.f1 * 10 + sum.f0/2;\n    return sum;",
  "    union{\n        std::string f0;\n        long f1;\n    } u0;\n    u0.f1 = (n\
    \ + m) / 2;\n    return u0 == (n + m)/2 ? -1 : (long) u0.f0;", "    assert(n >=\
    \ 0 && m < n);\n    \n    Union_std_string_long u;\n    u.f1 = n;\n    u.f0 =\
    \ m + \"0\";\n    \n    if(u.f1 == u.f0) {\n        if(n % 10 != 0)\n        \
    \    return -1;\n        u.f1 = n;\n    }\n    long n = n, m = m, sum = 0, count\
    \ = 0;\n    while(count < 100000000) {\n        sum += n;\n        if(m == sum)\
    \ break;\n        n += 1;\n        m -= sum;\n        if(m == 0) return int(sum\
    \ + 0.5);\n        sum = 0;\n        ++count;\n    }\n    return -1;", "    Union_std_string_long\
    \ u(n);\n    long long u1 = m;\n    while(u>u1){\n        u.f0 = std::to_string(n-u+u1);\n\
    \        u.f1 = u.f0.length()+u1;\n        n=u-u1;\n    }\n    u.f1 = std::to_string(n-u+u1);\n\
    \    return u;", "    assert(n >= 0 && m > 0);\n    if (n == m)\n        return\
    \ Union_std_string_long(n);\n    long k = (n <= m) ? n : m;\n    union  Union_std_string_long\
    \ u;\n    u.f0 = std::to_string(n);\n    u.f1 = std::to_string(k);\n    return\
    \ u;", "    assert(n > m);\n    if(m>n){\n        return -1;\n    }\n    Union_std_string_long\
    \ u(n);\n    long sum = 0;\n    for(int i=0;i<n;i++){\n        sum += i;\n   \
    \ }\n    for(int i=n;i<=m;i++){\n        sum += i;\n    }\n    long avg = (sum/n+sum/m)%2;\n\
    \    std::string s = std::to_string(avg);\n    std::string r = \"\";\n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i] == '1'){\n            r += \"1\";\n  \
    \      } else {\n            r += \"0\";\n        }\n    }\n    return Union_std_string_long(r);",
  "    if(n>m) return -1;\n    union{\n        long n;\n        std::string strn;\n\
    \    }u;\n    u.n = n;\n    u.strn = to_binary_string(u.n);\n    long avg = roundf(n\
    \ + (m - n) / 2); \n    std::string av = to_binary_string(avg);\n    return Union_std_string_long(u.strn\
    \ + av);", "    assert( n > 0 && m > 0);\n    long n_minus_m = n - m;\n    //\
    \ printf(\"n_minus_m = %ld\\n\", n_minus_m);\n    Union_std_string_long u_avg\
    \ = n_minus_m / 2;\n    u_avg /= 2;\n    if (n_minus_m % 2 == 0)\n        u_avg\
    \ /= 2;\n    u_avg /= 2;\n    long remainder = n_minus_m % 2;\n    long u_avg_rounded\
    \ = (u_avg + remainder) / 2;\n    u_avg_rounded += remainder;\n    return u_avg_rounded;",
  "    Union_std_string_long a = Union_std_string_long(n);\n    Union_std_string_long\
    \ b = Union_std_string_long(m);\n    Union_std_string_long c = Union_std_string_long(a);\n\
    \    Union_std_string_long d = Union_std_string_long(b);\n    Union_std_string_long\
    \ e = Union_std_string_long(a + b);\n    Union_std_string_long f = Union_std_string_long(b\
    \ + c);\n    Union_std_string_long g = Union_std_string_long(d + c);\n    Union_std_string_long\
    \ h = Union_std_string_long(c + d);\n    Union_std_string_long i = Union_std_string_long(c\
    \ + e);\n    Union_std_string_long j = Union_std_string_long(c + f);\n    Union_std_string_long\
    \ k = Union_std_string_long(c + g);\n    Union_std_string_long l = Union_std_string_long(c\
    \ + h);\n    Union_std_string_long m = Union_std_string_long(c + i);\n    Union_std_string_long\
    \ n = Union_std_string_long(c + j);\n    Union_std_string_long o = Union_std_string_long(c\
    \ + k);\n    Union_std_string_long p = Union_std_string_long(c + l);\n    Union_std_string_long\
    \ q = Union_std_string_long(c + m);\n    Union_std_string_long r = Union_std_string_long(c\
    \ + n);\n    Union_std_string_long s = Union_std_string_long(c + o);\n    Union_std_string_long\
    \ t = Union_std_string_long(c + p);\n    Union_std_string_long u = Union_std_string_long(c\
    \ + q);\n    Union_std_string_long v = Union_std_string_long(c + r);\n    Union_std_string_long\
    \ w = Union_std_string_long(c + s);\n    Union_std_string_long x = Union_std_string_long(c\
    \ + t);\n    Union_std_string_long y = Union_std_string_long(c + u);\n    Union_std_string_long\
    \ z = Union_std_string_long(c + v);\n    Union_std_string_long a = Union_std_string_long(c\
    \ + w);\n    Union_std_string_long b = Union_std_string_long(c + x);\n    Union_std_string_long\
    \ c = Union_std_string_long(c + y);\n    Union_std_string_long d = Union_std_string_long(c\
    \ + z);\n    Union_std_string_long e = Union_std_string_long(c + a);\n    Union_std_string_long\
    \ f = Union", "    assert(n >= m);\n    if (n > m)\n        return -1;\n    Union_std_string_long\
    \ sum = 0;\n    long t = std::abs(n - m);\n    for (int i = n; i < m; ++i)\n \
    \       sum += i;\n    long avg = sum / t;\n    union{std::string f0, long f1}\
    \ u1;\n    u1.f0 = to_binary(std::round(avg));\n    return u1;", "    Union_std_string_long\
    \ u0, u1;\n    for(long i=n; i<m; ++i){\n        union Union_std_string_long temp{\n\
    \            long f1;\n            std::string f0;\n        };\n        temp.f0\
    \ = std::to_string(i);\n        temp.f1 = i;\n        if(temp.f0 == \"0\")\n \
    \           u0.f0 += \"1\";\n        else\n            u1.f0 += \"1\";\n    }\n\
    \    return u0.f0/u1.f1;", "    // Your code here\n    Union_std_string_long average(n\
    \ + m);\n    assert(n > m);\n    if(n == m){\n        average.f0 = std::to_string(n);\n\
    \        return average;\n    }\n    if(n>m){\n        average.f0 = std::to_string(-1);\n\
    \        return average;\n    }\n    long half = floor((n + m) / 2);\n    average.f0\
    \ = std::to_string(half);\n    average.f1 = std::to_string(n-half);\n    return\
    \ average;", "    if (n < m) {\n        std::cerr << \"invalid input: \" << n\
    \ << \" and \" << m << \" not valid.\" << std::endl;\n        return Union_std_string_long();\n\
    \    }\n    Union_std_string_long a(n), b(m), sum;\n    // Your code here\n  \
    \  for(int i=n;i<=m;i++){\n        if(i > n){\n            return Union_std_string_long();\n\
    \        }\n        if(i == n){\n            sum.f0 = a.f0;\n            sum.f1\
    \ = a.f1;\n            a.f0 = \"\";\n            a.f1 = i;\n        }\n      \
    \  else if(i == m){\n            sum.f0 = a.f0;\n            sum.f1 = a.f1;\n\
    \            a.f0 = \"\";\n            a.f1 = i;\n        }\n        else{\n \
    \           a.f1 = a.f1+i;\n        }\n        a.f1 = round(a.f1/2);\n    }\n\
    \    if(sum.f0 != \"\"){\n        sum.f0 = sum.f0.substr(0, sum.f0.length() -\
    \ 1);\n    }\n    if(sum.f1 != -1){\n        sum.f1 = sum.f1 * 2;\n    }\n   \
    \ return sum;", "    union Union_std_string_long u;\n    if (n > m)\n        return\
    \ -1;\n    u.f0 = std::to_string(n);\n    u.f1 = m;\n    // print u.f0 as binary\n\
    \    // print u.f1 as decimal\n    // print average as binary\n    // print decimal\
    \ as binary\n    // print binary sum of decimal\n    // print decimal sum as binary\n\
    \    // print decimal of average as decimal\n    // print decimal of average as\
    \ binary\n    // print decimal sum of average as binary", "    Union_std_string_long\
    \ u;\n    for(long i = n; i <= m; i++){\n        u.f0 += std::to_string(i);\n\
    \    }\n    // u.f1 will be -1 in case of n == m\n    u.f1 /= (n - m);\n    return\
    \ u;", "    std::string f1 = std::to_string(n);\n    std::string f2 = std::to_string(m);\n\
    \    Union_std_string_long f1(f1);\n    Union_std_string_long f2(f2);\n    std::string\
    \ f3 = f1 + f2;\n    Union_std_string_long f3(f3);\n    Union_std_string_long\
    \ f4(f1 + f2);\n    Union_std_string_long f5(f1);\n    Union_std_string_long f6(f2);\n\
    \    Union_std_string_long f7(f1 + f2 + f3);\n    Union_std_string_long f8(f1\
    \ + f2 + f3 + f4);\n    Union_std_string_long f9(f1 + f2 + f3 + f4 + f5);\n  \
    \  Union_std_string_long f10(f1 + f2 + f3 + f4 + f5 + f6);\n    Union_std_string_long\
    \ f11(f1 + f2 + f3 + f4 + f5 + f6 + f7);\n    Union_std_string_long f12(f1 + f2\
    \ + f3 + f4 + f5 + f6 + f7 + f8);\n    Union_std_string_long f13(f1 + f2 + f3\
    \ + f4 + f5 + f6 + f7 + f8 + f9);\n    Union_std_string_long f14(f1 + f2 + f3\
    \ + f4 + f5 + f6 + f7 + f8 + f9 + f10);\n    Union_std_string_long f15(f1 + f2\
    \ + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11);\n    Union_std_string_long\
    \ f16(f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12);\n    Union_std_string_long\
    \ f17(f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13);\n \
    \   Union_std_string_long f18(f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10\
    \ + f11 + f12 + f13 + f14);\n    Union_std_string_long f19(f1 + f2 + f3 + f4 +\
    \ f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13 + f14 + f15);\n    Union_std_string_long\
    \ f20(f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13 + f14\
    \ + f15 + f16);\n    Union_std_string_long f21(f1 + f2 + f", "    if (n >= m)\n\
    \        return -1;\n    long sum = (n + m);\n    double avg = sum / 2;\n    std::string\
    \ str = \"\";\n    int i = 0;\n    while (i < 10) {\n        str += std::to_string(avg);\n\
    \        avg *= 10;\n        i++;\n    }\n    str.pop_back();\n    str.pop_back();\n\
    \    return Union_std_string_long(str);", "    Union_std_string_long u1, u2;\n\
    \    u1.f0 = std::to_string(n);\n    u2.f1 = std::to_string(m);\n    return u1\
    \ == u2 ? u1 : u2;", "    assert(n >= m);\n    if (n < m)\n        return Union_std_string_long(-1);\n\
    \    long sum = 0;\n    long n = n - m;\n    long m = m - n;\n    long a = n;\n\
    \    for (; a < m; ++a) {\n        sum += n;\n    }\n    long b = m;\n    for\
    \ (; b > a; --b) {\n        sum += m;\n    }\n    return Union_std_string_long(sum\
    \ / a);", "    Union_std_string_long ans;\n    assert(n < m);\n    if (n <= m)\
    \ {\n        ans.f0 = std::to_string(n);\n        ans.f1 = m;\n    } else {\n\
    \        ans.f0 = std::to_string(m);\n        ans.f1 = std::to_string(n);\n  \
    \  }\n    return ans;", "    Union_std_string_long sum;\n    if (n > m) {\n  \
    \      return -1;\n    }\n    else {\n        for (long i = n; i <= m; ++i)\n\
    \            sum += i;\n        return sum;\n    }", "    long total = (n + m)\
    \ / 2;\n    // Find the first integer greater than or equal to total\n    // If\
    \ n is equal to m, it needs to be greater than or equal to total \n    if (n ==\
    \ m)\n        return total;\n    else if (n < m)\n        return -1;\n    // if\
    \ n >= total, return total\n    else if (total >= n)\n        return total;\n\
    \    // else return -1\n    else\n        return -1;", "    Union_std_string_long\
    \ sum;\n    long n = n;\n    long m = m;\n    while ( n <= m ) {\n        long\
    \ sum = 0;\n        long i = n;\n        while (i <= m ) {\n            sum +=\
    \ i;\n            i += 2;\n        }\n        sum = sum / 2;\n        sum += 1;\n\
    \        sum = sum * ( sum % 2 );\n        sum.f0 = \"(\" + std::to_string(sum.f1)\
    \ + \",\" + std::to_string(sum.f0) + \")\";\n        sum += 1;\n        sum +=\
    \ sum * ( sum % 2 );\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0\
    \ = std::to_string(sum.f0);\n        sum += sum;\n        sum += 1;\n        sum.f1\
    \ = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n      \
    \  sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n\
    \        sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n\
    \        sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n\
    \        sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n\
    \        sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n        sum.f1 = std::to_string(sum.f1);\n        sum.f0 = std::to_string(sum.f0);\n\
    \        sum += sum;\n        sum += 1;\n        sum.f1 = std::to_string(sum.f1);\n\
    \        sum.f0 = std::to_string(sum.f0);\n        sum += sum;\n        sum +=\
    \ 1;\n", "    union Union_std_string_long u;\n    u.f1 = m;\n    if (n < m) {\n\
    \        u.f0 = std::to_string(n);\n    }\n    else {\n        u.f0 = std::to_string(m);\n\
    \        u.f1 = n - u.f0;\n    }\n    return u;", "    Union_std_string_long u1\
    \ = Union_std_string_long(n);\n    Union_std_string_long u2 = Union_std_string_long(m);\n\
    \    if(u1 == u2) return u1;\n    return u1.f1 == u2.f1 ? u1 : u2.f1 == 1 ? u2\
    \ : u1.f1 < u2.f1 ? u1 : u2;", "    Union_std_string_long res(n);\n    if(n>m){\n\
    \        return res;\n    }\n    res.f1=n+m-2;\n    res.f1=res.f1/(std::pow(2,\
    \ sizeof(int)*8-1));\n    return res;", "    long sum = 0;\n    long cur = 0;\n\
    \    long min = (n > m) ? n : m;\n    long max = (n > m) ? m : n;\n    for( long\
    \ i = min + 1; i <= max; i++) {\n        cur += i;\n        sum += i;\n    }\n\
    \    if(n>m) {\n        return -1;\n    }\n    Union_std_string_long a = n / sum;\n\
    \    Union_std_string_long b = m / sum;\n    Union_std_string_long avg(a,b);\n\
    \    std::string str = std::to_string(a.f1) + \" \";\n    str.append(std::to_string(b.f1));\n\
    \    return avg;", "    long avg = (n+m)/2;\n    long long int sum = 0;\n    for(int\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return avg == sum/2 ? Union_std_string_long(sum)\
    \ : Union_std_string_long(-1);", "    Union_std_string_long result = Union_std_string_long(n);\n\
    \    if (m > n) result.f1 = -1;\n    else {\n        long sum = n + (m-1) - 2*(result.f1-1);\n\
    \        sum/=2;\n        long mid = (n+m)/2;\n        long sum2 = mid + (m-1)\
    \ - 2*(result.f1-1);\n        sum2/=2;\n        result.f0 = to_string(sum);\n\
    \        result.f1 = to_string(sum2);\n    }\n    return result;", "    if(n==m)\n\
    \        return Union_std_string_long(m);\n    if(n>=m)\n        return Union_std_string_long(-1);\n\
    \    int i = static_cast<int>(n);\n    int j = static_cast<int>(m);\n    int t\
    \ = static_cast<int>(std::min(n, m));\n    long long int k = ((t-i)+j);\n    long\
    \ long int x = ((t-i)+j);\n    long long int y = ((t-1-i)+j);\n    long long int\
    \ z = ((t-i-1)+j);\n    long long int u = x+y+z+k;\n    std::string s1 = std::to_string(t);\n\
    \    std::string s2 = std::to_string(k);\n    std::string s3 = std::to_string(x);\n\
    \    std::string s4 = std::to_string(x);\n    std::string s5 = std::to_string(y);\n\
    \    std::string s6 = std::to_string(y);\n    std::string s7 = std::to_string(z);\n\
    \    std::string s8 = std::to_string(u);\n    std::string s9 = std::to_string(t);\n\
    \    std::string s10 = std::to_string(i);\n    std::string s11 = std::to_string(i);\n\
    \    std::string s12 = std::to_string(j);\n    std::string s13 = std::to_string(k);\n\
    \    std::string s14 = std::to_string(i);\n    std::string s15 = std::to_string(j);\n\
    \    std::string s16 = std::to_string(x);\n    std::string s17 = std::to_string(x);\n\
    \    std::string s18 = std::to_string(t);\n    std::string s19 = std::to_string(x);\n\
    \    std::string s20 = std::to_string(t);\n    std::string s21 = std::to_string(i);\n\
    \    std::string s22 = std::to_string(i);\n    std::string s23 = std::to_string(j);\n\
    \    std::string s24 = std::to_string(j);\n    std::string s25 = std::to_string(i);\n\
    \    std::string s26 = std::to_string(i);\n    std::string s27 = std::to_string(x);\n\
    \    std::string s28 = std::to_string(t);\n    std::string s29 = std::to_string(x);\n\
    \    std::string s30 = std::to_string(t);\n    std::string s31 = std::to_string(i);\n\
    \    std::string s32 = std::to_string(i);\n    std::string s33 = std::to_string(j);\n\
    \    std::string s34 = std::to_string(j);\n    std::string s35 = std::to_string(i);\n\
    \    std::string s36 = std::to_string(i);\n    std::string s37 = std::to_string(x);\n\
    \    std::string s38 = std::to_string(t);\n    std::string s39 = std::to_string(x);\n\
    \    std::string s40 = std::to_string(t);\n    std::string s41 = std::to_string(i);\n\
    \    std::string s42 = std::to_string(i);\n    std::string s43 = std::", "   \
    \ Union_std_string_long u1(n);\n    Union_std_string_long u2(m);\n    assert(u1.f0\
    \ <= u2.f0);\n    if(n>=m) {\n        return -1;\n    }\n    return u1.f0/(u1.f1+u2.f1)*u2.f1;",
  "    assert(n >= 0 && m >= 0 && n == m);\n    Union_std_string_long u;\n    if (n\
    \ <= m)\n        u.f0 = std::to_string(n);\n    else {\n        long r = n;\n\
    \        long m = m;\n        if (m > n) {\n            m = n;\n        }\n  \
    \      while (m >= r / 2)\n            r /= 2;\n        std::cout<<\"m=\"<<m<<\"\
    \ n=\"<<n<<\" r=\"<<r<<\" m=\"<<m<<std::endl;\n        if (m < n) {\n        \
    \    u.f1 = m + 1;\n        }\n        else {\n            u.f0 = m * 2 + 1;\n\
    \        }\n    }\n    return u;", "    if (n < m) {\n        return -1;\n   \
    \ }\n    long x = n + m;\n    long y = ((x + n - 1) / n);\n    long z = (x / m);\n\
    \    Union_std_string_long us = Union_std_string_long(y);\n    us = Union_std_string_long(z);\n\
    \    return us;", "    long n1 = n;\n    long m1 = m;\n    if(n1 > m){\n     \
    \   return -1;\n    }\n    long n2 = n%10;\n    long m2 = m%10;\n    if(m2 !=\
    \ 0){\n        long ans = (n2+m2)*pow(2,sizeof(long)*8-1);\n        ans /= 10;\n\
    \        return Union_std_string_long(ans);\n    }\n    long n3 = n/10;\n    long\
    \ m3 = m/10;\n    if(n3 == m3){\n        long ans = (n3+m3)*pow(2,sizeof(long)*8-1);\n\
    \        ans /= 10;\n        return Union_std_string_long(ans);\n    }\n    if(m3\
    \ == 0){\n        return Union_std_string_long(n1);\n    }\n    return -1;", " \
    \   if (n >= m) {\n        return Union_std_string_long(-1);\n    }\n    double\
    \ avg = ((double)n + (double)m)/2.0;\n    return Union_std_string_long(avg % 2);",
  "    assert( n >= 0 && m >= 0 && n < m );\n    union{\n        std::string f0;\n\
    \        long f1;\n    } u;\n    std::string bin = to_bits(n);\n    std::string\
    \ bin1 = to_bits(m);\n    for(long i = bin.size() - 1; i >= 0; i--){\n       \
    \ bin1[i]++;\n        if(bin1[i] == 10){\n            u.f1 += 1;\n        }else{\n\
    \            u.f0 += bin[i];\n            break;\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = u.f1.size() - 1; i >= 0; i--){\n        sum += u.f1.at(i);\n\
    \    }\n    long avg = (sum / u.f1);\n    std::string str = to_bits(avg);\n  \
    \  long final = str.size() + bin1.size() - bin.size();\n    return Union_std_string_long(str,final);",
  "    Union_std_string_long u(n);\n    if(m > n){\n        return -1;\n    }\n  \
    \  for(int i=n; i<=m; i++){\n        u.f1 += i;\n    }\n    u.f1 = round(u.f1/n);\n\
    \    \n    return u;", "    assert(n >= 0 && m >= 0);\n    long long sum = 0;\n\
    \    for (long i = n; i < m; ++i) {\n        sum += i;\n    }\n    long long avg\
    \ = sum / 2;\n    long long mod = avg % 10;\n    return mod > 0 ? Union_std_string_long(avg)\
    \ : Union_std_string_long(-avg);", "    if(n>m) return -1;\n    long sum = 0;\n\
    \    long temp = 0;\n    long cnt = 0;\n    long sumCnt = 0;\n    long start =\
    \ 1;\n    if(n>0 && m>0){\n        cnt = (n - m) + 1;\n        temp = cnt - 1;\n\
    \        start = temp + 1;\n        sum += m;\n        sumCnt = temp;\n    }\n\
    \    Union_std_string_long avg(sum/sumCnt);\n    return avg;", "    if (m > n)\
    \ return -1;\n    long avg = n + m / 2;\n    if (avg < n) return -1;\n    long\
    \ res = ((avg - n) * (long)pow(2.0, ceil(log2(abs(avg - n)))))\n        / (long)pow(2.0,\
    \ ceil(log2(abs(avg - m)))), ans;\n    if (res > 2147483647) ans = -1;\n    return\
    \ ans;", "    if (n <= m){\n        return Union_std_string_long(std::string());\n\
    \    }\n    long avg = (n + m) / 2;\n    Union_std_string_long res = Union_std_string_long(std::to_string(avg));\n\
    \    long remainder = n % avg;\n    std::string binary = res.f0 + ((res.f1 & 1)\
    \ == 1 ? \"1\" : \"0\") + remainder;\n    return Union_std_string_long(binary);",
  "    Union_std_string_long u(n, 0);\n    long sum = 0;\n    long count = 1;\n  \
    \  for(int i = n;i<=m;i++){\n        sum += i;\n        count++;\n    }\n    long\
    \ average = sum/count;\n    union Union_std_string_long f1, u2;\n    u2 = average;\n\
    \    f1.f0 = std::to_string(average);\n    if(f1 == u2){\n        return -1;\n\
    \    }\n    if(f1.f0 > u2.f0){\n        return -1;\n    }\n    return f1.f0;",
  "    if (n > m) {\n        throw std::invalid_argument(\"n must be less than m\"\
    );\n    }\n    if (n <= 0) {\n        return Union_std_string_long();\n    }\n\
    \    if (m <= n) {\n        return Union_std_string_long(n);\n    }\n    if (m\
    \ > std::numeric_limits<long>::max()) {\n        throw std::overflow_error(\"\
    n must be less than 2^63 - 1\");\n    }\n    long avg_sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        avg_sum += i;\n    }\n    avg_sum /= static_cast<double>(n\
    \ + m - 1);\n    auto avg_string_long = std::to_string(avg_sum);\n    auto avg_long_long\
    \ = std::stol(avg_string_long);\n    return Union_std_string_long(avg_long_long);",
  "  assert(n >= 0 && m >= 0);\n  \n  if (m == 0)\n    return Union_std_string_long(n);\n\
    \  \n  long n_remain = n - m;\n  long m_remain = m - n;\n  long n_div_m = n /\
    \ m;\n  long m_div_n = m / n;\n  long n_div_m_remain = n_div_m * m_remain;\n \
    \ long m_div_n_remain = m_div_n * n_remain;\n  long n_div_m_remain = n_div_m *\
    \ m_remain;\n  long m_div_n_remain = m_div_n * n_remain;\n  \n  long m_div_n_remain2\
    \ = m_div_n_remain * m_remain;\n  long m_div_n_remain3 = m_div_n_remain2 * m_remain;\n\
    \  \n  if (n_div_m * m_remain == 0 && m_div_n_remain == 0)\n    return Union_std_string_long(m);\n\
    \  \n  Union_std_string_long avg_remain = Union_std_string_long(n_div_m * m_remain);\n\
    \  Union_std_string_long avg_rest = Union_std_string_long(m_div_n_remain);\n \
    \ Union_std_string_long avg_rest2 = Union_std_string_long(m_div_n_remain2);\n\
    \  Union_std_string_long avg_rest3 = Union_std_string_long(m_div_n_remain3);\n\
    \  \n  Union_std_string_long avg = avg_remain + avg_rest + avg_rest2 + avg_rest3;\n\
    \  return avg;"]
stop_tokens:
- "\n}"
