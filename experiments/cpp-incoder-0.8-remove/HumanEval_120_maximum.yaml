name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1.\
  \ The length of the array will be in the range of [1, 1000].\n// 2. The elements\
  \ in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\n\
  std::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
  \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
  \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
  \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
  \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
  \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15,\
  \ (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
  \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
  \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
  \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
  }\n"
completions: ["  std::sort(arr.begin(), arr.end());\n  std::vector<long> ret(k);\n\
    \  for (long i = 0, j = 0; i < arr.size(); i++) {\n    if (j < k) {\n      ret[j]\
    \ = arr[i];\n      j++;\n    } else {\n      if (arr[i] > ret[j - 1])\n      \
    \  j--;\n    }\n  }\n  return ret;", "    assert(k <= arr.size());\n    // Initialize\
    \ result array with the length of the array\n    std::vector<long> res(arr.size());\n\
    \    // Initialize maximum array with the minimum value possible\n    std::vector<long>\
    \ max(arr.size(), std::numeric_limits<long>::max());\n    // Initialize a vector\
    \ used to keep track of current max array\n    std::vector<long> temp(arr.size());\n\
    \    \n    // For every element in max array update the result array\n    for(int\
    \ i=0; i < arr.size(); i++) {\n        max[i] = std::max(arr[i], max[i]);\n  \
    \      temp[i] = max[i];\n    }\n    \n    // For every element in max array subtract\
    \ it from the max array and update it\n    // if it is greater than result array\n\
    \    for(int i=0; i < arr.size(); i++) {\n        if(max[i] > res[i]) {\n    \
    \        res[i] = temp[i] - max[i];\n        }\n    }\n    \n    // If the length\
    \ of the result array is equal to k, return the result array\n    // otherwise\
    \ return an empty array\n    return res.size() == k ? res : {};", "    assert(arr.size()\
    \ <= 1000);\n    assert(k <= arr.size());\n    std::vector<long> ans(arr.size());\n\
    \    long max = arr[0];\n    for (auto i : arr) {\n        if (i > max) {\n  \
    \          ans.clear();\n            ans.push_back(max);\n            max = i;\n\
    \        } else if (i < max) {\n            ans.clear();\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ret;\n    \n    long\
    \ largest = arr[0];\n    \n    for(long i = 1; i < k; i++){\n        if(arr[i]\
    \ > largest){\n            largest = arr[i];\n        }\n    }\n    ret.push_back(largest);\n\
    \    \n    for(long i = 0; i < k; i++){\n        if(arr[i] > largest){\n     \
    \       ret.push_back(largest);\n            largest = arr[i];\n        }\n  \
    \      else{\n            largest = max(arr[i], largest);\n        }\n    }\n\
    \    \n    return ret;", "    assert(arr.size() >= k);\n    std::vector<long>\
    \ result;\n    long i = 0, j = 0;\n    for (; i < k; i++)\n        result[i] =\
    \ arr[i];\n    for ( ; i < arr.size(); i++) {\n        j = i;\n        while (j\
    \ < k && arr[j] >= arr[i]) j++;\n        if (j != i) {\n            long tmp =\
    \ result[i];\n            result[i] = result[j];\n            result[j] = tmp;\n\
    \        }\n    }\n    for ( ; i < k; i++) result[i] = arr[i];\n    return result;",
  "    long ans = arr[0];\n    // Sort arr in descending order.\n    std::sort(arr.begin(),\
    \ arr.end(), \n              [&](long a, long b){ return b < a; });\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > ans) {\n            ans = arr[i];\n\
    \        }\n    }\n    std::vector<long> sol;\n    sol.push_back(ans);\n    \n\
    \    // Traverse the array from right to left, comparing each element with the\
    \ \n    // maximum of its left and right neighbours. Stop when the maximum of\
    \ the \n    // left and right neighbours is greater than the current maximum.\n\
    \    long idx = 0;\n    long max = arr[0];\n    long max_idx = 0;\n    for(long\
    \ i = k - 1; i >= 0; i--) {\n        if(max < arr[i]) {\n            idx = i;\n\
    \            max = arr[i];\n        }\n    }\n    while(idx != 0) {\n        if(arr[idx]\
    \ > max) {\n            sol.push_back(arr[idx]);\n            idx = idx-1;\n \
    \       }\n        else {\n            idx = idx-1;\n        }\n    }\n    return\
    \ sol;", "    // Your code here\n    sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ res;\n    res.reserve(k);\n    long cnt = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        cnt = std::max(cnt, arr[i]);\n        res.push_back(cnt);\n\
    \    }\n    return res;", "     assert(k <= arr.size());\n     std::vector<long>\
    \ res;\n     std::vector<long> aux(arr.begin(), arr.begin() + k);\n     std::partial_sort(aux.begin(),\
    \ aux.end(), aux.begin() + k, greater<long>());\n     for(auto i : aux)\n    \
    \     res.push_back(i);\n     return res;", '  // Your code here', "\tstd::vector<long>\
    \ result;\n\tresult.push_back(arr[0]);\n\tfor(long i = 1; i < k; i++) {\n\t\t\
    if(arr[i] > arr[i-1]) {\n\t\t\tlong last = result[i-1];\n\t\t\tresult.push_back(last);\n\
    \t\t\tresult.push_back(arr[i]);\n\t\t}\n\t}\n\treturn result;", "    long maxCount\
    \ = 0;\n    long index = 0;\n    std::vector<long> vec;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        long tmpCount = arr[i];\n        if (tmpCount\
    \ > maxCount) {\n            maxCount = tmpCount;\n        }\n    }\n    int size\
    \ = (int)k;\n    for (int i = 0; i < maxCount; i++) {\n        if (arr.size()\
    \ <= i) {\n            break;\n        }\n        index = 0;\n        while ((index\
    \ + size) < arr.size() && arr[index] <= i) {\n            index++;\n        }\n\
    \        vec.push_back(arr[index]);\n    }\n    return vec;", "  int n = arr.size();\n\
    \  assert(k <= n);\n  std::vector<long> res(n);\n  for (int i = 0; i < n; i++)\
    \ {\n    long cur = arr[i];\n    for (int j = 0; j < i; j++) {\n      if (cur\
    \ < arr[j]) {\n        long temp = arr[j];\n        arr[j] = cur;\n        cur\
    \ = temp;\n      }\n    }\n    res[i] = cur;\n  }\n  for (int i = k; i < n; i++)\
    \ {\n    long cur = arr[n-1];\n    for (int j = n-1; j > i; j--) {\n      if (cur\
    \ < arr[j]) {\n        long temp = arr[j];\n        arr[j] = cur;\n        cur\
    \ = temp;\n      }\n    }\n    res[i] = cur;\n  }\n  return res;", "    // write\
    \ your code here\n    std::vector<long> max_arr(k+1, 0);\n    int i = 0, j = 0,\
    \ n = arr.size();\n    for(int i = 0; i < n; i++)\n    {\n        if(max_arr[j]\
    \ >= arr[i])\n        {\n            max_arr[j]++;\n        }\n        else\n\
    \        {\n            if(max_arr[j] == 0)\n            {\n                max_arr[j]\
    \ = 1;\n            }\n            else if(max_arr[j] < arr[i])\n            {\n\
    \                max_arr[j] = 1;\n            }\n            else\n          \
    \  {\n                max_arr[j]++;\n            }\n        }\n        j++;\n\
    \        if((i+1) == n)\n        {\n            break;\n        }\n    }\n   \
    \ return max_arr;", "    // code here\n    std::vector<long> max_k;\n    for (long\
    \ i = 0; i < k; i++) {\n        max_k.push_back(std::max(arr[i], arr[i + k]));\n\
    \    }\n    return max_k;", "    // write your code here\n    if(arr.size()<=k)\n\
    \        k=arr.size();\n    std::vector<long> arr2(k);\n    std::iota(arr2.begin(),\
    \ arr2.end(), 0);\n    std::sort(arr2.begin(), arr2.end(), [&](long a, long b){return\
    \ arr[a]>arr[b];});\n    return arr2;", "    if (k > arr.size()){\n        k=arr.size();\n\
    \    }\n    std::vector<long> res;\n    res.reserve(k);\n    for (int i = 0; i\
    \ < k; ++i){\n        long maxElement = -1;\n        for (int j : arr){\n    \
    \        if (maxElement < j){\n                maxElement = j;\n            }\n\
    \        }\n        res.push_back(maxElement);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    if(arr.size() < k)\n        throw std::invalid_argument(\"\
    k should be less than arr.size()\");\n    \n    long i = 0;\n    std::vector<long>\
    \ max;\n    while(i < k && arr[i] < 0)\n        i++;\n    \n    max.reserve(arr.size()-i);\
    \ \n    for(; i < arr.size(); i++)\n        max.push_back(arr[i]);\n    \n   \
    \ return max;", "    // Your code here\n    std::vector<long> result;\n    result.reserve(k);\n\
    \    long max = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        result.push_back(max);\n    }\n    return result;",
  "  // code here\n    long min=-1000000000;\n    long max=0;\n    long ans=0;\n \
    \   for(long i=0; i<k; i++)\n    {\n        min=max;\n        for(long j=0; j<k;\
    \ j++)\n        {\n            if(arr[j]<min)\n            {\n               \
    \ min=arr[j];\n            }\n        }\n        for(long j=0; j<k; j++)\n   \
    \     {\n            if(arr[j]>max)\n            {\n                max=arr[j];\n\
    \            }\n        }\n        if(max<min)\n        {\n            ans=min;\n\
    \            max=min;\n        }\n        else if(max>min)\n        {\n      \
    \      ans=max;\n            max=max;\n        }\n    }\n    \n    std::vector<long>\
    \ answer;\n    long temp;\n    long last=arr.size();\n    long mid=0;\n    if(arr.size()<k)\n\
    \    {\n        for(int i=arr.size(); i<k; i++)\n        {\n            answer.push_back(arr[i]);\n\
    \        }\n    }\n    else if(arr.size()>k)\n    {\n        for(int i=arr.size();\
    \ i>k; i--)\n        {\n            answer.push_back(arr[i]);\n        }\n   \
    \ }\n    \n    while(mid<last)\n    {\n        temp=answer[mid];\n        for(int\
    \ i=mid;i<last;i++)\n        {\n            if(answer[i]<temp)\n            {\n\
    \                answer[i]=temp;\n            }\n            else\n          \
    \  {\n                break;\n            }\n        }\n        answer.push_back(temp);\n\
    \        mid++;\n    }\n    \n    return answer;", "    // Your code goes here\n\
    \    std::vector<long> res;\n    long ans = 0;\n    for (auto it = arr.begin();\
    \ it != arr.end(); it++) {\n        if (it == arr.begin() || ans < (*it)) {\n\
    \            ans = (*it);\n            while (it != arr.begin() && ans < (*--it))\
    \ {\n                ans = ans + (*it);\n            }\n            it = arr.begin();\n\
    \        }\n        if (it == arr.end() || ans > (*it)) {\n            ans = (*it);\n\
    \            while (it != --arr.end() && ans > (*it)) {\n                ans =\
    \ ans + (*it);\n            }\n            res.push_back((long int) ans);\n  \
    \      }\n    }\n    if (k <= ans) {\n        for (int i = 0; i < (k - ans + 1);\
    \ i++) {\n            res.push_back(ans);\n        }\n    }\n    return res;",
  "  int n = arr.size();\n  assert(k <= n);\n  assert(n >= 1);\n  std::vector<long>\
    \ res;\n  if (k == 1)\n    return res;\n  long l = 1;\n  long r = n;\n  long m\
    \ = n;\n  if (k > n)\n    return res;\n  while (l <= r) {\n    long mid = (l +\
    \ r) / 2;\n    if (arr[mid] >= k) {\n      l = mid + 1;\n    }\n    else {\n \
    \     r = mid;\n    }\n  }\n  res.push_back(arr[l - 1]);\n  while (l > 1) {\n\
    \    long mid = (l - 1) / 2;\n    if (arr[mid] >= k) {\n      l = mid;\n    }\n\
    \    else {\n      res.push_back(arr[mid]);\n      l -= 1;\n    }\n  }\n  res.push_back(arr[0]);\n\
    \  return res;", "    std::vector<long> result;\n    // Write your code here\n\
    \    for(long i=0; i<k; i++){\n        long max_value = arr[0];\n        int idx\
    \ = -1;\n        for(long j=0; j<arr.size(); j++){\n            if(max_value<arr[j]){\n\
    \                max_value = arr[j];\n                idx = j;\n            }\n\
    \        }\n        \n        arr[idx] = arr[k-1];\n        arr[k-1] = max_value;\n\
    \        result.push_back(max_value);\n    }\n    \n    return result;", "   \
    \     sort(arr.begin(), arr.end()); // sort the array\n        long sum = 0;\n\
    \        long count = 0;\n        for (long i = 0; i < k; ++i)\n            sum\
    \ += arr[i];\n        for (long i = k - 1; i >= 0; --i)\n            sum += arr[i];\n\
    \        std::vector<long> ans;\n        while (count < k)\n        {\n      \
    \      if (sum < k)\n            {\n                ans.push_back(arr[count]);\n\
    \                sum += arr[count];\n                count += 1;\n           \
    \ }\n            else\n            {\n                ans.push_back(-1000); //\
    \ all negative numbers are treated as -1000\n                sum -= arr[count];\n\
    \                count += 1;\n            }\n        }\n        return ans;\n\
    \    }\n    int main() {\n        std::ios_base::sync_with_stdio(false);\n   \
    \     cin.tie(NULL);\n        cout.tie(NULL);\n        long long int t;\n    \
    \    std::cin >> t;\n        while (t--) {\n            long long int n;\n   \
    \         std::cin >> n;\n            std::vector<long> arr;\n            for\
    \ (long i = 0; i < n; ++i)\n                std::cin >> arr[i];\n            long\
    \ k;\n            std::cin >> k;\n            std::vector<long> ans = maximum(arr,\
    \ k);\n            for (long i = 0; i < k; ++i)\n                std::cout <<\
    \ ans[i] << std::endl;\n        }\n        return 0;\n    }\n</code>\n<|/ a tags=vector,arrays,algorithm,c++\
    \ |>\n<| a tags=vector,arrays,algorithm,c++ |>\nHere is a solution using unordered_map\
    \ and std::max_element:\n<code>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\
    \nvector<int> max_sum(vector<int> const& arr, long k) {\n  unordered_map<long,\
    \ int> m;\n  m[0] = arr[0];\n  for (int i = 1; i < arr.size(); i++) {\n    m[i]\
    \ = max(m[i-1], arr[i]);\n  }\n\n  vector<int> ans(k);\n  long max_sum = std::max_element(m.begin(),\
    \ m.end())->second;\n  for (long i = 0; i < k; i++) {\n    ans[i] = m[i] > max_sum\
    \ ? m[i] : max_sum;\n  }\n  return ans;", "    int m = arr.size();\n    std::vector<long>\
    \ max;\n    // Your code here\n    sort(arr.begin(), arr.end());\n    \n    //\
    \ Your code here\n    for (long i = 0; i < k; i++) {\n        max.push_back(arr[m-1]);\n\
    \        m--;\n    }\n    return max;", "    std::vector<long> result;\n    if\
    \ (arr.size() > k) k = arr.size();\n    for (long i = 0; i < k; i++) {\n     \
    \   long maxElem = arr[i];\n        for (long j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[j] > maxElem) {\n                maxElem = arr[j];\n\
    \            }\n        }\n        result.push_back(maxElem);\n    }\n    return\
    \ result;", "    // Do not write main() function.\n    // Do not read input, instead\
    \ use the arguments to the function.\n    // Do not print the output, instead\
    \ return values as specified\n    // Still have a doubt. Checkout www.geeksforgeeks.org/\n\
    \    std::vector<long> ans;\n    long long maxVal = 0;\n    long long tempMaxVal\
    \ = 0;\n    long long count = 0;\n    // Write your code here\n    if(arr.size()==1)\n\
    \    {\n        ans.push_back(arr[0]);\n        return ans;\n    }\n    for(int\
    \ i=0;i<arr.size();i++)\n    {\n        tempMaxVal = maxVal;\n        for(int\
    \ j=i;j<arr.size();j++)\n        {\n            if(arr[i]>arr[j])\n          \
    \  {\n                tempMaxVal = maxVal;\n                maxVal = arr[i];\n\
    \            }\n        }\n        if(count>k)\n        {\n            ans.push_back(maxVal);\n\
    \            count--;\n            maxVal = 0;\n            temp = maxVal;\n \
    \       }\n        else\n        {\n            ans.push_back(tempMaxVal);\n \
    \           count++;\n            tempMaxVal = 0;\n            maxVal = maxVal;\n\
    \        }\n    }\n    return ans;", "    if (k == 0)\n        return std::vector{};\n\
    \    auto it = std::max_element(arr.begin(), arr.begin() + k);\n    return std::vector{*it,\
    \ *(std::next(it))};", "    std::sort(arr.begin(), arr.end()); // sort arr\n \
    \   std::vector<long> res(arr.size()); // to store the max value of arr\n    long\
    \ maximum = arr[0]; // maximum will be stored in maximum\n    for (size_t i =\
    \ 0; i < k; i++) {\n        if (arr[i] > maximum) {\n            maximum = arr[i];\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == maximum) {\n            res[i] = arr[i];\n        }\n    }\n    return res;",
  "    long size = arr.size();\n    std::vector<long> maxArray(size + k);\n    //\
    \ initialize maxArray\n    for (long i = 0; i < size; ++i)\n        maxArray[i]\
    \ = arr[i];\n    // get the kth largest number\n    for (long i = k; i < size;\
    \ ++i)\n        maxArray[i] = maxArray[i - 1];\n    // return the k largest numbers\n\
    \    for (long i = 0; i < k; ++i)\n        std::cout << maxArray[i] << \" \";\n\
    \    // return maxArray\n    return maxArray;", "\tassert(arr.size() >= 1);\n\t\
    assert(k <= arr.size());\n\tstd::vector<long> result;\n\tstd::map<long, long>\
    \ m;\n\tfor (long i = 0; i < k; i++)\n\t\tm[i] = arr[i];\n\tfor (long i = 1; i\
    \ < arr.size(); i++) {\n\t\tlong tmp = m[arr[i]];\n\t\tif (m[arr[i]] > m[arr[i\
    \ - 1]])\n\t\t\ttmp = m[arr[i]];\n\t\tresult.push_back(tmp);\n\t\tm[arr[i]] =\
    \ arr[i - 1];\n\t}\n\treturn result;", "    // write your code here\n    return\
    \ std::vector<long>();", "    int n = arr.size();\n    std::vector<long> result(k\
    \ + 1);\n    result[0] = 0;\n    // Loop to find the maximum value of arr\n  \
    \  for (int i = 0; i < n; i++) {\n        result[i + 1] = std::max(result[i],\
    \ arr[i]);\n        if (result[i] != arr[i]) {\n            result[i + 1] = std::max(result[i],\
    \ result[i + 1]);\n        }\n    }\n    // Loop to find k value\n    for (int\
    \ i = 0; i < k; i++) {\n        result[i + k + 1] = std::max(result[i + 1], arr[i\
    \ + k]);\n        if (result[i + k + 1] != arr[i + k]) {\n            result[i\
    \ + k + 1] = std::max(result[i + k + 1], result[i + k + 1]);\n        }\n    }\n\
    \    return result;", "    // code here\n    long mid;\n    std::vector<long>\
    \ result;\n    for(long i = 0;i< arr.size(); ++i){\n        mid = (i + k)/2;\n\
    \        if(arr[mid] > arr[i]){\n            std::swap(arr[mid], arr[i]);\n  \
    \      }\n        if(result.size() == k && arr[mid] > result[mid]){\n        \
    \    result[mid] = arr[mid];\n        }\n    }\n    return result;", "    if(k\
    \ <= 0 || k > arr.size()) {\n        throw std::invalid_argument(\"k must be <=\
    \ len(arr) and <= 1000\");\n    }\n    std::vector<long> res;\n    for(long i\
    \ = 0; i < k; i++) {\n        for(long j = 0; j < arr.size(); j++) {\n       \
    \     if(arr[j] >= arr[j + 1])\n                break;\n        }\n        long\
    \ curMax = arr[j + 1];\n        for(long j = j + 1; j < arr.size(); j++) {\n \
    \           if(arr[j] >= curMax) {\n                curMax = arr[j];\n       \
    \     }\n        }\n        res.push_back(curMax);\n    }\n    return res;", " \
    \   std::vector<long> v;\n    // O(N)\n    for(long i = 0; i != arr.size(); ++i)\
    \ {\n        v.push_back(std::max(arr[i], v[i]));\n    }\n    \n    // O(NlogN)\n\
    \    for(long i = 0; i != k; ++i) {\n        std::nth_element(v.begin(), v.begin()\
    \ + i, v.end());\n    }\n    return v;", "    // write your code here\n    long\
    \ mid = (arr.size() / 2);\n    std::vector<long> maximums;\n    for (long i =\
    \ 0; i < mid; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    for (long\
    \ i = mid; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n   \
    \ }\n    std::cout << \"\\n\";\n    return maximums;", "    std::vector<long>\
    \ result;\n    long max = arr[0];\n    for(long i = 1; i < k; i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n        }\n    }\n    result.push_back(max);\n\
    \    for(long i = 1; i < k; i++){\n        if(arr[i] > arr[i-1]){\n          \
    \  long temp = arr[i-1];\n            arr[i-1] = arr[i];\n            arr[i] =\
    \ temp;\n        }\n    }\n    for(long i = 0; i <= k-1; i++){\n        if(arr[i]\
    \ > arr[i+1])\n            result.push_back(arr[i]);\n    }\n    return result;",
  "    std::vector<long> ans;\n    std::vector<int> pos;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        pos.push_back(i);\n    }\n    sort(pos.begin(), pos.end(), [&arr](int\
    \ i, int j) {\n        return arr[i] > arr[j];\n    });\n    for(int i = 0; i\
    \ < k; i++) {\n        ans.push_back(arr[k - i - 1]);\n    }\n    return ans;",
  "    // write your code here\n    std::vector<long> result;\n    int m = arr.size();\n\
    \    long kmax = 1;\n    long kMin = 1;\n    int n = arr.size();\n    int temp;\n\
    \    long tempk;\n    for (int i = 0; i < n - 1; i++) {\n        temp = arr[i];\n\
    \        if (k > 0) {\n            tempk = kmax;\n            for (int j = 1;\
    \ j < m - i; j++) {\n                tempk = max(tempk, arr[j]);\n           \
    \ }\n        }\n        if (tempk < temp) {\n            result.push_back(temp);\n\
    \        }\n        kmax = kmax * temp;\n    }\n    if (k > 0) {\n        tempk\
    \ = kmax;\n        for (int j = 0; j < m; j++) {\n            tempk = max(tempk,\
    \ arr[j]);\n        }\n        result.push_back(temp);\n        kmax = kmax *\
    \ temp;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        temp = arr[i];\n\
    \        if (k > 0) {\n            tempk = kmin;\n            for (int j = 1;\
    \ j < m - i; j++) {\n                tempk = min(tempk, arr[j]);\n           \
    \ }\n        }\n        if (tempk < temp) {\n            result.push_back(temp);\n\
    \        }\n        kmin = kmin * temp;\n    }\n    for (int i = 0; i < n - 1;\
    \ i++) {\n        temp = arr[i];\n        if (k > 0) {\n            tempk = kmax;\n\
    \            for (int j = 1; j < m - i; j++) {\n                tempk = max(tempk,\
    \ arr[j]);\n            }\n        }\n        if (tempk < temp) {\n          \
    \  result.push_back(temp);\n        }\n        kmax = kmax * temp;\n    }\n  \
    \  return result;", "    assert(arr.size() > 0 && arr[0] >= -1000 && arr[0] <=\
    \ 1000 && k <= arr.size());\n    std::vector<long> result;\n    if (arr.size()\
    \ == k) return arr;\n    std::sort(arr.begin(), arr.end());\n    result.insert(result.end(),\
    \ arr.begin() + k, arr.end());\n    return result;", "    long max = arr[0];\n\
    \    long index = 0;\n    long count = 0;\n    while(index<k){\n        if(arr[index]>max){\n\
    \            max = arr[index];\n        }\n        index++;\n    }\n    index\
    \ = 0;\n    while(index<k){\n        if(arr[index]<=max){\n            count++;\n\
    \        }\n        index++;\n    }\n    \n    std::vector<long> ans;\n    ans.reserve(k);\n\
    \    while(count!=k){\n        ans.push_back(max);\n        count--;\n       \
    \ max--;\n    }\n    return ans;", "    if (k < 1 || k > arr.size()) {\n     \
    \   throw std::invalid_argument(\"k should be in range [1, \" << arr.size() <<\
    \ \"]\");\n    }\n    std::vector<long> ans;\n    long maxval = arr[0];\n    long\
    \ currval = arr[0];\n    for (auto it = arr.begin(); it < arr.end(); ++it) {\n\
    \        currval = std::max(currval, *it);\n        if (currval > maxval) {\n\
    \            currval = maxval;\n            maxval = maxval * (*it);\n       \
    \ }\n        if (currval == maxval) {\n            ans.push_back(currval);\n \
    \           currval = arr[0];\n        }\n        if (currval == maxval && it\
    \ + 1 != arr.end()) {\n            maxval = maxval * (*it);\n        }\n    }\n\
    \    return ans;", "    std::vector<long> ans;\n    long size = arr.size();\n\
    \    long max_size = arr.size();\n    long last_index = arr.size() - 1;\n    //\
    \ if k is smaller, then return empty list\n    if (k <= size)\n        return\
    \ ans;\n    // if k is large, then find the k largest elements recursively\n \
    \   if (k > size)\n        return maximum(arr, k);\n    if (k == 0)\n        return\
    \ ans;\n    long mid = size / 2;\n    long max_element = arr[mid];\n    long i;\n\
    \    for (i = 0; i <= mid; i++) {\n        if (arr[i] > max_element) {\n     \
    \       ans.clear();\n            ans.push_back(arr[i]);\n            max_size\
    \ = i;\n            max_element = arr[i];\n        }\n    }\n    long next_max_size\
    \ = max_size;\n    long last_element = arr[last_index];\n    for (long j = max_size\
    \ + k; j <= last_index; j++) {\n        if (arr[j] > max_element) {\n        \
    \    ans.clear();\n            ans.push_back(arr[j]);\n            max_size =\
    \ j;\n            max_element = arr[j];\n        }\n    }\n    return maximum(arr,\
    \ k);", "    long ans = 0;\n    // We use two pointers, one will find the max\
    \ number and the second will \n    // find the k numbers in array that have the\
    \ max number\n    long long max = arr[0], pos = 0, pos_incr = 1, incr = 1;\n \
    \   for (long i = 0; i + 1 < arr.size(); i++) {\n        if (arr[i] > max) {\n\
    \            pos_incr = pos;\n            max = arr[i];\n        }\n        if\
    \ (k > incr) {\n            break;\n        }\n        pos += incr;\n        incr\
    \ += pos_incr;\n    }\n    for (long i = 0; i + 1 < arr.size(); i++) {\n     \
    \   if (arr[i] == max) {\n            ans += (pos - pos_incr) + 1;\n        }\n\
    \    }\n    return ans;", "\tstd::vector<long> ans;\n\tans.reserve(k);\n\n\tfor\
    \ (long i = 0; i < k; i++) {\n\t\tlong cur = arr[i];\n\t\tif (std::find(ans.begin(),\
    \ ans.end(), cur) == ans.end()) ans.push_back(cur);\n\t}\n\n\treturn ans;", " \
    \   // Your code here\n    long ans = 0;\n    long cur = arr[0];\n    long max\
    \ = 0;\n    long max_index = 0;\n\n    for (int i = 0; i < arr.size() - 1; i++)\
    \ {\n        long curr = arr[i + 1];\n\n        if (max < curr) {\n          \
    \  max = curr;\n            max_index = i + 1;\n        }\n    }\n    \n    long\
    \ temp = 0;\n    long index = 0;\n\n    if (max_index >= arr.size()) {\n     \
    \   return arr;\n    }\n\n    for (long i = max_index + 1; i < arr.size(); i++)\
    \ {\n        temp = arr[i];\n        temp = max(temp, curr);\n        arr[i] =\
    \ temp;\n        if (temp > curr) {\n            ans = max(ans, k - 1);\n    \
    \    }\n        if (temp == curr) {\n            index++;\n        }\n       \
    \ curr = arr[i + 1];\n    }\n    return arr;", "    std::vector<long> ans;\n \
    \   ans.reserve(arr.size());\n    \n    for (int i=0; i<k; ++i) {\n        long\
    \ maxElement = arr[0];\n        for (int j=0; j<arr.size(); ++j) {\n         \
    \   if (arr[j] > maxElement) {\n                maxElement = arr[j];\n       \
    \     }\n        }\n        ans.push_back(maxElement);\n    }\n    \n    return\
    \ ans;", "    long long int maxIndex = 0;\n    for (long long int i = 0; i < k;\
    \ i++) {\n        maxIndex = (arr[i] >= arr[maxIndex] ? arr[i] : arr[maxIndex]);\n\
    \    }\n    std::vector<long> result;\n    for (long long int i = 0; i < k; i++)\
    \ {\n        result.push_back(arr[maxIndex]);\n        maxIndex = (arr[i] >= arr[maxIndex]\
    \ ? arr[i] : arr[maxIndex]);\n    }\n    return result;", "    // code here\n\
    \    long n = arr.size();\n    std::priority_queue<long> pq;\n    std::vector<long>\
    \ max_arr(n);\n    pq.push(arr[0]);\n    max_arr[0] = arr[0];\n    for(long i\
    \ = 1; i < n; i++) {\n        pq.push(arr[i]);\n        if(arr[i] > max_arr[pq.top()])\n\
    \            max_arr[pq.top()] = arr[i];\n        while(k > 0) {\n           \
    \ if(pq.top() > max_arr[k-1])\n                k--;\n            else\n      \
    \          break;\n        }\n    }\n    return max_arr;", "    // code here\n\
    \    long sum = 0;\n    long maximumSum = arr[0];\n    for (int i = 0; i < k;\
    \ i++) {\n        maximumSum = max(maximumSum + arr[i], arr[i]);\n        sum\
    \ += arr[i];\n    }\n    std::vector<long> arr2 = {sum};\n    return arr2;", " \
    \   // Write your code here.\n    long ans[1000];\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j])\
    \ {\n                long temp = arr[i];\n                arr[i] = arr[j];\n \
    \               arr[j] = temp;\n            }\n        }\n        ans[i] = arr[i];\n\
    \    }\n    long long m = ans[0];\n    long long n = ans[1];\n    long long m_index\
    \ = k;\n    long long n_index = k;\n    for(int i = 2; i < arr.size(); i++) {\n\
    \        if(ans[i] > m) {\n            m = ans[i];\n            m_index = i;\n\
    \        }\n        if(ans[i] < n) {\n            n = ans[i];\n            n_index\
    \ = i;\n        }\n    }\n    std::vector<long> v;\n    for(int i = k - 1; i >=\
    \ 0; i--) {\n        if(i >= m_index && i <= n_index) {\n            v.push_back(ans[i]);\n\
    \        }\n    }\n    return v;", "  // write your code here\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::vector<long> max_arr(arr);\n  long max_val = arr[0];\n \
    \ std::max_element(max_arr.begin(), max_arr.end(), [&](long a, long b) -> bool\
    \ {\n    return b < a;\n  });\n  return max_arr;", "    // write your code here\n\
    \    long l=arr.size(),m=std::min(l,k);\n    std::vector<long> res;\n    for(long\
    \ i=0;i<m;i++)\n    {\n        long max=0,cur=0;\n        for(long j=0;j<l;j++)\n\
    \        {\n            if(arr[j]>max)\n            {\n                max=arr[j];\n\
    \                cur=j;\n            }\n        }\n        res.push_back(max);\n\
    \        arr.erase(arr.begin()+cur);\n    }\n    return res;", "    // write your\
    \ code here\n    if (arr.size() == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> nums(k);\n    long big = arr[0];\n    long ans =\
    \ 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > big) {\n\
    \            nums[0] = arr[i];\n            nums[1] = big;\n            ans =\
    \ 2;\n        }\n        if (arr[i] > big) {\n            if (nums[2] > big) {\n\
    \                nums[2] = arr[i];\n            }\n        }\n    }\n    return\
    \ nums;", "    \n    // Do not write main() function.\n    // Do not read input,\
    \ instead use the arguments to the function.\n    // Do not print the output,\
    \ instead return values as specified\n    // by problem statement.\n    // You\
    \ can only access the elements of the array as arr[i] where 0 <= i < k\n\n   \
    \ // Write your code here\n    \n    long long max_num = 0;\n    for (int i =\
    \ 0; i < k; i++) {\n        max_num = std::max(arr[i], max_num);\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(max_num);\n    for(int i = k; i < arr.size();\
    \ i++){\n        max_num = std::max(arr[i], max_num);\n        result.push_back(max_num);\n\
    \    }\n    return result;", "        // code here\n        return {};", "   \
    \ \n    std::vector<long> max_arr(arr.size()+1);\n    long max = 0;\n    \n  \
    \  for (size_t i = 0; i < arr.size(); ++i) {\n        max_arr[i] = std::max(arr[i],\
    \ arr[i+1]);\n        max = std::max(max, max_arr[i]);\n    }\n    \n    long\
    \ i = arr.size();\n    while (i > 0 && max != 0) {\n        max_arr[i-1] = max_arr[i-1]\
    \ / max;\n        i = i - 1;\n        max = max_arr[i-1];\n    }\n    \n    size_t\
    \ i = 0;\n    for (; i < k; ++i) {\n        max_arr[i] = max_arr[i+1];\n    }\n\
    \    \n    return max_arr;", '    // Your code goes here', "    // Your code goes\
    \ here\n    std::vector<long> result;\n    for(size_t i=0;i<arr.size();++i){\n\
    \        auto max=std::max_element(arr.begin(),arr.begin()+i);\n        result.push_back(max);\n\
    \    }\n    std::sort(result.begin(),result.end());\n    while(result.size()<k){\n\
    \        for(long l=0;l<result.size();++l){\n            if(l<result.size()-1){\n\
    \                if(result[l]>result[l+1]){\n                    long t=result[l];\n\
    \                    result[l]=result[l+1];\n                    result[l+1]=t;\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  \n    // Do not write main() function.\n    // Do not read input, instead use\
    \ the arguments to the function.\n    // Do not print the output, instead return\
    \ values as specified\n    // by problem statement.\n    \n    long max = 0;\n\
    \    long maxIndex = 0;\n    for (long i = 0; i < k; i++)\n    {\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            maxIndex = i;\n  \
    \      }\n    }\n\n    std::vector<long> newArr(maxIndex, 0);\n    for (long i\
    \ = 0; i < k; i++)\n    {\n        if (arr[i] != max)\n        {\n           \
    \ newArr[i] = max;\n        }\n    }\n    return newArr;", "    long sum = 0;\n\
    \    long curMax = 0;\n    std::vector<long> maxs(k + 1, -1);\n    for (auto i\
    \ : arr) {\n        sum += i;\n        if (curMax < sum) {\n            curMax\
    \ = sum;\n            maxs[curMax + 1] = -(curMax + 1);\n        }\n    }\n  \
    \  std::stable_sort(maxs.begin(), maxs.end());\n    return maxs;", "    // write\
    \ your code here\n    std::vector<long> ans;\n    long long total = 0;\n    for(int\
    \ i = 0;i<arr.size()-1;i++) {\n        total += arr[i];\n    }\n    long long\
    \ maxSum = total / k;\n    for(int i = 0;i<arr.size();i++) {\n        if(maxSum\
    \ - arr[i] >= 0) {\n            long long temp = maxSum - arr[i];\n          \
    \  if(temp < ans.size()) {\n                ans.push_back(temp);\n           \
    \ }\n        }\n    }\n    return ans;", "    long n = arr.size();\n    long m\
    \ = std::min(n, k);\n    long res = 0;\n    std::vector<long> temp;\n    long\
    \ l = 0; // index of maximum element\n    long r = 0; // index of minimum element\n\
    \    long i = 0; // index of current element\n    while (i < m) {\n        if\
    \ (arr[i] > arr[r]) {\n            temp[temp.size() - 1] = arr[i];\n         \
    \   ++r;\n        }\n        else if (arr[i] < arr[r]) {\n            temp[temp.size()\
    \ - 1] = arr[i];\n            ++l;\n        }\n        else {\n            if\
    \ (temp.size() == k)\n                break;\n            temp[temp.size() - 1]\
    \ = arr[i];\n            ++i;\n        }\n    }\n    while (l < r) {\n       \
    \ if (temp.size() <= k) {\n            if (arr[i] > arr[r])\n                temp[temp.size()\
    \ - 1] = arr[i];\n            ++r;\n        }\n        else if (arr[i] < arr[r])\
    \ {\n            temp[temp.size() - 1] = arr[i];\n            ++l;\n        }\n\
    \        else {\n            if (temp.size() == k)\n                break;\n \
    \           temp[temp.size() - 1] = arr[i];\n            ++i;\n        }\n   \
    \ }\n    std::vector<long> ans;\n    ans.clear();\n    for (long i = 0; i < k;\
    \ ++i) {\n        ans.push_back(temp[i]);\n    }\n    return ans;", "    std::vector<long>\
    \ result(arr.size());\n    std::partial_sort(arr.begin(), arr.end(), result.begin(),\
    \ \n                      [&](long a, long b) { return b < a; });\n    long left\
    \ = 0;\n    long right = 0;\n    for(long i = 0; i < k; i++) {\n        left =\
    \ result[result.size() - 1];\n        right = result[0];\n        result.pop_back();\n\
    \        if(right > arr[left]) result.push_back(arr[left]);\n        if(left >\
    \ arr[right]) result.push_back(arr[right]);\n    }\n    return result;", "   \
    \ if (k < 1 || k > arr.size()) return {};\n    std::vector<long> maxK;\n    maxK.reserve(k);\n\
    \    for (int i = 0; i < arr.size() && i < k; ++i) {\n        maxK.push_back(std::max(arr[i],\
    \ maxK[i]));\n    }\n    maxK.shrink_to_fit();\n    return maxK;", "    std::vector<long>\
    \ ans;\n    long i = arr[0];\n    long largest = i;\n    for(long j = 0; j < arr.size();\
    \ ++j){\n        if(j == 0) continue;\n        if(arr[j] > largest && j > 0){\n\
    \            largest = arr[j];\n        }\n    }\n    if(k <= arr.size()){\n \
    \       for(long j = 0; j < arr.size() - k; ++j){\n            ans.push_back(arr[j]);\n\
    \        }\n        ans.push_back(largest);\n        return ans;\n    }\n    long\
    \ ans = 0;\n    while(k <= arr.size()){\n        for(long j = 0; j < arr.size()\
    \ - k; ++j){\n            if(arr[j] > largest){\n                ans = arr[j];\n\
    \            }\n        }\n        ans = arr[k] + ans;\n        k++;\n    }\n\
    \    return ans;", "    long n = arr.size();\n    if(k > n || k < 0)\n       \
    \ throw std::runtime_error(\"Invalid inputs\");\n    std::vector<long> res;\n\
    \    for(long i = 0; i < k; i++) {\n        long max = std::numeric_limits<long>::min();\n\
    \        long min = 0;\n        for(long j = i; j < n; j++) {\n            if(arr[j]\
    \ > max) {\n                max = arr[j];\n            }\n            if(arr[j]\
    \ < min) {\n                min = arr[j];\n            }\n        }\n        res.push_back(max);\n\
    \        res.push_back(min);\n    }\n    return res;", "    \n    int l = arr.size();\n\
    \    long max = INT_MIN;\n    std::vector<long> v;\n    \n    for(int i = 0; i\
    \ < l; i++)\n    {\n        if(arr[i] >= max)\n        {\n            max = arr[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < l; i++)\n    {\n        if(arr[i]\
    \ >= max)\n        {\n            v.push_back(arr[i]);\n        }\n    }\n   \
    \ \n    int rem = k%v.size();\n    if(rem == 0)\n    {\n        std::sort(v.begin(),\
    \ v.end());\n        return v;\n    }\n    \n    for(int i = 0; i < l; i++)\n\
    \    {\n        if(arr[i] >= max)\n        {\n            if(v.size() == k)\n\
    \            {\n                return v;\n            }\n            else\n \
    \           {\n                v.push_back(arr[i]);\n            }\n        }\n\
    \    }\n    \n    return v;", "    // Write your code here\n    std::vector<long>\
    \ max;\n    max.resize(arr.size());\n    for (long i = 0; i < max.size(); i++)\
    \ {\n        max[i] = std::numeric_limits<long>::max();\n    }\n    int i = 0;\n\
    \    for (long val : arr) {\n        if (val > max[i]) {\n            max[i] =\
    \ val;\n            i++;\n        }\n    }\n    std::vector<long> res = max;\n\
    \    sort(res.begin(), res.end());\n    return res;", "    if (arr.size() < k)\n\
    \        std::cerr << \"Input array size must be greater than k\\n\";\n    else\
    \ if (k > arr.size())\n        std::cerr << \"Input k must be less than the size\
    \ of input array\\n\";\n    std::vector<long> max_arr(k);\n    max_arr[0] = arr[0];\n\
    \    long max_num = arr[0];\n    for (long i = 1; i < k; ++i) {\n        if (max_num\
    \ > arr[i])\n            max_num = arr[i];\n    }\n    for (auto el : arr)\n \
    \       if (el > max_num) {\n            max_num = el;\n            max_arr[i]\
    \ = el;\n        }\n    return max_arr;", "    // code here\n    long result[k];\n\
    \    long maxValue = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > maxValue) {\n            maxValue = arr[i];\n        }\n        if(k > 0)\
    \ {\n            while (maxValue > result[k-1]) {\n                result[k] =\
    \ maxValue;\n                k--;\n            }\n        }\n    }\n    \n   \
    \ std::vector<long> resultList;\n    long len = arr.size();\n    for(int i = 0;\
    \ i < k; i++) {\n        resultList.push_back(arr[(i*len)/k]);\n    }\n    return\
    \ resultList;", "  assert(k <= arr.size() && \"Invalid input\");\n  std::vector<long>\
    \ result;\n  long ans = 0;\n  for (int i = 0; i < k; i++) {\n    ans = max(ans,\
    \ arr[i]);\n    result.push_back(ans);\n  }\n  return result;", "    assert(arr.size()\
    \ == 0 || arr.size() <= 1000);\n    assert(k <= arr.size());\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    std::vector<long> ans(k);\n    for (long\
    \ i = 0; i < k; i++) {\n        ans[i] = arr[i];\n    }\n    return ans;", " \
    \   if (arr.size() <= k || k <= 0)\n        return {};\n    auto lt = [](const\
    \ long a, const long b) {\n        return a < b;\n    };\n    auto gt = [](const\
    \ long a, const long b) {\n        return a > b;\n    };\n    std::vector<long>\
    \ ans;\n    long ans_pos = 0;\n    for (long i = 0, j = 0; i < arr.size() && j\
    \ < k;) {\n        if (lt(arr[i], arr[j])) {\n            ans.emplace_back(arr[i]);\n\
    \            i += 1;\n        } else {\n            ans.emplace_back(arr[j]);\n\
    \            j += 1;\n        }\n    }\n    for (; i < arr.size(); i++) {\n  \
    \      ans.emplace_back(arr[i]);\n    }\n    for (; j < k; j++) {\n        ans.emplace_back(arr[j]);\n\
    \    }\n    return ans;", "    // write your code here\n    std::vector<long>\
    \ max_vector;\n    for (long i = 0; i < k; i++) {\n        max_vector.push_back(arr[i]);\n\
    \    }\n    long max_num = max_vector[0];\n    for (long i = 0; i < k; i++) {\n\
    \        max_num = std::max(max_num, arr[i]);\n    }\n    max_vector = std::vector<long>(max_vector.size()\
    \ + 1, max_num + 1);\n    for (long i = 0; i < k; i++) {\n        max_vector[i\
    \ + 1] = arr[i];\n    }\n    return max_vector;", "    int n = arr.size();\n \
    \   std::vector<long> max_num(n);\n    for (long i = 0; i < n; ++i)\n        max_num[i]\
    \ = arr[i];\n    long cur_max = max_num[0];\n    for (long i = 0; i < n; ++i)\
    \ {\n        if (max_num[i] > cur_max) {\n            cur_max = max_num[i];\n\
    \        }\n    }\n    std::vector<long> ans(k);\n    long i = -1;\n    for (long\
    \ i = 0; i < k; ++i) {\n        long j = i;\n        for (++j; j < n && max_num[j]\
    \ > cur_max; ++j)\n            ;\n        max_num[i] = max_num[j];\n        ans[i]\
    \ = max_num[i];\n    }\n    return ans;", "    std::vector<long> max;\n    long\
    \ curr, maxv;\n    for (long i = 0; i < arr.size(); ++i) {\n        curr = 0;\n\
    \        maxv = arr[i];\n        for (long j = i; j < arr.size(); ++j) {\n   \
    \         if (maxv < arr[j])\n                maxv = arr[j];\n            if (curr\
    \ < (j - i)) {\n                curr = j - i;\n                maxv = arr[j];\n\
    \            }\n        }\n        if (max.size() < k - 1) {\n            max.push_back(maxv);\n\
    \        } else if (maxv > max[max.size() - 1]) {\n            max.push_back(maxv);\n\
    \        }\n    }\n    return max;", "    std::vector<long> res(k);\n    for (long\
    \ i : arr) {\n        std::iota(std::begin(res), std::end(res), 0);\n        res[i]\
    \ = i;\n        std::partial_sort_copy(std::begin(res), std::end(res), std::begin(res),\
    \ std::end(res), \n                              [&](long i, long j){return arr[i]\
    \ > arr[j];});\n    }\n    return res;", "    // Fill this in.\n    std::vector<long>\
    \ max;\n    for (auto &elem : arr) {\n        if (max.size() < k) {\n        \
    \    max.push_back(elem);\n        } else {\n            long max_elem = max[k\
    \ - 1];\n            if (elem > max_elem) {\n                max.clear();\n  \
    \              max.push_back(elem);\n            } else {\n                max.push_back(max_elem);\n\
    \            }\n        }\n    }\n    return max;", "    long cnt = 0;\n    //\
    \ Your code here\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ output;\n    \n    for (int i = 0; i < k; ++i)\n    {\n        if (i < arr.size()\
    \ && arr[i] > arr[i-1])\n        {\n            cnt += 1;\n            std::swap(arr[i],\
    \ arr[i-1]);\n        }\n        output.push_back(arr[i]);\n    }\n\n    if (cnt\
    \ > arr.size())\n    {\n        output.push_back(arr[arr.size()-1]);\n    }\n\
    \    return output;", "    if(arr.size() <= k) return {-1};\n    std::vector<long>\
    \ res;\n    for(long i = 0; i < k; i++){\n        long max_val = 0;\n        for(long\
    \ j = 0; j < arr.size(); j++){\n            if(arr[j] > max_val)\n           \
    \     max_val = arr[j];\n        }\n        res.push_back(max_val);\n    }\n \
    \   return res;", "    // write your code here\n    std::vector<long> result;\n\
    \    long count = 0;\n    \n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   if (count == k) {\n            result.push_back(arr[i]);\n            count++;\n\
    \        } else if (count < k) {\n            count++;\n            result.push_back(arr[i]);\n\
    \        } else if (count > k) {\n            result.push_back(arr[i]);\n    \
    \        count = 0;\n        }\n    }\n    \n    return result;", "    if (arr.empty()\
    \ || arr.size() == 1){\n        return {};\n    }\n    auto m = std::max_element(arr.begin(),\
    \ arr.end());\n    std::vector<long> res;\n    for (size_t i = 0; i < k; i++){\n\
    \        auto it = std::find(arr.begin(), arr.end(), m+1);\n        res.push_back(arr[it\
    \ - arr.begin()]);\n    }\n    return res;", "    \n    // write your code here\n\
    \    \n    long n=arr.size();\n    \n    long low = std::numeric_limits<long>::max();\n\
    \    std::vector<long> temp;\n    \n    for(int i=0;i<k;i++) {\n        if(arr[i]<low)\n\
    \            low = arr[i];\n    }\n    for(int i=0;i<n;i++) {\n        if(arr[i]>=low\
    \ && arr[i]<low+arr[i+1])\n            temp.push_back(arr[i]);\n    }\n    for(int\
    \ i=0;i<n-k-1;i++) {\n        if(temp[i]>temp[i+1])\n            std::swap(temp[i],temp[i+1]);\n\
    \    }\n    return temp;", "    long result = INT_MIN;\n    long i;\n    std::partial_sort(arr.begin(),\
    \ arr.begin() + k, arr.end());\n    for (i = 0; i < k; i++) {\n        result\
    \ = max(result, arr[i]);\n    }\n    return std::vector<long>(arr.begin() + i,\
    \ arr.end());", "    sort(arr.begin(), arr.end());\n    std::vector<long> result;\n\
    \    for (auto i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n\
    \    return result.begin(), result.end();", "    \n    std::vector<long> max_arr;\n\
    \    for(long i=0;i<arr.size();i++){\n        \n        if(max_arr.size()==k){\n\
    \            break;\n        }\n        else if(arr[i]<max_arr[k-1]){\n      \
    \      max_arr.push_back(arr[i]);\n        }\n        else{\n            max_arr[k-1]=arr[i];\n\
    \        }\n    }\n    return max_arr;", "   assert(arr.size() >= 1);\n   assert(k\
    \ <= arr.size());\n   std::vector<long> ans;\n   long curr = -100000;\n   for\
    \ (long i = 0; i < k; i++) {\n       if (arr[i] > curr) {\n           ans.push_back(curr);\n\
    \           curr = arr[i];\n       } else if (arr[i] == curr) {\n           ans.push_back(arr[i]);\n\
    \       } else {\n           ans.push_back(curr);\n           curr = arr[i];\n\
    \       }\n   }\n   ans.push_back(curr);\n   return ans;", "    std::vector<long>\
    \ res(k,0);\n    // iterate over the vector to find the max\n    for (long i=0;i<arr.size();i++)\
    \ {\n        // if current number is greater than the current max\n        if\
    \ (arr[i] > res[0]) {\n            // update the max to be current\n         \
    \   res[0] = arr[i];\n        }\n    }\n    // remove the max from vector to obtain\
    \ the maximum number\n    for (long i=0;i<res.size();i++) {\n        arr.remove(0);\n\
    \    }\n    // return the vector\n    return res;", "    std::sort(arr.begin(),\
    \ arr.end()); // sort it first\n    long ans = arr[0]; // initialize ans\n   \
    \ for(long i = 0; i < k; i++) { // use binary search to find the maximum\n   \
    \     ans = std::max(ans, arr[i]);\n    }\n    std::vector<long> sol;\n    for(long\
    \ i = 0; i < k; i++) { // add other k numbers to sol\n        sol.push_back(arr[i]);\n\
    \    }\n    return sol;", "    // write your code here\n    if(arr.size() == 0){\n\
    \        std::vector<long> max;\n        return max;\n    }\n    std::vector<long>\
    \ max;\n    long temp = 0;\n    long leftmost = 0, rightmost = arr.size()-1;\n\
    \    while( leftmost <= rightmost ){\n        temp = arr[leftmost];\n        while(\
    \ k != 0 && temp >= arr[k-1] ){\n            k--;\n        }\n        if(k !=\
    \ 0){\n            temp.swap(arr[k]);\n        }\n        else{\n            break;\n\
    \        }\n        if(leftmost < k-1){\n            temp.swap(arr[leftmost+1]);\n\
    \        }\n        else{\n            temp.swap(arr[leftmost]);\n        }\n\
    \        leftmost++;\n        if(leftmost > rightmost){\n            rightmost--;\n\
    \        }\n    }\n    for(int i=0;i<k;i++){\n        max.push_back(arr[i]);\n\
    \    }\n    return max;", "    // Your code here\n\tassert(arr.size() <= k);\n\
    \tstd::vector<long> res;\n\tfor(long i = 0; i < k; ++i){\n\t\tres.push_back(arr[i]);\n\
    \t}\n\tstd::sort(res.begin(), res.end());\n\treturn res;", "        // Your code\
    \ here\n        std::sort(arr.begin(), arr.end());\n        std::vector<long>\
    \ res;\n        long i = 0;\n        while (k != 0) {\n            res[i++] =\
    \ arr.at(k-1);\n            k--;\n        }\n        return res;\n    }\n\nint\
    \ main()\n{\n    std::ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\
    \    cout.tie(NULL);\n    unsigned long long t;\n    long n;\n    long k;\n  \
    \  std::vector<long> arr;\n    long sum = 0;\n    vector<long> res;\n\n    std::cin\
    \ >> t;\n\n    while (t--) {\n        std::cin >> n;\n        arr.assign(n);\n\
    \        for (int i = 0; i < n; i++)\n            std::cin >> arr[i];\n\n    \
    \    std::cin >> k;\n        std::sort(arr.begin(), arr.end());\n\n        res\
    \ = maximum(arr, k);\n\n        for (int i = 0; i < res.size(); i++)\n       \
    \     std::cout << res[i] << \" \";\n\n        std::cout << \"\\n\";\n    }",
  "    // code here\n    std::vector<long> result;\n    long max = arr[0];\n    long\
    \ max_idx = 1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            max_idx = i;\n        }\n \
    \   }\n    for (int i = 0; i < k - 1; ++i) {\n        long m = max_idx;\n    \
    \    if (m == i) {\n            m = max_idx + 1;\n        }\n        if (m > arr.size())\
    \ {\n            break;\n        }\n        long cur = arr[m - 1];\n        while\
    \ (m > 0 && m > max_idx) {\n            arr[m - 1] = arr[m - 2];\n           \
    \ --m;\n        }\n        arr[m - 1] = cur;\n    }\n    if (max < 0) {\n    \
    \    std::fill(arr.begin() + k, arr.end(), 0);\n    }\n    return std::move(arr);",
  "    if(arr.size() == 0) return {};\n    std::vector<long> ans;\n    for(long i\
    \ = 1; i < arr.size(); i++) {\n        if(arr[i-1] > arr[i]) {\n            ans.push_back(arr[i-1]);\n\
    \        } else {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> result(k);\n    long curr = 0;\n    long prev\
    \ = 0;\n    for (long i = 0; i <= arr.size(); ++i) {\n        prev = curr;\n \
    \       curr = arr[i];\n        std::swap(result[i - 1], result[i - 1] + prev);\n\
    \    }\n    return result;", "    // Your code here\n    int n = arr.size();\n\
    \    std::vector<long> arr_rev(n);\n    long max_value = arr[0];\n    for(int\
    \ i=0;i<n;i++){\n        if(arr[i] > max_value){\n            max_value = arr[i];\n\
    \        }\n    }\n    \n    for(int i=0;i<n;i++){\n        if(arr[i] > max_value){\n\
    \            int j = i;\n            while(arr[j]<max_value){\n              \
    \  arr_rev[--j]=arr[j];\n            }\n            arr_rev[j]=max_value;\n  \
    \      }\n    }\n    for(int i=0;i<n;i++){\n        arr_rev[i]--;\n    }\n   \
    \ std::vector<long> ret_arr(k);\n    for(int i=0;i<k;i++){\n        ret_arr[i]\
    \ = arr_rev[i];\n    }\n    return ret_arr;", "    std::vector<long> maxK;\n \
    \   long largestNum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i]\
    \ > largestNum) {\n            largestNum = arr[i];\n        }\n    }\n    maxK.push_back(largestNum);\n\
    \    for (int i = k; i < arr.size(); i++) {\n        if (arr[i] > largestNum)\
    \ {\n            largestNum = arr[i];\n        }\n        else {\n           \
    \ maxK.push_back(largestNum);\n            largestNum = 0;\n        }\n    }\n\
    \    return maxK;", "    \n    long index = 0;\n    // Find the first index with\
    \ value more than or equal to k\n    while (arr[index] <= k) {\n        index++;\n\
    \    }\n    \n    // We don't need a vector to return the maximum values\n   \
    \ // Instead we can use a pointer to return only the last k elements in the array.\n\
    \    long *maxElements = arr;\n    \n    // Initialize a vector which will store\
    \ the maximum values\n    std::vector<long> vec(k + 1);\n    \n    while (index\
    \ < arr.size() && index < vec.size()) {\n        if (arr[index] > vec[vec.size()\
    \ - 1]) {\n            vec.push_back(arr[index]);\n        } else if (arr[index]\
    \ == vec[vec.size() - 1]) {\n            vec[vec.size() - 1] = arr[index];\n \
    \       }\n        index++;\n    }\n    \n    // Copy the contents of vec to maxElements.\n\
    \    // Since a vector is used, the contents of vector won't be changed.\n   \
    \ // Therefore, maxElements points to the first element of vec.\n    maxElements\
    \ = &vec[0];\n    \n    return vec;", "    long n = arr.size();\n    std::vector<long>\
    \ ans(n, 0);\n    for(long i = 0; i < n; ++i) {\n        long curr = arr[i];\n\
    \        ans[i] = curr;\n        while(true) {\n            // Find the largest\
    \ number with less then current number\n            long nextLargest = 0;\n  \
    \          for(long j = i; j < n; ++j) {\n                if(ans[j] < curr) {\n\
    \                    nextLargest = ans[j];\n                }\n            }\n\
    \            if(nextLargest == 0) {\n                break;\n            }\n \
    \           // If next largest number is smaller than current number\n       \
    \     // Replace current number with the next largest number\n            ans[i]\
    \ = nextLargest;\n            // Move to the next position of current number\n\
    \            i = j;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ rev_arr;\n    std::reverse_copy(arr.begin(), arr.begin() + k + 1, std::back_inserter(rev_arr));\n\
    \    std::sort(rev_arr.begin(), rev_arr.end());\n    return rev_arr;", "    //\
    \ your code goes here\n    std::vector<long> ans;\n    long sum = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++){\n        sum += arr[i];\n        if(sum >= k){\n\
    \            ans.push_back(sum);\n            sum = 0;\n        }\n    }\n   \
    \ return ans;", "    std::vector<long> arrSorted = arr;\n    long maximumValue\
    \ = arrSorted[0];\n    for(int i=1; i<arr.size(); i++)\n    {\n        if(maximumValue\
    \ < arrSorted[i])\n            maximumValue = arrSorted[i];\n    }\n    long index\
    \ = 0;\n    std::vector<long> arrSorted(k, maximumValue);\n    for(long i=0; i<k;\
    \ i++)\n    {\n        int j = i;\n        while(j<k)\n        {\n           \
    \ if((arrSorted[j]<arrSorted[j+1]))\n            {\n                long temp\
    \ = arrSorted[j+1];\n                arrSorted[j+1] = arrSorted[j];\n        \
    \        arrSorted[j] = temp;\n            }\n            j++;\n        }\n  \
    \  }\n    for(long i=0; i<k; i++)\n        arr[i] = arrSorted[i];\n    return\
    \ arrSorted;", "    std::vector<long> ret;\n    int n = arr.size();\n    std::vector<int>\
    \ max_so_far(n + 1, INT_MIN);\n    for (int i = 0; i < n; i++) {\n        int\
    \ j = i;\n        int max_val = arr[i];\n        while (j < n && arr[j] > max_val)\
    \ {\n            max_val = arr[j];\n            ++j;\n        }\n        max_so_far[i]\
    \ = max_val;\n    }\n    for (int i = 1; i <= k; i++) {\n        ret.push_back(max_so_far[i\
    \ - 1]);\n    }\n    return ret;", "    // Do not write main() function.\n   \
    \ // Do not read input, instead use the arguments to the function.\n    // Do\
    \ not print the output, instead return values as specified\n    // Still have\
    \ a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n\
    \    int max = 0;\n    std::vector<long> ans;\n    for (long i = 0; i < k; i++)\
    \ {\n        if (max < arr[i]) {\n            max = arr[i];\n        }\n    }\n\
    \    if (max > 0) {\n        ans.push_back(max);\n    }\n    for (long i = 0;\
    \ i < k; i++) {\n        if (max < arr[i]) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> res;\n    if (k ==\
    \ 0)\n        return res;\n    long max_element = arr[0];\n    for (long i = 1;\
    \ i < k; ++i) {\n        max_element = max(max_element, arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; ++i) {\n        long idx = i;\n        while ((idx + 1)\
    \ < k && (max_element < arr[idx+1]))\n            ++idx;\n        res.push_back(arr[idx]);\n\
    \    }\n    return res;", "    std::vector<long> max_arr;\n    long max_n = -INT_MAX;\n\
    \    for (auto num : arr) {\n        if (max_n < num) {\n            max_n = num;\n\
    \        }\n    }\n    max_arr.push_back(max_n);\n    for (auto i = arr.size();\
    \ i != 0; i /= 2) {\n        long cnt = 0;\n        for (auto num : arr) {\n \
    \           if (num == arr[i]) {\n                ++cnt;\n            }\n    \
    \    }\n        if (cnt > max_arr.size()) {\n            max_arr.push_back(cnt);\n\
    \        }\n    }\n    return max_arr;", "    // write your code here\n    std::vector<long>\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    while(k >= 0 && arr.size()\
    \ > 0) {\n        ans.push_back(std::max(arr[0], arr[1]));\n        arr[0] = arr[arr.size()\
    \ - 1];\n        arr.pop_back();\n        k--;\n    }\n    return ans;", "   \
    \ std::stack<long> st;\n    std::vector<long> maximum(k);\n    for (long i = 0;\
    \ i < arr.size(); ++i) {\n        stpush(st, arr[i]);\n        \n        if (st.size()\
    \ > k) {\n            while (st.size() > k) {\n                maximum[k - 1]\
    \ = top(st);\n                stpop(st);\n            }\n            maximum[k\
    \ - 1] = top(st);\n        }\n    }\n    return maximum;", "    std::vector<long>\
    \ result(k, 0);\n    std::vector<long> idx;\n\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        std::swap(arr[idx[i]], arr[i]);\n        if (idx[i] < k - 1)\
    \ {\n            idx[i] = idx[i] + 1;\n        }\n        if (idx[i] > result.size()\
    \ - 1) {\n            result[idx[i]] = arr[i];\n        }\n    }\n    return result;",
  "    // Write your code here\n    \n    long m = std::numeric_limits<long>::max();\n\
    \    long n = arr.size();\n    std::vector<long> v(n, m);\n    \n    for(long\
    \ i = 0; i < n; ++i) {\n        v[i] = std::max( arr[i], v[i] );\n    }\n    \n\
    \    std::vector<long> ret(k);\n    long ind = 0;\n    \n    for(long i = 0; i\
    \ < k; ++i) {\n        ret[i] = 0;\n        \n        for(long j = 0; j < n; ++j)\
    \ {\n            if(v[j] >= v[ind]) {\n                ret[i] = std::max(ret[i],\
    \ j);\n            }\n        }\n        \n        ind = std::min(n, ret[i]+1);\n\
    \    }\n    \n    return ret;", "    long n = arr.size();\n    long m = n;\n \
    \   long count = 0;\n    std::vector<long> vec;\n    long largest = 0;\n\n   \
    \ while (k != 0) {\n        if (k % 2 == 0) {\n            if (largest < arr[m])\
    \ largest = arr[m];\n            ++m;\n            while (m != 0 && arr[m] > largest)\
    \ {\n                vec.push_back(arr[m]);\n                --m;\n          \
    \  }\n        } else if (k % 2 == 1) {\n            if (largest < arr[m]) largest\
    \ = arr[m];\n            ++m;\n            while (m != 0 && arr[m] > largest)\
    \ {\n                vec.push_back(arr[m]);\n                --m;\n          \
    \  }\n        }\n        k /= 2;\n    }\n    return vec;", "    // write your\
    \ code here\n    \n    long low = 1000, high = -1;\n    std::vector<long> ans;\n\
    \    for(int i = 0; i < k; i++) {\n        if(arr[i] < low) {\n            low\
    \ = arr[i];\n        }\n        if(arr[i] > high) {\n            high = arr[i];\n\
    \        }\n    }\n    ans.push_back(low);\n    for(long i = low; i <= high; i++)\
    \ {\n        for(long j = i; j >= low; j--) {\n            if(i == j) {\n    \
    \            ans.push_back(i);\n                break;\n            }\n      \
    \      if(arr[j] > arr[j-1]) {\n                long temp = arr[j];\n        \
    \        arr[j] = arr[j-1];\n                arr[j-1] = temp;\n            }\n\
    \        }\n    }\n    return ans;", "        // TODO: Write your code here.\n\
    \        auto result = std::min_element(arr.begin(), arr.end());\n        result.erase(result.begin()\
    \ + k);\n        return result;", "    long ans = std::numeric_limits<long>::max();\n\
    \    long temp = 0;\n    // Write your code here.\n    for (size_t i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > ans) {\n            temp = ans;\n \
    \           ans = arr[i];\n        }\n        if (arr[i] > temp && i < arr.size()\
    \ - 1) {\n            temp += arr[i + 1];\n        }\n    }\n    return std::vector<long>(arr.begin()\
    \ + k, arr.begin() + k + k - 1);", "    std::vector<long> res;\n    if (arr.size()\
    \ == 0 || k == 0) return res;\n    std::sort(arr.begin(), arr.end());\n    long\
    \ sum = 0;\n    for (long i : arr) {\n        sum += i;\n        if (sum > k)\
    \ break;\n    }\n    std::partial_sum(arr.begin(), arr.begin() + k, std::back_inserter(res));\n\
    \    res.resize(k);\n    return res;", "  long i = 0;\n  std::vector<long> res;\n\
    \  while (i < arr.size() && k <= i) {\n    if (arr[i] > arr[k]) {\n      res.push_back(arr[i]);\n\
    \      k += 1;\n    }\n    i += 1;\n  }\n  return res;", "    // Your code here\n\
    \    long l=0;\n    long m=0;\n    long n=arr.size();\n    long max=0;\n    long\
    \ i;\n    long j;\n    long temp=0;\n    long k;\n    for(j=n;j>0;j--){\n    \
    \    temp=arr[j];\n        for(i=j-1;i>=0;i--){\n            if(arr[i]>temp){\n\
    \                k=arr[i];\n                arr[i]=arr[j];\n                arr[j]=k;\n\
    \            }\n        }\n        \n        if(temp>m){\n            m=temp;\n\
    \        }\n        if(temp>max){\n            max=temp;\n        }\n    }\n \
    \   return arr;", "    std::vector<long> res(arr.size());\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long val = arr[i];\n   \
    \     if (val > max) {\n            max = val;\n        }\n    }\n    std::vector<long>\
    \ res2(arr.size());\n    for (long i = 0; i < arr.size(); i++) {\n        long\
    \ val = arr[i];\n        long diff = val - max;\n        res2[i] = val + diff;\n\
    \        if (val == max && diff > 0) {\n            res2[i] = val + diff;\n  \
    \      }\n    }\n    for (long i = 0; i < k; i++) {\n        res2.push_back(max);\n\
    \    }\n    return res2;", "    std::vector<long> answer;\n    answer.reserve(k);\n\
    \n    long max_num = INT_MIN;\n    long ans = 0;\n\n    for(int i=0; i < arr.size();\
    \ i++){\n        if(arr[i] > max_num){\n            ans = max_num;\n         \
    \   max_num = arr[i];\n        }\n        else if(arr[i] == max_num){\n      \
    \      if(arr[i] > ans){\n                ans = arr[i];\n            }\n     \
    \   }\n    }\n\n    for(int i=0; i < k; i++){\n        answer.push_back(ans);\n\
    \    }\n\n    return answer;", "    // write your code here\n    long N = arr.size();\n\
    \    std::vector<long> ans;\n    ans.reserve(N);\n    long max_num = arr[0];\n\
    \    ans.push_back(max_num);\n    long pos = 0;\n    long idx = 0;\n    for (;\
    \ idx < N - 1; idx++) {\n        if (max_num < arr[idx]) {\n            ans.push_back(max_num);\n\
    \            pos = idx;\n        }\n        long val = arr[idx];\n        if (val\
    \ > max_num) {\n            max_num = val;\n        }\n    }\n    ans.push_back(max_num);\n\
    \    return ans;", "    // Your code here\n    if (k == 0){\n        return arr;\n\
    \    }\n    auto n = arr.size();\n    std::vector<long> re(k);\n    long max_val\
    \ = 0;\n    for (long i = 0; i < k; ++i){\n        if (arr[i] > max_val){\n  \
    \          max_val = arr[i];\n        }\n    }\n    re[0] = max_val;\n    for\
    \ (long i = 1; i < k; ++i){\n        max_val = max(max_val, arr[i]);\n       \
    \ if (max_val > arr[i]){\n            std::nth_element(arr.begin(), arr.begin()\
    \ + i, arr.end(), \n                             [&] (long num1, long num2) ->\
    \ bool { return num1 < num2; });\n        }\n        re[i] = max_val;\n    }\n\
    \    return re;", "    if(k <= 0 || arr.size() == 0) return {};\n    std::multiset<long>\
    \ mSet;\n    std::vector<long> ans;\n    for(long i=0; i<arr.size(); i++) {\n\
    \        mSet.insert(arr[i]);\n        if(mSet.size() > k) {\n            mSet.erase(mSet.rbegin());\n\
    \        }\n    }\n    ans.push_back(mSet.rbegin()->second);\n    return ans;",
  "    // write your code here\n    int n = arr.size();\n    std::vector<long> ans;\n\
    \    for(int i=0; i<k; i++) {\n        long max = 0;\n        long pos = i;\n\
    \        for(int j=0; j<n; j++) {\n            if(arr[j] > max) {\n          \
    \      max = arr[j];\n                pos = j;\n            }\n        }\n   \
    \     ans.push_back(pos);\n    }\n    return ans;", "    int n = arr.size();\n\
    \    long long max = 0;\n    std::vector<long> arr1;\n    for (int i = 0; i <\
    \ k; i++) {\n        arr1.push_back(arr[i]);\n        max = max(arr[i], max);\n\
    \    }\n    for (int i = 0; i <= n; i++) {\n        arr1.push_back(arr[i]);\n\
    \        max = max(arr[i], max);\n    }\n    std::sort(arr1.begin(), arr1.end());\n\
    \    std::vector<long> arr2;\n    for (int i = 0; i < k; i++) {\n        arr2.push_back(arr1[i]);\n\
    \    }\n    return arr2;", "    std::vector<long> ans;\n    long curr = -1, maxVal\
    \ = INT_MIN, minVal = INT_MAX;\n    // traverse the array and find the max and\
    \ min element \n    for (long i : arr) {\n        curr += i;\n        if (curr\
    \ > maxVal) {\n            maxVal = curr;\n        }\n        if (curr < minVal)\
    \ {\n            minVal = curr;\n        }\n    }\n    // find the max value in\
    \ the array\n    long maxIndex = -1;\n    for (long i : arr) {\n        if (i\
    \ > maxVal) {\n            maxVal = i;\n            maxIndex = i;\n        }\n\
    \    }\n    // find the min value in the array\n    long minIndex = -1;\n    for\
    \ (long i : arr) {\n        if (i < minVal) {\n            minVal = i;\n     \
    \       minIndex = i;\n        }\n    }\n    // find the k largest elements\n\
    \    for (long i = 0; i < k; i++) {\n        if (arr[i] >= maxVal) {\n       \
    \     ans.push_back(arr[i]);\n            while (ans.size() > maxIndex - i) {\n\
    \                ans.pop_back();\n            }\n        }\n    }\n    return\
    \ ans;", "    // Your code goes here\n    long n = arr.size();\n    long i, j;\n\
    \    std::vector<long> arrMax;\n    for(i = 0; i < n; i++){\n        for(j = i;\
    \ j >= 0 && arr[i] < arr[j]; j--){\n            if(j >= k){\n                arrMax.push_back(arr[j]);\n\
    \                break;\n            }\n        }\n    }\n    return arrMax;",
  "    // write your code here\n    long long dp[n][n];\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = arr[i];\n    }\n    for (int i = 0; i < k; i++) {\n\
    \        for (int j = 0; j < k; j++) {\n            dp[i][j] = std::max(dp[i][j],\
    \ dp[i][j - arr[i]]);\n        }\n    }\n    std::vector<long> v;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if\
    \ (i == j) {\n                v.push_back(dp[i][j]);\n            }\n        }\n\
    \    }\n    return v;", "    long max_arr[k];\n    for (long i = 0; i < k; i++)\
    \ {\n        max_arr[i] = arr[0];\n    }\n    long max_index = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        for (long j = 0; j < k; j++) {\n            if\
    \ (max_arr[j] > max_arr[j+1]) {\n                max_arr[j] = arr[j];\n      \
    \      }\n        }\n        long curr_max = max_arr[i];\n        max_index =\
    \ i;\n        for (long j = i+1; j < k; j++) {\n            if (max_arr[j] > curr_max)\
    \ {\n                curr_max = max_arr[j];\n                max_index = j;\n\
    \            }\n        }\n        if (max_arr[i] < curr_max) {\n            max_arr[i]\
    \ = curr_max;\n        }\n    }\n    return std::vector<long>(max_index, max_index\
    \ + k);", "    std::vector<long> nums;\n    std::vector<long>::iterator maxPos\
    \ = 0;\n    std::vector<long>::iterator pos = 0;\n    std::vector<long>::iterator\
    \ endPos = 0;\n    std::vector<long>::iterator maxVal;\n    // Traverse the array\
    \ to find the max num and its position\n    for (pos = arr.begin(); pos != arr.end()\
    \ && pos < endPos; pos++) {\n        if (nums.size() <= k || (nums.size() > k\
    \ && nums[nums.size() - 1] <= arr[pos]))\n            nums.push_back(arr[pos]);\n\
    \        else if (maxPos < pos && arr[pos] > arr[maxPos]) {\n            maxPos\
    \ = pos;\n            maxVal = nums;\n        }\n    }\n    // Traverse the array\
    \ to remove the max num\n    for (pos = endPos + 1; pos < arr.end(); pos++) {\n\
    \        if (arr[pos] != arr[pos])\n            break;\n    }\n    // Insert a\
    \ -1 if the max num is not in the array\n    if (maxPos == arr.end()) {\n    \
    \    std::fill(maxVal, maxVal+k, -1);\n        maxPos = maxVal.size()-1;\n   \
    \ }\n    // Remove the maxPos num and insert it into the new array\n    maxVal.erase(maxPos,\
    \ maxVal.size());\n    nums.insert(nums.begin(), maxVal.begin(), maxVal.end());\n\
    \    return nums;", "    std::vector<long> ans;\n    \n    // Write your code\
    \ here\n    // Use merge sort and pass k as size of sub-array\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    \n    long len = 0;\n    long cur = arr[0];\n\
    \    while(cur > 0) {\n        len++;\n        std::pop_heap(arr.begin(), arr.end(),\
    \ std::greater<long>());\n        if(len == k) {\n            ans.push_back(*std::max_element(arr.begin(),\
    \ arr.end()));\n        }\n        cur--;\n    }\n    return ans;", "    long\
    \ long maxSum = 0;\n    for (long i = 0; i < k; ++i) {\n        long long tempMax\
    \ = arr[i];\n        for (long j = i + 1; j < k; ++j)\n            if (arr[j]\
    \ > tempMax)\n                tempMax = arr[j];\n        maxSum = max(maxSum,\
    \ tempMax);\n    }\n    std::vector<long> maxVec;\n    maxVec.reserve(k);\n  \
    \  for (long i = 0; i < k; ++i) {\n        maxVec.push_back(arr[i]);\n       \
    \ if (arr[i] >= maxSum) {\n            maxVec.push_back(arr[i] - maxSum);\n  \
    \          maxSum = 0;\n        }\n    }\n    return maxVec;", "    std::sort(arr.begin(),\
    \ arr.end());\n    auto l = arr.begin(), r = arr.end();\n    // l is now sorted,\
    \ r is still unsorted\n    std::vector<long> ans;\n    while (l != r) {\n    \
    \    // Move left until k >= current element\n        while (k > r - l) {\n  \
    \          std::iter_swap(l, l);\n            ++l;\n        }\n        // Move\
    \ right until k < current element\n        while (k < r - l) {\n            std::iter_swap(r,\
    \ r);\n            --r;\n        }\n        // Now l and r are in the correct\
    \ positions\n        // Add current element to the answer\n        ans.push_back(std::max(*l,\
    \ *r));\n        std::iter_swap(l, r);\n    }\n    return ans;", "    long n =\
    \ arr.size();\n    std::vector<long> result;\n    long index = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = index; j < n; j++) {\n         \
    \   if (arr[j] < arr[index])\n                index = j;\n        }\n        result.push_back(arr[index]);\n\
    \    }\n    std::partial_sort(result.begin(), result.end(), arr.begin(), arr.end(),\
    \ std::greater<long>());\n    return std::unique(result);", "\t// Your code here\n\
    \tstd::vector<long> v;\n\tfor (long i = 0; i < k; i++) {\n\t\tv.push_back(arr[i]);\n\
    \t}\n\tstd::sort(v.begin(), v.end(), [&](long a, long b) -> bool {\n\t\treturn\
    \ a > b;\n\t});\n\treturn v;", "    \n    int n = arr.size();\n    \n    for(int\
    \ i = 0 ; i < n ; i++ ){\n        long tempMax = arr[i];\n        for(int j =\
    \ 0 ; j < k ; j++){\n            if( arr[i] > tempMax ){\n                tempMax\
    \ = arr[i];\n            }\n        }\n        arr.push_back( tempMax );\n   \
    \ }\n    \n    return arr;", "    // write your code here\n    long n = arr.size();\n\
    \    long max = n;\n    for (long i = 0; i < n; i++){\n        if (arr[i] > max){\n\
    \            max = arr[i];\n        }\n    }\n    std::vector<long> ans;\n   \
    \ if (k == 0){\n        ans.clear();\n    }else{\n        while (max != 0){\n\
    \            long idx = 0;\n            while (idx < k){\n                if (arr[idx]\
    \ >= max){\n                    max = arr[idx];\n                }\n         \
    \       idx++;\n            }\n            ans.push_back(max);\n            max\
    \ -= ans.back();\n        }\n    }\n    return ans;", "    // Write your code\
    \ here\n    long size = arr.size();\n    std::vector<long> v1(size,0);\n    long\
    \ max = v1[0];\n    for (long i=1;i<size;i++)\n    {\n        if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n        }\n    }\n    long count = 1;\n\
    \    for (long i=0;i<size;i++)\n    {\n        if (arr[i] == max)\n        {\n\
    \            v1[count++] = max;\n            max = v1[0];\n        }\n    }\n\
    \    \n    std::vector<long> v2(count,0);\n    \n    for (long i=0;i<count;i++)\n\
    \    {\n        v2[i] = v1[i];\n    }\n    \n    std::vector<long> v3(count,0);\n\
    \    \n    for (long i=0;i<count;i++)\n    {\n        v3[i] = max(v1[i],v2[i]);\n\
    \    }\n    return v3;", "    // Write your code here\n    if(arr.size() > k)\n\
    \        return arr;\n    std::vector<long> result;\n    for(int i = 0; i < arr.size()-k;\
    \ i++)\n    {\n        int j = 0;\n        long max = 0;\n        for(int k =\
    \ i; k < i+k; k++)\n        {\n            if(arr[k] > max)\n                max\
    \ = arr[k];\n        }\n        result.push_back(max);\n    }\n    return result;",
  "    std::vector<long> res;\n    // code here\n    res.clear();\n    long maximum\
    \ = 0;\n    long cnt = 0;\n    for (auto i: arr)\n    {\n        if (maximum <\
    \ i && cnt <= k)\n        {\n            maximum = i;\n        }\n        cnt\
    \ = cnt + 1;\n    }\n    res.push_back(maximum);\n    return res;", "    \n  \
    \  //Your code here\n    long n = arr.size();\n    long ans = 0;\n    std::vector<long>\
    \ v(n);\n    long m = 0;\n    \n    long long int cur = 0;\n    for(long i = 0;\
    \ i < n; ++i){\n        if(arr[i] > cur){\n            v = arr;\n            m\
    \ = i;\n        }\n        else{\n            for(long j = 0; j < n; j++){\n \
    \               if(arr[j] > arr[m]){\n                    m = j;\n           \
    \     }\n            }\n        }\n    }\n    \n    \n    for(long i = 0; i <\
    \ k; ++i){\n        long index = n-k+i;\n        for(long j = 0; j < n; j++){\n\
    \            if(arr[j] > v[index]){\n                v[index] = arr[j];\n    \
    \        }\n        }\n        long cur = 1;\n        for(long j = 0; j < n; j++){\n\
    \            cur *= v[index];\n            v[index] += cur;\n        }\n     \
    \   for(long j = 0; j < n; j++){\n            ans += cur;\n        }\n    }\n\
    \    return v;", "    std::vector<long> ans(k);\n    long j = 0;\n    for (int\
    \ i = 0; i < k; i++) {\n        if (j == arr.size()) {\n            break;\n \
    \       }\n        while (j < arr.size() && arr[j] < arr[j + 1])\n           \
    \ ++j;\n        ans[i] = arr[j];\n        j++;\n    }\n    return ans;", "   \
    \ // Your code here\n    std::vector<long> res;\n    int curr=arr[0];\n    long\
    \ currMax=arr[0];\n    long currMaxCount=1;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]>curr){\n            currMax=arr[i];\n            currMaxCount=1;\n\
    \        }else{\n            currMaxCount++;\n            if(currMaxCount>=k){\n\
    \                res.push_back(currMax);\n            }\n        }\n        curr=arr[i];\n\
    \    }\n    return res;", "  // Your code goes here\n  assert(arr.size() >= k);\n\
    \  std::partial_sort(arr.begin(), arr.begin() + k, arr.end());\n  return std::vector<long>(arr.begin(),\
    \ arr.begin() + k);", "    assert(arr.size() >= 1);\n    assert(0 <= k && k <=\
    \ arr.size());\n\n    auto begin = arr.begin();\n    auto end = arr.end();\n \
    \   auto result = std::max_element(begin, end, [](long a, long b) {\n        return\
    \ a > b;\n    });\n\n    if (k <= result.size())\n        return std::vector<long>(begin,\
    \ begin + k);\n\n    auto new_end = std::max_element(begin + result.size(), end);\n\
    \    return std::vector<long>(begin, new_end);", "    std::vector<long> max_list(k,\
    \ -1);\n    for (long i = 0; i < k; ++i)\n        max_list[i] = -1; // set all\
    \ elements to -1\n    for (long i = 0; i < arr.size(); ++i) {\n        max_list[arr[i]]\
    \ = i;\n    }\n    // Sort the max_list\n    std::sort(max_list.begin(), max_list.end());\n\
    \    // Return the max_list\n    return max_list;", "    // Do not write main()\
    \ function.\n    // Do not read input, instead use the arguments to the function.\n\
    \    // Do not print the output, instead return values that you compute.\n   \
    \ // Your code goes here\n    if(arr.size() == 0 || k > arr.size())\n        return\
    \ {};\n    std::vector<long> result;\n    long maxNumbers = arr[0];\n    for(auto\
    \ it = arr.begin() + 1; it != arr.end(); ++it)\n    {\n        if(*it > maxNumbers)\n\
    \        {\n            maxNumbers = *it;\n        }\n    }\n    result.push_back(maxNumbers);\n\
    \    for(auto it = arr.begin(); it != arr.end(); it++)\n    {\n        if(*it\
    \ > maxNumbers)\n        {\n            maxNumbers = *it;\n            for(auto\
    \ it2 = result.begin(); it2 != result.end(); ++it2)\n            {\n         \
    \       if(it2->second < maxNumbers)\n                {\n                    if(it2->first\
    \ > maxNumbers)\n                    {\n                        maxNumbers = it2->first;\n\
    \                    }\n                }\n            }\n            result.push_back(maxNumbers);\n\
    \        }\n    }\n    for(auto it = result.begin(); it != result.end(); ++it)\n\
    \    {\n        if(*it > k)\n        {\n            std::swap(it->second, k);\n\
    \            k = it->second;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    long long ans = 0;\n    long long\
    \ num = arr[0];\n    long long left = 0, right = 0, max = 0;\n    for (long long\
    \ i = 0; i < arr.size(); ++i) {\n        if (arr[i] > num) {\n            ans\
    \ = max(ans, i - 1);\n            num = arr[i];\n        }\n        if (arr[i]\
    \ < num) {\n            max = max(max, i - 1);\n        }\n    }\n    ans = max(ans,\
    \ k - 1);\n    ans = max(ans, k - 2);\n    if (right == k - 1 && arr[k - 1] ==\
    \ 100) {\n        ans = max(ans, 0);\n    }\n    \n    return std::vector<long>(ans);",
  "    int m = arr.size();\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ ans(m+1);\n    long j = 0;\n    int i = 0;\n    for (int i = 0; i < m && j <\
    \ k; ++i) {\n        if (arr[i] > arr[j]) {\n            ans[i] = arr[i];\n  \
    \          ++i;\n        } else {\n            ans[i] = arr[j];\n            ++j;\n\
    \        }\n    }\n    ans[i] = arr[j];\n    return ans;", "    long max_element\
    \ = 0;\n    std::vector<long> max_elements;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        max_element = arr[i];\n        max_elements.push_back(max_element);\n\
    \    }\n    sort(max_elements.begin(), max_elements.end());\n    while (max_elements.size()\
    \ > k) {\n        max_elements.erase(max_elements.begin());\n    }\n    return\
    \ max_elements;", "    // Your code here\n    std::vector<long> ret(k);\n    std::iota(ret.begin(),\
    \ ret.end(), 0);\n    auto begin = ret.begin(), end = ret.end();\n    for (long\
    \ i = begin; i <= end; ++i) {\n        for (auto j : arr) {\n            if (i\
    \ & j) {\n                std::iter_swap(begin, end);\n                --end;\n\
    \            }\n        }\n    }\n    return ret;", "  // Your code here\n   \
    \ \n  assert(arr.size() > 0);\n  assert(arr.size() <= 1000);\n  assert(k <= arr.size());\n\
    \  assert(k >= 0);\n  \n  std::vector<long> res(k);\n  std::iota(res.begin(),\
    \ res.end(), 0);\n  \n  for(size_t i = 1; i < k; ++i)\n  {\n    long max_val =\
    \ std::max(arr[i], arr[i-1]);\n    res[i] = max_val;\n  }\n  \n  return res;",
  "    int n = arr.size();\n    std::vector<long> max_arr(n);\n    // max_arr[i] =\
    \ arr[i] if arr[i] > arr[i-1]\n    for (int i = 1; i < n; i++) {\n        if (max_arr[i-1]\
    \ < arr[i])\n            max_arr[i] = arr[i];\n    }\n    for (int i = n-2; i\
    \ >= k; i--) {\n        max_arr[i+k+1] = max_arr[i];\n    }\n    max_arr[k] =\
    \ arr[k];\n    return max_arr;", "    std::vector<long> ans;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] > arr[j]) {\n                long temp = arr[i];\n\
    \                arr[i] = arr[j];\n                arr[j] = temp;\n          \
    \  }\n        }\n        long maxElem = arr[i];\n        long index = i;\n   \
    \     while (index != 0 && arr[index % k] == maxElem) {\n            ans.push_back(arr[index\
    \ / k]);\n            index = index / k;\n        }\n        if (index != 0 &&\
    \ arr[index - 1] == maxElem) {\n            ans.push_back(arr[index - 1]);\n \
    \       }\n    }\n    return ans;", "    if(arr.size() == 0){\n        return\
    \ arr;\n    }\n    std::vector<long> res;\n    res.resize(arr.size());\n    for(size_t\
    \ i = 1; i < k; ++i){\n        long max_num = arr[0];\n        for(size_t j =\
    \ 0; j < i; ++j){\n            if(arr[j] > max_num){\n                max_num\
    \ = arr[j];\n            }\n        }\n        for(size_t j = 0; j < i; ++j){\n\
    \            if(arr[j] < max_num){\n                res[i] = arr[j];\n       \
    \         i = j;\n            }\n        }\n    }\n    return res;", "    if (k\
    \ == 0 || arr.size() == 0)\n        return arr;\n    long cur_max = arr[0];\n\
    \    std::vector<long> ans;\n    ans.push_back(cur_max);\n    \n    for (long\
    \ i = 1, cur_len = arr.size(); i < cur_len; i++)\n        if (cur_max < arr[i])\n\
    \            cur_max = arr[i];\n        else\n        {\n            ans.push_back(cur_max);\n\
    \            cur_max = arr[i];\n        }\n    ans.push_back(cur_max);\n    return\
    \ ans;", "    std::vector<long> result;\n    // write your code here\n    \n \
    \   return result;", "    assert(k <= arr.size());\n    std::sort(arr.begin(),\
    \ arr.end());\n    return std::unique(arr.begin(), arr.end(), [&arr](int a, int\
    \ b) {\n        return b > a;\n    }).limit(static_cast<size_t>(k));", "    if\
    \ (k > arr.size())\n        return {};\n    std::vector<long> result(k);\n   \
    \ std::iota(result.begin(), result.end(), 0);\n    long long cur_max = arr[0];\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > cur_max) {\n       \
    \     cur_max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        if (arr[i] > cur_max) {\n            cur_max = arr[i];\n        }\n \
    \       if (cur_max <= k) {\n            std::iter_swap(result.begin(), result.begin()\
    \ + cur_max);\n        }\n    }\n    return result;", "    // write your code\
    \ here\n    long cur = 0;\n    std::vector<long> result(k);\n    for (int i =\
    \ 0; i < k; i++) {\n        long pos = 0;\n        for (long j = 0; j < arr.size();\
    \ j++) {\n            if (arr[j] >= arr[pos]) {\n                pos = j;\n  \
    \          }\n        }\n        cur++;\n        if (pos == i) {\n           \
    \ result[i] = arr[pos];\n        } else {\n            result[i] = arr[pos];\n\
    \        }\n    }\n    return result;", "    long i = 0, maximum = 0, n = arr.size();\n\
    \    while (i+1 <= n) {\n        // if arr[i] is greater than or equal to arr[i+1],\
    \ then we need to \n        // move arr[i+1] to arr[i] to get max value\n    \
    \    if (arr[i] >= arr[i+1]) {\n            // move arr[i+1] to arr[i]\n     \
    \       arr[i] += 1;\n            arr[i+1] -= 1;\n        } else {\n         \
    \   // decrease the value of arr[i+1] and increase maximum value\n           \
    \ arr[i+1] += 1;\n            if (arr[i+1] > maximum) {\n                maximum\
    \ = arr[i+1];\n            }\n            // decrease the value of arr[i] and\
    \ increase maximum value\n            arr[i] -= 1;\n            if (arr[i] > maximum)\
    \ {\n                maximum = arr[i];\n            }\n        }\n        // if\
    \ arr[i] == arr[i+1] at the end of while loop then we can \n        // increase\
    \ i and decrease n accordingly\n        if (arr[i] == arr[i+1]) {\n          \
    \  ++i;\n            --n;\n        }\n    }\n    // if k is greater than maximum\
    \ then decrease k and again increase \n    // maximum value\n    while (maximum\
    \ > k) {\n        k -= 1;\n        maximum = arr[k];\n    }\n    // if k is less\
    \ than maximum then increase k and again decrease \n    // maximum value\n   \
    \ while (maximum < k) {\n        k += 1;\n        maximum = arr[k];\n    }\n \
    \   // if k == 0 then return arr\n    if (k == 0) {\n        return arr;\n   \
    \ }\n    // create another vector to store maximum values\n    std::vector<long>\
    \ maximumValues(k, maximum);\n    // return maximum values\n    return maximumValues;",
  "    long long max_idx = arr[0];\n    std::vector<long> ans;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (max_idx < arr[i]) {\n            max_idx\
    \ = arr[i];\n        }\n    }\n    long long mid = max_idx;\n    long long curr\
    \ = 0;\n    while (mid >= k) {\n        if (curr + k > arr.size()) {\n       \
    \     ans.push_back(arr[arr.size() - 1]);\n        } else {\n            ans.push_back(arr[curr]);\n\
    \        }\n        curr++;\n        mid -= k;\n    }\n    ans.push_back(arr[curr]);\n\
    \    return ans;", "    // code here\n    std::vector<long> result;\n    int n\
    \ = arr.size();\n    long maxv = arr[0];\n    for (int i = 0; i < n; ++i) {\n\
    \        if (maxv < arr[i]) {\n            maxv = arr[i];\n        }\n    }\n\
    \    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (maxv >= arr[i])\
    \ {\n            result.push_back(arr[i]);\n            count += 1;\n        \
    \    if (count >= k) {\n                break;\n            }\n        }\n   \
    \ }\n    return result;", "    int n = arr.size();\n    int m = std::min(n, k);\n\
    \    std::vector<long> res(m);\n    for (int i = 0; i < m; i++) {\n        res[i]\
    \ = arr[i];\n    }\n    for (int i = m; i < n; i++) {\n        if (res[i - 1]\
    \ > arr[i]) {\n            res[i - 1] = arr[i];\n        }\n    }\n    return\
    \ res;", "  // Write your code here\n  assert(arr.size() >= k);\n  std::vector<long>\
    \ max;\n  long temp = 0;\n  max.push_back(arr[0]);\n  for(int i = 1; i < k; i++){\n\
    \    if(arr[i] > temp){\n      temp = arr[i];\n      max.push_back(arr[i]);\n\
    \    }\n  }\n  return max;", "    std::vector<long> arr1;\n    std::vector<long>\
    \ arr2;\n    std::vector<long> arr3;\n    std::vector<long> arr4;\n    if (k ==\
    \ 0)\n        return arr;\n    if (arr.size() == 0)\n        return arr;\n   \
    \ long ans = arr[0];\n    long start = 0;\n    long end = 0;\n    long len = 0;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > ans) {\n  \
    \          ans = arr[i];\n            start = i;\n        }\n        if (arr[i]\
    \ < ans && i != len - 1) {\n            end = i;\n        }\n        if (arr[i]\
    \ == ans)\n            len++;\n    }\n\n    arr1 = maximum(arr, len);\n    arr2\
    \ = maximum(arr, start + 1);\n    arr3 = maximum(arr, end - 1);\n    arr4 = maximum(arr,\
    \ start + k);\n    arr3 = maximum(arr3, end - k);\n    arr1 = maximum(arr1, len);\n\
    \    arr2 = maximum(arr2, start);\n    arr2 = maximum(arr2, end - k);\n    arr3\
    \ = maximum(arr3, end - k);\n    arr4 = maximum(arr4, end);\n    ans = maximum(arr1,\
    \ arr2, arr3, arr4);\n\n    std::vector<long> arr;\n    arr.push_back(ans);\n\
    \    return arr;", "    std::vector<long> result;\n    std::sort(arr.begin(),\
    \ arr.end(), [](long x, long y){return x<y;});\n    // if k>length of array\n\
    \    if(k>arr.size()){\n        k = arr.size();\n    }\n    // if k is zero\n\
    \    if(k==0){\n        return result;\n    }\n    // k can have only k elements\
    \ in it\n    // if k is greater than length of arr\n    if(k>arr.size()){\n  \
    \      // then copy the arr elements and return result\n        result = arr;\n\
    \    }\n    // if k is less than or equal to length of arr\n    else{\n      \
    \  // then copy the required k elements from arr and return result\n        std::vector<long>\
    \ arr2(k);\n        std::copy(arr.begin(), arr.end(), arr2.begin());\n       \
    \ result.insert(result.end(), arr2.begin(), arr2.end());\n    }\n    return result;",
  "    std::vector<long> v;\n    long long m = INT_MAX;\n    // Your code goes here\n\
    \    std::nth_element(arr.begin(), arr.end(), arr.begin());\n    long long count\
    \ = 1;\n    int i = 0;\n    while (i < k) {\n        v.push_back(arr[i]);\n  \
    \      i += 1;\n    }\n    count = (v.size());\n    while (count > 0) {\n    \
    \    m += 1;\n        if (m == 1) {\n            count -= 1;\n        }\n    }\n\
    \    return v;", "    int n = arr.size();\n    std::vector<long> res;\n    //\
    \ Build a prefix tree \n    // Time complexity: O(n*logn) \n    long ans = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < n; ++i)\n        if (arr[i] > ans)\n            ans\
    \ = arr[i];\n        std::pair<long, bool> tmp(ans, true);\n        res.push_back(tmp.first);\n\
    \        long tmpMax = tmp.first;\n        while (i < n) {\n            if (arr[i]\
    \ < tmpMax) {\n                tmp.second = false;\n                long tmpPos\
    \ = 0;\n                for (int j = i; j < n; ++j) {\n                    if\
    \ (arr[j] > tmpMax)\n                        break;\n                    if (arr[j]\
    \ == tmpMax)\n                        ++tmpPos;\n                }\n         \
    \       ans = max(ans, (tmpMax + arr[i]) / tmpPos);\n            } else {\n  \
    \              tmp.second = true;\n                tmpMax = arr[i];\n        \
    \        for (j = i; j < n; ++j)\n                    if (arr[j] < tmpMax)\n \
    \                       break;\n                ans = max(ans, (arr[i] + tmpMax)\
    \ / tmpPos);\n            }\n            res.push_back(tmp.first);\n         \
    \   ++i;\n        }\n        // Build a suffix tree\n        // Time complexity:\
    \ O(n*logn) \n        ans = std::numeric_limits<long>::max();\n        for (long\
    \ i = 0; i < n; ++i)\n            if (arr[i] > ans)\n                ans = arr[i];\n\
    \            std::pair<long, bool> tmp(ans, true);\n            res.push_back(tmp.first);\n\
    \            long tmpMax = tmp.first;\n            while (i < n) {\n         \
    \       if (arr[i] < tmpMax) {\n                    tmp.second = false;\n    \
    \                long tmpPos = 0;\n                    for (int j = i; j < n;\
    \ ++j) {\n                        if (arr[j] > tmpMax)\n                     \
    \       break;\n                        if (arr[j] == tmpMax)\n              \
    \              ++tmpPos;\n                    }\n                    ans = max(ans,\
    \ (tmpMax + arr[i]) / tmpPos);\n                } else {\n                   \
    \ tmp.second = true;\n                    tmpMax = arr[i];\n                 \
    \   for (j = i; j < n; ++j)\n                        if (arr[j] < tmpMax)\n  \
    \                          break;\n                    ans = max(ans, (arr[i]\
    \ + tmpMax) / tmpPos);\n                }\n                res.push_back(tmp.first);\n\
    \                ++i;\n            }\n        std::sort(res.begin(), res.end());\n\
    \        long idx = 0;\n        for (long i = 1; i < k; ++i) {\n            if\
    \ (res[idx] <= res[i - 1]) {\n                std::swap(res[idx], res[i - 1]);\n\
    \                std::swap(ans, res[", "    std::sort(arr.begin(), arr.end());\n\
    \    std::vector<long> max{arr.front()};\n    long len = 0;\n    while (arr.size()\
    \ > 1 && k > 0) {\n        ++len;\n        if (len < k) {\n            max.push_back(arr[len]);\n\
    \        }\n        std::rotate(arr.begin(), arr.begin() + len - 1, arr.end());\n\
    \    }\n    return max;", "    std::vector<long> result(k);\n    if (k >= arr.size())\
    \ k = arr.size();\n    std::partial_sort(arr.begin(), arr.begin() + k, result.begin(),\
    \ max_compare);\n    for (long i = 0; i < k; ++i)\n        result[i] = arr[i];\n\
    \    return result;", "    std::vector<long> max_arr;\n    long max_val = INT_MIN;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        max_val = std::max(arr[i],\
    \ max_val);\n    }\n\n    for (int i = 0; i < k; i++) {\n        long index =\
    \ max_arr[k - i - 1];\n        long val = arr[index];\n        arr[index] = INT_MIN;\n\
    \        max_val = std::max(val, max_val);\n    }\n\n    max_arr.push_back(max_val);\n\
    \n    for (int i = 0; i < arr.size(); i++) {\n        long index = max_arr[k -\
    \ i - 1];\n        long val = arr[index];\n        arr[index] = INT_MIN;\n   \
    \     max_val = std::max(val, max_val);\n    }\n\n    return max_arr;", "    //\
    \ write your code here\n    long n = arr.size();\n    long max = 0;\n    long\
    \ min = 0;\n    std::vector<long> res;\n    long mid = n / 2;\n    for (long i\
    \ = n - 1; i >= 0; i--) {\n        if(arr[i] > arr[mid + 1]) {\n            max\
    \ = arr[i];\n            mid = mid + 1;\n        }\n        else if(arr[i] > arr[mid])\
    \ {\n            max = max;\n            mid = mid - 1;\n        }\n        else\
    \ {\n            max = max;\n            mid = mid;\n        }\n        if (k\
    \ <= 0) {\n            break;\n        }\n        if (max >= arr[i]) {\n     \
    \       min = arr[i];\n        }\n        if (min <= arr[i]) {\n            min\
    \ = arr[i];\n        }\n        if (min >= arr[i]) {\n            min = arr[i];\n\
    \        }\n    }\n    std::vector<long> temp;\n    while (k >= 0) {\n       \
    \ long curr = arr[mid];\n        temp = res;\n        while (curr <= temp[mid])\
    \ {\n            mid = mid + 1;\n        }\n        res.push_back(arr[mid]);\n\
    \        mid = mid - 1;\n        k--;\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    long currMax = arr[0];\n    long maxLen = 1;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > currMax) {\n            maxLen\
    \ = i;\n            currMax = arr[i];\n        }\n    }\n    for (int i = 0; i\
    \ < k; i++) {\n        long index = maxLen - k;\n        long maxNum = arr[index];\n\
    \        res.push_back(maxNum);\n        maxLen--;\n    }\n    return res;", " \
    \   assert(arr.size() <= 100000);\n    assert(k <= arr.size());\n    std::priority_queue<long>\
    \ max_heap;\n    std::vector<long> ret;\n    ret.push_back(0);\n    // We put\
    \ the max number in max_heap first\n    max_heap.emplace(arr[0]);\n    // We push\
    \ them until k is smaller than the size of max_heap which is max heap\n    while\
    \ (max_heap.size() > k) {\n        ret.push_back(max_heap.top());\n        max_heap.pop();\n\
    \    }\n    while (max_heap.size() > 1) {\n        long left = max_heap.top();\n\
    \        long right = max_heap.top();\n        long res = 0;\n        if (left\
    \ < right) {\n            res = max(left, right);\n        }\n        max_heap.pop();\n\
    \        max_heap.emplace(res);\n    }\n    while (max_heap.size() == 1) {\n \
    \       ret.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return\
    \ ret;", "    // write your code here\n    long i=0;\n    std::vector<long> result;\n\
    \    while(i < arr.size() && k >= 0){\n        if(arr[i] > arr[i-1]){\n      \
    \      result.push_back(arr[i]);\n            k-=1;\n        }\n        i++;\n\
    \    }\n    return result;", "    long result = 0;\n    std::vector<long> ret;\n\
    \    long maxSoFar = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ maxSoFar = std::max(maxSoFar, arr[i]);\n        if (k > 0 && i == arr.size()\
    \ - 1) {\n            ret.push_back(maxSoFar);\n        } else {\n           \
    \ if (maxSoFar >= arr[i]) {\n                ret.push_back(arr[i]);\n        \
    \        k--;\n            }\n        }\n    }\n    return ret;", "    // Your\
    \ code goes here\n    std::map<long, long> map;\n    std::vector<long> result;\n\
    \    long i;\n    long sum = 0;\n    for(i = 0; i < arr.size(); i++) {\n     \
    \   sum += arr[i];\n        map[sum] = i;\n    }\n\n    for(long sum = 0; sum\
    \ < k;) {\n        auto it = map.find(sum);\n        if (it == map.end()) {\n\
    \            result.push_back(sum);\n            sum += arr[sum];\n        }\n\
    \        else {\n            result.push_back(it->second);\n            sum +=\
    \ arr[it->second];\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  long max_element = 0;\n  long max_index = -1;\n  for (int i = 0;\
    \ i < k; i++) {\n    if (max_element < arr[i]) {\n      max_element = arr[i];\n\
    \      max_index = i;\n    }\n  }\n  result.push_back(max_element);\n  while (max_index\
    \ > 0) {\n    max_element = arr[max_index];\n    max_index--;\n    for (int j\
    \ = max_index - 1; j >= 0; j--) {\n      if (max_element < arr[j]) {\n       \
    \ arr[j] = arr[j + 1];\n      }\n    }\n    result.push_back(max_element);\n \
    \ }\n  return result;", "    \n    long count = 0;\n    std::vector<long> vMax;\n\
    \    vMax.reserve(k);\n    \n    long max = 0;\n    long i = 0;\n    \n    for(;\
    \ i < arr.size() && count < k; i++) {\n        \n        long val = 0;\n     \
    \   val = arr[i];\n        if(val > max) {\n            max = val;\n        }\n\
    \        \n        if(val >= 0) {\n            count += 1;\n        }\n    }\n\
    \    \n    for(; i < arr.size() && count < k; i++) {\n        \n        long val\
    \ = 0;\n        val = arr[i];\n        if(val >= 0) {\n            count += 1;\n\
    \        }\n    }\n    \n    for(; i < arr.size(); i++) {\n        \n        long\
    \ val = 0;\n        val = arr[i];\n        if(val >= 0) {\n            count +=\
    \ 1;\n        }\n    }\n    \n    vMax.push_back(max);\n    return vMax;", " \
    \   int n = arr.size();\n    long i, max, max_pos = 0;\n    int mid = n / 2;\n\
    \    \n    // Find the maximum number in the mid element\n    max = arr[mid -\
    \ 1];\n    max_pos = mid;\n    for (i = mid + 1; i <= n; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            max_pos = i;\n        }\n \
    \   }\n    \n    // Find the maximum number in the mid element and the left and\
    \ right elements\n    std::vector<long> res = { arr[max_pos] };\n    for (i =\
    \ max_pos - 1; i >= 0; i--) {\n        if (arr[i] > arr[i + 1]) {\n          \
    \  break;\n        }\n        res.push_back(arr[i]);\n    }\n    \n    // Return\
    \ the vector\n    return res;", "   long m = 0, n = arr.size();\n   // This will\
    \ be our returned array\n   std::vector<long> result;\n   // Keep track of the\
    \ largest value seen so far\n   long largest_element = arr[0];\n   // Move through\
    \ the array from left to right \n   for (int i = 1; i < n; ++i) {\n      // If\
    \ the ith element is greater than our largest seen so far, set \n      // the\
    \ largest seen so far to the ith element and continue\n      if (arr[i] > largest_element)\
    \ {\n         largest_element = arr[i];\n         m = i;\n      }\n      // If\
    \ the ith element is less than our largest seen so far and \n      // k has already\
    \ been filled, then move to next element\n      else if (m >= k) {\n         break;\n\
    \      }\n   }\n   // Add an additional element if needed\n   while ((k <= n -\
    \ m)) {\n      result.push_back(arr[m - k - 1]);\n      k++;\n   }\n   // Add\
    \ the last k elements\n   while ((k <= n - m)) {\n      result.push_back(arr[m\
    \ - k]);\n      k++;\n   }\n   return result;", "  std::sort(arr.begin(), arr.end());\n\
    \  std::vector<long> maximum(k);\n  maximum[k] = arr[k];\n  for (int i = 1; i\
    \ < k; i++) {\n    if (arr[i] > arr[i - 1]) {\n      maximum[i] = arr[i];\n  \
    \  } else {\n      maximum[i] = arr[i - 1];\n    }\n  }\n  return maximum;", " \
    \   // write your code here\n    if(arr.size()==0){\n        return arr;\n   \
    \ }\n    if(k>=arr.size()){\n        return arr;\n    }\n    long maxval=arr[0];\n\
    \    std::vector<long> res(k);\n    for(long i=0;i<k;i++){\n        if(arr[i]>maxval){\n\
    \            maxval=arr[i];\n        }\n    }\n    long i=0;\n    for(long j=0;j<arr.size();j++){\n\
    \        if(arr[j]<=maxval){\n            res[i]=arr[j];\n            i++;\n \
    \       }\n    }\n    return res;", "    // Fill your code here.\n    long n =\
    \ arr.size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n       \
    \ if (k == 1) {\n            ans = max(ans, arr[i]);\n        }\n        else\
    \ if (arr[i] > arr[i + 1]) {\n            ans = max(ans, arr[i]);\n        }\n\
    \        else if (arr[i] < arr[i + 1]) {\n            ans = max(ans, arr[i + 1]);\n\
    \        }\n        else {\n            ans = max(ans, arr[i + 1]);\n        }\n\
    \    }\n    return std::vector<long>(ans, arr[n]);", "    int size = arr.size();\n\
    \    long maxVal = arr[0];\n    std::vector<long> res(size);\n    std::sort(arr.begin(),\
    \ arr.end());\n    for(int i = 0; i < size; i++) {\n        if(arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    long maxIndex = 0;\n\
    \    long currentMax = maxVal;\n    for(int i = 0; i < size; i++) {\n        if(arr[i]\
    \ > currentMax && i != 0) {\n            res.push_back(maxIndex);\n          \
    \  currentMax = maxVal;\n            maxIndex = 0;\n        }\n        else if(arr[i]\
    \ <= currentMax) {\n            maxIndex++;\n            currentMax = arr[i];\n\
    \        }\n        else {\n            currentMax = arr[i];\n        }\n    }\n\
    \    res.push_back(maxIndex);\n    return res;", "    std::vector<long> ans;\n\
    \    long l = 0, r = arr.size();\n    long mid = 0;\n    long maxVal = 0;\n  \
    \  \n    // Find the maximum in the left part of the array\n    while (l < r)\
    \ {\n        mid = (l + r) / 2;\n        if (mid > k) mid = k; // k = middle index\n\
    \        if (arr[mid] > maxVal)\n            maxVal = arr[mid];\n        else\n\
    \            r = mid;\n    }\n\n    // Find the maximum in the right part of the\
    \ array\n    while (l < r) {\n        mid = (l + r) / 2;\n        if (mid > k)\
    \ mid = k; // k = middle index\n        if (arr[mid] > maxVal)\n            maxVal\
    \ = arr[mid];\n        else\n            l = mid + 1;\n    }\n\n    // Add the\
    \ maximum value in the right part of the array to result\n    ans.push_back(maxVal);\n\
    \n    return ans;", "    // Write your code here.\n    std::ios_base::sync_with_stdio(false);\n\
    \    cin.tie(NULL);\n    \n    long sum = 0;\n    std::vector<long> ans;\n   \
    \ \n    for (long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    \
    \    if (sum > k)\n            break;\n        ans.push_back(arr[i]);\n    }\n\
    \    \n    return ans;", "    // Your code here\n    // code here\n    // code\
    \ here\n    // code here\n    // code here\n    // code here\n    // code here\n\
    \    // code here\n    return arr;", "    // Your code here\n    return {};",
  "    std::vector<long> result;\n    if (k == 0) return result;\n    long currMax\
    \ = -1000;\n    long currMin = 1000;\n    int count = 0;\n    for (long i : arr)\
    \ {\n        if (currMax < i) {\n            currMax = i;\n            count =\
    \ 1;\n        } else if (currMin > i) {\n            currMin = i;\n          \
    \  count++;\n        }\n        if (count == k) {\n            result.push_back(i);\n\
    \            count = 0;\n        }\n    }\n    if (count > 0) {\n        result.push_back((k\
    \ - count) * 1000);\n    }\n    return result;", "    long long res = 0;\n   \
    \ long long currMax = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > arr[currMax])\n            currMax = i;\n    }\n    while\
    \ (currMax < k) {\n        arr[currMax] = -1;\n        res++;\n        currMax++;\n\
    \    }\n    std::cout << \"Sorted arr: \" << std::endl;\n    for (long long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] != -1)\n            std::cout\
    \ << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    std::cout << \"\
    Maximum k numbers are: \" << std::endl;\n    for (long long i = 0; i < k; i++)\n\
    \        std::cout << res << \" \";\n    std::cout << std::endl;\n    return arr;",
  "    // Write your code here\n    // Write your code here\n    if(arr.size()<=k)\n\
    \        return arr;\n    std::vector<long> ans;\n    long max_num=arr[0];\n \
    \   long max_index = 0;\n    for(size_t i=0;i<arr.size();i++){\n        if(arr[i]\
    \ > max_num)\n        {\n            ans.clear();\n            ans.push_back(max_num);\n\
    \            max_num = arr[i];\n            max_index = i;\n        }\n      \
    \  else if(arr[i] == max_num)\n        {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max_num);\n    for(long i=0;i<k;i++){\n \
    \       if(max_index != i)\n        {\n            ans.push_back(arr[max_index]);\n\
    \        }\n        max_index++;\n    }\n    return ans;", "    assert(k <= arr.size());\n\
    \    std::vector<long> result;\n    long tempMax = arr[0];\n    for (auto it :\
    \ arr) {\n        if (tempMax < it) {\n            tempMax = it;\n        }\n\
    \    }\n    for (auto it : arr) {\n        if (tempMax < it) {\n            result.push_back(tempMax);\n\
    \            tempMax = it;\n        }\n    }\n    for (auto it : arr) {\n    \
    \    result.push_back(it);\n    }\n    for (int i = 1; i < k; i++) {\n       \
    \ result.push_back(result.back());\n    }\n    return result;", "    std::vector<long>\
    \ sorted_arr;\n    int length = arr.size();\n    for (int i = 0; i < k; i++) {\n\
    \        sorted_arr.push_back(arr[i]);\n    }\n    for (long i = k; i < length;\
    \ i++) {\n        long maxIndex = std::numeric_limits<int>::max();\n        long\
    \ maxValue = 0;\n        for (long j = 0; j < i; j++) {\n            if (arr[j]\
    \ > maxValue) {\n                maxValue = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        sorted_arr[maxIndex] = arr[i];\n   \
    \     sorted_arr[i] = maxValue;\n    }\n    return sorted_arr;", "    // Your\
    \ code here\n    long max = 0;\n    for(long i = arr.size() - 1; i>= 0; i--)\n\
    \        for(long j = 0; j<k; j++)\n            if(arr[i] >= arr[j] && arr[i]\
    \ >= max)\n                max = arr[i];\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++)\n        ans.push_back(max);\n    return ans;", "    int\
    \ size = arr.size();\n    if (k > size || k < 0) {\n        std::cerr << \"The\
    \ k value is out of range!\" << std::endl;\n        return {};\n    }\n    if\
    \ (k == 0)\n        return arr;\n    std::vector<long> max_arr(arr.size(), 0);\n\
    \    for (int i = 0; i < size; i++) {\n        max_arr[arr[i] - 1000] = arr[i];\n\
    \    }\n    for (int i = size; i > 0; i--) {\n        int m = max_arr[0];\n  \
    \      for (int j = 0; j < i; j++) {\n            if (max_arr[j] > m) {\n    \
    \            m = max_arr[j];\n            }\n        }\n        max_arr[i - 1]\
    \ = m; // max_arr[i-1] is the maximum number\n    }\n    return max_arr;", " \
    \   // code here\n    return std::max_element(std::begin(arr), std::end(arr),\
    \ \n        [] (long a, long b) { return (a > b); });", "    std::vector<long>\
    \ max_arr;\n    long max_num = 0, max_num_index = 0;\n    for (size_t i = 0; i\
    \ < k; i++) {\n        max_num = std::max(max_num, arr[i]);\n    }\n    max_arr.push_back(max_num);\n\
    \    for (size_t i = 0; i < k; i++) {\n        if (arr[i] >= arr[0] + i * max_num)\
    \ {\n            long temp = 0;\n            long index = 0, end = 0;\n      \
    \      for (size_t j = i; j < k; j++) {\n                if (arr[j] < arr[j +\
    \ 1]) {\n                    temp = arr[j];\n                    index = j;\n\
    \                    end = j + 1;\n                }\n            }\n        \
    \    if (temp >= arr[end]) {\n                max_arr.insert(max_arr.end(), arr[end],\
    \ temp);\n            }\n        }\n    }\n    return max_arr;", "  // Write your\
    \ code here\n  if (arr.size() == 0)\n  {\n    return arr;\n  }\n  if (arr.size()\
    \ < k)\n  {\n    return arr;\n  }\n  long maxval = arr[0];\n  long pos = 0;\n\
    \  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] > maxval) {\n     \
    \ maxval = arr[i];\n      pos = i;\n    }\n  }\n  std::vector<long> ans;\n  ans.push_back(maxval);\n\
    \  std::partial_sort_copy(arr.begin(), arr.begin() + pos, arr.end(), \n      \
    \                   std::back_inserter(ans));\n  return ans;"]
stop_tokens:
- "\n}"
