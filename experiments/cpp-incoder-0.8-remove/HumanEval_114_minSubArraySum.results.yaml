language: cpp
name: HumanEval_114_minSubArraySum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); ++i)\n    {\n        if(nums[i] > 0) sum += nums[i];\n\
    \        else if(sum < min)\n            min = sum;\n        else\n          \
    \  sum -= nums[i];\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprl6bt6h_: /tmp/tmprl6bt6h_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   if(nums.size()<=1){\n        return nums.at(0)*(nums.size()+1);\n    }\n \
    \   long min=nums.at(0),max=0,sum=0;\n    for(int i=0;i<nums.size();i++){\n  \
    \      if(nums[i]<min){\n            min=nums[i];\n        }\n        else if(nums[i]>max){\n\
    \            max=nums[i];\n        }\n        sum=sum+nums[i];\n    }\n    if(min==max){\n\
    \        sum+=min;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmzvp1fou: /tmp/tmpmzvp1fou.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long min = INT_MAX;\n\
    \    long long sum = 0;\n    for (long long i : nums) {\n        sum += i;\n \
    \       if (sum < min)\n            min = sum;\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmavugf_g: /tmp/tmpmavugf_g.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MIN;\n  \
    \  for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for\
    \ (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        \
    \    if (sum < minSum) minSum = sum;\n        }\n    }\n    return minSum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl8q3xb0p: /tmp/tmpl8q3xb0p.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // your code here\n  int n =\
    \ nums.size();\n  long ans = std::numeric_limits<long>::max();\n  for (int i =\
    \ 0; i < n; i++) {\n    long cur = nums[i];\n    for (int j = 0; j < i; j++) {\n\
    \      if (nums[j] + cur < cur) {\n        cur = nums[j] + cur;\n      }\n   \
    \ }\n    if (cur < ans) {\n      ans = cur;\n    }\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpytcvicjs: /tmp/tmpytcvicjs.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3, (long)2, (long)-10}))) == (-14)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long minsum = 0;\n   \
    \ long long cursum = 0;\n    for(int i = 0; i < (int)nums.size(); i++){\n    \
    \    cursum = cursum + nums[i];\n        if(cursum > minsum){\n            minsum\
    \ = cursum;\n        }\n    }\n    return minsum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpisd1s8xd: /tmp/tmpisd1s8xd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpikpj1u7p: /tmp/tmpikpj1u7p.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n  int\
    \ n = nums.size();\n  assert(n > 0);\n  long min_sum = nums[0];\n  long sum_of_first\
    \ = 0;\n  for (int i = 0; i < n; ++i) {\n    sum_of_first += nums[i];\n    if\
    \ (sum_of_first < min_sum) {\n      min_sum = sum_of_first;\n    }\n  }\n  return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5wuek24m: /tmp/tmp5wuek24m.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // code here\n assert(nums.size()\
    \ > 0);\n    long sum = 0;\n    long start = nums[0];\n    for (long i = 1;i <\
    \ nums.size();i++) {\n      if (start + nums[i] > sum) {\n        sum = start\
    \ + nums[i];\n      }\n      start += nums[i];\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp16hn8dgr: /tmp/tmp16hn8dgr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    //Your code here\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7h1089p2: /tmp/tmp7h1089p2.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   int n = nums.size();\n    if (n <= 0) {\n        return 0;\n    }\n\n    for\
    \ (int i = 1; i < n; i++) {\n        int curSum = nums[i - 1] + nums[i];\n\n \
    \       for (int j = i - 1; j >= 0 && nums[j] == nums[i]; j--) {\n           \
    \ nums[j] = nums[j + 1];\n        }\n        nums[i - 1] = curSum;\n    }\n  \
    \  for (int i = 0; i < n; i++) {\n        int curSum = nums[i - 1] + nums[i];\n\
    \        if (curSum >= nums[0]) {\n            return curSum;\n        }\n   \
    \ }\n    return 0;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwh63h7f9: /tmp/tmpwh63h7f9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    long\
    \ ans = nums[0];\n    long sum = nums[0];\n    long min_sum = ans;\n    int min_idx\
    \ = -1;\n    for (int i = 1; i < n; ++i) {\n        // Find smallest sum and index\
    \ of smallest sum\n        long new_sum = sum + nums[i];\n        int idx = (int)\
    \ new_sum / nums[i];\n        if (new_sum < min_sum) {\n            min_sum =\
    \ new_sum;\n            min_idx = idx;\n        }\n        // update sum with\
    \ current element of nums\n        sum = new_sum;\n    }\n    // Check if there\
    \ is a sub-array with sum of 'ans' and its index\n    int end_idx = -1;\n    for\
    \ (int i = n-1; i >= 0; --i) {\n        int curr_sum = sum + nums[i];\n      \
    \  if (curr_sum == ans) {\n            end_idx = i;\n            break;\n    \
    \    }\n    }\n    if (end_idx != -1) {\n        ans = sum;\n        min_sum =\
    \ ans;\n        min_idx = end_idx;\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpib76keqi: /tmp/tmpib76keqi.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX, ans = 0;\n\
    \    for (long i : nums) ans = min(ans, min + i);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05u74md4.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp05u74md4.cpp:8:47: error: \u2018min\u2019 cannot be used\
    \ as a function\n    8 |     for (long i : nums) ans = min(ans, min + i);\n  \
    \    |                                               ^\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    long\
    \ min = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n;\
    \ j++) {\n            min += nums[j];\n        }\n    }\n    for (int i = 0; i\
    \ < n; i++) {\n        for (int j = i; j < n; j++) {\n            int a = nums[j]\
    \ - min;\n            int b = min - nums[i];\n            int sum = a+b;\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \  }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6qqulgp8: /tmp/tmp6qqulgp8.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = -10000L;\n  \
    \  std::vector<long> leftNums;\n    std::vector<long> rightNums;\n\n    leftNums.insert(leftNums.begin(),\
    \ nums.begin(), nums.end());\n    rightNums.insert(rightNums.begin(), nums.begin(),\
    \ nums.end());\n\n    while (leftNums.size() > 0) {\n        long leftSum = leftNums.back();\n\
    \        leftNums.pop_back();\n\n        long rightSum = rightNums.back();\n \
    \       rightNums.pop_back();\n\n        minSum = std::min(leftSum + rightSum,\
    \ minSum);\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfiw0gurh: /tmp/tmpfiw0gurh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (std::size_t i = 0; i != nums.size(); ++i) {\n        long sum = nums[i];\n\
    \        for (std::size_t j = i + 1; j <= nums.size(); ++j) {\n            sum\
    \ += nums[j];\n            if (sum < minSum) {\n                minSum = sum;\n\
    \            }\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpena40tb2: /tmp/tmpena40tb2.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ sum = 0;\n    long long sumOfOne = 0;\n    long long min = std::numeric_limits<long\
    \ long>::max();\n    long long max = std::numeric_limits<long long>::min();\n\
    \    for(int i=0;i<nums.size();++i)\n    {\n        if(nums[i] != 0)\n       \
    \ {\n            sum += nums[i];\n            sumOfOne += nums[i];\n         \
    \   if(sumOfOne > max)\n                max = sumOfOne;\n        }\n    }\n  \
    \  if(sum == 0)\n        return 0;\n    return std::min(sum, max);\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gbe2euf.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8gbe2euf.cpp:24:29: error: no matching function for call\
    \ to \u2018min(long int&, long long int&)\u2019\n   24 |     return std::min(sum,\
    \ max);\n      |                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8gbe2euf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp8gbe2euf.cpp:24:29: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018long long int\u2019)\n   24 |     return std::min(sum, max);\n   \
    \   |                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8gbe2euf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8gbe2euf.cpp:24:29:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018long long int\u2019)\n   24 |     return std::min(sum,\
    \ max);\n      |                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gbe2euf.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ min_sum = nums[0];\n    for(long i =1; i < nums.size(); i++) {\n        min_sum\
    \ = std::min(min_sum + nums[i],nums[i]); \n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp68qlegdr: /tmp/tmp68qlegdr.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = 0;\n    std::vector<bool>\
    \ visited(nums.size(), false);\n    visited[0] = visited[1] = visited[2] = true;\n\
    \    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] <= 0) {\n\
    \            continue;\n        }\n        visited[i] = true;\n        minSum\
    \ = std::min(minSum, visited[i - 1] + nums[i]);\n    }\n    return minSum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp65jfig30: /tmp/tmp65jfig30.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Your code here\n  std::sort(nums.begin(),nums.end());\
    \ \n  return std::accumulate(nums.begin(), nums.end(), nums.front() - nums.back());\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7kq1xf7g: /tmp/tmp7kq1xf7g.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Code here ...\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw8l0xw_6: /tmp/tmpw8l0xw_6.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long sum\
    \ = 0;\n    long sumOfPrevSubArrays = 0;\n    long min = INT_MAX;\n    for(long\
    \ i = 0; i < nums.size(); ++i)\n    {\n        sum += nums[i];\n        if(sumOfPrevSubArrays\
    \ + nums[i] < min)\n            min = sumOfPrevSubArrays + nums[i];\n        sumOfPrevSubArrays\
    \ = sum;\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp_e99xla: /tmp/tmpp_e99xla.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    std::sort(nums.begin(),\
    \ nums.end());\n    for (long i: nums)\n        sum += i;\n    return sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp02uf7amf: /tmp/tmp02uf7amf.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.size()==0) return 0;\n\
    \    std::vector<long> temp;\n    temp.push_back(nums[0]);\n    for(int i=1;i<nums.size();i++){\n\
    \        long cursum=temp[i-1]+nums[i];\n        temp.push_back(nums[i]);\n  \
    \      if(temp[temp.size() - 1]<cursum) \n            temp.clear();\n    }\n \
    \   return temp[temp.size() - 1];\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjpa89yav: /tmp/tmpjpa89yav.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    //Your code goes here\n   \
    \ int min_sum = INT_MIN, min_index = -1;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        for(int j = 0; j < nums.size(); j++) {\n            long sub_sum\
    \ = nums[j] + nums[i];\n            if(sub_sum < min_sum) {\n                min_sum\
    \ = sub_sum;\n                min_index = j;\n            }\n        }\n    }\n\
    \    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj43rg509: /tmp/tmpj43rg509.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int N = nums.size();\n    std::vector<long>\
    \ currSum(N + 1);\n    std::vector<long> minSum(N + 1);\n    minSum[0] = nums[0];\n\
    \    currSum[0] = nums[0];\n    long long minSumVal = nums[0];\n    for (int i\
    \ = 1; i < N; i++) {\n        currSum[i] = max(nums[i] - minSum[i - 1] + currSum[i\
    \ - 1],\n                        nums[i] - minSum[i - 1]);\n        minSum[i]\
    \ = min(minSum[i - 1], currSum[i]);\n    }\n    return minSum[N];\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppi3hprq8.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppi3hprq8.cpp:14:22: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   14 |         currSum[i]\
    \ = max(nums[i] - minSum[i - 1] + currSum[i - 1],\n      |                   \
    \   ^~~\n      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppi3hprq8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmppi3hprq8.cpp:16:21: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   16 |         minSum[i] = min(minSum[i - 1], currSum[i]);\n      |        \
    \             ^~~\n      |                     std::min\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppi3hprq8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Your code here\n  assert(nums.size()\
    \ == 2);\n  std::stack<long> sums;\n  sums.push(0);\n  sums.push(0);\n  sums.push(nums[0]);\n\
    \  sums.push(0);\n  sums.push(0);\n  sums.push(0);\n  for (long i = 0; i < nums.size();\
    \ i++) {\n    long sum = sums.top() + nums[i];\n    sums.push(sum);\n    if (sum\
    \ == sums.top()) {\n      sums.pop();\n      sums.push(0);\n    } else {\n   \
    \   sums.pop();\n      sums.push(sum);\n    }\n  }\n  return sums.top();\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa4ry6axt: /tmp/tmpa4ry6axt.cpp:8: long int minSubArraySum(std::vector<long
    int>): Assertion `nums.size() == 2'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n  long\
    \ sum = 0;\n  for(size_t i = 0; i < nums.size(); i++)\n    sum += nums[i];\n \
    \ std::cout << sum << std::endl;\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9z_yliry: /tmp/tmp9z_yliry.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: '16

    '
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    int n = nums.size();\n\
    \    long min_so_far = nums[0];\n    for (int i = 1; i < n; i++) {\n        min_so_far\
    \ = nums[i] + min_so_far;\n    }\n    return min_so_far;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1e0xbm1i: /tmp/tmp1e0xbm1i.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   std::vector<long> ans;\n    int len = nums.size();\n    long minSum = 0, sum\
    \ = 0;\n    for(int i = 0; i < len; i++){\n        sum += nums[i];\n        if((sum\
    \ >= minSum) && (sum >= nums[i])){\n            minSum = sum;\n            ans.push_back(i);\n\
    \            sum -= nums[i];\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpws_iqzs3: /tmp/tmpws_iqzs3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long min_sum\
    \ = INT_MAX;\n    for (long i : nums) {\n        sum += i;\n        if (sum <\
    \ min_sum) {\n            min_sum = sum;\n        }\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7_5mz2_q: /tmp/tmp7_5mz2_q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0, min = nums[0];\n\
    \    for (long val : nums)\n        sum += val;\n    if (sum > 0)\n        min\
    \ = std::min(min, sum);\n    std::vector<long> res;\n    for (long val : nums)\n\
    \        if (val < min)\n            res.push_back(val);\n        else\n     \
    \       res.push_back(min);\n    return sum - min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpx4vn9plo: /tmp/tmpx4vn9plo.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // code here\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkoep1cxz: /tmp/tmpkoep1cxz.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    int n = nums.size();\n\
    \    int max_sum = INT_MIN;\n    int min_sum = INT_MAX;\n    long sum = 0;\n \
    \   for(int i = 1; i < n; ++i) {\n        sum += nums[i];\n        if(sum < min_sum)\
    \ min_sum = sum;\n        if(sum > max_sum) max_sum = sum;\n    }\n    return\
    \ max_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvrt1py_4: /tmp/tmpvrt1py_4.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long minSum\
    \ = nums[0]; // Min sum is 0\n    long index = 0; // Index of the array where\
    \ the min sum will be inserted\n    for (long i = 2; i < nums.size(); i++) {\n\
    \        if (nums[i] < minSum) {\n            minSum = nums[i];\n            index\
    \ = i;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfwhd_gb2: /tmp/tmpfwhd_gb2.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    // write\
    \ your code in C++\n    if(nums.size() == 0)\n    {\n        return 0;\n    }\n\
    \    long ans = nums[0];\n    for(int i = 1; i < nums.size() && ans != 0; i++)\n\
    \    {\n        ans = nums[i] + ans;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2y5jtl3g: /tmp/tmp2y5jtl3g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = nums[0];\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        // Update the current min sum.\n\
    \        min = min(min + nums[i], nums[i + 1]);\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wy91xny.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2wy91xny.cpp:10:45: error: \u2018min\u2019 cannot be used\
    \ as a function\n   10 |         min = min(min + nums[i], nums[i + 1]);\n    \
    \  |                                             ^\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++)\n        sum += nums[i];\n    return sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6lw9fms0: /tmp/tmp6lw9fms0.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code in C++14\
    \ (#include <cstddef>)\n    long min_sum = numeric_limits<long>::max();\n    long\
    \ min_sub_sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        if (min_sub_sum\
    \ >= nums[i]) {\n            min_sub_sum = min_sub_sum - nums[i];\n        } else\
    \ {\n            min_sub_sum += nums[i];\n        }\n        if (min_sub_sum <\
    \ min_sum) {\n            min_sum = min_sub_sum;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpelaae3ru.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpelaae3ru.cpp:8:20: error: \u2018numeric_limits\u2019 was\
    \ not declared in this scope; did you mean \u2018std::numeric_limits\u2019?\n\
    \    8 |     long min_sum = numeric_limits<long>::max();\n      |            \
    \        ^~~~~~~~~~~~~~\n      |                    std::numeric_limits\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:46,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpelaae3ru.cpp:2:\n/usr/include/c++/9/limits:312:12:\
    \ note: \u2018std::numeric_limits\u2019 declared here\n  312 |     struct numeric_limits\
    \ : public __numeric_limits_base\n      |            ^~~~~~~~~~~~~~\n/tmp/tmpelaae3ru.cpp:8:35:\
    \ error: expected primary-expression before \u2018long\u2019\n    8 |     long\
    \ min_sum = numeric_limits<long>::max();\n      |                            \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.size() <= 0)\n    \
    \    return 0;\n    long res = nums[0];\n    for(int i = 1; i < nums.size(); i++)\n\
    \        res = min(res, nums[i] + minSubArraySum(nums.subvector(i, nums.size()\
    \ - i)));\n    return res;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i60nw70.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8i60nw70.cpp:11:54: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   11 |         res = min(res, nums[i] + minSubArraySum(nums.subvector(i, nums.size()\
    \ - i)));\n      |                                                      ^~~~~~~~~\n\
    \      |                                                      vector\n/tmp/tmp8i60nw70.cpp:11:15:\
    \ error: \u2018min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019\
    ?\n   11 |         res = min(res, nums[i] + minSubArraySum(nums.subvector(i, nums.size()\
    \ - i)));\n      |               ^~~\n      |               std::min\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8i60nw70.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Complete this function\n\
    \    int n = nums.size();\n    // Complete this function\n    long result = nums[0];\n\
    \    // Complete this function\n    for (int i = 1; i < n; i++) {\n        //\
    \ Complete this function\n        // Complete this function\n        // Complete\
    \ this function\n        // Complete this function\n        // Complete this function\n\
    \        // Complete this function\n        // Complete this function\n      \
    \  // Complete this function\n        // Complete this function\n        // Complete\
    \ this function\n    }\n    // Complete this function\n    return result;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnqp3v240: /tmp/tmpnqp3v240.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code here\n \
    \   // long long sum = 0;\n    long long min = INT_MAX, max = 0;\n    for (long\
    \ long i : nums) {\n        sum += i;\n        if (sum < min) min = sum;\n   \
    \     if (sum > max) max = sum;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m8_zjmu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7m8_zjmu.cpp:11:9: error: \u2018sum\u2019 was not declared\
    \ in this scope\n   11 |         sum += i;\n      |         ^~~\n/tmp/tmp7m8_zjmu.cpp:15:12:\
    \ error: \u2018sum\u2019 was not declared in this scope\n   15 |     return sum;\n\
    \      |            ^~~\n"
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    // your code\
    \ goes here\n    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0;\
    \ i < nums.size(); i++)\n    {\n        sum += nums[i];\n        if (sum < min)\n\
    \        {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp54o6ojle: /tmp/tmp54o6ojle.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  std::vector<std::pair<long, int>>\
    \ best;\n  best.emplace_back(0, 0);\n  best[0].first = -999;\n  best[0].second\
    \ = -999;\n\n  for (long i = 0; i < nums.size(); i++) {\n    best[i].first = 0;\n\
    \    best[i].second = 0;\n    for (long j = 0; j < i; j++) {\n      if (nums[j]\
    \ + nums[i] <= best[i].first + best[i].second) {\n        best[i].first = best[i].first\
    \ + nums[j] + nums[i];\n        best[i].second = i;\n      }\n    }\n  }\n  return\
    \ best[nums.size() - 1].first;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsleftpsr: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n// Your code goes here\nlong ans=0,sum=0;\n\
    for(long i=0;i<nums.size();i++)\n{\nif(nums[i]>sum)\nsum=nums[i];\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30uypgwa.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp30uypgwa.cpp:14:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   14 | int main() {\n      |     \
    \       ^\n/tmp/tmp30uypgwa.cpp:28:1: error: expected \u2018}\u2019 at end of\
    \ input\n   28 | }\n      | ^\n/tmp/tmp30uypgwa.cpp:6:45: note: to match this\
    \ \u2018{\u2019\n    6 | long minSubArraySum(std::vector<long> nums) {\n     \
    \ |                                             ^\n/tmp/tmp30uypgwa.cpp:28:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   28 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660140747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.empty()) {\n     \
    \   return 0;\n    }\n    long leftSum = std::accumulate(nums.begin(), nums.end(),\
    \ 0);\n    long rightSum = leftSum;\n    long leftIndex = nums.size() - 1;\n \
    \   long rightIndex = nums.size() - 1;\n    while (leftIndex >= 0 && rightIndex\
    \ >= 0) {\n        if (nums[leftIndex] <= nums[rightIndex]) {\n            leftSum\
    \ += nums[leftIndex];\n            leftIndex -= 1;\n        } else {\n       \
    \     rightSum -= nums[rightIndex];\n            rightIndex -= 1;\n        }\n\
    \    }\n    return leftSum + rightSum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6f5dxqvi: /tmp/tmp6f5dxqvi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    for\
    \ (long &x: nums) {\n        ans = min(ans, x + ans);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gto6ok8.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9gto6ok8.cpp:9:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n    9 |         ans = min(ans,\
    \ x + ans);\n      |               ^~~\n      |               std::min\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9gto6ok8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long min = INT_MIN;\n    long max = INT_MAX;\n    int sum = 0;\n    for(long\
    \ i : nums){\n        sum+=i;\n        if(sum<min)\n            min=sum;\n   \
    \     if(sum>max)\n            max=sum;\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppbg0359g: /tmp/tmppbg0359g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum=0, min=INT_MAX;\n\
    \    long len=nums.size();\n    assert(len>0);\n    for (long i=0;i<len;++i) {\n\
    \        long j=i+1;\n        for (long k=0;j<len;++j,++k) {\n            sum+=nums[k];\n\
    \            assert(sum<min);\n            if (sum<min) min=sum;\n        }\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdgwutru7: /tmp/tmpdgwutru7.cpp:14: long int minSubArraySum(std::vector<long
    int>): Assertion `sum<min'' failed.

    '
  stdout: ''
  timestamp: 1660140751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.size() <= 1)\n   \
    \     return nums[0];\n    int m = nums.size();\n    long sum = nums[0];\n   \
    \ for (int i = 1; i < m; i++)\n        sum += nums[i];\n    int left = m / 2;\n\
    \    int right = m - 1;\n    while (left >= 0 && right < m) {\n        sum +=\
    \ nums[left--] * nums[right++];\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy1frxr1b: /tmp/tmpy1frxr1b.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // write your code here\n  std::sort(nums.begin(),nums.end());\n\
    \  int lower = 0, higher = nums.size() - 1;\n  long min = nums[lower];\n  long\
    \ maxSum = 0;\n  while(lower < higher + 1) {\n    if(lower + 1 == higher + 1)\
    \ {\n      maxSum = max(maxSum,nums[lower] + nums[higher]);\n      lower++;\n\
    \      higher--;\n    } else if(nums[lower] + nums[higher + 1] < nums[lower +\
    \ 1]) {\n      maxSum = max(maxSum,nums[lower] + nums[higher + 1]);\n      higher--;\n\
    \    } else {\n      maxSum = max(maxSum,nums[lower + 1] + nums[higher]);\n  \
    \    lower++;\n    }\n  }\n  return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpffzxgw.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdpffzxgw.cpp:14:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   14 |       maxSum = max(maxSum,nums[lower]\
    \ + nums[higher]);\n      |                ^~~\n      |                std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpdpffzxgw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n/tmp/tmpdpffzxgw.cpp:18:16: error: \u2018max\u2019\
    \ was not declared in this scope; did you mean \u2018std::max\u2019?\n   18 |\
    \       maxSum = max(maxSum,nums[lower] + nums[higher + 1]);\n      |        \
    \        ^~~\n      |                std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdpffzxgw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpdpffzxgw.cpp:21:16: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   21 |       maxSum = max(maxSum,nums[lower + 1] + nums[higher]);\n      | \
    \               ^~~\n      |                std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdpffzxgw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  std::vector<long> subArraySum(2\
    \ * nums.size(), 0);\n  std::partial_sum(nums.begin(), nums.end(), subArraySum.begin());\n\
    \  long minSum = *std::min_element(subArraySum.begin(), subArraySum.end());\n\
    \  minSum -= subArraySum.back();\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8tgum97q: /tmp/tmp8tgum97q.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  assert(nums.size() >= 1);\n \
    \ long min = INT_MAX;\n  long sum = nums[0];\n  for (size_t i = 1; i < nums.size();\
    \ i++) {\n    sum = sum + nums[i];\n    if (sum < min) {\n      min = sum;\n \
    \   }\n  }\n  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp36fhztd0: /tmp/tmp36fhztd0.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here.\n\
    \    long sum = 0;\n    long largest = INT_MIN;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum > largest) {\n            largest\
    \ = sum;\n        }\n    }\n    long smallest = INT_MAX;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < smallest)\
    \ {\n            smallest = sum;\n        }\n    }\n    long middle = (largest\
    \ + smallest) / 2;\n    long largestSum = sum - largest;\n    long smallestSum\
    \ = sum - smallest;\n    long midSum = sum - middle;\n    long finalSum = largestSum\
    \ + smallestSum + midSum;\n    return finalSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdunwin0t: /tmp/tmpdunwin0t.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); ++i) {\n        long long temp = nums[i]\
    \ + ans;\n        if (temp < ans) ans = temp;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpejd4zkna: /tmp/tmpejd4zkna.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  int n = nums.size();\n  long\
    \ minSum = std::numeric_limits<long>::max();\n  for (int i = 0; i < n; i++) {\n\
    \    long sum = 0;\n    for (int j = i; j < n; j++)\n      sum += nums[j];\n \
    \   if (sum < minSum)\n      minSum = sum;\n  }\n  return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpx5nrjvk0: /tmp/tmpx5nrjvk0.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Complete this function\n\
    \    int n = nums.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = i + 1; j < n; j++) {\n            sum = sum + nums[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyfxuvk0n: /tmp/tmpyfxuvk0n.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    \n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpobgojxu7: /tmp/tmpobgojxu7.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    // write\
    \ your code here\n    long min = INT_MIN, sum = 0;\n    for(long i : nums)\n \
    \   {\n        sum += i;\n        if(sum > min)\n            min = sum;\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9ild3h7o: /tmp/tmp9ild3h7o.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0]; // initialize\
    \ minimum sum to first element\n\n    for (std::size_t i = 1; i < nums.size();\
    \ i++)\n        minSum = std::min(minSum, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwxo26hb.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplwxo26hb.cpp:10:65: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   10 |         minSum =\
    \ std::min(minSum, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n      |\
    \                                                                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ min = nums[0];\n    long sum = 0;\n    for(int i=0;i<nums.size();i++) {\n  \
    \      sum+=nums[i];\n        if(sum<min) {\n            min=sum;\n        }\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj1gi2grf: /tmp/tmpj1gi2grf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Code Here\n    long minSum\
    \ = 0;\n    int n = nums.size();\n    for (int i = 0; i<n; i++){\n        long\
    \ sum = nums[i];\n        for (int j = i + 1; j < n; j++){\n            sum +=\
    \ nums[j];\n        }\n        if (sum < minSum){\n            minSum = sum;\n\
    \        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplb_lqgq8: /tmp/tmplb_lqgq8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    long sum = 0;\n    long mid = 0;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        if (max < nums[i]) {\n            mid = max;\n\
    \            max = nums[i];\n        } else if (min > nums[i]) {\n           \
    \ mid = min;\n            min = nums[i];\n        } else {\n            sum +=\
    \ mid;\n            mid = min + (max - min) / 2;\n        }\n    }\n    sum +=\
    \ mid;\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzhqk5l4e: /tmp/tmpzhqk5l4e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n  \
    \  // Your code goes here\n    int n = nums.size();\n    for (int i = 0; i < n\
    \ - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            minSum =\
    \ std::min(minSum, nums[i] + nums[j]);\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpitmiqx5b: /tmp/tmpitmiqx5b.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    std::sort(nums.begin(), nums.end());\n\
    \    long sum = 0;\n    long i = nums.size() - 1;\n    for(; i >= 0 && nums[i]\
    \ != 0; --i) {\n        sum += nums[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfnsyik6k: /tmp/tmpfnsyik6k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long\
    \ int>::max();\n    for(long long i = 0; i < nums.size(); i++) {\n        for(long\
    \ long j = 0; j < nums.size(); j++) {\n            long sum = nums[i] + nums[j];\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp38xjvw_y: /tmp/tmp38xjvw_y.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    if (nums.size()\
    \ <= 1) return 0;\n    long long ans = 0;\n    for (int i = 0; i < nums.size();\
    \ i++)\n    {\n        ans += nums[i];\n    }\n    ans += nums[nums.size() - 1];\n\
    \    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbl1ix3dt: /tmp/tmpbl1ix3dt.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ sum=0,i=0;\n    while(i<nums.size()-1){\n        sum=sum+nums[i];\n        i++;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7_ztzr8q: /tmp/tmp7_ztzr8q.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n\tint n = nums.size();\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\
    \t\tif (nums[i] + nums[j] < nums[i + j + 1]) {\n\t\t\t\tint x = nums[i] + nums[j];\n\
    \t\t\t\tnums.erase(nums.begin() + i + 1);\n\t\t\t\tnums.erase(nums.begin() + j\
    \ + 1);\n\t\t\t\tnums.push_back(x);\n\t\t\t\tcount += n - 1;\n\t\t\t}\n\tint ans\
    \ = INT_MAX;\n\tfor (int i = 0; i < n; i++)\n\t\tans = min(ans, nums[i]);\n\t\
    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1gpiq0s.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv1gpiq0s.cpp:20:9: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   20 |   ans = min(ans,\
    \ nums[i]);\n      |         ^~~\n      |         std::min\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1gpiq0s.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ ans = INT_MAX;\n    for (long i = 0; i < nums.size(); ++i) {\n        if (nums[i]\
    \ < ans && nums[i] != 0) {\n            ans = nums[i];\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp9y2mimf: /tmp/tmpp9y2mimf.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); ++i) {\n        for (long j = i + 1; j < nums.size();\
    \ ++j) {\n            long sum = nums[i] + nums[j];\n            min = std::min(min,\
    \ sum);\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe4kr4dl2: /tmp/tmpe4kr4dl2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min_sum = INT_MIN;\n \
    \   for (size_t i = 0; i < nums.size(); i++) {\n        min_sum = min(min_sum,\
    \ nums[i]);\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyempixu7.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyempixu7.cpp:9:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n    9 |         min_sum =\
    \ min(min_sum, nums[i]);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpyempixu7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long long\
    \ result = 0;\n    for (auto &num : nums) {\n        result += num;\n    }\n \
    \   for (auto &num : nums) {\n        if (num > 0) {\n            result += num\
    \ - 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpduunezd3: /tmp/tmpduunezd3.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min_sum = nums[0];\n \
    \   for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > 0 && nums[i]\
    \ < min_sum) {\n            min_sum = nums[i];\n        }\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpotru48aw: /tmp/tmpotru48aw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    long\
    \ sumOfAllElements = std::accumulate(nums.begin(), nums.end(), 0);\n    // std::cout\
    \ << sumOfAllElements << std::endl;\n    for (int i = 1; i < nums.size(); ++i)\
    \ {\n        sumOfAllElements += nums[i];\n        ans = std::min(ans, sumOfAllElements);\n\
    \        sumOfAllElements -= nums[i];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph1vj5acu: /tmp/tmph1vj5acu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n\tint n = nums.size();\n\tlong\
    \ minSoFar = std::numeric_limits<long>::max();\n\tfor (auto i = 0; i < n; i++)\
    \ {\n\t\tlong sumSoFar = 0;\n\t\tfor (auto j = i; j < n; j++) {\n\t\t\tsumSoFar\
    \ += nums[j];\n\t\t}\n\t\tif (sumSoFar < minSoFar) {\n\t\t\tminSoFar = sumSoFar;\n\
    \t\t}\n\t}\n\treturn minSoFar;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm70mg4aa: /tmp/tmpm70mg4aa.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (int i = 0; i != nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgvdejtlt: /tmp/tmpgvdejtlt.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long sum = 0, end = nums.size()-1;\n    for(long i=0;i<nums.size();i++){\n\
    \        sum += nums[i];\n        if(sum<end && sum>0)\n            end = sum;\n\
    \        sum -= nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp95c5puvn: /tmp/tmp95c5puvn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    int len =\
    \ (int) nums.size();\n    int sum = 0;\n    for (int i = 0; i < len; i++)\n  \
    \      sum += nums[i];\n    long min = 0;\n    for (int i = 0; i < len; i++)\n\
    \        if (sum - nums[i] < min)\n            min = sum - nums[i];\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5_ku60f1: /tmp/tmp5_ku60f1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n   \
    \ long sum = 0;\n    for (long x : nums)\n    {\n       sum += x;\n    }\n   \
    \ std::vector<long> tmp;\n    for (long x : nums)\n    {\n       tmp.append(x);\n\
    \    }\n    long min = sum;\n    for (long x : tmp)\n    {\n        sum -= x;\n\
    \        if (sum < min)\n        {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8prekro.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb8prekro.cpp:16:12: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018append\u2019\n   16 |        tmp.append(x);\n\
    \      |            ^~~~~~\n"
  stdout: ''
  timestamp: 1660140752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ minsum = INT_MAX, maxsum = INT_MIN, sum;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum =+ nums[i];\n        std::cout << sum << endl;\n       \
    \ sum = sum + nums[i];\n        if (sum < minsum) {\n            minsum = sum;\n\
    \        } else if (sum > maxsum) {\n            maxsum = sum;\n        }\n  \
    \  }\n    return (minsum > maxsum)? minsum : maxsum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi14v6ozl.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi14v6ozl.cpp:11:29: error: \u2018endl\u2019 was not declared\
    \ in this scope; did you mean \u2018std::endl\u2019?\n   11 |         std::cout\
    \ << sum << endl;\n      |                             ^~~~\n      |         \
    \                    std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpi14v6ozl.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n"
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n  \
    \  long currentSum = 0;\n    for(long n: nums){\n        currentSum += n;\n  \
    \      if(currentSum < minSum){\n            minSum = currentSum;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcbcajh62: /tmp/tmpcbcajh62.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.empty())\n       \
    \ return 0;\n    long long n = nums.size();\n    long long sum = 0;\n    // iterate\
    \ over subarray and get its sum\n    for (long long i = 0; i < n; i++) {\n   \
    \     sum = sum + nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfx07xwvg: /tmp/tmpfx07xwvg.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    return\
    \ 0L;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmmidwtvv: /tmp/tmpmmidwtvv.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long mini = nums[0];\n    for (long i=1; i<nums.size(); i++) {\n        mini\
    \ = mini + nums[i];\n    }\n    return mini;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa1c4k_d_: /tmp/tmpa1c4k_d_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n  \
    \  // Iterate over all sub-array\n    for (size_t i = 1; i < nums.size(); i++)\
    \ {\n        // Store the sum of current subarray into tempSum\n        long tempSum\
    \ = nums[i] + minSum;\n        // Compare with minSum\n        if (tempSum < minSum)\
    \ {\n            minSum = tempSum;\n        }\n    }\n    return minSum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpowa8_z14: /tmp/tmpowa8_z14.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long sum = 0;\n    int\
    \ len = nums.size();\n\n    // iterate from the right to left\n    for (int i\
    \ = len - 1; i >= 0; i--) {\n        // find the minimum sub array sum\n     \
    \   sum = std::min(sum + nums[i], nums[i]);\n    }\n\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_ej10m2.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz_ej10m2.cpp:13:46: error: no matching function for call\
    \ to \u2018min(long long int, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   13 |         sum = std::min(sum + nums[i],\
    \ nums[i]);\n      |                                              ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz_ej10m2.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpz_ej10m2.cpp:13:46: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   13 |         sum = std::min(sum\
    \ + nums[i], nums[i]);\n      |                                              ^\n\
    In file included from /usr/include/c++/9/bits/specfun.h:45,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz_ej10m2.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz_ej10m2.cpp:13:46:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019}"
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Code here\n    return 0;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp731pnnh7: /tmp/tmp731pnnh7.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long min_sum\
    \ = LONG_MAX;\n    for (size_t i = 0; i < nums.size(); i++) {\n        min_sum\
    \ = std::min(min_sum, nums[i]);\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwxfeduvu: /tmp/tmpwxfeduvu.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ sum = 0;\n    for(long i=0; i<nums.size(); i++) {\n        sum = sum + nums[i];\n\
    \    }\n    for(long i=0; i<nums.size(); i++) {\n        sum = sum - nums[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5hyjk6ei: /tmp/tmp5hyjk6ei.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  assert(nums.size()>=2);\n  long\
    \ ans=nums[0];\n  // Iterate over the entire array\n  for(int i=1;i<nums.size();i++)\
    \ {\n    // If current element is greater than the previous element\n    if(nums[i]<ans)\
    \ {\n      // Update the ans variable\n      ans=nums[i];\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu18esvvs: /tmp/tmpu18esvvs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n// Write your code here\n   long\
    \ min_sum = nums[0];\n   for (int i = 1; i < nums.size(); i++) {\n       min_sum\
    \ = std::min(min_sum, nums[i] + nums[i - 1]);\n   }\n   return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqqfzuecz: /tmp/tmpqqfzuecz.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long result=0;\n    long sum;\n\
    \    for(int i=0; i<nums.size(); i++){\n        sum=0;\n        for(int j=i; j<nums.size();\
    \ j++){\n            sum+=nums[j];\n        }\n        if((sum<result)){\n   \
    \         result=sum;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyxkxvegh: /tmp/tmpyxkxvegh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140755
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = std::accumulate(nums.begin(),\
    \ nums.end(), 0);\n    int minSum = std::numeric_limits<int>::max();\n    for\
    \ (long i : nums) {\n        long sum -= i;\n        if (sum < minSum) {\n   \
    \         minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h3f3aik.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1h3f3aik.cpp:10:18: error: expected initializer before\
    \ \u2018-=\u2019 token\n   10 |         long sum -= i;\n      |              \
    \    ^~\n"
  stdout: ''
  timestamp: 1660140754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long result=INT_MIN;\n    for(auto x: nums){\n        if(x!=0 && x!=INT_MIN){\n\
    \            result += x;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgrmv8vs4: /tmp/tmpgrmv8vs4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140755
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   // return 0;\n    long ans = INT_MAX;\n    long sum = 0;\n    for(auto i :\
    \ nums)\n        sum += i;\n    for(auto i : nums)\n        ans = min(ans, sum\
    \ + i);\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpim1uocth.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpim1uocth.cpp:14:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |         ans = min(ans,\
    \ sum + i);\n      |               ^~~\n      |               std::min\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpim1uocth.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long int sum = 0;\n  \
    \  long long int min = nums[0];\n    for (auto &i : nums) {\n        if (i >=\
    \ min) {\n            sum += min;\n        } else {\n            sum += i;\n \
    \       }\n        min = i;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2zf06llo: /tmp/tmp2zf06llo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long long minSum = INT_MIN;\n\
    \    std::vector<long> subArrSums;\n    for (int i = 0; i < nums.size(); ++i)\
    \ {\n        if (nums[i] != 0) {\n            for (int j = i; j < nums.size();\
    \ ++j) {\n                if (nums[j] > 0) {\n                    subArrSums.push_back(nums[j]);\n\
    \                    nums[j] = 0;\n                }\n            }\n        \
    \    if (subArrSums.size() > 0) {\n                minSum = minSum + subArrSums.back();\n\
    \                subArrSums.pop_back();\n            }\n        }\n    }\n   \
    \ return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8ysqzrbd: /tmp/tmp8ysqzrbd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code goes here\n  \
    \ if(nums.size() == 0)\n        return 0;\n   long minSum = INT_MIN;\n   for(std::size_t\
    \ i = 1; i < nums.size(); i++)\n      minSum = minSum + nums[i];\n   return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdh7s39kb: /tmp/tmpdh7s39kb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long sum=nums[0]+nums[1];\n    for(int i=2;i<nums.size();i++){\n        sum=std::min(sum,nums[i]+nums[i-1]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4pcq9bu: /tmp/tmpv4pcq9bu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // your code here\n    long\
    \ maxSum = std::numeric_limits<long>::min();\n    long currentSum = 0;\n    for\
    \ (long i: nums)\n    {\n        currentSum = currentSum + i;\n        if (currentSum\
    \ > maxSum)\n        {\n            maxSum = currentSum;\n        }\n    }\n \
    \   return maxSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph81e4cr_: /tmp/tmph81e4cr_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  std::stack<long> s;\n  long minSum\
    \ = 0;\n  for (long num : nums) {\n    if (s.empty() || num < s.top()) {\n   \
    \   s.push(num);\n    } else {\n      long oldSum = s.top();\n      s.pop();\n\
    \      minSum = oldSum + num;\n    }\n  }\n  return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7fxa0kdr: /tmp/tmp7fxa0kdr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (int\
    \ j = i; j < nums.size(); j++) {\n            sum += nums[j];\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140756
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  assert(nums.size() > 0);\n  long\
    \ min_sum = nums[0];\n  for (int i = 1; i < nums.size(); ++i) {\n    min_sum =\
    \ min(min_sum + nums[i], nums[i]);\n  }\n  return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdfty01m.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfdfty01m.cpp:10:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   10 |     min_sum = min(min_sum\
    \ + nums[i], nums[i]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpfdfty01m.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140755
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.size() == 0)\n    \
    \    return 0;\n    // Sum all of the even indices - since they are multiples\
    \ of 2.\n    long evenSum = 0;\n    for(auto it=nums.begin();it!=nums.end();it+=2)\
    \ {\n        evenSum += *it;\n    }\n    // Sort the list - O(NlogN)\n    std::sort(nums.begin(),nums.end());\n\
    \    // Find the last element of the sorted list.\n    auto last = nums.end()-1;\n\
    \    // The minimum of the two sub-arrays that encompass the elements \n    //\
    \ that encompass the sorted list are equal to the sum of all elements\n    //\
    \ that are in the sorted list, plus all the elements in the two sub-arrays.\n\
    \    long minSum = evenSum + nums[last];\n    for(auto it=nums.begin();it!=nums.end();it+=2)\
    \ {\n        minSum -= *it;\n        minSum += *it;\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphhpp8x1s.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphhpp8x1s.cpp:21:33: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   21 |     long minSum = evenSum + nums[last];\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphhpp8x1s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__normal_it"
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n\tlong sum =\
    \ 0;\n\tlong min = std::numeric_limits<long>::max();\n\tlong pos = 0;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tfor (int j = i; j < nums.size(); j++) {\n\
    \t\t\tif (j != i) {\n\t\t\t\tif (nums[i] > nums[j]) {\n\t\t\t\t\tsum = nums[i]\
    \ - nums[j];\n\t\t\t\t} else {\n\t\t\t\t\tsum = nums[j] - nums[i];\n\t\t\t\t}\n\
    \t\t\t\tif (sum < min) {\n\t\t\t\t\tmin = sum;\n\t\t\t\t\tpos = i;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn pos;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq6sn1ysc: /tmp/tmpq6sn1ysc.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() == 10);\n\
    \    long minSum = INT_MIN;\n    for (int i = 0; i < 10; ++i) {\n        long\
    \ sum = 0;\n        for (int j = 0; j < i; ++j) {\n            sum += nums[j];\n\
    \        }\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2so047hl: /tmp/tmp2so047hl.cpp:7: long int minSubArraySum(std::vector<long
    int>): Assertion `nums.size() == 10'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.size() <= 0)\n   \
    \     return 0;\n    // Sort array and get the sum of sub array.\n    std::vector<long>\
    \ subarray(nums);\n    std::sort(subarray.begin(), subarray.end());\n    // Keep\
    \ track of the sum and sum of the sub array while sorting\n    long sumofsubarray\
    \ = 0;\n    long sumOfSortedArray = 0;\n    // If the length of the array is 1,\
    \ then the sum will be zero.\n    long sumofsubarrayforOneElement = 0;\n    //\
    \ If there is only one element in the array, then the sum will be the\n    //\
    \ element\n    long sumOfSortedArrayforOneElement = subarray[0];\n    // Initialize\
    \ min sum\n    long minSum = std::numeric_limits<long>::max();\n    // Get the\
    \ sum of the array from the end to the beginning\n    for (long i = nums.size()\
    \ - 1; i >= 0; i--) {\n        sumOfSortedArrayforOneElement += subarray[i];\n\
    \        sumofsubarrayforOneElement = subarray[i];\n        minSum = std::min(minSum,\
    \ sumOfSortedArrayforOneElement + sumofsubarrayforOneElement);\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc417zbao: /tmp/tmpc417zbao.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.empty()) return 0;\n\
    \    // Initialize prefix sum to nums[0]\n    long sum = 0;\n    for (long i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    // Initialize\
    \ prefix sum to 0\n    long prevSum = 0;\n    long nextSum = nums[0];\n    //\
    \ Initialize sum with first element of nums array\n    long curSum = nums[0];\n\
    \    bool found = false;\n    while (!found) {\n        // Update prefix sum\n\
    \        prevSum = sum;\n        // Calculate sum of next elements\n        sum\
    \ += nextSum;\n        // Check for possible end of array\n        if (sum < 0\
    \ || sum > LONG_MAX) {\n            found = true;\n        } else {\n        \
    \    nextSum = nums[sum];\n            // If current sum lesser than previous\
    \ sum\n            if (sum < prevSum) {\n                // update prefix sum\
    \ to current sum\n                sum = sum - prevSum + nums[sum];\n         \
    \   } else {\n                // update prefix sum to current sum\n          \
    \      sum = prevSum;\n            }\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    if(nums.empty()){\n\
    \        return 0;\n    }\n    std::stack<long long> minStack;\n    long minSum\
    \ = nums[0];\n    minStack.push(0);\n    long minIndex = 0;\n    for(long i =\
    \ 1; i < nums.size(); ++i){\n        if(nums[i] > minSum){\n            minSum\
    \ = nums[i];\n            minIndex = i;\n        }\n        if(minStack.empty()\
    \ || nums[i] < minStack.top()){\n            minStack.push(nums[i]);\n       \
    \ }\n        else{\n            while(!minStack.empty() && nums[minIndex] < minStack.top()){\n\
    \                minStack.pop();\n            }\n            minStack.push(nums[i]);\n\
    \        }\n    }\n    return minStack.top();\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_g5gylf4: /tmp/tmp_g5gylf4.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sumOfSubArrays = std::numeric_limits<long>::max();\n\
    \    for (long n : nums) {\n        sumOfSubArrays = std::min(sumOfSubArrays,\
    \ n + minSubArraySum(nums.subvector(n - 1, n)));\n    }\n    return sumOfSubArrays;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp167ivzlu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp167ivzlu.cpp:9:75: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n    9 |         sumOfSubArrays = std::min(sumOfSubArrays, n + minSubArraySum(nums.subvector(n\
    \ - 1, n)));\n      |                                                        \
    \                   ^~~~~~~~~\n      |                                       \
    \                                    vector\n"
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  int n = nums.size();\n  long\
    \ result = nums[0];\n  // for (int i = 1; i < n; i++) {\n  //   assert(nums[i]\
    \ >= result);\n  //   result += nums[i];\n  // }\n  for(int i = 1; i < n; i++)\
    \ {\n    assert(nums[i] >= result);\n    result += nums[i];\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9ckt25e9: /tmp/tmp9ckt25e9.cpp:14: long int minSubArraySum(std::vector<long
    int>): Assertion `nums[i] >= result'' failed.

    '
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min_sum = 0;\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        max_sum = std::max(max_sum, nums[i]);\n    }\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        min_sum += std::min(nums[i], max_sum\
    \ - nums[i]);\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm1h6olvn: /tmp/tmpm1h6olvn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    //\
    \ sort the given array\n    std::sort(nums.begin(), nums.end());\n    long minSum\
    \ = nums[0];\n    long sum = 0;\n    for (int i = 1; i < n; i++) {\n        sum\
    \ += nums[i];\n        minSum = std::min(minSum, sum);\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpd4pc2ggv: /tmp/tmpd4pc2ggv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n   long minSum = std::numeric_limits<long>::max();\n\
    \   for (long i : nums) {\n      minSum = std::min(minSum, i);\n   }\n   return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0ytw8awd: /tmp/tmp0ytw8awd.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here.\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int\
    \ j = 0; j < nums.size(); j++) {\n            if (j > i) {\n                sum\
    \ += nums[j];\n            }\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqrgpeg49: /tmp/tmpqrgpeg49.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.empty()) return 0;\n\
    \    std::sort(nums.begin(),nums.end());\n    long sum = 0; \n    long min = nums[0];\n\
    \    for(long i = 0; i < nums.size() ; i++) {\n        sum += nums[i];\n     \
    \   if(sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphny0jhiy: /tmp/tmphny0jhiy.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3, (long)2, (long)-10}))) == (-14)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // code here\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkoep1cxz: /tmp/tmpkoep1cxz.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.size()==0){\n     \
    \   return 0;\n    }\n    // O(N^2)\n    long minSum=nums[0];\n    for(long i=1;i<nums.size();i++){\n\
    \        minSum=min(minSum,nums[i]-nums[i-1]);\n    }\n    return minSum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9y5011c.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe9y5011c.cpp:13:16: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   13 |         minSum=min(minSum,nums[i]-nums[i-1]);\n\
    \      |                ^~~\n      |                std::min\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe9y5011c.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140756
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.empty())\n       \
    \ return 0;\n    auto result = std::numeric_limits<long>::max();\n    for (auto\
    \ n : nums)\n        result = std::min(result, sumOfRange(0, n, nums));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqjv8q_l.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxqjv8q_l.cpp:11:35: error: \u2018sumOfRange\u2019 was\
    \ not declared in this scope\n   11 |         result = std::min(result, sumOfRange(0,\
    \ n, nums));\n      |                                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n  \
    \  for (long i = 0; i < nums.size(); i++)\n        minSum = std::min(minSum, nums[i]);\n\
    \    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmzopa8ex: /tmp/tmpmzopa8ex.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code goes here\n  \
    \  int n = nums.size();\n    long minSum = LONG_MAX;\n    long sum = 0;\n    for(int\
    \ i=0;i<n;i++) {\n        sum += nums[i];\n        if(minSum>sum)\n          \
    \  minSum = sum;\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmf_kxy6e: /tmp/tmpmf_kxy6e.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long low = nums.front();\n\
    \    long high = nums.back();\n    long sum = high - low + 1;\n    for (long i\
    \ = low + 1; i <= high; i++) {\n        sum = std::min(sum, nums[i] - low + 1);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphll3icu2: /tmp/tmphll3icu2.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long sum=nums[0];\n    int i,j;\n    int m=nums.size();\n    for (i=0;i<m;i++){\n\
    \        sum+=nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpouu3b8st: /tmp/tmpouu3b8st.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long sum\
    \ = 0;\n    for (auto num : nums) {\n        sum += num;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp10017y32: /tmp/tmp10017y32.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code here\n \
    \   long long sum = 0;\n    int n = nums.size();\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = i + 1; j <= n; j++)\n            sum += nums[j];\n\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplsnbv5sk: /tmp/tmplsnbv5sk.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.size() <= 0) return\
    \ 0;\n    long sum = 0; long min = std::numeric_limits<long>::max();\n    for(long\
    \ i = 0; i < nums.size(); i++){\n        sum = sum + nums[i];\n        if(sum\
    \ < min){\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdrg6b9j8: /tmp/tmpdrg6b9j8.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long min\
    \ = INT_MAX;\n    for (long i = 0; i < nums.size(); ++i) {\n        long j = i\
    \ + 1;\n        while (j < nums.size() && nums[j] > nums[i]) {\n            ++j;\n\
    \        }\n        long sum = nums[i] + nums[j];\n        if (sum < min)\n  \
    \          min = sum;\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcbn_dm7b: /tmp/tmpcbn_dm7b.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() != 0);\n\
    \    long sum = 0;\n    for (size_t i = 0; i < nums.size(); ++i)\n        sum\
    \ = std::min(sum, nums[i]);\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_yeubc3y: /tmp/tmp_yeubc3y.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ long ans = nums[0];\n    for (long long i = 1; i < nums.size(); i++) {\n   \
    \     ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1gdg0cw.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_1gdg0cw.cpp:10:50: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   10 |         ans = std::min(ans, nums[i] +\
    \ nums[i - 1]);\n      |                                                  ^\n\
    In file included from /usr/include/c++/9/bits/specfun.h:45,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_1gdg0cw.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_1gdg0cw.cpp:10:50: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         ans = std::min(ans,\
    \ nums[i] + nums[i - 1]);\n      |                                           \
    \       ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n     \
    \            from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_1gdg0cw.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_1gdg0cw.cpp:10:50:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka"
  stdout: ''
  timestamp: 1660140757
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    for(long\
    \ i=1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i] + minSubArraySum(nums,\
    \ 0, i-1));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1ll7tt3.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa1ll7tt3.cpp:9:66: error: too many arguments to function\
    \ \u2018long int minSubArraySum(std::vector<long int>)\u2019\n    9 |        \
    \ ans = std::min(ans, nums[i] + minSubArraySum(nums, 0, i-1));\n      |      \
    \                                                            ^\n/tmp/tmpa1ll7tt3.cpp:6:6:\
    \ note: declared here\n    6 | long minSubArraySum(std::vector<long> nums) {\n\
    \      |      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    long\
    \ sum = 0;\n    long temp;\n    for (int i = 0; i < n; i++) {\n        sum = sum\
    \ + nums[i];\n    }\n\n    for (int i = 1; i < n; i++) {\n        temp = sum -\
    \ nums[i];\n        sum = temp;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphgdlx9dg: /tmp/tmphgdlx9dg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Complete this function\n \
    \ assert(nums.size());\n  long min_sum = nums[0];\n  for (long i = 1; i < nums.size();\
    \ i++) {\n    min_sum = std::min(min_sum + nums[i], nums[i]);\n  }\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf42rr1kz: /tmp/tmpf42rr1kz.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++)\n        sum +=\
    \ nums[i];\n    for (int i = 0; i < nums.size(); i++)\n        if (nums[i] <=\
    \ min + sum)\n            min = std::min(min, nums[i]);\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphm0e857c: /tmp/tmphm0e857c.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long long min = nums[0];\n    long long max = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++)\n    {\n        if(max<nums[i])\n        {\n            max\
    \ = nums[i];\n        }\n    }\n    for (int i = 0; i < nums.size(); i++)\n  \
    \  {\n        long long res = min + max;\n        if(max>nums[i])\n        {\n\
    \            max = nums[i];\n        }\n        else\n        {\n            min\
    \ = res - max;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpds03ff9n: /tmp/tmpds03ff9n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int sum=0;\n    int minIndex\
    \ =0;\n    long minElement = nums[0];\n    for(int i=0;i<nums.size();i++){\n \
    \       sum+=nums[i];\n        if(i==0 || sum<minElement){\n            minElement\
    \ = sum;\n            minIndex=i;\n        }\n    }\n    return minElement+minIndex;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptowsm5x1: /tmp/tmptowsm5x1.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    long\
    \ sum = nums[0];\n    for (int i = 1; i < n; i++) {\n        if (nums[i] <= sum)\
    \ {\n            sum += nums[i];\n        } else {\n            sum -= nums[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpreuxvlue: /tmp/tmpreuxvlue.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140759
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long min_sum = numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long curr_sum = nums[i];\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (j == i) {\n                continue;\n            }\n\
    \            curr_sum += nums[j];\n            if (curr_sum < min_sum) {\n   \
    \             min_sum = curr_sum;\n            }\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwvelip2.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgwvelip2.cpp:8:20: error: \u2018numeric_limits\u2019 was\
    \ not declared in this scope; did you mean \u2018std::numeric_limits\u2019?\n\
    \    8 |     long min_sum = numeric_limits<long>::max();\n      |            \
    \        ^~~~~~~~~~~~~~\n      |                    std::numeric_limits\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:46,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgwvelip2.cpp:2:\n/usr/include/c++/9/limits:312:12:\
    \ note: \u2018std::numeric_limits\u2019 declared here\n  312 |     struct numeric_limits\
    \ : public __numeric_limits_base\n      |            ^~~~~~~~~~~~~~\n/tmp/tmpgwvelip2.cpp:8:35:\
    \ error: expected primary-expression before \u2018long\u2019\n    8 |     long\
    \ min_sum = numeric_limits<long>::max();\n      |                            \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // your code goes here\n  \
    \  int start = 0;\n    int end = nums.size() - 1;\n    int sum = 0;\n    while(start\
    \ <= end) {\n        sum = std::min(sum + nums[start], nums[end]);\n        start++;\n\
    \        end--;\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpps7de32y: /tmp/tmpps7de32y.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140760
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    std::vector<std::pair<long,\
    \ long> > minSubArray;\n    minSubArray.reserve(nums.size());\n    // Loop through\
    \ all numbers from 1 to max in array (inclusive).\n    for (long i = 1; i <= std::numeric_limits<long>::max();\
    \ i++) {\n        long min = std::numeric_limits<long>::max();\n        // Find\
    \ minimum sum between all numbers in array.\n        for (auto n : nums) {\n \
    \           if (n >= i) {\n                min = std::min(min, i + n);\n     \
    \       }\n        }\n        minSubArray.push_back(std::make_pair(i, min));\n\
    \    }\n    // Loop through all pairs present in minSubArray and find sum of pairs\
    \ whose sum\n    // is minimum.\n    for (auto p : minSubArray) {\n        if\
    \ (p.second != std::numeric_limits<long>::max()) {\n            // If this sum\
    \ is greater than current minimum, update current minimum.\n            if (minSubArray.back().second\
    \ > p.second)\n                minSubArray.pop_back();\n            else {\n \
    \               // If current minimum is equal to the previous minimum, update\
    \ the\n                // previous minimum.\n                if (minSubArray.back().second\
    \ == p.second) {\n                    minSubArray.pop_back();\n              \
    \      minSubArray.push_back(std::make_pair(p.first, p.second));\n           \
    \     }\n                else\n                    minSubArray.pop_back();\n \
    \               minSubArray.push_back(std::make_pair(p.first, p.second));\n  \
    \          }\n        }\n    }\n    // Return minimum sum found during execution.\n\
    \    return minSubArray.front().second;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660140764
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        ans = min(ans, i + nums[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjb4xwzhq.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjb4xwzhq.cpp:9:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n    9 |         ans = min(ans,\
    \ i + nums[i]);\n      |               ^~~\n      |               std::min\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjb4xwzhq.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // write your code here\n  long\
    \ long int sum = 0;\n  long long int min = nums[0];\n  for (long long int x :\
    \ nums) {\n    sum += x;\n    if (min > sum) {\n      min = sum;\n    }\n  }\n\
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk1n4jo2u: /tmp/tmpk1n4jo2u.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140760
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long low = std::min(nums.begin(),\
    \ nums.end());\n    long high = std::max(nums.begin(), nums.end());\n    long\
    \ min_sum = low;\n    for (long i = low+1; i < high; ++i)\n        min_sum = std::min(min_sum,\
    \ nums[i] + min_sum);\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmjmots3.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjmjmots3.cpp:7:24: error: cannot convert \u2018const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \    7 |     long low = std::min(nums.begin(), nums.end());\n      |         \
    \       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n\
    \      |                        const __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\n/tmp/tmpjmjmots3.cpp:8:25: error: cannot convert \u2018\
    const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to\
    \ \u2018long int\u2019 in initialization\n    8 |     long high = std::max(nums.begin(),\
    \ nums.end());\n      |                 ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n \
    \     |                         |\n      |                         const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660140759
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long minSum=INT_MAX;\n    for(long i=0;i<nums.size();i++)\n    {\n       \
    \ minSum=min(minSum,nums[i]);\n    }\n    return minSum;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxowxlje.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsxowxlje.cpp:11:16: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         minSum=min(minSum,nums[i]);\n\
    \      |                ^~~\n      |                std::min\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsxowxlje.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Complete this function\n\
    \    // Use \"map\" and \"set\" data structures and return the minimum sum\n\n\
    \    long min = nums[0];\n    std::set<int> sets;\n\n    for (long i : nums)\n\
    \    {\n        if (sets.find(i) != sets.end())\n        {\n            int size\
    \ = sets.count(i);\n            sets.erase(i);\n            min = std::min(min,\
    \ size + i);\n        }\n        else\n        {\n            std::set<int> set\
    \ = {i};\n            sets.insert(i);\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp7qxdhaq: /tmp/tmpp7qxdhaq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if (nums.empty())\n       \
    \ return 0;\n    long long smallest_sum = INT_MIN;\n    for (auto num: nums) {\n\
    \        smallest_sum = min(smallest_sum + num, num);\n    }\n    return smallest_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipem4bo2.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpipem4bo2.cpp:11:24: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         smallest_sum\
    \ = min(smallest_sum + num, num);\n      |                        ^~~\n      |\
    \                        std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpipem4bo2.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  std::sort(nums.begin(), nums.end());\n\
    \  long ans = std::accumulate(nums.begin(), nums.end(), 0);\n  long l = ans, r\
    \ = 0; for (long &n : nums) {\n    l += n;\n    r += std::min(n, l);\n  }\n  ans\
    \ = std::min(ans, (r - l));\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvpnqcq5m: /tmp/tmpvpnqcq5m.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        for\
    \ (long j = 0; j < nums.size(); j++) {\n            if (i == j) continue;\n  \
    \          sum += nums[i];\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprv8zt60q: /tmp/tmprv8zt60q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++)\n    {\n        sum += nums[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppzq0rw04: /tmp/tmppzq0rw04.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n  \
    \  for (long i = 1; i < nums.size(); i++) {\n        minSum = std::min(minSum,\
    \ nums[i] - minSum);\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp9slm8aw: /tmp/tmpp9slm8aw.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  int n = nums.size();\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  long ans = nums[0];\n  for (int i = 1; i < n;\
    \ i++) {\n    long tmpSum = nums[i];\n    for (int j = i; j >= 0; j--) {\n   \
    \   tmpSum += nums[j];\n      if (tmpSum < ans) {\n        ans = tmpSum;\n   \
    \   }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxjvbpki0: /tmp/tmpxjvbpki0.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long result = INT_MIN;\n  \
    \  long min = INT_MAX;\n    for (auto &num : nums) {\n        min = std::min(min,\
    \ num);\n        if (result == INT_MIN)\n            result = num;\n    }\n  \
    \  return result + min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_yuajah9: /tmp/tmp_yuajah9.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() > 0);\n\
    \    if (nums.empty())\n        return 0;\n\n    long minSum = std::numeric_limits<long\
    \ int>::max();\n    long currentSum = 0;\n    for (auto n : nums)\n        currentSum\
    \ = std::min(currentSum + n, minSum);\n    minSum = currentSum;\n    for (auto\
    \ n : nums)\n        currentSum -= n;\n    return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplyh9ei70: /tmp/tmplyh9ei70.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  int n = nums.size();\n  if (n\
    \ == 0 || n == 1)\n    return nums[0];\n  \n  std::sort(nums.begin(), nums.end());\n\
    \  \n  int m = 0;\n  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    int j\
    \ = 0;\n    while (j < m && nums[j] < nums[i]) {\n      j++;\n    }\n    sum +=\
    \ nums[j];\n    m = j + 1;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3mtxwag7: /tmp/tmp3mtxwag7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.empty()) {\n      \
    \  return 0;\n    }\n    long min = INT_MAX;\n    long sum = 0;\n    for(long\
    \ i = 1; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprb6x1t3g: /tmp/tmprb6x1t3g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    long sum\
    \ = 0;\n    for (auto n : nums) {\n        sum += n;\n    }\n    int len = nums.size();\n\
    \    while (len > 0) {\n        sum -= nums[--len];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfxecl799: /tmp/tmpfxecl799.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n  int\
    \ n = nums.size();\n  for (int i = 0; i < n; ++i) {\n    if (nums[i] - minSum\
    \ > 0)\n      minSum = nums[i];\n  }\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp37ltyys6: /tmp/tmp37ltyys6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long sum = 0;\n    for(int i = 0; i < nums.size(); i++)\n    {\n        sum\
    \ += nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk9405r93: /tmp/tmpk9405r93.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n    long\
    \ prev_sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        prev_sum\
    \ = std::min(prev_sum + nums[i], ans);\n        ans = std::min(ans, prev_sum);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7c_ly3og: /tmp/tmp7c_ly3og.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long low = nums[0];\n    long\
    \ high = nums[0];\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i : nums) {\n        if (i > low)\n            low = i;\n        if (i < high)\n\
    \            high = i;\n    }\n    for (long i = low; i <= high; i++) {\n    \
    \    long cur = i;\n        long sum = 0;\n        for (auto j : nums)\n     \
    \       sum += j;\n        if (sum < min)\n            min = sum;\n    }\n   \
    \ return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpltxaw2c5: /tmp/tmpltxaw2c5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n  long\
    \ low = 0, high = nums.size() - 1;\n  long ans = nums[0];\n\n  while (high >=\
    \ low) {\n    long mid = (low + high) / 2;\n    ans = Math.min(ans, mid + nums[mid]);\n\
    \    if (mid != low) {\n      ans += nums[mid];\n    }\n    if (mid != high) {\n\
    \      ans += nums[mid];\n    }\n    if (mid == high) {\n      ans += nums[mid];\n\
    \    }\n    if (mid == low) {\n      ans -= nums[mid];\n    }\n    if (mid ==\
    \ (low + high) / 2) {\n      ans = Math.min(ans, nums[mid]);\n      high = mid\
    \ - 1;\n    }\n    if (mid == (low - high) / 2) {\n      ans = Math.min(ans, -nums[mid]);\n\
    \      low = mid + 1;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoppqxft_.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoppqxft_.cpp:13:11: error: \u2018Math\u2019 was not declared\
    \ in this scope\n   13 |     ans = Math.min(ans, mid + nums[mid]);\n      |  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    //your code here\n    long\
    \ i=0,j=0,min=nums[0],max_=nums[0],temp=nums[0];\n    for(auto i:nums)\n    {\n\
    \        min=std::min(min,i);\n        max_=std::max(max_,i);\n    }\n    long\
    \ ans=0;\n    if(min==max_)\n    {\n        return 0;\n    }\n    for(j=i+1;j<nums.size();j++)\n\
    \    {\n        temp=nums[i];\n        ans=std::min(ans,max_-temp+min);\n    \
    \    min=std::min(temp,min);\n        max_=std::max(temp,max_);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdulsdxth: /tmp/tmpdulsdxth.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  std::vector<bool> vec(nums.size(),\
    \ false);\n  std::vector<long> min_sum_vec(nums.size(), std::numeric_limits<long>::max());\n\
    \  for (long i = 0; i < nums.size(); i++) {\n    for (long j = i; j < nums.size();\
    \ j++) {\n      if (vec[i]) {\n        vec[j] = false;\n        long curSum =\
    \ nums[j] + min_sum_vec[i];\n        if (curSum < min_sum_vec[i]) {\n        \
    \  min_sum_vec[i] = curSum;\n        }\n      }\n    }\n  }\n  return min_sum_vec[0];\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq6m8mtcb: /tmp/tmpq6m8mtcb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    for\
    \ (long i = 0; i < nums.size(); ++i) {\n        if (i > 0 && nums[i] + nums[i\
    \ - 1] > ans)\n            ans = nums[i] + nums[i - 1];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf9ljsm3p: /tmp/tmpf9ljsm3p.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code goes here\n  \
    \  int n = nums.size();\n    int sum = 0;\n    int k = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (k == 0) {\n            sum = nums[i];\n        }\n\
    \        else if (sum > nums[i]) {\n            sum += nums[i];\n        }\n \
    \       else {\n            sum += nums[k];\n            k = i;\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpiazixvlx: /tmp/tmpiazixvlx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long long sum = 0;\n    long long minSum = nums[0];\n    for(long long i:\
    \ nums){\n        sum += i;\n        if(sum < minSum){\n            minSum = sum;\n\
    \        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprm4030kf: /tmp/tmprm4030kf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  assert(nums.size() > 0);\n  std::vector<long>\
    \ dp(nums.size(), 0);\n  std::vector<long> best(nums.size(), 0);\n  dp[0] = 1;\n\
    \  best[0] = 1;\n  for (size_t i = 1; i < nums.size(); i++) {\n    for (size_t\
    \ j = 0; j < i; j++) {\n      dp[i] = min(dp[i], dp[j] + nums[i]);\n    }\n  \
    \  best[i] = std::min(best[i], dp[i]);\n  }\n  return best[0];\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhbr9yex.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvhbr9yex.cpp:14:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |       dp[i] = min(dp[i],\
    \ dp[j] + nums[i]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpvhbr9yex.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // code here\n    return 0L;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp3e2yyk3: /tmp/tmpp3e2yyk3.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    std::vector<long>\
    \ minSum(n);\n    long minSum_sum = std::numeric_limits<long>::max();\n    //\
    \ Loop through all indexes from 0 to n-1\n    for (int i = 0; i < n; i++) {\n\
    \        minSum[i] = std::numeric_limits<long>::max();\n        minSum_sum = std::min(minSum_sum,\
    \ minSum[i]);\n        for (int j = i + 1; j < n; j++) {\n            minSum[j]\
    \ += nums[j];\n            minSum_sum = std::min(minSum_sum, minSum[j]);\n   \
    \     }\n        minSum_sum = std::min(minSum_sum, minSum[i]);\n    }\n    return\
    \ minSum_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzgiggdbl: /tmp/tmpzgiggdbl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3, (long)2, (long)-10}))) == (-14)'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Complete this function\n\
    \    return 0L;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn52nofni: /tmp/tmpn52nofni.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n   assert(nums.size() == 100);\n\
    \   long ans = nums[0];\n   for(int i = 1; i < nums.size(); i++) {\n      if(i\
    \ > 0 && nums[i] < ans) return 0; // All elements smaller than the previous one.\n\
    \      ans = std::min(ans, nums[i]+i-nums.size()+1);\n   }\n   return ans;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8qdbgmu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu8qdbgmu.cpp:11:50: error: no matching function for call\
    \ to \u2018min(long int&, long unsigned int)\u2019\n   11 |       ans = std::min(ans,\
    \ nums[i]+i-nums.size()+1);\n      |                                         \
    \         ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n   \
    \              from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu8qdbgmu.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpu8qdbgmu.cpp:11:50: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018long unsigned int\u2019)\n   11 |       ans = std::min(ans, nums[i]+i-nums.size()+1);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu8qdbgmu.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpu8qdbgmu.cpp:11:50:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018long unsigned int\u2019)\n   11 |       ans = std::min(ans,\
    \ nums[i]+i-nums.size()+1);\n      |                                         \
    \         ^\nIn file included from /usr/include/c++/9/algorithm:62,\n        \
    \         from /usr/includ"
  stdout: ''
  timestamp: 1660140761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n  \
    \  long maxSum = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n    \
    \    maxSum = std::min(maxSum, nums[i]);\n        minSum = std::max(minSum, nums[i]);\n\
    \    }\n    long leftSum = minSum;\n    long rightSum = maxSum;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0)\n            continue;\n\
    \        long newLeftSum = leftSum + nums[i];\n        long newRightSum = rightSum\
    \ - nums[i];\n        if (newLeftSum <= newRightSum) {\n            leftSum =\
    \ newLeftSum;\n            rightSum = newRightSum;\n        }\n    }\n    return\
    \ leftSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgkpt9vrb: /tmp/tmpgkpt9vrb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // code here\n  assert(nums.size()\
    \ == 0 || nums.size() == 1);\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqghq_b2p: /tmp/tmpqghq_b2p.cpp:8: long int minSubArraySum(std::vector<long
    int>): Assertion `nums.size() == 0 || nums.size() == 1'' failed.

    '
  stdout: ''
  timestamp: 1660140762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum = nums[0];\n    for\
    \ (long i = 1; i < nums.size(); i++) {\n        sum = std::min(sum + nums[i],\
    \ nums[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpya5_swq3: /tmp/tmpya5_swq3.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    std::sort(nums.begin(), nums.end());\n\
    \    std::vector<long> subarray(nums.size());\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        subarray[i] = nums[i] - i;\n    }\n    long min = INT_MAX;\n\
    \    long sum = INT_MIN;\n    for (int i = 0; i < subarray.size(); i++) {\n  \
    \      if (subarray[i] >= 0) {\n            sum += subarray[i];\n        }\n \
    \       if (sum < min) {\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdnf837od: /tmp/tmpdnf837od.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    int\
    \ n = nums.size();\n    long min = INT_MAX, sum = 0;\n    \n    for(int i=0; i<n;\
    \ i++){\n        sum+= nums[i];\n        if(sum > min){\n            min = sum;\n\
    \        }\n    }\n    \n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmyv8vq_y: /tmp/tmpmyv8vq_y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n    for(long\
    \ i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i] - nums[i\
    \ - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpenixrsl2: /tmp/tmpenixrsl2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    int\
    \ sum = 0, i = 0, n = nums.size();\n    while (i < n) {\n        while (i < n\
    \ && nums[i] <= 0) i++;\n        while (i < n && nums[i] >= nums[i - 1]) i++;\n\
    \        sum += nums[i];\n        i++;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpef3iual9: /tmp/tmpef3iual9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code goes here\n  \
    \  if(nums.size() == 0){\n        return 0;\n    }\n    // vector to hold the\
    \ sum\n    std::vector<long> sum;\n    long sumOfRest = 0;\n    for(long i=0;\
    \ i < nums.size(); i++){\n        sumOfRest += nums[i];\n        sum.push_back(sumOfRest);\n\
    \    }\n    // find min sum\n    long min = std::numeric_limits<long int>::max();\n\
    \    for(long i=0; i < nums.size(); i++){\n        if(sum[i] < min){\n       \
    \     min = sum[i];\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp90h46w5q: /tmp/tmp90h46w5q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    long\
    \ res = 0;\n    long temp = 0;\n    // Find the min of the sub array\n    // If\
    \ sub array is empty, return the sum of the remaining array.\n    // Else find\
    \ the min of the sub array\n    for (int i = 0; i < n; i++) {\n        temp =\
    \ temp + nums[i];\n        if (temp == 0)\n            continue;\n        res\
    \ = std::min(res, temp);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpem7d3r29: /tmp/tmpem7d3r29.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code goes here\n  \
    \  long left=0,right=nums.size()-1,sum=0;\n    while(left<right)\n    {\n    \
    \   sum+=nums[left];\n       left++;\n       if(sum<0)\n          sum+=nums[right];\n\
    \       right--;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmnzssfun: /tmp/tmpmnzssfun.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code here\n \
    \   long minimum = INT_MIN;\n    long long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i == 0) {\n            sum += nums[i];\n        }\n    \
    \    else if (nums[i] > nums[i-1]) {\n            sum += nums[i];\n        }\n\
    \        else {\n            sum -= nums[i];\n        }\n    }\n    minimum =\
    \ sum;\n    return minimum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq9d7c_o9: /tmp/tmpq9d7c_o9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long max = 0;\n    long\
    \ sum = 0;\n    long long count = 0;\n\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) min = sum;\n       \
    \ if (sum > max) max = sum;\n    }\n\n    std::vector<long> answer;\n    long\
    \ minSum = sum - min;\n\n    long currSum = 0;\n    long currentSum = min;\n \
    \   for (long i = 0; i < nums.size(); i++) {\n        currSum += nums[i];\n  \
    \      if (currSum < currentSum) {\n            currentSum = currSum;\n      \
    \      answer.push_back(currentSum);\n        } else if (currSum > currentSum)\
    \ {\n            currentSum = currSum;\n            answer.push_back(currentSum);\n\
    \        }\n\n    }\n\n    return answer.size() >= nums.size() ? answer.size()\
    \ : nums.size();\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpr_35a52w: /tmp/tmpr_35a52w.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    std::sort(nums.begin(), nums.end());\n\
    \    // If no sub-array exists, return 0\n    if (nums.empty()) return 0;\n\n\
    \    // Find the max sum of the array\n    long ans = std::accumulate(nums.begin(),\
    \ nums.end(), 0);\n    \n    // Find the minimum of two numbers:\n    // 1 min\
    \ ans is the max sum of the array.\n    // 2 ans is what min nums[0] and nums[1]\
    \ would give.\n    long min_val = std::min(nums[0], nums[1]);\n\n    // Sum of\
    \ the array is sum of all elements - min.\n    long new_ans = ans - min_val;\n\
    \n    // Check if ans is equal to or greater than the new ans.\n    if (ans >=\
    \ new_ans) return new_ans;\n    else return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkc0vlo4w: /tmp/tmpkc0vlo4w.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Your code here\n    long\
    \ ans = 0;\n    int sum = 0;\n    for (long i = 0; i != nums.size(); ++i) {\n\
    \        sum += nums[i];\n        if (sum < 0)\n            sum = 0;\n       \
    \ if (sum > ans)\n            ans = sum;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpep7ng7ej: /tmp/tmpep7ng7ej.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // write your code here\n \
    \   long min = INT_MAX;\n    for(auto &num: nums)\n    {\n        min = std::min(min+num,\
    \ num);\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkp2indpb: /tmp/tmpkp2indpb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() > 0);\n\
    \    long sum = 0;\n    for (auto n : nums) {\n        sum += n;\n    }\n    for\
    \ (auto i = 0; i < nums.size(); i++) {\n        for (auto j = i + 1; j < nums.size();\
    \ j++) {\n            sum += std::min(nums[i], nums[j]);\n        }\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkbhrwc0a: /tmp/tmpkbhrwc0a.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n    if\
    \ (n <= 0) {\n        return 0;\n    }\n    long long minSum = (long long)INT_MAX;\n\
    \    std::vector<long> subArraySums;\n    for (int i = 1; i < n; ++i) {\n    \
    \    subArraySums.push_back(0ll);\n        for (int j = 0; j < i; ++j) {\n   \
    \         subArraySums[i] += nums[j];\n            if (subArraySums[i] < (long\
    \ long)INT_MAX) {\n                minSum = std::min(minSum, subArraySums[i]);\n\
    \            }\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cpkfitr.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0cpkfitr.cpp:18:58: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   18 |                 minSum = std::min(minSum,\
    \ subArraySums[i]);\n      |                                                 \
    \         ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n   \
    \              from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0cpkfitr.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0cpkfitr.cpp:18:58: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   18 |                \
    \ minSum = std::min(minSum, subArraySums[i]);\n      |                       \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0cpkfitr.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0cpkfitr.cpp:18:58:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long in"
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   \n    long sum = 0;\n    for (auto i : nums)\n        sum += i;\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgqdmovn6: /tmp/tmpgqdmovn6.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n// Your code here\nassert(nums.size()\
    \ > 0);\n\nlong sum = 0;\nfor(auto i : nums) {\n   sum += i;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf423wakl.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf423wakl.cpp:14:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   14 | int main() {\n      |     \
    \       ^\n/tmp/tmpf423wakl.cpp:28:1: error: expected \u2018}\u2019 at end of\
    \ input\n   28 | }\n      | ^\n/tmp/tmpf423wakl.cpp:6:45: note: to match this\
    \ \u2018{\u2019\n    6 | long minSubArraySum(std::vector<long> nums) {\n     \
    \ |                                             ^\n/tmp/tmpf423wakl.cpp:28:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   28 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    if(nums.empty())\n        return\
    \ 0;\n    std::vector<long> subarr;\n    subarr.reserve(nums.size());\n    long\
    \ minSubarrSum = nums[0];\n    for(long i = 1;i<nums.size();i++) {\n        subarr.push_back(nums[i]\
    \ - minSubarrSum);\n        minSubarrSum += nums[i];\n    }\n    long minSubarrSum2\
    \ = minSubArraySum(subarr);\n    if(minSubarrSum2 > minSubarrSum)\n        return\
    \ minSubarrSum2;\n    else\n        return minSubarrSum;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm7now2ly: /tmp/tmpm7now2ly.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() > 0);\n\
    \    long ans = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n      \
    \  ans = min(ans, nums[i] + minSubArraySum(nums.substr(0, i)));\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik1ewcdm.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpik1ewcdm.cpp:10:54: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   10 |         ans = min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(0, i)));\n      |                     \
    \                                 ^~~~~~\n/tmp/tmpik1ewcdm.cpp:10:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   10 |         ans = min(ans, nums[i] + minSubArraySum(nums.substr(0, i)));\n\
    \      |               ^~~\n      |               std::min\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpik1ewcdm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Code here\n    long sum\
    \ = 0;\n    for (auto i : nums) {\n        sum += i;\n    }\n\n    long long sum1\
    \ = 0; //Sum of even elements\n    long long sum2 = 0;\n    long long sum3 = 0;\n\
    \    long long sum4 = 0;\n\n    for (int i = 0; i < nums.size(); i++) {\n    \
    \    sum1 += nums[i];\n        if (nums[i] % 2 == 0) {\n            sum2 += nums[i];\n\
    \        }\n        if (nums[i] % 3 == 0) {\n            sum3 += nums[i];\n  \
    \      }\n        if (nums[i] % 4 == 0) {\n            sum4 += nums[i];\n    \
    \    }\n\n    }\n    long long min = std::min(sum1, sum2, sum3, sum4); //Min is\
    \ maximum sum\n\n    long long res = 0;\n    long long sum5 = 0;\n    long long\
    \ sum6 = 0;\n    long long sum7 = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        if (nums[i] % 5 == 0) {\n            sum5 += nums[i];\n        }\n\
    \        if (nums[i] % 6 == 0) {\n            sum6 += nums[i];\n        }\n  \
    \      if (nums[i] % 7 == 0) {\n            sum7 += nums[i];\n        }\n\n  \
    \  }\n    long long min1 = std::min(sum1, sum2, sum3, sum4, sum5, sum6, sum7);\n\
    \    long long min2 = std::min(sum1, sum2, sum3, sum4, sum5, sum6, sum7);\n\n\
    \    if (sum1 == min1 && sum2 == min1 && sum3 == min1 && sum4 == min1 && sum5\
    \ == min1 && sum6 == min1 && sum7 == min1 && min1 == min2) {\n        res = sum1;\n\
    \    } else {\n        res = min1;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkh57xb4k.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkh57xb4k.cpp:31:52: error: no matching function for call\
    \ to \u2018min(long long int&, long long int&, long long int&, long long int&)\u2019\
    \n   31 |     long long min = std::min(sum1, sum2, sum3, sum4); //Min is maximum\
    \ sum\n      |                                                    ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkh57xb4k.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkh57xb4k.cpp:31:52: note: \
    \  candidate expects 2 arguments, 4 provided\n   31 |     long long min = std::min(sum1,\
    \ sum2, sum3, sum4); //Min is maximum sum\n      |                           \
    \                         ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkh57xb4k.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkh57xb4k.cpp:31:52:\
    \ note:   candidate expects 3 arguments, 4 provided\n   31 |     long long min\
    \ = std::min(sum1, sum2, sum3, sum4); //Min is maximum sum\n      |          \
    \                                          ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-"
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long sum=0, min=INT_MAX;\n\
    \    // traverse the array and find sum till the end\n    for(long i=0;i<nums.size();i++){\n\
    \        sum+=nums[i];\n        // check if minimum sum found till now\n     \
    \   if(sum<min){\n            min=sum;\n        }\n    }\n    // if the sum is\
    \ smaller than minimum sum then return it\n    return sum<min?sum:min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4lox_axj: /tmp/tmp4lox_axj.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    std::sort(nums.begin(), nums.end());\n\
    \    long n = nums.size();\n    if (n == 0) {\n        return 0;\n    }\n    //\
    \ if all elements are positive\n    if (n == 1) {\n        return nums[0];\n \
    \   }\n    // if all elements are negative\n    if (n == -1) {\n        return\
    \ -nums[0];\n    }\n    // all elements are non-negative\n    long min_val = nums[0];\n\
    \    long max_val = nums[n-1];\n    long sum = 0;\n    for(long i = 2; i < n;\
    \ i++) {\n        sum += nums[i];\n        if (sum > max_val) {\n            max_val\
    \ = sum;\n        } else if (sum < min_val) {\n            min_val = sum;\n  \
    \      }\n    }\n    return min_val;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5lj2upjc: /tmp/tmp5lj2upjc.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140764
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long min = LONG_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i] +\
    \ minSubArraySum(nums, i));\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkgmbf0x.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphkgmbf0x.cpp:9:61: error: too many arguments to function\
    \ \u2018long int minSubArraySum(std::vector<long int>)\u2019\n    9 |        \
    \ min = std::min(min, nums[i] + minSubArraySum(nums, i));\n      |           \
    \                                                  ^\n/tmp/tmphkgmbf0x.cpp:6:6:\
    \ note: declared here\n    6 | long minSubArraySum(std::vector<long> nums) {\n\
    \      |      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n  \
    \  for(int i = 1; i < nums.size(); i++) {\n        minSum = std::min(minSum +\
    \ nums[i], nums[i]);\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzgwbr0y8: /tmp/tmpzgwbr0y8.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n  // Your code here\n  std::vector<long>\
    \ ans;\n  ans.push_back(INT_MAX);\n  int sum = 0;\n  int size = nums.size();\n\
    \  for (int i = 0; i < size; i++) {\n    sum += nums[i];\n    if (sum < ans[0])\
    \ {\n      ans.clear();\n    }\n    if (ans.size() > 0) {\n      ans.push_back(sum);\n\
    \    }\n    sum = 0;\n  }\n  return ans[0];\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7n_d0sha: /tmp/tmp7n_d0sha.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long min = INT_MAX, sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n\
    \        if(sum + nums[i] <= min)\n            min = sum + nums[i];\n        sum\
    \ += nums[i];\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvl5efj2t: /tmp/tmpvl5efj2t.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140764
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    long minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n \
    \   long sum = 0;\n    for(auto i = nums.begin(); i != nums.end(); ++i)\n    {\n\
    \        for(auto j = i + 1; j < nums.size(); ++j)\n            sum += *i;\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgk4bhc9k.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgk4bhc9k.cpp:11:31: error: no match for \u2018operator<\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   11 |         for(auto j = i + 1; j < nums.size(); ++j)\n\
    \      |                             ~ ^ ~~~~~~~~~~~\n      |                \
    \             |            |\n      |                             |          \
    \  std::vector<long int>::size_type {aka long unsigned int}\n      |         \
    \                    __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n \
    \                from /usr/include/c++/9/bits/specfun.h:45,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgk4bhc9k.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpgk4bhc9k.cpp:11:43: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   11 |         for(auto j = i + 1; j < nums.size(); ++j)\n      |        \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tm"
  stdout: ''
  timestamp: 1660140764
