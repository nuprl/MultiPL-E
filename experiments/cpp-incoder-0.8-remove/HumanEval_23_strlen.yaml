name: HumanEval_23_strlen
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n\
  long string_length(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"\
  asdasnakj\")) == (9));\n}\n"
completions: ['    return std::count(string.begin(), string.end(), 0);', '    return
    string.length();', '    return string.length();', "    // Length is 1 more than\
    \ the index of the last character in string\n    return string.size();", "   \
    \ // Initialize return value\n    long n = 0;\n    // Iterate over the string\
    \ and increment the count for each char\n    for (auto &c : string) n++;\n   \
    \ return n;", "    long length = 0;\n    int i = 0;\n    while (string[i] != '\\\
    0') {\n        i++;\n        length ++;\n    }\n    return length;", '    return
    string.length();', '    return string.length();', '    return string.size();',
  '    return (string.size());', "    long length = 0;\n    for(auto &i : string)\
    \ {\n        ++length;\n    }\n    return length;", "  int i = 0;\n  while(string[i]\
    \ != ' ') ++i;\n  return i;", '    return (string.length() + 1);', '    return
    string.size();', "   long n = 0;\n   for (int i = 0; i < string.length(); i++)\
    \ {\n      n++;\n   }\n   return n;", '    return string.length();', "    long\
    \ length = 0;\n    for (char c: string)\n        ++length;\n    return length;",
  '    return string.length();', '    return string.length();', '    return string.length();',
  '    return string.size();', '    return std::accumulate(string.begin(), string.end(),
    0L, std::plus<long>());', '    return string.size();', '    return string.length();',
  "    long len = 0;\n    for (auto ch : string) {\n        len++;\n    }\n    return\
    \ len;", "    long len = 0;\n    for (auto &c : string) {\n        if (c == '\\\
    0' || c == '+' || c == '-' || c == '*' || c == '/') {\n            len += 1;\n\
    \        } else {\n            len += 2;\n        }\n    }\n    return len;",
  '    return string.length();', '    return string.length();', '    return string.length();',
  '    return string.length();', '    return string.length();', '    return string.length();',
  '    return string.length();', '    return string.length();', return string.length();,
  '    return string.length();', '    return (string.size());', "    long ret = 0;\n\
    \    for (char ch: string) {\n        ret += 1;\n    }\n    return ret;", "  \
    \  long count = 0;\n    for (auto it = string.begin(); it != string.end(); ++it)\
    \ {\n        if (*it == '\\0') {\n            return count;\n        }\n     \
    \   ++count;\n    }\n    return count;", '    return string.length();', "  int\
    \ i = 0;\n  for (;i < string.length(); i++);\n  return i;", return (string.length());,
  '    return string.length();', "    long length = 0;\n    for (size_t i = 0; i <\
    \ string.length(); i++) {\n        length += (string[i] - '0');\n    }\n    return\
    \ length;", '    return string.length();', "    // code here\n    return 0;",
  "\tint len = 0;\n\t\n\tfor (int i=0;i<string.length();i++) {\n\t\tlen++;\n\t}\n\t\
    return len;", "    // Find length of a string\n    return string.length();", '    return
    string.length();', "    long length = 0;\n    for (auto c : string)\n        length\
    \ += (c - 'A' + 1);\n    return length;", '    return string.length();', "   \
    \ int counter = 0;\n    for (int i = 0; i < string.size(); i++) {\n        counter\
    \ += string[i];\n    }\n    return counter;", "    long length = 0;\n    for(char\
    \ c: string)\n        length++;\n    return length;", '  return string.size();',
  '    return string.size();', '    return string.length();', '    return string.size();',
  "\treturn string.size();", '    return string.length();', "    long result = 0;\n\
    \    for (auto itr = string.begin(); itr != string.end(); ++itr) {\n        result\
    \ += 1;\n    }\n    return result;", '    return string.length();', "    string::size_type\
    \ i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;", '    return
    std::distance(string.begin(), string.end()); ', '    return string.size();', '    return
    string.length();', '    return string.size();', "\treturn string.size();", '   return
    string.length();', '  return string.size();', "\treturn string.length();", "\t\
    return (long) string.length();", '    return string.length();', '    return string.length();',
  '    return string.length();', '    return string.length();', "    // Return length\
    \ of given string\n    return string.length();", '    return string.length();',
  '    return string.length();', '  return (string.length()+1);', '    return string.length();',
  '    return string.length();', "\treturn string.length();", '    return string.size();',
  "    long len = 0;\n    for (int i = 0; i < string.length(); i++) {\n        len\
    \ = len + 1;\n    }\n    return len;", '    return string.size();', "    long\
    \ sum = 0;\n    for(int i=0;i<string.length();i++) {\n        sum += string[i];\n\
    \    }\n    return sum;", "\treturn string.size();", '    return string.length();',
  '    return (string.length());', '    return string.length();', '    return string.length();',
  "\treturn string.size();", '    return string.length();', '    return string.length();',
  '    return (string.length()+1);', "    long length = 0;\n    for (auto c : string)\n\
    \        length++;\n    return length;", '  return (long)(string.size());', '    return
    string.length();', "    long len=0;\n    len = string.length();\n    return len;",
  '    return string.length();', '    return string.length();', '    return string.length();',
  '    return string.length();', "\treturn string.length();", '    return string.length();',
  '  return string.size();', '    return string.length();', "\treturn (string.size());",
  '    return string.length();', '    return string.length();', '    return string.size();',
  '    return string.size();', '    return string.length();', '    return string.length();',
  "\tlong counter = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tcounter++;\n\
    \t}\n\treturn counter;", "    long n = 0;\n    for (long i = 0; i < string.length();\
    \ i++)\n        n += string[i] != '\\0';\n    return n;", "    // Return length\
    \ of string\n    return string.size();", '    return string.length();', '    return
    string.length();', "    int count = 0;\n    size_t i = 0;\n    while (i < string.length())\n\
    \    {\n        i += 1;\n        count += 1;\n    }\n    return count;", '    return
    string.size();', '  return string.size();', "    int count = 1;\n    long sum\
    \ = 0;\n    for (int i = 0; i <= string.length() - 1; i++) {\n        if (string[i]\
    \ == string[i + 1]) {\n            count++;\n            sum += count;\n     \
    \   }\n    }\n    return sum;", '    return string.size();', '    return string.size();',
  "    // return length of string\n    return string.length();", "    size_t len =\
    \ 0;\n    while (string.at(len) != '\\0') ++len;\n    return len;", '    return
    string.length();', '  return (string.length() > 0) ? string.length() : -1;', '    return
    string.size();', "    long len = 0;\n    for(auto x: string) len++;\n    return\
    \ len;", '    return string.length();', '    return string.length();', "\treturn\
    \ string.length();", '    return string.length();', '    return string.length();',
  "    long len = 0;\n    // Traverse the string\n    for(size_t i = 0; i < string.size();\
    \ ++i) {\n        // Check for space and return\n        if(string[i] == ' ')\
    \ return len;\n        // Increment the length\n        ++len;\n    }\n    return\
    \ len;", '  return (long)(string.length());', "    long length = 0;\n    for (unsigned\
    \ int i = 0; i < string.length(); i++)\n        ++length;\n    return length;",
  '    return string.length();', "    string::size_type i = 0;\n    while (string[i])\
    \ {\n        i++;\n    }\n    return i;", "    long length = 0;\n    for (long\
    \ i = 0; i < string.length(); i++)\n        length++;\n    return length;", '    return
    string.size();', '    return string.size();', '    return string.length();', " \
    \ int len = 0;\n  for (int i = 0; i < string.length(); i++) {\n    len++;\n  }\n\
    \  return len;", '    return string.length();', '    return string.length();',
  '  return string.length();', '    return string.size();', '    return string.size();',
  '    return string.length();', '    return string.size();', "\treturn (string.size());",
  "    long length = 0;\n    for (size_t i = 0; i < string.length(); i++)\n      \
    \  length++;\n    return length;", '  return string.length();', "    return std::accumulate(string.begin(),\
    \ string.end(), 0ULL, [] (long a, char b) {\n        return a + (b == ' ' ? 1\
    \ : 0);\n    });", "    int i = 0;\n    while (i < string.length()) {\n      \
    \  ++i;\n    }\n    return i;", '  return string.size();', "    int len = 0;\n\
    \    while (string.at((len++))!='\\0') ;\n    return len;", '    return string.length();',
  return string.length();, "    // your code goes here\n    return string.length();",
  '    return string.length();', "    // Store size of string\n    long length = 0;\n\
    \    // Iterate over each character\n    for(const char c : string) {\n      \
    \  // Add character length\n        length += 1;\n    }\n    // Return length\
    \ of string\n    return length;", "    // return string.length();\n    return\
    \ string.length();", '  return string.length();', '    return string.length();',
  '    return string.length();', '    return string.size();', '    return (string.size());',
  '    return string.length();', '    return string.size();', '    return string.size();',
  "    long length = 0;\n    // iterate till end of string\n    for (auto i = string.cend();\
    \ i != string.cbegin(); i++) {\n        length++;\n    }\n    return length;",
  "    if (string == nullptr) {\n        return 0;\n    }\n    return string.length();",
  '    return string.length();', '    return string.length();', '    return string.size();',
  '  return string.length();', '    return string.length();', '    return string.length();',
  "\treturn (string.size()/sizeof(char));", '    return string.length();', '  return
    string.size();', '    return (long) string.length();', "\tlong size = 0;\n\tint\
    \ i = 0;\n\twhile (string[i]) {\n\t\ti++;\n\t}\n\tsize = i;\n\treturn size;",
  '  return (long) string.size();', '    return string.size();', "    int len = 0;\n\
    \    for (int i = 0; i < (int) string.size(); i++) {\n        len++;\n    }\n\
    \    return len;", "\treturn string.size();", '    return string.length();', '    return
    string.length();', '    return string.length();', '    return string.length();',
  "    long result = 0;\n    for (long i = 0; i < string.length(); i++) {\n      \
    \  if (string[i] == ' ') {\n            result++;\n        }\n    }\n    return\
    \ result;", '    return string.size();', '    return string.size();', '    return
    string.length();', "    long length = 0;\n    for (auto it = string.cbegin();\
    \ it != string.cend(); ++it) {\n        length++;\n    }\n    return length;"]
stop_tokens:
- "\n}"
