name: HumanEval_45_triangle_area
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and\
  \ high return area for a triangle.\nfloat triangle_area(long a, long h) {\n"
tests: "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5),\
  \ (3)) == (7.5));\n    assert(candidate((2), (2)) == (2.0));\n    assert(candidate((10),\
  \ (8)) == (40.0));\n}\n"
completions: ["    float area = 0.0;\n    long temp;\n    temp = a;\n    area += a\
    \ * h;\n    area += temp * h;\n    temp = (a + b) / 2;\n    area += temp * h;\n\
    \    temp = (a + c) / 2;\n    area += temp * h;\n    temp = (b + d) / 2;\n   \
    \ area += temp * h;\n    temp = (b + e) / 2;\n    area += temp * h;\n    temp\
    \ = (c + f) / 2;\n    area += temp * h;\n    temp = (c + g) / 2;\n    area +=\
    \ temp * h;\n    temp = (d + e) / 2;\n    area += temp * h;\n    temp = (d + f)\
    \ / 2;\n    area += temp * h;\n    temp = (e + g) / 2;\n    area += temp * h;\n\
    \    temp = (e + f) / 2;\n    area += temp * h;\n    temp = (f + g) / 2;\n   \
    \ area += temp * h;\n    temp = (f + h) / 2;\n    area += temp * h;\n    temp\
    \ = (g + h) / 2;\n    area += temp * h;\n    temp = (g + a) / 2;\n    area +=\
    \ temp * h;\n    temp = (g + b) / 2;\n    area += temp * h;\n    temp = (g + c)\
    \ / 2;\n    area += temp * h;\n    temp = (h + d) / 2;\n    area += temp * h;\n\
    \    temp = (h + e) / 2;\n    area += temp * h;\n    temp = (h + f) / 2;\n   \
    \ area += temp * h;\n    temp = (h + g) / 2;\n    area += temp * h;\n    temp\
    \ = (a + b) / 2;\n    area += temp * h;\n    temp = (a + c) / 2;\n    area +=\
    \ temp * h;\n    temp = (b + d) / 2;\n    area += temp * h;\n    temp = (b + e)\
    \ / 2;\n    area += temp * h;\n    temp = (c + f) / 2;\n    area += temp * h;\n\
    \    temp = (c + g) / 2;\n    area += temp * h;\n    temp = (d + e) / 2;\n   \
    \ area += temp * h;\n    temp = (d + f) / 2;\n    area += temp * h;\n    temp\
    \ = (e + g) / 2;\n    area += temp * h;", "    float area = (a * h) / 2;\n   \
    \ return area;", "    assert(a >= 0);\n    assert(h >= 0);\n    if (a == 0 &&\
    \ h == 0) return 0;\n    return (a * (h - a) / 2) + (a * (2 * h - a - 1) / 2);",
  '    return a * h / 2;', '  return (float)a * (float)h / 2;', '    return sqrt(pow((float)a,
    2) * (pow((float)h, 2) - ((float)a) * ((float)h)));', "    float area = 0.0f;\n\
    \    if (a < h / 2)\n        area = 0.0f;\n    else if (a == h / 2)\n        area\
    \ = 1.0f;\n    else if (a > h - h / 2)\n        area = 0.0f;\n    else\n     \
    \   area = 1.0f;\n    return area;", '    return a*(h-a)/2;', "    float s = (a\
    \ + h) / 2;\n    float t = (a + b + h) / 2;\n    return sqrt(s * (s - t) * (s\
    \ + t - h));", "    float area = 0.0;\n    for (long i = 0; i < 3; i++) {\n  \
    \      float h = h * (float(i + 1) / 3.0);\n        area += (float(a) * h) / (float(a)\
    \ * h + float(b) * h + float(c) * h);\n    }\n    return area;", "  float area\
    \ = 0;\n  for (long i = 0; i < a; i++) {\n    area += pow((i+1)/float(h+1), 3);\n\
    \  }\n  return area;", '    return (a * a * h / 2) / (a + h);', "    float tri\
    \ = 0.0;\n    tri += (a + h) * (a + h + 1) * 0.5; // base\n    tri += (a + h +\
    \ 1) * (h + a) * 0.5; // height\n    tri += (a + h + 1) * (a + h) * 0.5; // 2nd\
    \ height\n    tri += (h + 1) * (a + h) * 0.5; // 2nd base\n    tri *= 0.5; //\
    \ area of triangle\n    return tri;", "  // A triangle is a right triangle if\
    \ the hypotenuse is greater than the side.\n  // If it is smaller or equal to\
    \ 0\n  if (h > a) {\n    // If side is odd, return area of right triangle times\
    \ 2\n    // If side is even, return area of right triangle times 4\n    // If\
    \ side is 0, return area of right triangle times 8\n    return (h > 1) ? (2 *\
    \ h * (h - 1) / 2) : ((4 * h - 1) / 2);\n  } else {\n    // If side is odd, return\
    \ area of left triangle times 2\n    // If side is even, return area of left triangle\
    \ times 4\n    // If side is 0, return area of left triangle times 8\n    return\
    \ (h > 1) ? (4 * h * (h - 1) / 2) : ((2 * h - 1) / 2);\n  }", '  return (float)(a*(h-a)/2.0f);',
  '    return (float)(a*h)/2;', '    return 2.0 * sqrt(pow(h, 2) + pow(a, 2)) / 3.0;',
  "    float s = (a+b+c)/2.0f;\n    return (s-h)/sqrt(s);", "\t// TODO: Optimize this\
    \ algorithm - \n\t// it is O(n^2)!\n\t// Using two pointers is a good first step\
    \ - \n\t// because once we have one pointer down, we know that the other \n\t\
    // pointer will point to the right of the last element visited.\n\tlong long int\
    \ triangle_area = 0.0;\n\tlong long int base_area = 0;\n\tlong long int height\
    \ = 0;\n\t\n\tif (a < 0 || a > h || h < 0)\n\t\treturn 0.0;\n\t\n\t\n\theight\
    \ = h;\n\t\n\t\n\t\n\tassert(a > height);\n\t\n\t\n\t\n\tfor (int i = a; i <=\
    \ h; i++) {\n\t\t\n\t\t\n\t\tbase_area = base_area + (i - height) * (i - height);\n\
    \t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\tassert(triangle_area > base_area);\n\t\
    \n\t\n\t\n\tassert(triangle_area > 0);\n\t\n\t\n\t\n\t\n\treturn triangle_area;",
  '    return a * (float)sqrt(3) * (float)sin((float)M_PI * h / 2);', "    if (a >\
    \ h) {\n        if (a > 2 * h) {\n            return 0.5 * triangle_area(a - h,\
    \ h);\n        } else {\n            return triangle_area(a - 2 * h, h);\n   \
    \     }\n    } else {\n        return 0.0;\n    }", "    float area = 0.0f, side_length\
    \ = (a+b+c)/2;\n    for(long i=a; i<side_length; i++) {\n        area += std::pow(h-i,2);\n\
    \    }\n    for(long i=a+1; i<side_length; i++) {\n        area += std::pow(h-i,2);\n\
    \    }\n    for(long i=c; i<side_length; i++) {\n        area += std::pow(h-i,2);\n\
    \    }\n    for(long i=b+1; i<side_length; i++) {\n        area += std::pow(h-i,2);\n\
    \    }\n    return area;", "    float s = (a + h) / 2.0f;\n    return sqrt(s *\
    \ (s - a) * (s - h) * (s + h));", "  float s = (float)a / (float)h;\n  float area\
    \ = sqrt(pow(s, 2) * pow((1 - s), 2));\n  return area;", "float area = 0.0f;\n\
    if (a < h)\n    return 0.0f;\nif (h == 0)\n    return area;\nwhile (--h) {\n \
    \   float b = h * (h + 1) / (2.0f * (h - 1));\n    if (a >= b)\n        area +=\
    \ 1.0f;\n    else\n        area -= 0.5f;\n    a -= b;", "    float area = 0.0;\n\
    \    if (a > 0 && a < h) {\n        area = 0.5 * pow(h, 2) * sqrt(a * (a + h)\
    \ / 2);\n    }\n    return area;", "\treturn (sqrt(pow((double)a / 4, 2.0))*\n\
    \t\tsqrt(pow((double)h / 4, 2.0)))/2;", '    return (a * h) / 2; ', '  return
    a * b * h;', '    return float(a*h)/2;', '    return ((a+h)*(a+h+1)/2)*((h-a-1)*(a+h-2)/2);',
  "\treturn (sqrt(pow(a + h, 2) + pow(a, 2)) * sqrt(pow(a + h, 2) + pow(b, 2)));",
  "    float area, side_length = sqrt(pow(a, 2) + pow(h,2));\n    area = side_length\
    \ * side_length / 2.0;\n    return area;", "  float area = 0.0;\n  long p = a;\n\
    \  for (long q = a + 1; q < a + h; q++)\n    area += abs(p * q);\n  return 0.5\
    \ * area;", "    float ss = (float)sqrt(pow((float)a, 2.0f) + pow((float)h, 2.0f));\n\
    \    return ss * ss;", "\treturn (a + h) * 0.5f;", '    return a*(h-a)/2.0; ',
  "  float h = h;\n  float s = (a+b+c) / 2.0f;\n  float area = 0.5 * s * (s+h+a) *\
    \ (s-h+b);\n  return area;", '    return (a * b) / h;', "    float s = (float)\
    \ sqrt(3.f*a/2.f);\n    float area = s * s;\n    if (area > h) {\n        area\
    \ = h;\n    }\n    return area;", "    float area = 0.5 * std::sqrt(3) * std::pow((a\
    \ + h), 2);\n    return area;", '    return (a+h)*(a+h+1);', "    return (pow(a,\
    \ 3.0) / h) * pow((a + b + c) / 3.0,\n        1.0 / 3.0);", "\treturn 0.5 * (a\
    \ * b) / h;", "    float area = 0;\n    long h = h;\n    long a = a;\n\n    //\
    \ Triangle area\n    float s = (a+b+c)/2;\n    float area = sqrt(pow(s, 2) + pow(b,\
    \ 2));\n    area = (area*0.5f);\n\n    return area;", "    float area = 0.0f;\n\
    \    for (long r = a + 1; r < h; r++) {\n        float p = 2.0f * r / (a + h);\n\
    \        area += p * p;\n    }\n    return area;", '    return (float)(sqrt(h
    * (h - a) * (h - a + 1)) - (float)0.5);', '    return ((a * b) / 2) * (h / 2);',
  '    return float(a * b) / h;', "    long t = (long) (a+b+c)/2;\n    float s = (a+b)*(a+c)*h;\n\
    \    float area = (s/t)*(t*(t-h));\n    return sqrt(area);", '    return (a +
    h) * (b + h) * (c + h);', "  long b = a*sqrt(3);\n  return b * 0.5f;", "  float\
    \ ans = (h*h)/2;\n  ans = (ans * ans);\n  ans = ans + ans;\n  ans = ans/2;\n \
    \ return ans;", '    return (float)(a*h)/2;', "  long l = (a + h) / 2;\n  return\
    \ abs(a * h - a * l + h * l + h * a - l * a);", "    long r = sqrt(pow(h, 2) +\
    \ pow(a, 2));\n    return a/(r + a);", "    long l= (a+h)*0.5f;\n    float s =\
    \ (float)l/a;\n    return s * s;", "\treturn (a + h) * (h - a) * (1 - (a / h));",
  '    return a * (h / 2);', "  // base case\n  if (h < 0)\n    return 0;\n  // calulate\
    \ side areas\n  float s = (a + b + c) / 2;\n  float p = sqrt(pow(a, 2) + pow(s,\
    \ 2));\n  float q = sqrt(pow(s, 2) + pow(b, 2));\n  float area = sqrt(p * q);\n\
    \  return area;", '  return sqrt(a * a + h * h) / 2.0;', '   return (a + h) *
    0.5f;', "    float area = 0.5f * (h * (h - a) - (a * h));\n    return area;",
  '  return a*(h/2);', "    // To simplify code we will take an assumption that \n\
    \    // there is always an equal number of sides and \n    // height. If that\
    \ is not the case we can just \n    // add some assertions and do some error handling.\n\
    \    if (a != h) {\n        std::cerr << \"Triangle is actually a trapezoid\\\
    n\";\n        exit(EXIT_FAILURE);\n    }\n    // Return the area of the triangle\n\
    \    return float(a + b + c) / 2.0;", "    float s1,s2,s3;\n    s1=h/a;\n    s2=(a-h)/a;\n\
    \    s3=(a+h)/a;\n    float area=2*s1*s2;\n    return area/(a+h);", "  float area,\
    \ x, y;\n  area = sqrt(pow((a + h) / 2, 2) * pow((a + h) / 2, 2));\n  x = (a *\
    \ a + a * a) / 4;\n  y = (h * (a + h) * h) / 2;\n  area += pow(x, 2);\n  area\
    \ += pow(y, 2);\n  area /= 2;\n  return area;", '    return (a * (a + h) / 2)
    * (h * (h + 1) / 2);', '    return a*h*h/2;', "    // Write your code here.\n\
    \    return (a * b) / 2.0;", "    float s = 0.0;\n    float a1 = a * 0.5;\n  \
    \  float b1 = h - a1;\n    float a2 = a1 * 0.5;\n    float b2 = h - a2;\n    float\
    \ c1 = b1 * 0.5;\n    float c2 = b2 - c1;\n    float d = sqrt(a1 * a1 + a2 * a2\
    \ + b1 * b1 + b2 * b2 + c1 * c1 + c2 * c2);\n    s = d / sqrt(a1 * a1 + a2 * a2\
    \ + b1 * b1 + b2 * b2 + c1 * c1 + c2 * c2);\n    return s;", '  return a * h /
    2;', "    float area = 0.0f;\n    // The formula is derived from the\n    // https://mathworld.wolfram.com/TriangleArea.html\
    \ formula.\n    for (int i = 0; i < 3; i++) {\n        area += pow((float)(i *\
    \ h - a), 2.0f);\n    }\n    return area;", '    return a * (long) (h / 2) - h;',
  '    return 2.0 * a * b / h;', "    float area, a, b, c, s, tx, ty;\n    if (a ==\
    \ 0) {\n        area = 0.0;\n    } else {\n        area = ((float)a * (float)h)\
    \ / 2.0;\n        a = (a * 2 + 1) * (float)h;\n        b = (a * 3 + 2) * (float)h;\n\
    \        c = (b * 3 + 1) * (float)h;\n        s = (a * b + c * 3 + 3) * (float)h;\n\
    \        tx = (a * (b * 3 - a * 2) + (b * 3 + a * 2) * c + 3 * a * b * s) * (float)h;\n\
    \        ty = (a * (c * 3 - a * 2) + (b * 3 - a * 2) * s + 3 * a * c * t) *(float)h;\n\
    \        area += tx * ty;\n    }\n    return area;", '    return a*h;', "  //\
    \ Area = sqrt(3 * (h-a) * (h+a) * a) / 2 * h\n  return (sqrt(3.0 * (h - a) * (h\
    \ + a) * a) / 2.0 * h);", "\treturn (sqrt(pow((a / 2), 2) + pow((h / 2), 2)) *\
    \ (pow((a / 2), 2) + pow((h / 2), 2)) / 2;", '    return (a+h)*(h+a)*(h-a)*(2*h*a+h+2*a*h);',
  "    float area = 0.0f;\n    if (h == 0) {\n        area = 0.5f;\n    } else {\n\
    \        area += (double)a / (double)h;\n    }\n    return area;", '    return
    a * b / 2;', '    return (a * (long)(a + h) - h * (long)(h + a)) / 2;', '    return
    (a + h) * (b + h) * (c + h);', "    float area = ((float)(a * (a - 1) * (h - 1)))/4;\n\
    \    return area;", "    float s = (a + b) * (a + c) * (b + h);\n    return (float)\
    \ sqrt(s);", "    assert(h >= 0);\n    float s = 0, area = 0, sum = 0;\n    for(long\
    \ i=1; i<=a; i++){\n        s += (i * i);\n        sum += i;\n    }\n    area\
    \ = sqrt(s);\n    for(long i=1; i<=a; i++){\n        area -= (i * sum) / h;\n\
    \    }\n    return area;", '    return (float)(a*h)/4;', '    return a * h / 2;',
  '    return (a * a + h * h) / 2;', "  // Your code goes here\n  float area = 0.0;\n\
    \  if (a > 0 && h > 0) {\n    area = (a * a) / ((h * a) + (a * h));\n  }\n  return\
    \ area;", "    float area = (float)(a * (h-a));\n    return (area / (a+1));",
  '    return (a+h)*0.5f;', '  return (a*(h/(a+h))*(h/(a+h))) / 2.0;', "    float\
    \ result = 0.0;\n    if (a == 0) {\n        result = (long) pow((double) 2, (double)\
    \ h);\n        return result;\n    }\n    long b = a / 2;\n    long c = a / 2;\n\
    \    while (c < h) {\n        b += a;\n        c += a;\n    }\n    long d = b\
    \ + c;\n    long e = b + a;\n    long f = c + a;\n    long area_1 = (long) pow((double)\
    \ 2, (double) (b + c));\n    long area_2 = (long) pow((double) 2, (double) (b\
    \ + a)) + area_1;\n    long area_3 = (long) pow((double) 2, (double) (c + a))\
    \ + area_1;\n    long area_4 = (long) pow((double) 2, (double) (d)) + (long) pow((double)\
    \ 2, (double) (e)) + area_3;\n    long area_5 = (long) pow((double) 2, (double)\
    \ (b)) + (long) pow((double) 2, (double) (c)) + area_4;\n    long area_6 = (long)\
    \ pow((double) 2, (double) (d)) + (long) pow((double) 2, (double) (f)) + area_5;\n\
    \    area_6 = area_6 - (area_1 * area_2);\n    result = area_6 * sqrt(area_5);\n\
    \    return result;", "    float s = (float)a + h;\n    float area = 0.5f * sqrtf(2.0f\
    \ * s - s * s);\n    return area;", '    return (a*h)/2;', "  float area = 0.0f;\n\
    \  for (long i = 0; i < a; i++) {\n    area += pow((float)i, (float)2) * (float)pow(h,\
    \ (float)2);\n  }\n  return area;", "    float area = (a*h)/2;\n    return area;",
  '    return (a * b) / h;', "    float area = (float)(a+b+c)/2.0;\n    if(a>b) \n\
    \        area=(a*h)/(a+b);\n    else if(a>c) \n        area=(a*h)/(a+c);\n   \
    \ else if(b>c) \n        area=(b*h)/(b+c);\n    return area;", '    return (float)(a
    * b) / h;', "    float area = 0.0f;\n    float s = 0.0f;\n    float p = 0.0f;\n\
    \    long ia = a;\n    long ih = h;\n    long n = 1;\n    long ii = ia;\n    long\
    \ nn = ia;\n    long k = 0;\n    long a = ia;\n    long b = ia;\n    long h =\
    \ ia;\n    long k = ia;\n    long l = ia;\n    long l = ia;\n    long l = ia;\n\
    \    long l = ia;\n    while (n <= 3) {\n        if (n == 1) {\n            ii\
    \ = ia;\n        }\n        if (n == 2) {\n            l = ia;\n        }\n  \
    \      if (n == 3) {\n            l = ia;\n        }\n        if (n > 3) {\n \
    \           k = ia;\n        }\n        float b = 0.0f;\n        float hl = 0.0;\n\
    \        float s = 0.0f;\n        float p = 0;\n        for (int i = 0; i < nn;\
    \ i++) {\n            float h = ii * h / n;\n            float b = hl + h;\n \
    \           float t = sqrt(b * b - 2 * s * h);\n            if (t > 0.0) {\n \
    \               float m = t / h;\n                p = m + l;\n               \
    \ p = p - k;\n                p = p + ia;\n                p = p - ia;\n     \
    \           p = p + ia;\n                p = p - ia;\n                float x\
    \ = p + b + s * h;\n                if (x > 0.0) {\n                    float\
    \ m1 = (x + b - s * h) / h;\n                    float x2 = (x - b + s * h) /\
    \ h;\n                    float m2 = (x2 - x + b) / h;\n                    float\
    \ m1 = m1 * m2 + 0.5;\n                    if (m1 > 0.5) {\n                 \
    \       m1 = 1.0 - m1;\n                        float x = m1 * x2;\n         \
    \               float y = m1 * y2;\n                        float p1 = p + ia;\n\
    \                        float p2 = p + ia;\n                        float p3\
    \ = p + ia;\n                        float p4 = p + ia;\n                    \
    \    float p5 = p + ia;\n                        float p6 = p + ia;\n        \
    \                float p7 = p + ia;\n                        float p8 = p + ia;\n\
    \                        float p9 = p + ia;\n                        float p10\
    \ = p + ia;\n                        float p11 = p + ia;\n                   \
    \     float p12 = p + ia;\n                        float p13 = p + ia;\n     \
    \                   float p14 = p + ia;\n                        float p15 = p\
    \ + ia;\n                        float p16 = p + ia;\n                       \
    \ float p17 = p + ia;\n", '  return a * (h / 2.0f);', "\tfloat area = (float)(a\
    \ * h) / 2;\n\treturn area;", '    return a * h / 2;', "    assert(h>=0);\n  \
    \  return (a+h)*0.5*(float)(a+h+a)+(float)(2*a-h)*0.5*(float)(a+h);", "    assert(a\
    \ >= 0 && a <= 9 && h >= 0 && h <= 9);\n    return static_cast<float>(a) * static_cast<float>(h)\
    \ / 2.0;", "    float ans = a * h;\n    return ans;", "    float s = 0.0f;\n \
    \   // Assuming side is always > 0.\n    long l = a + h;\n    // Assuming side\
    \ is always > 0.\n    long b = 2 * l;\n    // Area of triangle is s = (a + b)\
    \ * h / 2.\n    s = (a + b) * h / 2;\n    // Multiply area by 2 since side is\
    \ double length.\n    s *= 2;\n    return s;", '    return a * b / pow((double)b,
    2);', "    float area = 1.0f;\n    for (long i = a; i >= 0; i--) {\n        area\
    \ += (long)pow((float)i, 2.0f);\n    }\n    area /= h;\n    area = pow(area, 1.0f\
    \ / 2.0f);\n    area = fabs(area);\n    return area;", '    return (float)a *
    (float)h;', '    return a * 0.5f * h;', "    float area = 0.0;\n    if (h > a)\
    \ {\n        long s = 1;\n        long t = h;\n        long r = a;\n        while\
    \ ((s - 1) * (t - r) > 0)\n        {\n            s *= 2;\n            t -= s;\n\
    \            r += s;\n        }\n        area = (r - s) * (t - h);\n    }\n  \
    \  return area;", "    float s = 0.5f * sqrt(2.0f * h - 2.0f);\n    return ((sqrt(3.0f)\
    \ - (s * s)) / 2.0f);", "    float area = 0.0f;\n    if (a == 0) return 0.0;\n\
    \    if (h == 0) return 0.0;\n    if (a == 1) {\n        area = h / 2.0;\n   \
    \     return area;\n    }\n    if (h == 1) {\n        area = a / 2.0;\n      \
    \  return area;\n    }\n    float side1 = triangle_area(a - 1, h);\n    float\
    \ side2 = triangle_area(a - 1, h - 1);\n    float side_mul = (side1 * side2);\n\
    \    float mul = (side1 + side2) * 1.0;\n    area += mul * side_mul;\n    return\
    \ area;", "    if (a < 0) return 0.0;\n    float area = (float)(a * h) / 4;\n\
    \    return area;", '    return a * h / 2;', "    float s = (a + h) * 0.5f;\n\
    \    return s * s;", "    long area = (a + h) * (h - a);\n    return (float)area\
    \ / (a + h) * (a + b + h) - (float)area / 2.0 * (a + b);", "    float area = 0.0f;\n\
    \    long c = a + h;\n    long d = b + h;\n    long e = c + h;\n\n    long area1\
    \ = (e - a) * (b + c) * 2.0f;\n    long area2 = (d - b) * (c + d) * 2.0f;\n  \
    \  float area_tri = static_cast<float>(area1 + area2);\n    return area_tri;",
  "\treturn (a*(h-b));", "    float area = 0.0;\n    if (a == 0 || h == 0)\n     \
    \   return 0.0;\n    if (h == 0 || a >= h)\n        area = (a * a) / 2.0;\n  \
    \  else\n        area = ((float)(a + h) * ((a - h) * (a + h))) / 2.0;\n    return\
    \ area;", "    float area;\n    area = 0.5f * (a + h) * (h - a + h);\n    return\
    \ area;", "  float area = 0.0f;\n  long b = a;\n  for (int i = 1; i < 3; i++)\
    \ {\n    long c = b;\n    b = a + h;\n    area += (float)pow((double)(c), 2.0f)\
    \ / 4.0f;\n  }\n  return area;", '    return (float) (a * b / 2.0);', "    float\
    \ tri = 0.0f;\n    long sq = (long) (a * a + h * h);\n    // if sq is even then\
    \ only need to consider the triangle having 1 side or\n    // more.\n    if (sq\
    \ % 2 == 0) {\n        tri = (float) (2 * sq) / (float) (a * a + h * h);\n   \
    \ }\n    return tri;", '    return a*h/2;', "    float area_tri = 0;\n    float\
    \ area_tri1 = 0, area_tri2 = 0, area_tri3 = 0, area_tri4 = 0;\n    long side =\
    \ 2 * a + 1;\n    area_tri1 = side * (side + h) * (side + 2 * h);\n    area_tri2\
    \ = side * (side + h) * (side + 2 * h) * h / 2;\n    area_tri3 = side * (side\
    \ + h) * h / 2;\n    area_tri4 = side * (side + h) * h / 2;\n    area_tri += area_tri1\
    \ + area_tri2 + area_tri3 + area_tri4;\n    return area_tri;", '    return (long)
    (a * h) / 4;', "    float s = (a + h) / 2;\n    return 0.5f * sqrt(s*(s-a)*(s-h)*(s-(a+h)));",
  '    return a * h / 2;', "    float ans = 0.5 * sqrtf(a * h);\n    return ans;",
  "    if (a == 0) return 0.0;\n    return ((float)(a * (h - 1)) / (float)(2.0 * (a\
    \ + b)));", "  float area = (float) (a * h) / 2.0;\n  return area;", '    return
    a*h/2;', "  float perimeter = (a + h) * 0.5f;\n  return ((float)a * h) / perimeter;",
  '    return a * (h * (h + 1) / 2);', "    float s = 0.0;\n    s = s + ((h*h)/2);\n\
    \    s = s + ((a*a)/2);\n    s = s + ((h*h)/2);\n    s = s + ((a*a)/2);\n    return\
    \ s;", '    return a*h*(h-1);', "    float area = 0.0;\n    long i = 0;\n    long\
    \ j = 0;\n    for (i = 0; i < a; i++)\n        for (j = 0; j < h; j++) {\n   \
    \         area += pow(-1, i) * pow(-1, j) * pow(2, i - j);\n        }\n    return\
    \ area;", "    float s = (a + b + c) / 2.0;\n    float area = sqrtf(a * s * s\
    \ - b * s * s - c * s * s);\n    return area / (float) (h * h);", "    assert(a\
    \ >= 0 && a <= 3);\n    assert(h >= 0 && h <= 3);\n    return float(a + h) * 0.5f;",
  "    float area = 0.0f;\n    if (a > 0 && a < h) {\n        area += 1.0f - (float)(a)\
    \ / h;\n    }\n    if (a > h) {\n        area += 1.0f - (float)(a-h) / h;\n  \
    \  }\n    return area;", "    float area = 0.5f * (a + h);\n    area /= (a * a\
    \ + h * h);\n    return area;", "    float area;\n    area = 0.5 * ((a + b + c)\
    \ / 2.0) * (h / 2.0);\n    return area;", '    return (a*h)/2;', "    // Compute\
    \ side and half perimeter for given side.\n    long b = (a+h)/2;\n    long p =\
    \ (a + b)*(b + h)/4;\n    // Compute area of triangle with given side.\n    return\
    \ 2*a*b*p/4;", "  long a = a*a;\n  long h= h*h;\n  return (float)(a+h)/2.0;",
  '    return a * h / 2;', '    return a*h*h;', '    return a * h / 2;', "\treturn\
    \ a*(h*h) / 2.0;", "    // Triangle area = (1/3)( h*h + (a-h)^2 )\n    return\
    \ ((float)(a-h)*(float)(h-h) + 0.33333333f)/3.0;", "    float area = 0.0f;\n \
    \   for (int i = 0; i < 3; i++) {\n        long a = i;\n        long h = i;\n\
    \        long b = i + 1;\n        float temp1 = 0.5 * (a + b);\n        long temp2\
    \ = a + b;\n        long temp3 = h;\n        temp3 = temp1 + temp3;\n        temp3\
    \ = temp2 - temp3;\n        area = area + 2.0f * temp1 * (h + temp2);\n      \
    \  temp2 = a + b;\n        temp2 = temp2 - temp3;\n        area = area + 2.0f\
    \ * temp2 * (temp1 + temp3);\n    }\n    area = area / 3;\n    area = area / 2;\n\
    \    return area;", '    return a * h / 2;', '   return sqrt(a*a*h*h/2);', " \
    \   float area = 0.0;\n    if(a*h>a){\n        area = (a*(a+h)/2.0 - a*(a-h)/2.0)/(a*h);\n\
    \    }\n    return area;", '    return a * pow((float)h,2.f) / 2;', "    float\
    \ area = 0.0f;\n    long triangle_area = a * a + h * h;\n    for (long i = 1;\
    \ i * i <= triangle_area; i++) {\n        area += (float) ((float) ((float) i\
    \ / triangle_area) * (float) i);\n    }\n    float area = area / (float) 2;\n\
    \    return area;", "    float area = 0.0f;\n    for (int i = 0; i < a; i++) {\n\
    \        for (int j = 0; j < h; j++) {\n            area += 0.5f * ((float)(i)\
    \ * j);\n        }\n    }\n    return area;", "  float s = 0, c = 1;\n  float\
    \ b = (float) a / 2;\n  for (int i = 1; i < h; i++) {\n    s += ((float) (i *\
    \ i + i * i - b) * (float) (c * c + c * s - a * b)) * c;\n    c /= 2;\n  }\n \
    \ return s;", '    return (a * b) / 2.0;', '    return a*h;', "  float area =\
    \ 0.0f;\n  // First calculate the area for base and height.\n  for (int b = 0;\
    \ b < a; b++) {\n    // For each base, we need to add the area for all adjacent\
    \ heights.\n    for (int a = 0; a < h; a++) {\n      // For each height, we need\
    \ to add the area for all adjacent bases.\n      area += pow(a, 2) / pow(a + b\
    \ + 2, 2);\n    }\n  }\n  return area;", "    float ans = 0.0f;\n    long i =\
    \ 0;\n    for (; i < a; ++i) {\n        ans += h * (h + 1 - i);\n    }\n    return\
    \ ans;", "    float ans;\n    if (a < h && h >= 0) {\n        ans = a * 0.5;\n\
    \    } else {\n        ans = 0.5 * pow(h / a, 2) * (h - a) / (4 * a);\n    }\n\
    \    return ans;", '    return a * h / 2;', "float area = sqrt(a * a * (h - h)\
    \ * (h - h));\nreturn area;", "\treturn abs((a * b) / h);", '    return (float)(a
    * b) / h;', '    return a/(sqrt(3)*h);', '  return a * (h / 2.0) * (h / 2.0);',
  "    assert(a >= 0);\n    assert(h >= 0);\n    return (float) (a*h / 2.0f);", " \
    \   float area = 0.0;\n    for (int i = 0; i < a; i++) {\n        area += pow((double)pow(h\
    \ - i, 2), 2.0);\n    }\n    return area;", '  return (float)(a*(h-a+1)*(h-h+1))
    / 2.0;', "    float area = 0.0f;\n    long i;\n    for (i = a; i < a + h; i++)\
    \ {\n        area += 1.0f;\n    }\n    area = sqrt(area);\n    return area;",
  '    return (float)a * h / (float)(sqrt(a) * sqrt(h));', '    return a * h / 2;',
  '    return ((float)(a * (h + h))) / ((float)(2 * a + 2));', '    return a*h*h;',
  "    float area;\n    if (h > 0) {\n        if (h < a) {\n            area = 0.5\
    \ * triangle_area(a, h);\n        } else {\n            area = 0.5 * triangle_area(a\
    \ - 1, h - 1);\n        }\n    } else {\n        if (a < 0) {\n            area\
    \ = 0;\n        } else {\n            area = 0.5 * a * triangle_area(a - 1, h\
    \ - 1);\n        }\n    }\n    return area;", "float s = 0.5f * h;\nfloat area\
    \ = 3.14f * ((a * (a - 2.0f)) / 2.0f);\nreturn (area - (s / 2.0f)) / s;", '  return
    (a + h) * 0.5f;', "   float area = a * h;\n   return (area / (float)a) * a;",
  '    return (a+h)/2;', "    long p = a + h;\n    float area = (float)a * 0.5 * (float)p;\n\
    \    return area;", '  return float(a + b) * float(a + c) * float(a + d) / (float(b
    + c) * float(a + b + c));', "  float area = (a + b + c) / 2.0 * h;\n  return sqrt(area);",
  "    float s = 0.0;\n    if(h > 0) {\n        s += (float)a * a * (float)sqrt(h);\n\
    \    }\n    return sqrt(s);", "    float area = 0.0;\n    // Area of a triangle\
    \ is calculated as :\n    // (Area of the base times (Height of the base / 2)\
    \ times (Length of the base / 2))\n    // The area of a triangle is calculated\
    \ as:\n    // Area = Area of base * Height * Length\n    // Since area of base\
    \ is constant for all sides,\n    // Area of base * Height * Length can be calculated\
    \ as:\n    // Area = (base*h)/2\n    // Here h is the height of a base in unit\
    \ of meters.\n    area = ((double)a * h)/2.0;\n    return area;", '    return
    pow((a + b + c) / 2, 0.5);', '    return 0.5f * pow(a * h / 2, 2);', "    float\
    \ s = 0.0f;\n    for (int i = 0; i < a + 1; i++) {\n        s += (float)pow((float)(i\
    \ * i) / (h * a), 0.5f);\n    }\n    return s;", '    return 2.0 * (pow(a, 3)
    / 2) * (pow(h, 3) / 2);', '    return a * h / 2;', '    return (float)(a * h)
    / (2 * sqrt(2));', '  return (a + h) * (b + h) * (c + h);', "    assert(a>=0);\n\
    \    assert(h>=-a);\n    float area = 2.0 * (a + h) * (h + a);\n    return area;"]
stop_tokens:
- "\n}"
